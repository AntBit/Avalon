#!/usr/bin/env python
########
# 
#  ktest - Klondike Protocol Test Utility
# 
# (C) Copyright 2013 Chris Savery. 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# main.c - main USB cmd loop and dispatch for Klondike mining firmware
#

import usb
import sys, thread
from struct import *

workid = addr = 0
midstate = "503f522351026a56cc004aa8f1e5decb9640022cd76815739e4d563534175fed"
merkle = "8cf6b5fd51bc15081a011337"
nonce = "9fd570cc"
#midstate = "5fddb5bc00bdafd2144684c719c68fa227d0a8e334ad84b2a92c66be3e99a4fd"
#merkle = "f64684bb51bc15081a011337"
#nonce = "e3d69bc9"

def sendcmd(cmd, data=""):
	global dev, addr
	try:
		dev.write(0x01, cmd + chr(addr) + data, 0, 100)
	except usb.core.USBError, e:
		print "USB Write Error", e
		pass
		
def chkreply():
	global dev
	while True:
		try:
			data = dev.read(0x81, 32, 0, 100)
		except usb.core.USBError, e:
			if e.errno != 110:
				print "USB Read Error", e
			pass
		else:
			data = ''.join([chr(x) for x in data])
			if len(data) > 0:
				try:
					cmd = data[0]
					if cmd in 'WASED':
						print "\nState:%c, ASICs:%u, Slaves:%u, WorkQ:%u, WorkID:%x, Temp:%u, Fan:%u, ErrCount:%u, HashCount:%u, MaxCount:%u" % unpack("=cBBBBBBBHH", data[2:])
					elif cmd == 'C':
						print "\nClock:%d, Target Temp:%u, Critical Temp:%u, Target Fan: %u, Pad:%u" % unpack("=HBBBB", data[2:])
					elif cmd == 'I':
						print "\nVersion:%x, ProductID: %s, Serial#:%x" % unpack("=B7sL", data[2:])
					elif cmd == '=':
						w,v = unpack("=BL", data[2:])
						n, = unpack(">L", pack("<L", v - 0xC0))
						print "\nNonce Found - WorkID:%x, Value:%x, Nonce:%x" % (w, v, n)
					else:
						print "\n"+' '.join(x.encode('hex') for x in data)
				except Exception, e:
					print "\n<framing error>"
			print "Cmds [WAISCE.Q]: "

			
if __name__ == '__main__':
	
	dev = usb.core.find(idVendor=0x04D8, idProduct=0xF60A)
	if dev is None:
		print 'Klondike device not found'
		exit()
	dev.set_configuration()
	print 'Klondike device opened'
	sendcmd('I')	
	thread.start_new_thread (chkreply, ())

	while True: 
		cmd = raw_input("").upper()
		if cmd == "":
			continue
		data = ""
		if cmd == 'Q':
			break
		elif cmd =='.':
			addr = raw_input("Target Address: ")
			if addr == "":
				addr = 0
			addr = int(addr)
			print "Address changed to ", addr
			continue
		elif cmd == 'C':
			clk = raw_input("Clock (or blank for query only): ")
			if clk != "":
				data = pack("=H", int(clk))
				data += pack("=B", int(raw_input("Target Temp: ")))
				data += pack("=B", int(raw_input("Critical Temp: ")))
				data += pack("=B", int(raw_input("Target Fan: "))) + chr(0)
			else:
				data = chr(0)
		elif cmd == 'E':
			data = raw_input("1 (enable) or 0 (disable): ")
		elif cmd in 'W':
			workid = (workid+1) % 256
			data = chr(workid) + midstate.decode('hex') + merkle.decode('hex')

		sendcmd(cmd, data)

