

Microchip Technology PIC PRO Macro Assembler V1.12 build 49521 
                                                                                               Fri Jun 14 07:33:00 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    16                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    17                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	text2444,local,class=CODE,merge=1,delta=2
    25                           	psect	text2447,local,class=CODE,merge=1,delta=2
    26                           	psect	text2455,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text2473,local,class=CODE,merge=1,delta=2
    29                           	psect	text2479,local,class=CODE,merge=1,delta=2
    30                           	psect	swtext1,local,class=CONST,delta=2
    31                           	psect	text2482,local,class=CODE,merge=1,delta=2
    32                           	psect	text2484,local,class=CODE,merge=1,delta=2
    33                           	psect	text2485,local,class=CODE,merge=1,delta=2
    34                           	psect	swtext2,local,class=CONST,delta=2
    35                           	psect	text2489,local,class=CODE,merge=1,delta=2
    36                           	psect	text2490,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext3,local,class=CONST,delta=2
    38                           	psect	text2491,local,class=CODE,merge=1,delta=2
    39                           	psect	text2494,local,class=CODE,merge=1,delta=2
    40                           	psect	text2495,local,class=CODE,merge=1,delta=2
    41                           	psect	text2501,local,class=CODE,merge=1,delta=2
    42                           	psect	text2512,local,class=CODE,merge=1,delta=2
    43                           	psect	pa_nodes,global,class=CODE,delta=2
    44                           	dabs	1,0x620,48
    45                           	dabs	1,0x5A0,80
    46                           	dabs	1,0x53C,52
    47                           	dabs	1,0x20,48
    48                           	dabs	1,0x58,8
    49                           	dabs	1,0x50,8
    50                           	dabs	1,0x127,10
    51                           	dabs	1,0x120,7
    52                           	dabs	1,0x220,64
    53                           	dabs	1,0x2A0,64
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  0091                     	;# 
    85  0092                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011D                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  018E                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0194                     	;# 
   120  0195                     	;# 
   121  0196                     	;# 
   122  0199                     	;# 
   123  019A                     	;# 
   124  019B                     	;# 
   125  019C                     	;# 
   126  019D                     	;# 
   127  019E                     	;# 
   128  019F                     	;# 
   129  020C                     	;# 
   130  020D                     	;# 
   131  0211                     	;# 
   132  0211                     	;# 
   133  0212                     	;# 
   134  0212                     	;# 
   135  0213                     	;# 
   136  0213                     	;# 
   137  0214                     	;# 
   138  0214                     	;# 
   139  0215                     	;# 
   140  0215                     	;# 
   141  0215                     	;# 
   142  0216                     	;# 
   143  0216                     	;# 
   144  0217                     	;# 
   145  0217                     	;# 
   146  0391                     	;# 
   147  0392                     	;# 
   148  0393                     	;# 
   149  0394                     	;# 
   150  0395                     	;# 
   151  0396                     	;# 
   152  039A                     	;# 
   153  039B                     	;# 
   154  0611                     	;# 
   155  0612                     	;# 
   156  0613                     	;# 
   157  0613                     	;# 
   158  0614                     	;# 
   159  0615                     	;# 
   160  0616                     	;# 
   161  0616                     	;# 
   162  0691                     	;# 
   163  0692                     	;# 
   164  0693                     	;# 
   165  0694                     	;# 
   166  0695                     	;# 
   167  0E8E                     	;# 
   168  0E8F                     	;# 
   169  0E90                     	;# 
   170  0E91                     	;# 
   171  0E92                     	;# 
   172  0E93                     	;# 
   173  0E94                     	;# 
   174  0E94                     	;# 
   175  0E95                     	;# 
   176  0E96                     	;# 
   177  0E97                     	;# 
   178  0E98                     	;# 
   179  0E99                     	;# 
   180  0E9A                     	;# 
   181  0E9B                     	;# 
   182  0E9C                     	;# 
   183  0E9D                     	;# 
   184  0E9E                     	;# 
   185  0E9F                     	;# 
   186  0FE4                     	;# 
   187  0FE5                     	;# 
   188  0FE6                     	;# 
   189  0FE7                     	;# 
   190  0FE8                     	;# 
   191  0FE9                     	;# 
   192  0FEA                     	;# 
   193  0FEB                     	;# 
   194  0FED                     	;# 
   195  0FEE                     	;# 
   196  0FEF                     	;# 
   197  0000                     	;# 
   198  0001                     	;# 
   199  0002                     	;# 
   200  0003                     	;# 
   201  0004                     	;# 
   202  0005                     	;# 
   203  0006                     	;# 
   204  0007                     	;# 
   205  0008                     	;# 
   206  0009                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000D                     	;# 
   211  000E                     	;# 
   212  0011                     	;# 
   213  0012                     	;# 
   214  0015                     	;# 
   215  0016                     	;# 
   216  0016                     	;# 
   217  0017                     	;# 
   218  0018                     	;# 
   219  0019                     	;# 
   220  001A                     	;# 
   221  001B                     	;# 
   222  001C                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  0091                     	;# 
   227  0092                     	;# 
   228  0095                     	;# 
   229  0096                     	;# 
   230  0097                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  0111                     	;# 
   244  0112                     	;# 
   245  0113                     	;# 
   246  0114                     	;# 
   247  0115                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  0118                     	;# 
   251  0119                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  018E                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0199                     	;# 
   265  019A                     	;# 
   266  019B                     	;# 
   267  019C                     	;# 
   268  019D                     	;# 
   269  019E                     	;# 
   270  019F                     	;# 
   271  020C                     	;# 
   272  020D                     	;# 
   273  0211                     	;# 
   274  0211                     	;# 
   275  0212                     	;# 
   276  0212                     	;# 
   277  0213                     	;# 
   278  0213                     	;# 
   279  0214                     	;# 
   280  0214                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0215                     	;# 
   284  0216                     	;# 
   285  0216                     	;# 
   286  0217                     	;# 
   287  0217                     	;# 
   288  0391                     	;# 
   289  0392                     	;# 
   290  0393                     	;# 
   291  0394                     	;# 
   292  0395                     	;# 
   293  0396                     	;# 
   294  039A                     	;# 
   295  039B                     	;# 
   296  0611                     	;# 
   297  0612                     	;# 
   298  0613                     	;# 
   299  0613                     	;# 
   300  0614                     	;# 
   301  0615                     	;# 
   302  0616                     	;# 
   303  0616                     	;# 
   304  0691                     	;# 
   305  0692                     	;# 
   306  0693                     	;# 
   307  0694                     	;# 
   308  0695                     	;# 
   309  0E8E                     	;# 
   310  0E8F                     	;# 
   311  0E90                     	;# 
   312  0E91                     	;# 
   313  0E92                     	;# 
   314  0E93                     	;# 
   315  0E94                     	;# 
   316  0E94                     	;# 
   317  0E95                     	;# 
   318  0E96                     	;# 
   319  0E97                     	;# 
   320  0E98                     	;# 
   321  0E99                     	;# 
   322  0E9A                     	;# 
   323  0E9B                     	;# 
   324  0E9C                     	;# 
   325  0E9D                     	;# 
   326  0E9E                     	;# 
   327  0E9F                     	;# 
   328  0FE4                     	;# 
   329  0FE5                     	;# 
   330  0FE6                     	;# 
   331  0FE7                     	;# 
   332  0FE8                     	;# 
   333  0FE9                     	;# 
   334  0FEA                     	;# 
   335  0FEB                     	;# 
   336  0FED                     	;# 
   337  0FEE                     	;# 
   338  0FEF                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0008                     	;# 
   348  0009                     	;# 
   349  000A                     	;# 
   350  000B                     	;# 
   351  000C                     	;# 
   352  000D                     	;# 
   353  000E                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0015                     	;# 
   357  0016                     	;# 
   358  0016                     	;# 
   359  0017                     	;# 
   360  0018                     	;# 
   361  0019                     	;# 
   362  001A                     	;# 
   363  001B                     	;# 
   364  001C                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  0091                     	;# 
   369  0092                     	;# 
   370  0095                     	;# 
   371  0096                     	;# 
   372  0097                     	;# 
   373  0098                     	;# 
   374  0099                     	;# 
   375  009A                     	;# 
   376  009B                     	;# 
   377  009B                     	;# 
   378  009C                     	;# 
   379  009D                     	;# 
   380  009E                     	;# 
   381  009F                     	;# 
   382  010C                     	;# 
   383  010D                     	;# 
   384  010E                     	;# 
   385  0111                     	;# 
   386  0112                     	;# 
   387  0113                     	;# 
   388  0114                     	;# 
   389  0115                     	;# 
   390  0116                     	;# 
   391  0117                     	;# 
   392  0118                     	;# 
   393  0119                     	;# 
   394  011D                     	;# 
   395  018C                     	;# 
   396  018D                     	;# 
   397  018E                     	;# 
   398  0191                     	;# 
   399  0191                     	;# 
   400  0192                     	;# 
   401  0193                     	;# 
   402  0193                     	;# 
   403  0194                     	;# 
   404  0195                     	;# 
   405  0196                     	;# 
   406  0199                     	;# 
   407  019A                     	;# 
   408  019B                     	;# 
   409  019C                     	;# 
   410  019D                     	;# 
   411  019E                     	;# 
   412  019F                     	;# 
   413  020C                     	;# 
   414  020D                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0391                     	;# 
   431  0392                     	;# 
   432  0393                     	;# 
   433  0394                     	;# 
   434  0395                     	;# 
   435  0396                     	;# 
   436  039A                     	;# 
   437  039B                     	;# 
   438  0611                     	;# 
   439  0612                     	;# 
   440  0613                     	;# 
   441  0613                     	;# 
   442  0614                     	;# 
   443  0615                     	;# 
   444  0616                     	;# 
   445  0616                     	;# 
   446  0691                     	;# 
   447  0692                     	;# 
   448  0693                     	;# 
   449  0694                     	;# 
   450  0695                     	;# 
   451  0E8E                     	;# 
   452  0E8F                     	;# 
   453  0E90                     	;# 
   454  0E91                     	;# 
   455  0E92                     	;# 
   456  0E93                     	;# 
   457  0E94                     	;# 
   458  0E94                     	;# 
   459  0E95                     	;# 
   460  0E96                     	;# 
   461  0E97                     	;# 
   462  0E98                     	;# 
   463  0E99                     	;# 
   464  0E9A                     	;# 
   465  0E9B                     	;# 
   466  0E9C                     	;# 
   467  0E9D                     	;# 
   468  0E9E                     	;# 
   469  0E9F                     	;# 
   470  0FE4                     	;# 
   471  0FE5                     	;# 
   472  0FE6                     	;# 
   473  0FE7                     	;# 
   474  0FE8                     	;# 
   475  0FE9                     	;# 
   476  0FEA                     	;# 
   477  0FEB                     	;# 
   478  0FED                     	;# 
   479  0FEE                     	;# 
   480  0FEF                     	;# 
   481  0000                     	;# 
   482  0001                     	;# 
   483  0002                     	;# 
   484  0003                     	;# 
   485  0004                     	;# 
   486  0005                     	;# 
   487  0006                     	;# 
   488  0007                     	;# 
   489  0008                     	;# 
   490  0009                     	;# 
   491  000A                     	;# 
   492  000B                     	;# 
   493  000C                     	;# 
   494  000D                     	;# 
   495  000E                     	;# 
   496  0011                     	;# 
   497  0012                     	;# 
   498  0015                     	;# 
   499  0016                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001C                     	;# 
   507  008C                     	;# 
   508  008D                     	;# 
   509  008E                     	;# 
   510  0091                     	;# 
   511  0092                     	;# 
   512  0095                     	;# 
   513  0096                     	;# 
   514  0097                     	;# 
   515  0098                     	;# 
   516  0099                     	;# 
   517  009A                     	;# 
   518  009B                     	;# 
   519  009B                     	;# 
   520  009C                     	;# 
   521  009D                     	;# 
   522  009E                     	;# 
   523  009F                     	;# 
   524  010C                     	;# 
   525  010D                     	;# 
   526  010E                     	;# 
   527  0111                     	;# 
   528  0112                     	;# 
   529  0113                     	;# 
   530  0114                     	;# 
   531  0115                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  0118                     	;# 
   535  0119                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0199                     	;# 
   549  019A                     	;# 
   550  019B                     	;# 
   551  019C                     	;# 
   552  019D                     	;# 
   553  019E                     	;# 
   554  019F                     	;# 
   555  020C                     	;# 
   556  020D                     	;# 
   557  0211                     	;# 
   558  0211                     	;# 
   559  0212                     	;# 
   560  0212                     	;# 
   561  0213                     	;# 
   562  0213                     	;# 
   563  0214                     	;# 
   564  0214                     	;# 
   565  0215                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0216                     	;# 
   569  0216                     	;# 
   570  0217                     	;# 
   571  0217                     	;# 
   572  0391                     	;# 
   573  0392                     	;# 
   574  0393                     	;# 
   575  0394                     	;# 
   576  0395                     	;# 
   577  0396                     	;# 
   578  039A                     	;# 
   579  039B                     	;# 
   580  0611                     	;# 
   581  0612                     	;# 
   582  0613                     	;# 
   583  0613                     	;# 
   584  0614                     	;# 
   585  0615                     	;# 
   586  0616                     	;# 
   587  0616                     	;# 
   588  0691                     	;# 
   589  0692                     	;# 
   590  0693                     	;# 
   591  0694                     	;# 
   592  0695                     	;# 
   593  0E8E                     	;# 
   594  0E8F                     	;# 
   595  0E90                     	;# 
   596  0E91                     	;# 
   597  0E92                     	;# 
   598  0E93                     	;# 
   599  0E94                     	;# 
   600  0E94                     	;# 
   601  0E95                     	;# 
   602  0E96                     	;# 
   603  0E97                     	;# 
   604  0E98                     	;# 
   605  0E99                     	;# 
   606  0E9A                     	;# 
   607  0E9B                     	;# 
   608  0E9C                     	;# 
   609  0E9D                     	;# 
   610  0E9E                     	;# 
   611  0E9F                     	;# 
   612  0FE4                     	;# 
   613  0FE5                     	;# 
   614  0FE6                     	;# 
   615  0FE7                     	;# 
   616  0FE8                     	;# 
   617  0FE9                     	;# 
   618  0FEA                     	;# 
   619  0FEB                     	;# 
   620  0FED                     	;# 
   621  0FEE                     	;# 
   622  0FEF                     	;# 
   623  0000                     	;# 
   624  0001                     	;# 
   625  0002                     	;# 
   626  0003                     	;# 
   627  0004                     	;# 
   628  0005                     	;# 
   629  0006                     	;# 
   630  0007                     	;# 
   631  0008                     	;# 
   632  0009                     	;# 
   633  000A                     	;# 
   634  000B                     	;# 
   635  000C                     	;# 
   636  000D                     	;# 
   637  000E                     	;# 
   638  0011                     	;# 
   639  0012                     	;# 
   640  0015                     	;# 
   641  0016                     	;# 
   642  0016                     	;# 
   643  0017                     	;# 
   644  0018                     	;# 
   645  0019                     	;# 
   646  001A                     	;# 
   647  001B                     	;# 
   648  001C                     	;# 
   649  008C                     	;# 
   650  008D                     	;# 
   651  008E                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0095                     	;# 
   655  0096                     	;# 
   656  0097                     	;# 
   657  0098                     	;# 
   658  0099                     	;# 
   659  009A                     	;# 
   660  009B                     	;# 
   661  009B                     	;# 
   662  009C                     	;# 
   663  009D                     	;# 
   664  009E                     	;# 
   665  009F                     	;# 
   666  010C                     	;# 
   667  010D                     	;# 
   668  010E                     	;# 
   669  0111                     	;# 
   670  0112                     	;# 
   671  0113                     	;# 
   672  0114                     	;# 
   673  0115                     	;# 
   674  0116                     	;# 
   675  0117                     	;# 
   676  0118                     	;# 
   677  0119                     	;# 
   678  011D                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  0191                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0199                     	;# 
   691  019A                     	;# 
   692  019B                     	;# 
   693  019C                     	;# 
   694  019D                     	;# 
   695  019E                     	;# 
   696  019F                     	;# 
   697  020C                     	;# 
   698  020D                     	;# 
   699  0211                     	;# 
   700  0211                     	;# 
   701  0212                     	;# 
   702  0212                     	;# 
   703  0213                     	;# 
   704  0213                     	;# 
   705  0214                     	;# 
   706  0214                     	;# 
   707  0215                     	;# 
   708  0215                     	;# 
   709  0215                     	;# 
   710  0216                     	;# 
   711  0216                     	;# 
   712  0217                     	;# 
   713  0217                     	;# 
   714  0391                     	;# 
   715  0392                     	;# 
   716  0393                     	;# 
   717  0394                     	;# 
   718  0395                     	;# 
   719  0396                     	;# 
   720  039A                     	;# 
   721  039B                     	;# 
   722  0611                     	;# 
   723  0612                     	;# 
   724  0613                     	;# 
   725  0613                     	;# 
   726  0614                     	;# 
   727  0615                     	;# 
   728  0616                     	;# 
   729  0616                     	;# 
   730  0691                     	;# 
   731  0692                     	;# 
   732  0693                     	;# 
   733  0694                     	;# 
   734  0695                     	;# 
   735  0E8E                     	;# 
   736  0E8F                     	;# 
   737  0E90                     	;# 
   738  0E91                     	;# 
   739  0E92                     	;# 
   740  0E93                     	;# 
   741  0E94                     	;# 
   742  0E94                     	;# 
   743  0E95                     	;# 
   744  0E96                     	;# 
   745  0E97                     	;# 
   746  0E98                     	;# 
   747  0E99                     	;# 
   748  0E9A                     	;# 
   749  0E9B                     	;# 
   750  0E9C                     	;# 
   751  0E9D                     	;# 
   752  0E9E                     	;# 
   753  0E9F                     	;# 
   754  0FE4                     	;# 
   755  0FE5                     	;# 
   756  0FE6                     	;# 
   757  0FE7                     	;# 
   758  0FE8                     	;# 
   759  0FE9                     	;# 
   760  0FEA                     	;# 
   761  0FEB                     	;# 
   762  0FED                     	;# 
   763  0FEE                     	;# 
   764  0FEF                     	;# 
   765  0000                     	;# 
   766  0001                     	;# 
   767  0002                     	;# 
   768  0003                     	;# 
   769  0004                     	;# 
   770  0005                     	;# 
   771  0006                     	;# 
   772  0007                     	;# 
   773  0008                     	;# 
   774  0009                     	;# 
   775  000A                     	;# 
   776  000B                     	;# 
   777  000C                     	;# 
   778  000D                     	;# 
   779  000E                     	;# 
   780  0011                     	;# 
   781  0012                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0016                     	;# 
   785  0017                     	;# 
   786  0018                     	;# 
   787  0019                     	;# 
   788  001A                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0095                     	;# 
   797  0096                     	;# 
   798  0097                     	;# 
   799  0098                     	;# 
   800  0099                     	;# 
   801  009A                     	;# 
   802  009B                     	;# 
   803  009B                     	;# 
   804  009C                     	;# 
   805  009D                     	;# 
   806  009E                     	;# 
   807  009F                     	;# 
   808  010C                     	;# 
   809  010D                     	;# 
   810  010E                     	;# 
   811  0111                     	;# 
   812  0112                     	;# 
   813  0113                     	;# 
   814  0114                     	;# 
   815  0115                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  0118                     	;# 
   819  0119                     	;# 
   820  011D                     	;# 
   821  018C                     	;# 
   822  018D                     	;# 
   823  018E                     	;# 
   824  0191                     	;# 
   825  0191                     	;# 
   826  0192                     	;# 
   827  0193                     	;# 
   828  0193                     	;# 
   829  0194                     	;# 
   830  0195                     	;# 
   831  0196                     	;# 
   832  0199                     	;# 
   833  019A                     	;# 
   834  019B                     	;# 
   835  019C                     	;# 
   836  019D                     	;# 
   837  019E                     	;# 
   838  019F                     	;# 
   839  020C                     	;# 
   840  020D                     	;# 
   841  0211                     	;# 
   842  0211                     	;# 
   843  0212                     	;# 
   844  0212                     	;# 
   845  0213                     	;# 
   846  0213                     	;# 
   847  0214                     	;# 
   848  0214                     	;# 
   849  0215                     	;# 
   850  0215                     	;# 
   851  0215                     	;# 
   852  0216                     	;# 
   853  0216                     	;# 
   854  0217                     	;# 
   855  0217                     	;# 
   856  0391                     	;# 
   857  0392                     	;# 
   858  0393                     	;# 
   859  0394                     	;# 
   860  0395                     	;# 
   861  0396                     	;# 
   862  039A                     	;# 
   863  039B                     	;# 
   864  0611                     	;# 
   865  0612                     	;# 
   866  0613                     	;# 
   867  0613                     	;# 
   868  0614                     	;# 
   869  0615                     	;# 
   870  0616                     	;# 
   871  0616                     	;# 
   872  0691                     	;# 
   873  0692                     	;# 
   874  0693                     	;# 
   875  0694                     	;# 
   876  0695                     	;# 
   877  0E8E                     	;# 
   878  0E8F                     	;# 
   879  0E90                     	;# 
   880  0E91                     	;# 
   881  0E92                     	;# 
   882  0E93                     	;# 
   883  0E94                     	;# 
   884  0E94                     	;# 
   885  0E95                     	;# 
   886  0E96                     	;# 
   887  0E97                     	;# 
   888  0E98                     	;# 
   889  0E99                     	;# 
   890  0E9A                     	;# 
   891  0E9B                     	;# 
   892  0E9C                     	;# 
   893  0E9D                     	;# 
   894  0E9E                     	;# 
   895  0E9F                     	;# 
   896  0FE4                     	;# 
   897  0FE5                     	;# 
   898  0FE6                     	;# 
   899  0FE7                     	;# 
   900  0FE8                     	;# 
   901  0FE9                     	;# 
   902  0FEA                     	;# 
   903  0FEB                     	;# 
   904  0FED                     	;# 
   905  0FEE                     	;# 
   906  0FEF                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  0008                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  0011                     	;# 
   923  0012                     	;# 
   924  0015                     	;# 
   925  0016                     	;# 
   926  0016                     	;# 
   927  0017                     	;# 
   928  0018                     	;# 
   929  0019                     	;# 
   930  001A                     	;# 
   931  001B                     	;# 
   932  001C                     	;# 
   933  008C                     	;# 
   934  008D                     	;# 
   935  008E                     	;# 
   936  0091                     	;# 
   937  0092                     	;# 
   938  0095                     	;# 
   939  0096                     	;# 
   940  0097                     	;# 
   941  0098                     	;# 
   942  0099                     	;# 
   943  009A                     	;# 
   944  009B                     	;# 
   945  009B                     	;# 
   946  009C                     	;# 
   947  009D                     	;# 
   948  009E                     	;# 
   949  009F                     	;# 
   950  010C                     	;# 
   951  010D                     	;# 
   952  010E                     	;# 
   953  0111                     	;# 
   954  0112                     	;# 
   955  0113                     	;# 
   956  0114                     	;# 
   957  0115                     	;# 
   958  0116                     	;# 
   959  0117                     	;# 
   960  0118                     	;# 
   961  0119                     	;# 
   962  011D                     	;# 
   963  018C                     	;# 
   964  018D                     	;# 
   965  018E                     	;# 
   966  0191                     	;# 
   967  0191                     	;# 
   968  0192                     	;# 
   969  0193                     	;# 
   970  0193                     	;# 
   971  0194                     	;# 
   972  0195                     	;# 
   973  0196                     	;# 
   974  0199                     	;# 
   975  019A                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  019D                     	;# 
   979  019E                     	;# 
   980  019F                     	;# 
   981  020C                     	;# 
   982  020D                     	;# 
   983  0211                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0214                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0391                     	;# 
   999  0392                     	;# 
  1000  0393                     	;# 
  1001  0394                     	;# 
  1002  0395                     	;# 
  1003  0396                     	;# 
  1004  039A                     	;# 
  1005  039B                     	;# 
  1006  0611                     	;# 
  1007  0612                     	;# 
  1008  0613                     	;# 
  1009  0613                     	;# 
  1010  0614                     	;# 
  1011  0615                     	;# 
  1012  0616                     	;# 
  1013  0616                     	;# 
  1014  0691                     	;# 
  1015  0692                     	;# 
  1016  0693                     	;# 
  1017  0694                     	;# 
  1018  0695                     	;# 
  1019  0E8E                     	;# 
  1020  0E8F                     	;# 
  1021  0E90                     	;# 
  1022  0E91                     	;# 
  1023  0E92                     	;# 
  1024  0E93                     	;# 
  1025  0E94                     	;# 
  1026  0E94                     	;# 
  1027  0E95                     	;# 
  1028  0E96                     	;# 
  1029  0E97                     	;# 
  1030  0E98                     	;# 
  1031  0E99                     	;# 
  1032  0E9A                     	;# 
  1033  0E9B                     	;# 
  1034  0E9C                     	;# 
  1035  0E9D                     	;# 
  1036  0E9E                     	;# 
  1037  0E9F                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  000E                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  008C                     	;# 
  1076  008D                     	;# 
  1077  008E                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0098                     	;# 
  1084  0099                     	;# 
  1085  009A                     	;# 
  1086  009B                     	;# 
  1087  009B                     	;# 
  1088  009C                     	;# 
  1089  009D                     	;# 
  1090  009E                     	;# 
  1091  009F                     	;# 
  1092  010C                     	;# 
  1093  010D                     	;# 
  1094  010E                     	;# 
  1095  0111                     	;# 
  1096  0112                     	;# 
  1097  0113                     	;# 
  1098  0114                     	;# 
  1099  0115                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  0118                     	;# 
  1103  0119                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020C                     	;# 
  1124  020D                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0391                     	;# 
  1141  0392                     	;# 
  1142  0393                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  039A                     	;# 
  1147  039B                     	;# 
  1148  0611                     	;# 
  1149  0612                     	;# 
  1150  0613                     	;# 
  1151  0613                     	;# 
  1152  0614                     	;# 
  1153  0615                     	;# 
  1154  0616                     	;# 
  1155  0616                     	;# 
  1156  0691                     	;# 
  1157  0692                     	;# 
  1158  0693                     	;# 
  1159  0694                     	;# 
  1160  0695                     	;# 
  1161  0E8E                     	;# 
  1162  0E8F                     	;# 
  1163  0E90                     	;# 
  1164  0E91                     	;# 
  1165  0E92                     	;# 
  1166  0E93                     	;# 
  1167  0E94                     	;# 
  1168  0E94                     	;# 
  1169  0E95                     	;# 
  1170  0E96                     	;# 
  1171  0E97                     	;# 
  1172  0E98                     	;# 
  1173  0E99                     	;# 
  1174  0E9A                     	;# 
  1175  0E9B                     	;# 
  1176  0E9C                     	;# 
  1177  0E9D                     	;# 
  1178  0E9E                     	;# 
  1179  0E9F                     	;# 
  1180  0FE4                     	;# 
  1181  0FE5                     	;# 
  1182  0FE6                     	;# 
  1183  0FE7                     	;# 
  1184  0FE8                     	;# 
  1185  0FE9                     	;# 
  1186  0FEA                     	;# 
  1187  0FEB                     	;# 
  1188  0FED                     	;# 
  1189  0FEE                     	;# 
  1190  0FEF                     	;_WorkQue
  1191                           
  1192                           	psect	idataBANK2
  1193  0000                     __pidataBANK2:	
  1194                           
  1195                           	psect	idataBANK3
  1196  080E                     __pidataBANK3:	
  1197                           
  1198                           ;initializer for _WorkTicks
  1199  080E  3489               	retlw	137
  1200  080F  3441               	retlw	65
  1201                           
  1202                           ;initializer for _Status
  1203  0810  3449               	retlw	73
  1204  0811  3400               	retlw	0
  1205  0812  3400               	retlw	0
  1206  0813  3400               	retlw	0
  1207  0814  3400               	retlw	0
  1208  0815  3400               	retlw	0
  1209  0816  3400               	retlw	0
  1210  0817  3400               	retlw	0
  1211  0818  3400               	retlw	0
  1212  0819  3400               	retlw	0
  1213  081A  3400               	retlw	0
  1214                           
  1215                           ;initializer for _ClockCfg
  1216  081B  3403               	retlw	3
  1217  081C  3400               	retlw	0
  1218  081D  34D0               	retlw	208
  1219  081E  3408               	retlw	8
  1220  081F  3404               	retlw	4
  1221  0820  3400               	retlw	0
  1222  0821  3400               	retlw	0
  1223  0822  342E               	retlw	46
  1224                           
  1225                           ;initializer for _Cfg
  1226  0823  3434               	retlw	52
  1227  0824  3402               	retlw	2
  1228  0825  343C               	retlw	60
  1229  0826  3450               	retlw	80
  1230  0827  3480               	retlw	128
  1231                           
  1232                           	psect	stringtext
  1233  1000                     __pstringtext:	
  1234  1000                     __stringtab:	
  1235  1000  3400               	retlw	0
  1236  1001                     __end_of__stringtab:	
  1237  1001                     _BankRanges:	
  1238  1001  3400               	retlw	0
  1239  1002  3400               	retlw	0
  1240  1003  3400               	retlw	0
  1241  1004  3400               	retlw	0
  1242  1005  3400               	retlw	0
  1243  1006  3400               	retlw	0
  1244  1007  3400               	retlw	0
  1245  1008  3440               	retlw	64
  1246  1009  34AA               	retlw	170
  1247  100A  34AA               	retlw	170
  1248  100B  34AA               	retlw	170
  1249  100C  342A               	retlw	42
  1250  100D  3400               	retlw	0
  1251  100E  3400               	retlw	0
  1252  100F  3400               	retlw	0
  1253  1010  3420               	retlw	32
  1254  1011  3499               	retlw	153
  1255  1012  3499               	retlw	153
  1256  1013  3499               	retlw	153
  1257  1014  3419               	retlw	25
  1258  1015  3455               	retlw	85
  1259  1016  3455               	retlw	85
  1260  1017  3455               	retlw	85
  1261  1018  3415               	retlw	21
  1262  1019  3492               	retlw	146
  1263  101A  3424               	retlw	36
  1264  101B  3449               	retlw	73
  1265  101C  3412               	retlw	18
  1266  101D  3400               	retlw	0
  1267  101E  3400               	retlw	0
  1268  101F  3400               	retlw	0
  1269  1020  3410               	retlw	16
  1270  1021                     __end_of_BankRanges:	
  1271  1021                     AsicPreCalc@K:	
  1272  1021  3498               	retlw	152
  1273  1022  342F               	retlw	47
  1274  1023  348A               	retlw	138
  1275  1024  3442               	retlw	66
  1276  1025  3491               	retlw	145
  1277  1026  3444               	retlw	68
  1278  1027  3437               	retlw	55
  1279  1028  3471               	retlw	113
  1280  1029  34CF               	retlw	207
  1281  102A  34FB               	retlw	251
  1282  102B  34C0               	retlw	192
  1283  102C  34B5               	retlw	181
  1284  102D                     __end_ofAsicPreCalc@K:	
  1285  102D                     _USB_SD_Ptr:	
  1286  102D  3462               	retlw	low (_sd000| (0+32768))
  1287  102E  3491               	retlw	high (_sd000| (0+32768))
  1288  102F  347A               	retlw	low (_sd001| (0+32768))
  1289  1030  3490               	retlw	high (_sd001| (0+32768))
  1290  1031  34AE               	retlw	low (_sd002| (0+32768))
  1291  1032  3490               	retlw	high (_sd002| (0+32768))
  1292  1033  34E2               	retlw	low (_sd003| (0+32768))
  1293  1034  3490               	retlw	high (_sd003| (0+32768))
  1294  1035                     __end_of_USB_SD_Ptr:	
  1295  1035                     _USB_CD_Ptr:	
  1296  1035  3437               	retlw	low (_configDescriptor1| (0+32768))
  1297  1036  3490               	retlw	high (_configDescriptor1| (0+32768))
  1298  1037                     __end_of_USB_CD_Ptr:	
  1299  1037                     _configDescriptor1:	
  1300  1037  3409               	retlw	9
  1301  1038  3402               	retlw	2
  1302  1039  3443               	retlw	67
  1303  103A  3400               	retlw	0
  1304  103B  3402               	retlw	2
  1305  103C  3401               	retlw	1
  1306  103D  3400               	retlw	0
  1307  103E  34C0               	retlw	192
  1308  103F  3432               	retlw	50
  1309  1040  3409               	retlw	9
  1310  1041  3404               	retlw	4
  1311  1042  3400               	retlw	0
  1312  1043  3400               	retlw	0
  1313  1044  3401               	retlw	1
  1314  1045  3402               	retlw	2
  1315  1046  3402               	retlw	2
  1316  1047  3401               	retlw	1
  1317  1048  3400               	retlw	0
  1318  1049  3405               	retlw	5
  1319  104A  3424               	retlw	36
  1320  104B  3400               	retlw	0
  1321  104C  3410               	retlw	16
  1322  104D  3401               	retlw	1
  1323  104E  3404               	retlw	4
  1324  104F  3424               	retlw	36
  1325  1050  3402               	retlw	2
  1326  1051  3402               	retlw	2
  1327  1052  3405               	retlw	5
  1328  1053  3424               	retlw	36
  1329  1054  3406               	retlw	6
  1330  1055  3400               	retlw	0
  1331  1056  3401               	retlw	1
  1332  1057  3405               	retlw	5
  1333  1058  3424               	retlw	36
  1334  1059  3401               	retlw	1
  1335  105A  3400               	retlw	0
  1336  105B  3401               	retlw	1
  1337  105C  3407               	retlw	7
  1338  105D  3405               	retlw	5
  1339  105E  3481               	retlw	129
  1340  105F  3403               	retlw	3
  1341  1060  3408               	retlw	8
  1342  1061  3400               	retlw	0
  1343  1062  3402               	retlw	2
  1344  1063  3409               	retlw	9
  1345  1064  3404               	retlw	4
  1346  1065  3401               	retlw	1
  1347  1066  3400               	retlw	0
  1348  1067  3402               	retlw	2
  1349  1068  340A               	retlw	10
  1350  1069  3400               	retlw	0
  1351  106A  3400               	retlw	0
  1352  106B  3400               	retlw	0
  1353  106C  3407               	retlw	7
  1354  106D  3405               	retlw	5
  1355  106E  3402               	retlw	2
  1356  106F  3402               	retlw	2
  1357  1070  3440               	retlw	64
  1358  1071  3400               	retlw	0
  1359  1072  3400               	retlw	0
  1360  1073  3407               	retlw	7
  1361  1074  3405               	retlw	5
  1362  1075  3482               	retlw	130
  1363  1076  3402               	retlw	2
  1364  1077  3440               	retlw	64
  1365  1078  3400               	retlw	0
  1366  1079  3400               	retlw	0
  1367  107A                     __end_of_configDescriptor1:	
  1368  107A                     _sd001:	
  1369  107A  3434               	retlw	52
  1370  107B  3403               	retlw	3
  1371  107C  344B               	retlw	75
  1372  107D  3400               	retlw	0
  1373  107E  346C               	retlw	108
  1374  107F  3400               	retlw	0
  1375  1080  346F               	retlw	111
  1376  1081  3400               	retlw	0
  1377  1082  346E               	retlw	110
  1378  1083  3400               	retlw	0
  1379  1084  3464               	retlw	100
  1380  1085  3400               	retlw	0
  1381  1086  3469               	retlw	105
  1382  1087  3400               	retlw	0
  1383  1088  346B               	retlw	107
  1384  1089  3400               	retlw	0
  1385  108A  3465               	retlw	101
  1386  108B  3400               	retlw	0
  1387  108C  3420               	retlw	32
  1388  108D  3400               	retlw	0
  1389  108E  3450               	retlw	80
  1390  108F  3400               	retlw	0
  1391  1090  3472               	retlw	114
  1392  1091  3400               	retlw	0
  1393  1092  346F               	retlw	111
  1394  1093  3400               	retlw	0
  1395  1094  346A               	retlw	106
  1396  1095  3400               	retlw	0
  1397  1096  3465               	retlw	101
  1398  1097  3400               	retlw	0
  1399  1098  3463               	retlw	99
  1400  1099  3400               	retlw	0
  1401  109A  3474               	retlw	116
  1402  109B  3400               	retlw	0
  1403  109C  3400               	retlw	0
  1404  109D  3400               	retlw	0
  1405  109E  3400               	retlw	0
  1406  109F  3400               	retlw	0
  1407  10A0  3400               	retlw	0
  1408  10A1  3400               	retlw	0
  1409  10A2  3400               	retlw	0
  1410  10A3  3400               	retlw	0
  1411  10A4  3400               	retlw	0
  1412  10A5  3400               	retlw	0
  1413  10A6  3400               	retlw	0
  1414  10A7  3400               	retlw	0
  1415  10A8  3400               	retlw	0
  1416  10A9  3400               	retlw	0
  1417  10AA  3400               	retlw	0
  1418  10AB  3400               	retlw	0
  1419  10AC  3400               	retlw	0
  1420  10AD  3400               	retlw	0
  1421  10AE                     __end_of_sd001:	
  1422  10AE                     _sd002:	
  1423  10AE  3434               	retlw	52
  1424  10AF  3403               	retlw	3
  1425  10B0  344B               	retlw	75
  1426  10B1  3400               	retlw	0
  1427  10B2  3431               	retlw	49
  1428  10B3  3400               	retlw	0
  1429  10B4  3436               	retlw	54
  1430  10B5  3400               	retlw	0
  1431  10B6  3400               	retlw	0
  1432  10B7  3400               	retlw	0
  1433  10B8  3400               	retlw	0
  1434  10B9  3400               	retlw	0
  1435  10BA  3400               	retlw	0
  1436  10BB  3400               	retlw	0
  1437  10BC  3400               	retlw	0
  1438  10BD  3400               	retlw	0
  1439  10BE  3400               	retlw	0
  1440  10BF  3400               	retlw	0
  1441  10C0  3400               	retlw	0
  1442  10C1  3400               	retlw	0
  1443  10C2  3400               	retlw	0
  1444  10C3  3400               	retlw	0
  1445  10C4  3400               	retlw	0
  1446  10C5  3400               	retlw	0
  1447  10C6  3400               	retlw	0
  1448  10C7  3400               	retlw	0
  1449  10C8  3400               	retlw	0
  1450  10C9  3400               	retlw	0
  1451  10CA  3400               	retlw	0
  1452  10CB  3400               	retlw	0
  1453  10CC  3400               	retlw	0
  1454  10CD  3400               	retlw	0
  1455  10CE  3400               	retlw	0
  1456  10CF  3400               	retlw	0
  1457  10D0  3400               	retlw	0
  1458  10D1  3400               	retlw	0
  1459  10D2  3400               	retlw	0
  1460  10D3  3400               	retlw	0
  1461  10D4  3400               	retlw	0
  1462  10D5  3400               	retlw	0
  1463  10D6  3400               	retlw	0
  1464  10D7  3400               	retlw	0
  1465  10D8  3400               	retlw	0
  1466  10D9  3400               	retlw	0
  1467  10DA  3400               	retlw	0
  1468  10DB  3400               	retlw	0
  1469  10DC  3400               	retlw	0
  1470  10DD  3400               	retlw	0
  1471  10DE  3400               	retlw	0
  1472  10DF  3400               	retlw	0
  1473  10E0  3400               	retlw	0
  1474  10E1  3400               	retlw	0
  1475  10E2                     __end_of_sd002:	
  1476  10E2                     _sd003:	
  1477  10E2  3434               	retlw	52
  1478  10E3  3403               	retlw	3
  1479  10E4  3444               	retlw	68
  1480  10E5  3400               	retlw	0
  1481  10E6  3445               	retlw	69
  1482  10E7  3400               	retlw	0
  1483  10E8  3441               	retlw	65
  1484  10E9  3400               	retlw	0
  1485  10EA  3444               	retlw	68
  1486  10EB  3400               	retlw	0
  1487  10EC  3442               	retlw	66
  1488  10ED  3400               	retlw	0
  1489  10EE  3445               	retlw	69
  1490  10EF  3400               	retlw	0
  1491  10F0  3445               	retlw	69
  1492  10F1  3400               	retlw	0
  1493  10F2  3446               	retlw	70
  1494  10F3  3400               	retlw	0
  1495  10F4  3400               	retlw	0
  1496  10F5  3400               	retlw	0
  1497  10F6  3400               	retlw	0
  1498  10F7  3400               	retlw	0
  1499  10F8  3400               	retlw	0
  1500  10F9  3400               	retlw	0
  1501  10FA  3400               	retlw	0
  1502  10FB  3400               	retlw	0
  1503  10FC  3400               	retlw	0
  1504  10FD  3400               	retlw	0
  1505  10FE  3400               	retlw	0
  1506  10FF  3400               	retlw	0
  1507  1100  3400               	retlw	0
  1508  1101  3400               	retlw	0
  1509  1102  3400               	retlw	0
  1510  1103  3400               	retlw	0
  1511  1104  3400               	retlw	0
  1512  1105  3400               	retlw	0
  1513  1106  3400               	retlw	0
  1514  1107  3400               	retlw	0
  1515  1108  3400               	retlw	0
  1516  1109  3400               	retlw	0
  1517  110A  3400               	retlw	0
  1518  110B  3400               	retlw	0
  1519  110C  3400               	retlw	0
  1520  110D  3400               	retlw	0
  1521  110E  3400               	retlw	0
  1522  110F  3400               	retlw	0
  1523  1110  3400               	retlw	0
  1524  1111  3400               	retlw	0
  1525  1112  3400               	retlw	0
  1526  1113  3400               	retlw	0
  1527  1114  3400               	retlw	0
  1528  1115  3400               	retlw	0
  1529  1116                     __end_of_sd003:	
  1530  1116                     _TestWork:	
  1531  1116  34FF               	retlw	255
  1532  1117  3469               	retlw	105
  1533  1118  3400               	retlw	0
  1534  1119  3400               	retlw	0
  1535  111A  3400               	retlw	0
  1536  111B  3469               	retlw	105
  1537  111C  3400               	retlw	0
  1538  111D  3400               	retlw	0
  1539  111E  3400               	retlw	0
  1540  111F  3469               	retlw	105
  1541  1120  3400               	retlw	0
  1542  1121  3400               	retlw	0
  1543  1122  3400               	retlw	0
  1544  1123  3469               	retlw	105
  1545  1124  3400               	retlw	0
  1546  1125  3400               	retlw	0
  1547  1126  3400               	retlw	0
  1548  1127  3469               	retlw	105
  1549  1128  3400               	retlw	0
  1550  1129  3400               	retlw	0
  1551  112A  3400               	retlw	0
  1552  112B  3469               	retlw	105
  1553  112C  3400               	retlw	0
  1554  112D  3400               	retlw	0
  1555  112E  3400               	retlw	0
  1556  112F  3469               	retlw	105
  1557  1130  3400               	retlw	0
  1558  1131  3400               	retlw	0
  1559  1132  3400               	retlw	0
  1560  1133  3469               	retlw	105
  1561  1134  3400               	retlw	0
  1562  1135  3400               	retlw	0
  1563  1136  3400               	retlw	0
  1564  1137  3469               	retlw	105
  1565  1138  3400               	retlw	0
  1566  1139  3400               	retlw	0
  1567  113A  3400               	retlw	0
  1568  113B  3469               	retlw	105
  1569  113C  3400               	retlw	0
  1570  113D  3400               	retlw	0
  1571  113E  3400               	retlw	0
  1572  113F  3469               	retlw	105
  1573  1140  3400               	retlw	0
  1574  1141  3400               	retlw	0
  1575  1142  3400               	retlw	0
  1576  1143                     __end_of_TestWork:	
  1577  1143                     _device_dsc:	
  1578  1143  3412               	retlw	18
  1579  1144  3401               	retlw	1
  1580  1145  3400               	retlw	0
  1581  1146  3402               	retlw	2
  1582  1147  3402               	retlw	2
  1583  1148  3400               	retlw	0
  1584  1149  3400               	retlw	0
  1585  114A  3408               	retlw	8
  1586  114B  34D8               	retlw	216
  1587  114C  3404               	retlw	4
  1588  114D  340A               	retlw	10
  1589  114E  34F6               	retlw	246
  1590  114F  3400               	retlw	0
  1591  1150  3401               	retlw	1
  1592  1151  3401               	retlw	1
  1593  1152  3402               	retlw	2
  1594  1153  3403               	retlw	3
  1595  1154  3401               	retlw	1
  1596  1155                     __end_of_device_dsc:	
  1597  1155                     _ID:	
  1598  1155  3410               	retlw	16
  1599  1156  34EF               	retlw	239
  1600  1157  34BE               	retlw	190
  1601  1158  34AD               	retlw	173
  1602  1159  34DE               	retlw	222
  1603  115A  344B               	retlw	75
  1604  115B  3431               	retlw	49
  1605  115C  3436               	retlw	54
  1606  115D  3400               	retlw	0
  1607  115E  3400               	retlw	0
  1608  115F  3400               	retlw	0
  1609  1160  3400               	retlw	0
  1610  1161  3400               	retlw	0
  1611  1162                     __end_of_ID:	
  1612  1162                     _sd000:	
  1613  1162  3404               	retlw	4
  1614  1163  3403               	retlw	3
  1615  1164  3409               	retlw	9
  1616  1165  3404               	retlw	4
  1617  1166                     __end_of_sd000:	
  1618  0020                     _BDT	set	32	;_BDT
  1619  0058                     _CtrlTrfData	set	88	;_CtrlTrfData
  1620  0050                     _SetupPkt	set	80	;_SetupPkt
  1621  0127                     _cdc_notice	set	295	;_cdc_notice
  1622  0120                     _line_coding	set	288	;_line_coding
  1623                           
  1624                           	psect	nvBANK3
  1625  01EB                     __pnvBANK3:	
  1626  01EB                     _BankSize:	
  1627  01EB                     	ds	1
  1628  0220                     _cdc_data_tx	set	544	;_cdc_data_tx
  1629  02A0                     _cdc_data_rx	set	672	;_cdc_data_rx
  1630  000B                     _INTCONbits	set	11
  1631  0012                     _PIR2bits	set	18
  1632  001B                     _PR2	set	27
  1633  0018                     _T1CONbits	set	24
  1634  0019                     _T1GCONbits	set	25
  1635  001C                     _T2CONbits	set	28
  1636  0015                     _TMR0	set	21
  1637  0017                     _TMR1H	set	23
  1638  0016                     _TMR1L	set	22
  1639  0093                     _BCL1IF	set	147
  1640  005F                     _GIE	set	95
  1641  008D                     _RCIF	set	141
  1642  008B                     _SSP1IF	set	139
  1643  00CC                     _T1GSPM	set	204
  1644  005A                     _TMR0IF	set	90
  1645  00CF                     _TMR1GE	set	207
  1646  008F                     _TMR1GIF	set	143
  1647  0088                     _TMR1IF	set	136
  1648  00C0                     _TMR1ON	set	192
  1649  0089                     _TMR2IF	set	137
  1650  00E2                     _TMR2ON	set	226
  1651  009D                     _ADCON0bits	set	157
  1652  009E                     _ADCON1bits	set	158
  1653  009F                     _ADCON2bits	set	159
  1654  009C                     _ADRESH	set	156
  1655  0095                     _OPTION_REGbits	set	149
  1656  0099                     _OSCCON	set	153
  1657  0098                     _OSCTUNE	set	152
  1658  0092                     _PIE2bits	set	146
  1659  008C                     _TRISAbits	set	140
  1660  008D                     _TRISBbits	set	141
  1661  008E                     _TRISCbits	set	142
  1662  04AD                     _TMR0CS	set	1197
  1663  048F                     _TMR1GIE	set	1167
  1664  0488                     _TMR1IE	set	1160
  1665  010C                     _LATAbits	set	268
  1666  010E                     _LATC	set	270
  1667  010E                     _LATCbits	set	270
  1668  08EB                     _T1GSEL	set	2283
  1669  018C                     _ANSELA	set	396
  1670  018D                     _ANSELB	set	397
  1671  018E                     _ANSELC	set	398
  1672  0199                     _RCREG	set	409
  1673  019D                     _RCSTAbits	set	413
  1674  0212                     _SSPADD	set	530
  1675  0211                     _SSPBUF	set	529
  1676  0215                     _SSPCON1bits	set	533
  1677  0216                     _SSPCON2bits	set	534
  1678  0217                     _SSPCON3bits	set	535
  1679  0214                     _SSPSTATbits	set	532
  1680  10AD                     _SSP1EN	set	4269
  1681  039B                     _ACTCON	set	923
  1682  1C9B                     _IOCAF3	set	7323
  1683  1C93                     _IOCAN3	set	7315
  1684  0613                     _PWM1CON	set	1555
  1685  0612                     _PWM1DCH	set	1554
  1686  0611                     _PWM1DCL	set	1553
  1687  309E                     _PWM1OE	set	12446
  1688  0E96                     _UADDR	set	3734
  1689  0E91                     _UCFG	set	3729
  1690  0E8E                     _UCON	set	3726
  1691  0E8E                     _UCONbits	set	3726
  1692  0E97                     _UEIE	set	3735
  1693  0E93                     _UEIR	set	3731
  1694  0E98                     _UEP0bits	set	3736
  1695  0E92                     _UIE	set	3730
  1696  0E92                     _UIEbits	set	3730
  1697  0E90                     _UIR	set	3728
  1698  0E90                     _UIRbits	set	3728
  1699  0E8F                     _USTAT	set	3727
  1700  0E98                     _UEP0	set	3736
  1701  0E99                     _UEP1	set	3737
  1702                           
  1703                           ; #config settings
  1704  0000                     
  1705                           	psect	cinit
  1706  0828                     start_initialization:	
  1707  0828                     __initialization:	
  1708  0828  303C               	movlw	60
  1709  233C                     	;BIGRAM
  1710                           
  1711                           ; Clear objects allocated to BIGRAM
  1712  0829  0084               	movwf	4
  1713  082A  3023               	movlw	35
  1714  082B  0085               	movwf	5
  1715  082C  30B4               	movlw	180
  1716  082D  00FE               	movwf	126
  1717  082E  3000               	movlw	0
  1718  082F  01FF               	clrf	127
  1719  0830  3188  2002  3188   	fcall	clear_ram
  1720                           
  1721                           ; Clear objects allocated to BANK1
  1722  0833  0021               	movlb	1	; select bank1
  1723  0834  3031               	movlw	low __pbssBANK2
  1724  0835  01EF               	clrf	__pbssBANK1& (0+127)
  1725                           
  1726                           ; Clear objects allocated to BANK2
  1727  0836  0084               	movwf	4
  1728  0837  3001               	movlw	high __pbssBANK2
  1729  0838  0085               	movwf	5
  1730  0839  303A               	movlw	58
  1731  083A  00FE               	movwf	126
  1732  083B  3000               	movlw	0
  1733  083C  00FF               	movwf	127
  1734  083D  3188  2002  3188   	fcall	clear_ram
  1735                           
  1736                           ; Clear objects allocated to BANK3
  1737  0840  30A0               	movlw	low __pbssBANK3
  1738  0841  0084               	movwf	4
  1739  0842  3001               	movlw	high __pbssBANK3
  1740  0843  0085               	movwf	5
  1741  0844  3031               	movlw	49
  1742  0845  00FE               	movwf	126
  1743  0846  3000               	movlw	0
  1744  0847  00FF               	movwf	127
  1745  0848  3188  2002  3188   	fcall	clear_ram
  1746                           
  1747                           ; Clear objects allocated to BANK4
  1748  084B  3060               	movlw	low __pbssBANK4
  1749  084C  0084               	movwf	4
  1750  084D  3002               	movlw	high __pbssBANK4
  1751  084E  0085               	movwf	5
  1752  084F  3010               	movlw	16
  1753  0850  00FE               	movwf	126
  1754  0851  3000               	movlw	0
  1755  0852  00FF               	movwf	127
  1756  0853  3188  2002  3188   	fcall	clear_ram
  1757                           
  1758                           ; Clear objects allocated to BANK6
  1759  0856  3020               	movlw	low __pbssBANK6
  1760  0857  0084               	movwf	4
  1761  0858  3003               	movlw	high __pbssBANK6
  1762  0859  0085               	movwf	5
  1763  085A  3020               	movlw	32
  1764  085B  00FE               	movwf	126
  1765  085C  3000               	movlw	0
  1766  085D  00FF               	movwf	127
  1767  085E  3188  2002  3188   	fcall	clear_ram
  1768                           
  1769                           ; Clear objects allocated to BANK7
  1770  0861  30A0               	movlw	low __pbssBANK7
  1771  0862  0084               	movwf	4
  1772  0863  3003               	movlw	high __pbssBANK7
  1773  0864  0085               	movwf	5
  1774  0865  3040               	movlw	64
  1775  0866  00FE               	movwf	126
  1776  0867  3000               	movlw	0
  1777  0868  00FF               	movwf	127
  1778  0869  3188  2002  3188   	fcall	clear_ram
  1779                           
  1780                           ; Clear objects allocated to BANK8
  1781  086C  3020               	movlw	low __pbssBANK8
  1782  086D  0084               	movwf	4
  1783  086E  3004               	movlw	high __pbssBANK8
  1784  086F  0085               	movwf	5
  1785  0870  3040               	movlw	64
  1786  0871  00FE               	movwf	126
  1787  0872  3000               	movlw	0
  1788  0873  00FF               	movwf	127
  1789  0874  3188  2002  3188   	fcall	clear_ram
  1790                           
  1791                           ; Initialize objects allocated to BANK2
  1792  0877  0022               	movlb	2	; select bank2
  1793                           
  1794                           ;initializer for _HashTime
  1795  0878  30D6               	movlw	214
  1796  0879  00EF               	movwf	__pdataBANK2& (0+127)
  1797                           
  1798                           ; Initialize objects allocated to BANK3
  1799  087A  300E               	movlw	low __pidataBANK3
  1800  087B  0084               	movwf	4
  1801  087C  3088               	movlw	(high __pidataBANK3)| (0+128)
  1802  087D  0085               	movwf	5
  1803  087E  30D1               	movlw	low __pdataBANK3
  1804  087F  0086               	movwf	6
  1805  0880  3001               	movlw	high __pdataBANK3
  1806  0881  0087               	movwf	7
  1807  0882  3000               	movlw	0
  1808  0883  00FF               	movwf	127
  1809  0884  301A               	movlw	26
  1810  0885  3193  23C5  3188   	fcall	init_ram
  1811  0888                     end_of_initialization:	
  1812                           ;End of C runtime variable initialization code
  1813                           
  1814  0888                     __end_of__initialization:	
  1815  0888  0020               	movlb	0
  1816  0889  288A               	ljmp	_main	;jump to C main() function
  1817  088A                     __pmaintext:	
  1818 ;;
  1819 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1820 ;;
  1821 ;; *************** function _main *****************
  1822 ;; Defined at:
  1823 ;;		line 86 in file "main.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  2  1005[COMMON] int 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 17F/0
  1834 ;;		On exit  : 1F/1
  1835 ;;		Unchanged: FFE00/0
  1836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels required when called:   16
  1843 ;; This function calls:
  1844 ;;		_InitializeSystem
  1845 ;;		_USBDeviceAttach
  1846 ;;		_InitI2CSlave
  1847 ;;		_InitI2CMaster
  1848 ;;		_AsicPushWork
  1849 ;;		_ProcessIO
  1850 ;; This function is called by:
  1851 ;;		Startup code after reset
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function _main
  1857  088A                     _main:	
  1858                           
  1859                           ;main.c: 87: InitializeSystem();
  1860                           
  1861                           ; Regs used in _main: [allreg]
  1862  088A  274A  3188         	fcall	_InitializeSystem
  1863  088C                     l7227:	
  1864  088C  0022               	movlb	2	; select bank2
  1865  088D  08D1               	movf	_USBDeviceState^(0+256),f
  1866  088E  1D03               	skipz
  1867  088F  2892               	goto	l7231
  1868                           
  1869                           ;main.c: 93: {
  1870                           ;main.c: 94: USBDeviceAttach();
  1871  0890  277F  3188         	fcall	_USBDeviceAttach
  1872  0892                     l7231:	
  1873                           
  1874                           ;main.c: 95: }
  1875                           ;main.c: 98: if(USBDeviceState == DETACHED_STATE) {
  1876  0892  08D1               	movf	_USBDeviceState^(0+256),f
  1877  0893  1D03               	skipz
  1878  0894  289A               	goto	l1008
  1879                           
  1880                           ;main.c: 99: if(!I2CState.Slave)
  1881  0895  1AE8               	btfsc	_I2CState^(0+256),5
  1882  0896  289E               	goto	l7239
  1883                           
  1884                           ;main.c: 100: InitI2CSlave();
  1885  0897  276B  3188         	fcall	_InitI2CSlave
  1886  0899  289E               	goto	l7239
  1887  089A                     l1008:	
  1888                           
  1889                           ;main.c: 102: else if(!I2CState.Master)
  1890  089A  1B68               	btfsc	_I2CState^(0+256),6
  1891  089B  289E               	goto	l7239
  1892                           
  1893                           ;main.c: 103: InitI2CMaster();
  1894  089C  2759  3188         	fcall	_InitI2CMaster
  1895  089E                     l7239:	
  1896                           
  1897                           ;main.c: 121: if(Status.State == 'P'){
  1898  089E  0023               	movlb	3	; select bank3
  1899  089F  0853               	movf	_Status^(0+384),w	;volatile
  1900  08A0  3A50               	xorlw	80
  1901  08A1  1D03               	skipz
  1902  08A2  28A5               	goto	l7243
  1903                           
  1904                           ;main.c: 122: AsicPushWork();
  1905  08A3  20A8  3188         	fcall	_AsicPushWork
  1906  08A5                     l7243:	
  1907                           
  1908                           ;main.c: 123: }
  1909                           ;main.c: 125: ProcessIO();
  1910  08A5  2210  3188         	fcall	_ProcessIO
  1911  08A7  288C               	goto	l7227
  1912  08A8                     __end_of_main:	
  1913  08A8                     __ptext2453:	
  1914 ;; *************** function _AsicPushWork *****************
  1915 ;; Defined at:
  1916 ;;		line 106 in file "klondike.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;		None               void
  1923 ;; Registers used:
  1924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 1D/3
  1927 ;;		On exit  : 1D/1
  1928 ;;		Unchanged: FFE00/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1932 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1933 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1934 ;;Total ram usage:        2 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:   13
  1937 ;; This function calls:
  1938 ;;		___wmul
  1939 ;;		_SendAsicData
  1940 ;;		_AsicPreCalc
  1941 ;; This function is called by:
  1942 ;;		_ProcessCmd
  1943 ;;		_main
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function _AsicPushWork
  1949  08A8                     _AsicPushWork:	
  1950                           
  1951                           ;klondike.c: 107: Status.WorkID = WorkQue[WorkNow].WorkID;
  1952                           
  1953                           ; Regs used in _AsicPushWork: [wreg-status,0+pclath+cstack]
  1954  08A8  0022               	movlb	2	; select bank2
  1955  08A9  0855               	movf	_WorkNow^(0+256),w
  1956  08AA  0021               	movlb	1	; select bank1
  1957  08AB  00A0               	movwf	?___wmul^(0+128)
  1958  08AC  302D               	movlw	45
  1959  08AD  01A1               	clrf	(?___wmul+1)^(0+128)
  1960  08AE  00A2               	movwf	(?___wmul^(0+128)+2)
  1961  08AF  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  1962  08B0  20FF  3188         	fcall	___wmul
  1963  08B2  303C               	movlw	60
  1964  08B3  00E7               	movwf	??_AsicPushWork^(0+128)
  1965  08B4  3023               	movlw	35
  1966  08B5  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  1967  08B6  0820               	movf	?___wmul^(0+128),w
  1968  08B7  0767               	addwf	??_AsicPushWork^(0+128),w
  1969  08B8  0086               	movwf	6
  1970  08B9  0821               	movf	(?___wmul+1)^(0+128),w
  1971  08BA  3D68               	addwfc	(??_AsicPushWork+1)^(0+128),w
  1972  08BB  0087               	movwf	7
  1973  08BC  0801               	movf	1,w
  1974  08BD  0023               	movlb	3	; select bank3
  1975  08BE  00D7               	movwf	(_Status^(0+384)+4)	;volatile
  1976                           
  1977                           ;klondike.c: 108: SendAsicData(&WorkQue[WorkNow], 0x50);
  1978  08BF  303C               	movlw	60
  1979  08C0  0021               	movlb	1	; select bank1
  1980  08C1  00A6               	movwf	?_SendAsicData^(0+128)
  1981  08C2  3023               	movlw	35
  1982  08C3  00A7               	movwf	(?_SendAsicData^(0+128)+1)
  1983  08C4  0022               	movlb	2	; select bank2
  1984  08C5  0855               	movf	_WorkNow^(0+256),w
  1985  08C6  0021               	movlb	1	; select bank1
  1986  08C7  00A0               	movwf	?___wmul^(0+128)
  1987  08C8  302D               	movlw	45
  1988  08C9  01A1               	clrf	(?___wmul+1)^(0+128)
  1989  08CA  00A2               	movwf	(?___wmul^(0+128)+2)
  1990  08CB  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  1991  08CC  20FF  3188         	fcall	___wmul
  1992  08CE  0820               	movf	?___wmul^(0+128),w
  1993  08CF  00E7               	movwf	??_AsicPushWork^(0+128)
  1994  08D0  0821               	movf	(?___wmul+1)^(0+128),w
  1995  08D1  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  1996  08D2  0867               	movf	??_AsicPushWork^(0+128),w
  1997  08D3  07A6               	addwf	?_SendAsicData^(0+128),f
  1998  08D4  0868               	movf	(??_AsicPushWork^(0+128)+1),w
  1999  08D5  3DA7               	addwfc	(?_SendAsicData+1)^(0+128),f
  2000  08D6  3050               	movlw	80
  2001  08D7  00A8               	movwf	(?_SendAsicData^(0+128)+2)
  2002  08D8  2114  3188         	fcall	_SendAsicData
  2003                           
  2004                           ;klondike.c: 109: Status.HashCount = 0;
  2005  08DA  0023               	movlb	3	; select bank3
  2006  08DB  01DA               	clrf	(_Status^(0+384)+7)	;volatile
  2007  08DC  01DB               	clrf	((_Status+1)^(0+384)+7)	;volatile
  2008                           
  2009                           ;klondike.c: 110: Status.State ='W';
  2010  08DD  3057               	movlw	87
  2011  08DE  00D3               	movwf	_Status^(0+384)	;volatile
  2012                           
  2013                           ;klondike.c: 111: TMR0 = HashTime;
  2014  08DF  0022               	movlb	2	; select bank2
  2015  08E0  086F               	movf	_HashTime^(0+256),w
  2016  08E1  0020               	movlb	0	; select bank0
  2017  08E2  0095               	movwf	21	;volatile
  2018                           
  2019                           ;klondike.c: 112: if(Status.WorkQC > 0)
  2020  08E3  0023               	movlb	3	; select bank3
  2021  08E4  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2022  08E5  1903               	btfsc	3,2
  2023  08E6  0008               	return
  2024                           
  2025                           ;klondike.c: 113: AsicPreCalc(&WorkQue[WorkNow]);
  2026  08E7  303C               	movlw	60
  2027  08E8  0021               	movlb	1	; select bank1
  2028  08E9  00B0               	movwf	?_AsicPreCalc^(0+128)
  2029  08EA  3023               	movlw	35
  2030  08EB  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  2031  08EC  0022               	movlb	2	; select bank2
  2032  08ED  0855               	movf	_WorkNow^(0+256),w
  2033  08EE  0021               	movlb	1	; select bank1
  2034  08EF  00A0               	movwf	?___wmul^(0+128)
  2035  08F0  302D               	movlw	45
  2036  08F1  01A1               	clrf	(?___wmul+1)^(0+128)
  2037  08F2  00A2               	movwf	(?___wmul^(0+128)+2)
  2038  08F3  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2039  08F4  20FF  3188         	fcall	___wmul
  2040  08F6  0820               	movf	?___wmul^(0+128),w
  2041  08F7  00E7               	movwf	??_AsicPushWork^(0+128)
  2042  08F8  0821               	movf	(?___wmul+1)^(0+128),w
  2043  08F9  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  2044  08FA  0867               	movf	??_AsicPushWork^(0+128),w
  2045  08FB  07B0               	addwf	?_AsicPreCalc^(0+128),f
  2046  08FC  0868               	movf	(??_AsicPushWork^(0+128)+1),w
  2047  08FD  3DB1               	addwfc	(?_AsicPreCalc+1)^(0+128),f
  2048  08FE  2BBB               	ljmp	l6797
  2049  08FF                     __end_of_AsicPushWork:	
  2050  08FF                     __ptext2464:	
  2051 ;; *************** function ___wmul *****************
  2052 ;; Defined at:
  2053 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  multiplier      2    0[BANK1 ] unsigned int 
  2056 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  product         2    4[BANK1 ] unsigned int 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  2    0[BANK1 ] unsigned int 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0
  2063 ;; Tracked objects:
  2064 ;;		On entry : 1F/1
  2065 ;;		On exit  : 1F/1
  2066 ;;		Unchanged: FFFE0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2068 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2069 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2071 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;Total ram usage:        6 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:   11
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_ProcessCmd
  2079 ;;		_AsicPushWork
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function ___wmul
  2085  08FF                     ___wmul:	
  2086                           
  2087                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2088  08FF  01A4               	clrf	___wmul@product^(0+128)
  2089  0900  01A5               	clrf	(___wmul@product+1)^(0+128)
  2090  0901                     l7301:	
  2091  0901  1C20               	btfss	___wmul@multiplier^(0+128),0
  2092  0902  2907               	goto	l7305
  2093  0903  0822               	movf	___wmul@multiplicand^(0+128),w
  2094  0904  07A4               	addwf	___wmul@product^(0+128),f
  2095  0905  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  2096  0906  3DA5               	addwfc	(___wmul@product+1)^(0+128),f
  2097  0907                     l7305:	
  2098  0907  35A2               	lslf	___wmul@multiplicand^(0+128),f
  2099  0908  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  2100  0909  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
  2101  090A  0CA0               	rrf	___wmul@multiplier^(0+128),f
  2102  090B  0821               	movf	(___wmul@multiplier+1)^(0+128),w
  2103  090C  0420               	iorwf	___wmul@multiplier^(0+128),w
  2104  090D  1D03               	skipz
  2105  090E  2901               	goto	l7301
  2106  090F  0825               	movf	(___wmul@product+1)^(0+128),w
  2107  0910  00A1               	movwf	(?___wmul+1)^(0+128)
  2108  0911  0824               	movf	___wmul@product^(0+128),w
  2109  0912  00A0               	movwf	?___wmul^(0+128)
  2110  0913  0008               	return
  2111  0914                     __end_of___wmul:	
  2112  0914                     __ptext2456:	
  2113 ;; *************** function _SendAsicData *****************
  2114 ;; Defined at:
  2115 ;;		line 37 in file "asic.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  work            2    6[BANK1 ] PTR struct _worktask
  2118 ;;		 -> WorkQue(180), 
  2119 ;;  split           1    8[BANK1 ] unsigned char 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;		None               void
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0, pclath, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 1F/1
  2128 ;;		On exit  : 1F/2
  2129 ;;		Unchanged: FFE00/0
  2130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2131 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2134 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2135 ;;Total ram usage:        3 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:   12
  2138 ;; This function calls:
  2139 ;;		_Send32
  2140 ;; This function is called by:
  2141 ;;		_AsicPushWork
  2142 ;;		_DetectAsics
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _SendAsicData
  2148  0914                     _SendAsicData:	
  2149                           
  2150                           ;asic.c: 38: GIE = 0;
  2151                           
  2152                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  2153  0914  138B               	bcf	11,7	;volatile
  2154                           
  2155                           ;asic.c: 39: last_bit0 = 0x48; last_bit1 = 0x90;
  2156  0915  3048               	movlw	72
  2157  0916  0022               	movlb	2	; select bank2
  2158  0917  00DC               	movwf	_last_bit0^(0+256)
  2159  0918  3090               	movlw	144
  2160  0919  00DD               	movwf	_last_bit1^(0+256)
  2161                           
  2162                           ;asic.c: 40: send32_data = (WORD)&ClockCfg; send32_count = 2;
  2163  091A  30DE               	movlw	_ClockCfg& (0+255)
  2164  091B  00C3               	movwf	_send32_data^(0+256)
  2165  091C  3001               	movlw	1
  2166  091D  00C4               	movwf	(_send32_data+1)^(0+256)
  2167  091E  3002               	movlw	2
  2168  091F  00E1               	movwf	_send32_count^(0+256)
  2169                           
  2170                           ;asic.c: 41: Send32();
  2171  0920  2161  3188         	fcall	_Send32
  2172                           
  2173                           ;asic.c: 42: send32_data = (WORD)&work->Merkle; send32_count = 3;
  2174  0922  0021               	movlb	1	; select bank1
  2175  0923  0827               	movf	(SendAsicData@work+1)^(0+128),w
  2176  0924  0022               	movlb	2	; select bank2
  2177  0925  00C4               	movwf	(_send32_data+1)^(0+256)
  2178  0926  0021               	movlb	1	; select bank1
  2179  0927  0826               	movf	SendAsicData@work^(0+128),w
  2180  0928  0022               	movlb	2	; select bank2
  2181  0929  00C3               	movwf	_send32_data^(0+256)
  2182  092A  3021               	movlw	33
  2183  092B  07C3               	addwf	_send32_data^(0+256),f
  2184  092C  1803               	skipnc
  2185  092D  0AC4               	incf	(_send32_data+1)^(0+256),f
  2186  092E  3003               	movlw	3
  2187  092F  00E1               	movwf	_send32_count^(0+256)
  2188                           
  2189                           ;asic.c: 43: Send32();
  2190  0930  2161  3188         	fcall	_Send32
  2191                           
  2192                           ;asic.c: 44: send32_data = (WORD)&PrecalcHashes; send32_count = 5;
  2193  0932  30AF               	movlw	_PrecalcHashes& (0+255)
  2194  0933  00C3               	movwf	_send32_data^(0+256)
  2195  0934  3001               	movlw	1
  2196  0935  00C4               	movwf	(_send32_data+1)^(0+256)
  2197  0936  3005               	movlw	5
  2198  0937  00E1               	movwf	_send32_count^(0+256)
  2199                           
  2200                           ;asic.c: 45: Send32();
  2201  0938  2161  3188         	fcall	_Send32
  2202                           
  2203                           ;asic.c: 46: send32_data = (WORD)&work->MidState; send32_count = 8;
  2204  093A  0021               	movlb	1	; select bank1
  2205  093B  0827               	movf	(SendAsicData@work+1)^(0+128),w
  2206  093C  0022               	movlb	2	; select bank2
  2207  093D  00C4               	movwf	(_send32_data+1)^(0+256)
  2208  093E  0021               	movlb	1	; select bank1
  2209  093F  0826               	movf	SendAsicData@work^(0+128),w
  2210  0940  0022               	movlb	2	; select bank2
  2211  0941  00C3               	movwf	_send32_data^(0+256)
  2212  0942  0AC3               	incf	_send32_data^(0+256),f
  2213  0943  1903               	skipnz
  2214  0944  0AC4               	incf	(_send32_data+1)^(0+256),f
  2215  0945  3008               	movlw	8
  2216  0946  00E1               	movwf	_send32_count^(0+256)
  2217                           
  2218                           ;asic.c: 47: Send32();
  2219  0947  2161  3188         	fcall	_Send32
  2220                           
  2221                           ;asic.c: 48: send32_data = (WORD)&PrecalcHashes[5]; send32_count = 1;
  2222  0949  30C3               	movlw	(_PrecalcHashes+20)& (0+255)
  2223  094A  00C3               	movwf	_send32_data^(0+256)
  2224  094B  3001               	movlw	1
  2225  094C  00C4               	movwf	(_send32_data+1)^(0+256)
  2226  094D  01E1               	clrf	_send32_count^(0+256)
  2227  094E  0AE1               	incf	_send32_count^(0+256),f
  2228                           
  2229                           ;asic.c: 49: Send32();
  2230  094F  2161  3188         	fcall	_Send32
  2231                           
  2232                           ;asic.c: 50: last_bit0 = last_bit1 = split;
  2233  0951  0021               	movlb	1	; select bank1
  2234  0952  0828               	movf	SendAsicData@split^(0+128),w
  2235  0953  0022               	movlb	2	; select bank2
  2236  0954  00DD               	movwf	_last_bit1^(0+256)
  2237  0955  00DC               	movwf	_last_bit0^(0+256)
  2238                           
  2239                           ;asic.c: 51: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  2240  0956  3020               	movlw	_NonceRanges& (0+255)
  2241  0957  00C3               	movwf	_send32_data^(0+256)
  2242  0958  3003               	movlw	3
  2243  0959  00C4               	movwf	(_send32_data+1)^(0+256)
  2244  095A  0023               	movlb	3	; select bank3
  2245  095B  086B               	movf	_BankSize^(0+384),w
  2246  095C  0022               	movlb	2	; select bank2
  2247  095D  00E1               	movwf	_send32_count^(0+256)
  2248                           
  2249                           ;asic.c: 52: Send32();
  2250  095E  2161               	fcall	_Send32
  2251                           
  2252                           ;asic.c: 53: GIE = 1;
  2253  095F  178B               	bsf	11,7	;volatile
  2254  0960  0008               	return
  2255  0961                     __end_of_SendAsicData:	
  2256  0961                     __ptext2457:	
  2257 ;; *************** function _Send32 *****************
  2258 ;; Defined at:
  2259 ;;		line 57 in file "asic.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;		None               void
  2266 ;; Registers used:
  2267 ;;		wreg
  2268 ;; Tracked objects:
  2269 ;;		On entry : 1F/2
  2270 ;;		On exit  : 1F/2
  2271 ;;		Unchanged: FFE00/0
  2272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:   11
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_SendAsicData
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           
  2288                           ;psect for function _Send32
  2289  0961                     _Send32:	
  2290                           
  2291                           ; Regs used in _Send32: [wreg]
  2292  0961  0022               	banksel	270	;# 
  2293  0962  0843               	movf	_send32_data& (0+127),w	;# 
  2294  0963  0086               	movwf	6	;# 
  2295  0964  0844               	movf	(_send32_data+1)& (0+127),w	;# 
  2296  0965  0087               	movwf	7	;# 
  2297  0966                     next_word:	
  2298                           
  2299                           ;# 
  2300  0966  3048               	movlw	72	;# 
  2301  0967  018E               	clrf	14	;# 
  2302  0968  1801               	btfsc	1,0	;# 
  2303  0969  3090               	movlw	144	;# 
  2304  096A  008E               	movwf	14	;# 
  2305  096B  3048               	movlw	72	;# 
  2306  096C  018E               	clrf	14	;# 
  2307  096D  1881               	btfsc	1,1	;# 
  2308  096E  3090               	movlw	144	;# 
  2309  096F  008E               	movwf	14	;# 
  2310  0970  3048               	movlw	72	;# 
  2311  0971  018E               	clrf	14	;# 
  2312  0972  1901               	btfsc	1,2	;# 
  2313  0973  3090               	movlw	144	;# 
  2314  0974  008E               	movwf	14	;# 
  2315  0975  3048               	movlw	72	;# 
  2316  0976  018E               	clrf	14	;# 
  2317  0977  1981               	btfsc	1,3	;# 
  2318  0978  3090               	movlw	144	;# 
  2319  0979  008E               	movwf	14	;# 
  2320  097A  3048               	movlw	72	;# 
  2321  097B  018E               	clrf	14	;# 
  2322  097C  1A01               	btfsc	1,4	;# 
  2323  097D  3090               	movlw	144	;# 
  2324  097E  008E               	movwf	14	;# 
  2325  097F  3048               	movlw	72	;# 
  2326  0980  018E               	clrf	14	;# 
  2327  0981  1A81               	btfsc	1,5	;# 
  2328  0982  3090               	movlw	144	;# 
  2329  0983  008E               	movwf	14	;# 
  2330  0984  3048               	movlw	72	;# 
  2331  0985  018E               	clrf	14	;# 
  2332  0986  1B01               	btfsc	1,6	;# 
  2333  0987  3090               	movlw	144	;# 
  2334  0988  008E               	movwf	14	;# 
  2335  0989  3048               	movlw	72	;# 
  2336  098A  018E               	clrf	14	;# 
  2337  098B  1B81               	btfsc	1,7	;# 
  2338  098C  3090               	movlw	144	;# 
  2339  098D  008E               	movwf	14	;# 
  2340  098E  3141               	addfsr 1,1	;# 
  2341  098F  3048               	movlw	72	;# 
  2342  0990  018E               	clrf	14	;# 
  2343  0991  1801               	btfsc	1,0	;# 
  2344  0992  3090               	movlw	144	;# 
  2345  0993  008E               	movwf	14	;# 
  2346  0994  3048               	movlw	72	;# 
  2347  0995  018E               	clrf	14	;# 
  2348  0996  1881               	btfsc	1,1	;# 
  2349  0997  3090               	movlw	144	;# 
  2350  0998  008E               	movwf	14	;# 
  2351  0999  3048               	movlw	72	;# 
  2352  099A  018E               	clrf	14	;# 
  2353  099B  1901               	btfsc	1,2	;# 
  2354  099C  3090               	movlw	144	;# 
  2355  099D  008E               	movwf	14	;# 
  2356  099E  3048               	movlw	72	;# 
  2357  099F  018E               	clrf	14	;# 
  2358  09A0  1981               	btfsc	1,3	;# 
  2359  09A1  3090               	movlw	144	;# 
  2360  09A2  008E               	movwf	14	;# 
  2361  09A3  3048               	movlw	72	;# 
  2362  09A4  018E               	clrf	14	;# 
  2363  09A5  1A01               	btfsc	1,4	;# 
  2364  09A6  3090               	movlw	144	;# 
  2365  09A7  008E               	movwf	14	;# 
  2366  09A8  3048               	movlw	72	;# 
  2367  09A9  018E               	clrf	14	;# 
  2368  09AA  1A81               	btfsc	1,5	;# 
  2369  09AB  3090               	movlw	144	;# 
  2370  09AC  008E               	movwf	14	;# 
  2371  09AD  3048               	movlw	72	;# 
  2372  09AE  018E               	clrf	14	;# 
  2373  09AF  1B01               	btfsc	1,6	;# 
  2374  09B0  3090               	movlw	144	;# 
  2375  09B1  008E               	movwf	14	;# 
  2376  09B2  3048               	movlw	72	;# 
  2377  09B3  018E               	clrf	14	;# 
  2378  09B4  1B81               	btfsc	1,7	;# 
  2379  09B5  3090               	movlw	144	;# 
  2380  09B6  008E               	movwf	14	;# 
  2381  09B7  3141               	addfsr 1,1	;# 
  2382  09B8  3048               	movlw	72	;# 
  2383  09B9  018E               	clrf	14	;# 
  2384  09BA  1801               	btfsc	1,0	;# 
  2385  09BB  3090               	movlw	144	;# 
  2386  09BC  008E               	movwf	14	;# 
  2387  09BD  3048               	movlw	72	;# 
  2388  09BE  018E               	clrf	14	;# 
  2389  09BF  1881               	btfsc	1,1	;# 
  2390  09C0  3090               	movlw	144	;# 
  2391  09C1  008E               	movwf	14	;# 
  2392  09C2  3048               	movlw	72	;# 
  2393  09C3  018E               	clrf	14	;# 
  2394  09C4  1901               	btfsc	1,2	;# 
  2395  09C5  3090               	movlw	144	;# 
  2396  09C6  008E               	movwf	14	;# 
  2397  09C7  3048               	movlw	72	;# 
  2398  09C8  018E               	clrf	14	;# 
  2399  09C9  1981               	btfsc	1,3	;# 
  2400  09CA  3090               	movlw	144	;# 
  2401  09CB  008E               	movwf	14	;# 
  2402  09CC  3048               	movlw	72	;# 
  2403  09CD  018E               	clrf	14	;# 
  2404  09CE  1A01               	btfsc	1,4	;# 
  2405  09CF  3090               	movlw	144	;# 
  2406  09D0  008E               	movwf	14	;# 
  2407  09D1  3048               	movlw	72	;# 
  2408  09D2  018E               	clrf	14	;# 
  2409  09D3  1A81               	btfsc	1,5	;# 
  2410  09D4  3090               	movlw	144	;# 
  2411  09D5  008E               	movwf	14	;# 
  2412  09D6  3048               	movlw	72	;# 
  2413  09D7  018E               	clrf	14	;# 
  2414  09D8  1B01               	btfsc	1,6	;# 
  2415  09D9  3090               	movlw	144	;# 
  2416  09DA  008E               	movwf	14	;# 
  2417  09DB  3048               	movlw	72	;# 
  2418  09DC  018E               	clrf	14	;# 
  2419  09DD  1B81               	btfsc	1,7	;# 
  2420  09DE  3090               	movlw	144	;# 
  2421  09DF  008E               	movwf	14	;# 
  2422  09E0  3141               	addfsr 1,1	;# 
  2423  09E1  3048               	movlw	72	;# 
  2424  09E2  018E               	clrf	14	;# 
  2425  09E3  1801               	btfsc	1,0	;# 
  2426  09E4  3090               	movlw	144	;# 
  2427  09E5  008E               	movwf	14	;# 
  2428  09E6  3048               	movlw	72	;# 
  2429  09E7  018E               	clrf	14	;# 
  2430  09E8  1881               	btfsc	1,1	;# 
  2431  09E9  3090               	movlw	144	;# 
  2432  09EA  008E               	movwf	14	;# 
  2433  09EB  3048               	movlw	72	;# 
  2434  09EC  018E               	clrf	14	;# 
  2435  09ED  1901               	btfsc	1,2	;# 
  2436  09EE  3090               	movlw	144	;# 
  2437  09EF  008E               	movwf	14	;# 
  2438  09F0  3048               	movlw	72	;# 
  2439  09F1  018E               	clrf	14	;# 
  2440  09F2  1981               	btfsc	1,3	;# 
  2441  09F3  3090               	movlw	144	;# 
  2442  09F4  008E               	movwf	14	;# 
  2443  09F5  3048               	movlw	72	;# 
  2444  09F6  018E               	clrf	14	;# 
  2445  09F7  1A01               	btfsc	1,4	;# 
  2446  09F8  3090               	movlw	144	;# 
  2447  09F9  008E               	movwf	14	;# 
  2448  09FA  3048               	movlw	72	;# 
  2449  09FB  018E               	clrf	14	;# 
  2450  09FC  1A81               	btfsc	1,5	;# 
  2451  09FD  3090               	movlw	144	;# 
  2452  09FE  008E               	movwf	14	;# 
  2453  09FF  3048               	movlw	72	;# 
  2454  0A00  018E               	clrf	14	;# 
  2455  0A01  1B01               	btfsc	1,6	;# 
  2456  0A02  3090               	movlw	144	;# 
  2457  0A03  008E               	movwf	14	;# 
  2458  0A04  085C               	movf	_last_bit0& (0+127),w	;# 
  2459  0A05  018E               	clrf	14	;# 
  2460  0A06  1B81               	btfsc	1,7	;# 
  2461  0A07  085D               	movf	_last_bit1& (0+127),w	;# 
  2462  0A08  008E               	movwf	14	;# 
  2463  0A09  3141               	addfsr 1,1	;# 
  2464  0A0A  0BE1               	decfsz	_send32_count& (0+127),f	;# 
  2465  0A0B  2966               	goto	next_word	;# 
  2466                           
  2467                           ;asic.c: 306: LATC = 0xD8;;
  2468  0A0C  30D8               	movlw	216
  2469  0A0D  0022               	movlb	2	; select bank2
  2470  0A0E  008E               	movwf	14	;volatile
  2471  0A0F  0008               	return
  2472  0A10                     __end_of_Send32:	
  2473  0A10                     __ptext2445:	
  2474 ;; *************** function _ProcessIO *****************
  2475 ;; Defined at:
  2476 ;;		line 163 in file "main.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  numBytesRead    1   78[BANK1 ] unsigned char 
  2481 ;; Return value:  Size  Location     Type
  2482 ;;		None               void
  2483 ;; Registers used:
  2484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 1D/3
  2487 ;;		On exit  : 1F/1
  2488 ;;		Unchanged: FFE00/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2491 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2493 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2494 ;;Total ram usage:        1 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:   15
  2497 ;; This function calls:
  2498 ;;		_ProcessCmd
  2499 ;;		_getsUSBUSART
  2500 ;;		_I2CRelay
  2501 ;;		_CDCTxService
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function _ProcessIO
  2509  0A10                     _ProcessIO:	
  2510                           
  2511                           ;main.c: 164: BYTE numBytesRead;
  2512                           ;main.c: 166: if(USBDeviceState == DETACHED_STATE) {
  2513                           
  2514                           ; Regs used in _ProcessIO: [allreg]
  2515  0A10  0022               	movlb	2	; select bank2
  2516  0A11  08D1               	movf	_USBDeviceState^(0+256),f
  2517  0A12  1D03               	skipz
  2518  0A13  2A1C               	goto	l7263
  2519                           
  2520                           ;main.c: 167: if(I2CCount > 0) {
  2521  0A14  084A               	movf	_I2CCount^(0+256),w
  2522  0A15  1903               	btfsc	3,2
  2523  0A16  2A37               	goto	l7275
  2524                           
  2525                           ;main.c: 168: ProcessCmd(USB_Out_Buffer);
  2526  0A17  3020               	movlw	_USB_Out_Buffer& (0+255)
  2527  0A18  2239  3188         	fcall	_ProcessCmd
  2528                           
  2529                           ;main.c: 169: I2CCount = 0;
  2530  0A1A  01CA               	clrf	_I2CCount^(0+256)
  2531  0A1B  2A37               	goto	l7275
  2532  0A1C                     l7263:	
  2533                           
  2534                           ;main.c: 172: else if((cdc_trf_state == 0)) {
  2535  0A1C  08D8               	movf	_cdc_trf_state^(0+256),f
  2536  0A1D  1D03               	skipz
  2537  0A1E  2A37               	goto	l7275
  2538                           
  2539                           ;main.c: 173: numBytesRead = getsUSBUSART(USB_Out_Buffer, 64);
  2540  0A1F  3040               	movlw	64
  2541  0A20  0021               	movlb	1	; select bank1
  2542  0A21  00A7               	movwf	?_getsUSBUSART^(0+128)
  2543  0A22  3020               	movlw	_USB_Out_Buffer& (0+255)
  2544  0A23  26FE  3188         	fcall	_getsUSBUSART
  2545  0A25  0021               	movlb	1	; select bank1
  2546  0A26  00EE               	movwf	ProcessIO@numBytesRead^(0+128)
  2547                           
  2548                           ;main.c: 174: if(numBytesRead != 0) {
  2549  0A27  086E               	movf	ProcessIO@numBytesRead^(0+128),w
  2550  0A28  1903               	btfsc	3,2
  2551  0A29  2A37               	goto	l7275
  2552                           
  2553                           ;main.c: 175: if( USB_Out_Buffer[1] != 0x00 )
  2554  0A2A  0028               	movlb	8	; select bank8
  2555  0A2B  0821               	movf	(_USB_Out_Buffer^(0+1024)+1),w
  2556  0A2C  1903               	btfsc	3,2
  2557  0A2D  2A35               	goto	l7273
  2558                           
  2559                           ;main.c: 176: I2CRelay(USB_Out_Buffer, numBytesRead);
  2560  0A2E  0021               	movlb	1	; select bank1
  2561  0A2F  086E               	movf	ProcessIO@numBytesRead^(0+128),w
  2562  0A30  00A0               	movwf	?_I2CRelay^(0+128)
  2563  0A31  3020               	movlw	_USB_Out_Buffer& (0+255)
  2564  0A32  26E9  3188         	fcall	_I2CRelay
  2565  0A34  2A37               	goto	l7275
  2566  0A35                     l7273:	
  2567                           
  2568                           ;main.c: 177: else
  2569                           ;main.c: 178: ProcessCmd(USB_Out_Buffer);
  2570  0A35  3020               	movlw	_USB_Out_Buffer& (0+255)
  2571  0A36  2239               	fcall	_ProcessCmd
  2572  0A37                     l7275:	
  2573                           
  2574                           ;main.c: 179: }
  2575                           ;main.c: 180: }
  2576                           ;main.c: 182: CDCTxService();
  2577  0A37  3187  2F37         	ljmp	l6673
  2578  0A39                     __end_of_ProcessIO:	
  2579  0A39                     __ptext2450:	
  2580 ;; *************** function _ProcessCmd *****************
  2581 ;; Defined at:
  2582 ;;		line 47 in file "klondike.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  cmd             1    wreg     PTR unsigned char 
  2585 ;;		 -> USB_Out_Buffer(64), 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  cmd             1   77[BANK1 ] PTR unsigned char 
  2588 ;;		 -> USB_Out_Buffer(64), 
  2589 ;; Return value:  Size  Location     Type
  2590 ;;		None               void
  2591 ;; Registers used:
  2592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2593 ;; Tracked objects:
  2594 ;;		On entry : 15/2
  2595 ;;		On exit  : 1F/2
  2596 ;;		Unchanged: FFE00/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2599 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2600 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2601 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  2602 ;;Total ram usage:        5 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:   14
  2605 ;; This function calls:
  2606 ;;		___wmul
  2607 ;;		_AsicPreCalc
  2608 ;;		_AsicPushWork
  2609 ;;		_SendCmdReply
  2610 ;;		___lwdiv
  2611 ;; This function is called by:
  2612 ;;		_ProcessIO
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           
  2617                           ;psect for function _ProcessCmd
  2618  0A39                     _ProcessCmd:	
  2619                           
  2620                           ; Regs used in _ProcessCmd: [allreg]
  2621                           ;ProcessCmd@cmd stored from wreg
  2622  0A39  0021               	movlb	1	; select bank1
  2623  0A3A  00ED               	movwf	ProcessCmd@cmd^(0+128)
  2624                           
  2625                           ;klondike.c: 50: switch(cmd[0]) {
  2626  0A3B  2B68               	goto	l7097
  2627  0A3C                     l7039:	
  2628                           
  2629                           ;klondike.c: 52: if( Status.WorkQC < 4-1 ) {
  2630  0A3C  3003               	movlw	3
  2631  0A3D  0023               	movlb	3	; select bank3
  2632  0A3E  0256               	subwf	(_Status^(0+384)+3),w	;volatile
  2633  0A3F  1803               	skipnc
  2634  0A40  2A89               	goto	l821
  2635                           
  2636                           ;klondike.c: 53: WorkQue[ (WorkNow + Status.WorkQC) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2637  0A41  0021               	movlb	1	; select bank1
  2638  0A42  086D               	movf	ProcessCmd@cmd^(0+128),w
  2639  0A43  3E02               	addlw	2
  2640  0A44  0086               	movwf	6
  2641  0A45  3004               	movlw	4	; select bank8/9
  2642  0A46  0087               	movwf	7
  2643  0A47  0022               	movlb	2	; select bank2
  2644  0A48  0855               	movf	_WorkNow^(0+256),w
  2645  0A49  0021               	movlb	1	; select bank1
  2646  0A4A  00A0               	movwf	?___wmul^(0+128)
  2647  0A4B  01A1               	clrf	(?___wmul+1)^(0+128)
  2648  0A4C  0023               	movlb	3	; select bank3
  2649  0A4D  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2650  0A4E  0021               	movlb	1	; select bank1
  2651  0A4F  07A0               	addwf	?___wmul^(0+128),f
  2652  0A50  1803               	skipnc
  2653  0A51  0AA1               	incf	(?___wmul+1)^(0+128),f
  2654  0A52  3003               	movlw	3
  2655  0A53  05A0               	andwf	?___wmul^(0+128),f
  2656  0A54  302D               	movlw	45
  2657  0A55  01A1               	clrf	(?___wmul+1)^(0+128)
  2658  0A56  00A2               	movwf	(?___wmul^(0+128)+2)
  2659  0A57  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2660  0A58  20FF  3188         	fcall	___wmul
  2661  0A5A  303C               	movlw	60
  2662  0A5B  00E9               	movwf	??_ProcessCmd^(0+128)
  2663  0A5C  3023               	movlw	35
  2664  0A5D  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2665  0A5E  0820               	movf	?___wmul^(0+128),w
  2666  0A5F  0769               	addwf	??_ProcessCmd^(0+128),w
  2667  0A60  0084               	movwf	4
  2668  0A61  0821               	movf	(?___wmul+1)^(0+128),w
  2669  0A62  3D6A               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2670  0A63  0085               	movwf	5
  2671  0A64  302D               	movlw	45
  2672  0A65  00FF               	movwf	127
  2673  0A66                     u5220:	
  2674  0A66  0016               	moviw fsr1++
  2675  0A67  001A               	movwi fsr0++
  2676  0A68  0BFF               	decfsz	127,f
  2677  0A69  2A66               	goto	u5220
  2678                           
  2679                           ;klondike.c: 54: if(Status.WorkQC++ == 0) {
  2680  0A6A  0023               	movlb	3	; select bank3
  2681  0A6B  0AD6               	incf	(_Status^(0+384)+3),f	;volatile
  2682  0A6C  0B56               	decfsz	(_Status^(0+384)+3),w	;volatile
  2683  0A6D  2A89               	goto	l821
  2684  0A6E                     L7:	
  2685                           
  2686                           ;klondike.c: 55: AsicPreCalc(&WorkQue[WorkNow]);
  2687  0A6E  303C               	movlw	60
  2688  0A6F  0021               	movlb	1	; select bank1
  2689  0A70  00B0               	movwf	?_AsicPreCalc^(0+128)
  2690  0A71  3023               	movlw	35
  2691  0A72  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  2692  0A73  0022               	movlb	2	; select bank2
  2693  0A74  0855               	movf	_WorkNow^(0+256),w
  2694  0A75  0021               	movlb	1	; select bank1
  2695  0A76  00A0               	movwf	?___wmul^(0+128)
  2696  0A77  302D               	movlw	45
  2697  0A78  01A1               	clrf	(?___wmul+1)^(0+128)
  2698  0A79  00A2               	movwf	(?___wmul^(0+128)+2)
  2699  0A7A  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2700  0A7B  20FF  3188         	fcall	___wmul
  2701  0A7D  0820               	movf	?___wmul^(0+128),w
  2702  0A7E  00E9               	movwf	??_ProcessCmd^(0+128)
  2703  0A7F  0821               	movf	(?___wmul+1)^(0+128),w
  2704  0A80  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2705  0A81  0869               	movf	??_ProcessCmd^(0+128),w
  2706  0A82  07B0               	addwf	?_AsicPreCalc^(0+128),f
  2707  0A83  086A               	movf	(??_ProcessCmd^(0+128)+1),w
  2708  0A84  3DB1               	addwfc	(?_AsicPreCalc+1)^(0+128),f
  2709  0A85  23BB  3188         	fcall	_AsicPreCalc
  2710                           
  2711                           ;klondike.c: 56: AsicPushWork();
  2712  0A87  20A8  3188         	fcall	_AsicPushWork
  2713  0A89                     l821:	
  2714                           
  2715                           ;klondike.c: 57: }
  2716                           ;klondike.c: 58: }
  2717                           ;klondike.c: 59: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2718  0A89  0021               	movlb	1	; select bank1
  2719  0A8A  086D               	movf	ProcessCmd@cmd^(0+128),w
  2720  0A8B  00A2               	movwf	?_SendCmdReply^(0+128)
  2721  0A8C  3004               	movlw	4
  2722  0A8D  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2723  0A8E  30D3               	movlw	_Status& (0+255)
  2724  0A8F  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2725  0A90  3001               	movlw	1
  2726  0A91  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  2727  0A92  300B               	movlw	11
  2728  0A93  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2729  0A94  2386  3188         	fcall	_SendCmdReply
  2730                           
  2731                           ;klondike.c: 60: break;
  2732  0A96  2B83               	goto	l823
  2733  0A97                     l7047:	
  2734                           
  2735                           ;klondike.c: 62: Status.WorkQC = WorkNow = 0;
  2736  0A97  0022               	movlb	2	; select bank2
  2737  0A98  01D5               	clrf	_WorkNow^(0+256)
  2738  0A99  0023               	movlb	3	; select bank3
  2739  0A9A  01D6               	clrf	(_Status^(0+384)+3)	;volatile
  2740                           
  2741                           ;klondike.c: 63: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2742  0A9B  0021               	movlb	1	; select bank1
  2743  0A9C  086D               	movf	ProcessCmd@cmd^(0+128),w
  2744  0A9D  3E02               	addlw	2
  2745  0A9E  0086               	movwf	6
  2746  0A9F  3004               	movlw	4	; select bank8/9
  2747  0AA0  0087               	movwf	7
  2748  0AA1  0022               	movlb	2	; select bank2
  2749  0AA2  0855               	movf	_WorkNow^(0+256),w
  2750  0AA3  0021               	movlb	1	; select bank1
  2751  0AA4  00A0               	movwf	?___wmul^(0+128)
  2752  0AA5  01A1               	clrf	(?___wmul+1)^(0+128)
  2753  0AA6  0023               	movlb	3	; select bank3
  2754  0AA7  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2755  0AA8  0021               	movlb	1	; select bank1
  2756  0AA9  07A0               	addwf	?___wmul^(0+128),f
  2757  0AAA  1803               	skipnc
  2758  0AAB  0AA1               	incf	(?___wmul+1)^(0+128),f
  2759  0AAC  3003               	movlw	3
  2760  0AAD  05A0               	andwf	?___wmul^(0+128),f
  2761  0AAE  302D               	movlw	45
  2762  0AAF  01A1               	clrf	(?___wmul+1)^(0+128)
  2763  0AB0  00A2               	movwf	(?___wmul^(0+128)+2)
  2764  0AB1  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2765  0AB2  20FF  3188         	fcall	___wmul
  2766  0AB4  303C               	movlw	60
  2767  0AB5  00E9               	movwf	??_ProcessCmd^(0+128)
  2768  0AB6  3023               	movlw	35
  2769  0AB7  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2770  0AB8  0820               	movf	?___wmul^(0+128),w
  2771  0AB9  0769               	addwf	??_ProcessCmd^(0+128),w
  2772  0ABA  0084               	movwf	4
  2773  0ABB  0821               	movf	(?___wmul+1)^(0+128),w
  2774  0ABC  3D6A               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2775  0ABD  0085               	movwf	5
  2776  0ABE  302D               	movlw	45
  2777  0ABF  00FF               	movwf	127
  2778  0AC0                     u5240:	
  2779  0AC0  0016               	moviw fsr1++
  2780  0AC1  001A               	movwi fsr0++
  2781  0AC2  0BFF               	decfsz	127,f
  2782  0AC3  2AC0               	goto	u5240
  2783  0AC4  0023               	movlb	3	; select bank3
  2784  0AC5  0AD6               	incf	(_Status^(0+384)+3),f	;volatile
  2785  0AC6  2A6E               	goto	L7
  2786  0AC7                     l7059:	
  2787                           ;klondike.c: 65: AsicPushWork();
  2788                           
  2789                           ;klondike.c: 64: AsicPreCalc(&WorkQue[WorkNow]);
  2790                           
  2791                           
  2792                           ;klondike.c: 69: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  2793  0AC7  086D               	movf	ProcessCmd@cmd^(0+128),w
  2794  0AC8  00A2               	movwf	?_SendCmdReply^(0+128)
  2795  0AC9  3004               	movlw	4
  2796  0ACA  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2797  0ACB  3055               	movlw	low (_ID| (0+32768))
  2798  0ACC  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2799  0ACD  3091               	movlw	high (_ID| (0+32768))
  2800  0ACE  00A5               	movwf	((?_SendCmdReply+2)^(0+128)+1)
  2801  0ACF  300D               	movlw	13
  2802  0AD0  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2803  0AD1  2386  3188         	fcall	_SendCmdReply
  2804                           
  2805                           ;klondike.c: 70: break;
  2806  0AD3  2B83               	goto	l823
  2807  0AD4                     l7063:	
  2808                           
  2809                           ;klondike.c: 75: if( cmd[2] != 0 ) {
  2810  0AD4  086D               	movf	ProcessCmd@cmd^(0+128),w
  2811  0AD5  3E02               	addlw	2
  2812  0AD6  0086               	movwf	6
  2813  0AD7  3004               	movlw	4	; select bank8/9
  2814  0AD8  0087               	movwf	7
  2815  0AD9  0801               	movf	1,w
  2816  0ADA  3A00               	xorlw	0
  2817  0ADB  1903               	skipnz
  2818  0ADC  2B29               	goto	l7081
  2819                           
  2820                           ;klondike.c: 76: Cfg = *(WORKCFG *)(cmd+2);
  2821  0ADD  086D               	movf	ProcessCmd@cmd^(0+128),w
  2822  0ADE  3E02               	addlw	2
  2823  0ADF  0086               	movwf	6
  2824  0AE0  30E6               	movlw	low _Cfg
  2825  0AE1  0084               	movwf	4
  2826  0AE2  3001               	movlw	high _Cfg
  2827  0AE3  0085               	movwf	5
  2828  0AE4  3005               	movlw	5
  2829  0AE5  00FF               	movwf	127
  2830  0AE6                     u5260:	
  2831  0AE6  0016               	moviw fsr1++
  2832  0AE7  001A               	movwi fsr0++
  2833  0AE8  0BFF               	decfsz	127,f
  2834  0AE9  2AE6               	goto	u5260
  2835                           
  2836                           ;klondike.c: 77: if(Cfg.HashClock < 500)
  2837  0AEA  3001               	movlw	1
  2838  0AEB  0023               	movlb	3	; select bank3
  2839  0AEC  0267               	subwf	(_Cfg+1)^(0+384),w
  2840  0AED  30F4               	movlw	244
  2841  0AEE  1903               	skipnz
  2842  0AEF  0266               	subwf	_Cfg^(0+384),w
  2843  0AF0  1803               	skipnc
  2844  0AF1  2AF6               	goto	l829
  2845                           
  2846                           ;klondike.c: 78: Cfg.HashClock = 500;
  2847  0AF2  30F4               	movlw	244
  2848  0AF3  00E6               	movwf	_Cfg^(0+384)
  2849  0AF4  3001               	movlw	1
  2850  0AF5  00E7               	movwf	(_Cfg^(0+384)+1)
  2851  0AF6                     l829:	
  2852                           
  2853                           ;klondike.c: 79: if(Cfg.HashClock > 900)
  2854  0AF6  3003               	movlw	3
  2855  0AF7  0267               	subwf	(_Cfg+1)^(0+384),w
  2856  0AF8  3085               	movlw	133
  2857  0AF9  1903               	skipnz
  2858  0AFA  0266               	subwf	_Cfg^(0+384),w
  2859  0AFB  1C03               	skipc
  2860  0AFC  2B01               	goto	l830
  2861                           
  2862                           ;klondike.c: 80: Cfg.HashClock = 900;
  2863  0AFD  3084               	movlw	132
  2864  0AFE  00E6               	movwf	_Cfg^(0+384)
  2865  0AFF  3003               	movlw	3
  2866  0B00  00E7               	movwf	(_Cfg^(0+384)+1)
  2867  0B01                     l830:	
  2868                           
  2869                           ;klondike.c: 81: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00000003;
  2870  0B01  0866               	movf	_Cfg^(0+384),w
  2871  0B02  00DE               	movwf	_ClockCfg^(0+384)
  2872  0B03  0867               	movf	(_Cfg+1)^(0+384),w
  2873  0B04  00DF               	movwf	(_ClockCfg^(0+384)+1)
  2874  0B05  3012               	movlw	18
  2875  0B06  01E0               	clrf	(_ClockCfg^(0+384)+2)
  2876  0B07  01E1               	clrf	(_ClockCfg^(0+384)+3)
  2877  0B08                     u5295:	
  2878  0B08  35DE               	lslf	_ClockCfg^(0+384),f
  2879  0B09  0DDF               	rlf	(_ClockCfg+1)^(0+384),f
  2880  0B0A  0DE0               	rlf	(_ClockCfg+2)^(0+384),f
  2881  0B0B  0DE1               	rlf	(_ClockCfg+3)^(0+384),f
  2882  0B0C  0B89               	decfsz	9,f
  2883  0B0D  2B08               	goto	u5295
  2884  0B0E  3003               	movlw	3
  2885  0B0F  04DE               	iorwf	_ClockCfg^(0+384),f
  2886  0B10  3000               	movlw	0
  2887  0B11  04DF               	iorwf	(_ClockCfg+1)^(0+384),f
  2888  0B12  04E0               	iorwf	(_ClockCfg+2)^(0+384),f
  2889  0B13  04E1               	iorwf	(_ClockCfg+3)^(0+384),f
  2890                           
  2891                           ;klondike.c: 82: HashTime = 256-(24000/Cfg.HashClock);
  2892  0B14  0867               	movf	(_Cfg+1)^(0+384),w
  2893  0B15  0021               	movlb	1	; select bank1
  2894  0B16  00A1               	movwf	(?___lwdiv+1)^(0+128)
  2895  0B17  0023               	movlb	3	; select bank3
  2896  0B18  0866               	movf	_Cfg^(0+384),w
  2897  0B19  0021               	movlb	1	; select bank1
  2898  0B1A  00A0               	movwf	?___lwdiv^(0+128)
  2899  0B1B  30C0               	movlw	192
  2900  0B1C  00A2               	movwf	(?___lwdiv^(0+128)+2)
  2901  0B1D  305D               	movlw	93
  2902  0B1E  00A3               	movwf	(?___lwdiv^(0+128)+3)
  2903  0B1F  26C4  3188         	fcall	___lwdiv
  2904  0B21  0820               	movf	?___lwdiv^(0+128),w
  2905  0B22  3C00               	sublw	0
  2906  0B23  0022               	movlb	2	; select bank2
  2907  0B24  00EF               	movwf	_HashTime^(0+256)
  2908                           
  2909                           ;klondike.c: 83: PWM1DCH = Cfg.FanTarget;
  2910  0B25  0023               	movlb	3	; select bank3
  2911  0B26  086A               	movf	(_Cfg^(0+384)+4),w
  2912  0B27  002C               	movlb	12	; select bank12
  2913  0B28  0092               	movwf	18	;volatile
  2914  0B29                     l7081:	
  2915                           
  2916                           ;klondike.c: 84: }
  2917                           ;klondike.c: 85: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  2918  0B29  0021               	movlb	1	; select bank1
  2919  0B2A  086D               	movf	ProcessCmd@cmd^(0+128),w
  2920  0B2B  00A2               	movwf	?_SendCmdReply^(0+128)
  2921  0B2C  3004               	movlw	4
  2922  0B2D  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2923  0B2E  30E6               	movlw	_Cfg& (0+255)
  2924  0B2F  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2925  0B30  3001               	movlw	1
  2926  0B31  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  2927  0B32  3005               	movlw	5
  2928  0B33  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2929  0B34  2386  3188         	fcall	_SendCmdReply
  2930                           
  2931                           ;klondike.c: 86: break;
  2932  0B36  2B83               	goto	l823
  2933  0B37                     l7083:	
  2934                           
  2935                           ;klondike.c: 88: LATAbits.LATA4 = (cmd[2] == '1');
  2936  0B37  086D               	movf	ProcessCmd@cmd^(0+128),w
  2937  0B38  3E02               	addlw	2
  2938  0B39  0086               	movwf	6
  2939  0B3A  3004               	movlw	4	; select bank8/9
  2940  0B3B  0087               	movwf	7
  2941  0B3C  0801               	movf	1,w
  2942  0B3D  3A31               	xorlw	49
  2943  0B3E  3000               	movlw	0
  2944  0B3F  1903               	skipnz
  2945  0B40  3001               	movlw	1
  2946  0B41  00E9               	movwf	??_ProcessCmd^(0+128)
  2947  0B42  0EE9               	swapf	??_ProcessCmd^(0+128),f
  2948  0B43  0022               	movlb	2	; select bank2
  2949  0B44  080C               	movf	12,w	;volatile
  2950  0B45  0021               	movlb	1	; select bank1
  2951  0B46  0669               	xorwf	??_ProcessCmd^(0+128),w
  2952  0B47  39EF               	andlw	-17
  2953  0B48  0669               	xorwf	??_ProcessCmd^(0+128),w
  2954  0B49  0022               	movlb	2	; select bank2
  2955  0B4A  008C               	movwf	12	;volatile
  2956                           
  2957                           ;klondike.c: 89: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  2958  0B4B  0021               	movlb	1	; select bank1
  2959  0B4C  086D               	movf	ProcessCmd@cmd^(0+128),w
  2960  0B4D  3E02               	addlw	2
  2961  0B4E  0086               	movwf	6
  2962  0B4F  0801               	movf	1,w
  2963  0B50  3A31               	xorlw	49
  2964  0B51  1903               	skipnz
  2965  0B52  2B55               	goto	l7089
  2966  0B53  3044               	movlw	68
  2967  0B54  2B56               	goto	L8
  2968  0B55                     l7089:	
  2969  0B55  3052               	movlw	82
  2970  0B56                     L8:	
  2971  0B56  00EB               	movwf	_ProcessCmd$3028^(0+128)
  2972  0B57  01EC               	clrf	(_ProcessCmd$3028+1)^(0+128)
  2973  0B58  0023               	movlb	3	; select bank3
  2974  0B59  00D3               	movwf	_Status^(0+384)	;volatile
  2975  0B5A  2A89               	goto	l821
  2976  0B5B                     l7093:	
  2977                           
  2978                           ;klondike.c: 94: SendCmdReply(cmd, (char *)&I2CState, sizeof(I2CState));
  2979  0B5B  086D               	movf	ProcessCmd@cmd^(0+128),w
  2980  0B5C  00A2               	movwf	?_SendCmdReply^(0+128)
  2981  0B5D  3004               	movlw	4
  2982  0B5E  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2983  0B5F  3068               	movlw	_I2CState& (0+255)
  2984  0B60  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2985  0B61  3001               	movlw	1
  2986  0B62  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  2987  0B63  01A6               	clrf	(?_SendCmdReply^(0+128)+4)
  2988  0B64  0AA6               	incf	(?_SendCmdReply^(0+128)+4),f
  2989  0B65  2386  3188         	fcall	_SendCmdReply
  2990                           
  2991                           ;klondike.c: 98: break;
  2992  0B67  2B83               	goto	l823
  2993  0B68                     l7097:	
  2994  0B68  086D               	movf	ProcessCmd@cmd^(0+128),w
  2995  0B69  0086               	movwf	6
  2996  0B6A  3004               	movlw	4	; select bank8/9
  2997  0B6B  0087               	movwf	7
  2998  0B6C  0801               	movf	1,w
  2999                           
  3000                           ; Switch size 1, requested type "space"
  3001                           ; Number of cases is 7, Range of values is 65 to 90
  3002                           ; switch strategies available:
  3003                           ; Name         Instructions Cycles
  3004                           ; simple_byte           22    12 (average)
  3005                           ; direct_byte           61     9 (fixed)
  3006                           ; jumptable            263     9 (fixed)
  3007                           ;	Chosen strategy is simple_byte
  3008  0B6D  3A41               	xorlw	65	; case 65
  3009  0B6E  1903               	skipnz
  3010  0B6F  2A97               	goto	l7047
  3011  0B70  3A02               	xorlw	2	; case 67
  3012  0B71  1903               	skipnz
  3013  0B72  2AD4               	goto	l7063
  3014  0B73  3A06               	xorlw	6	; case 69
  3015  0B74  1903               	skipnz
  3016  0B75  2B37               	goto	l7083
  3017  0B76  3A0C               	xorlw	12	; case 73
  3018  0B77  1903               	skipnz
  3019  0B78  2AC7               	goto	l7059
  3020  0B79  3A1A               	xorlw	26	; case 83
  3021  0B7A  1903               	skipnz
  3022  0B7B  2A89               	goto	l821
  3023  0B7C  3A04               	xorlw	4	; case 87
  3024  0B7D  1903               	skipnz
  3025  0B7E  2A3C               	goto	l7039
  3026  0B7F  3A0D               	xorlw	13	; case 90
  3027  0B80  1903               	skipnz
  3028  0B81  2B5B               	goto	l7093
  3029  0B82  2B83               	goto	l823
  3030  0B83                     l823:	
  3031                           
  3032                           ;klondike.c: 102: LATAbits.LATA5 = 1;;
  3033  0B83  0022               	movlb	2	; select bank2
  3034  0B84  168C               	bsf	12,5	;volatile
  3035  0B85  0008               	return
  3036  0B86                     __end_of_ProcessCmd:	
  3037  0B86                     __ptext2451:	
  3038 ;; *************** function _SendCmdReply *****************
  3039 ;; Defined at:
  3040 ;;		line 186 in file "main.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  cmd             2    2[BANK1 ] PTR unsigned char 
  3043 ;;		 -> ResultRx@buf(7), USB_Out_Buffer(64), buf(16), 
  3044 ;;  data            2    4[BANK1 ] PTR unsigned char 
  3045 ;;		 -> ResultRx@buf(7), Cfg(5), ID(13), Status(11), 
  3046 ;;		 -> buf(16), I2CState(1), 
  3047 ;;  count           1    6[BANK1 ] unsigned char 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  n               1    9[BANK1 ] unsigned char 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;		None               void
  3052 ;; Registers used:
  3053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 1F/1
  3056 ;;		On exit  : 1C/0
  3057 ;;		Unchanged: FFFE0/0
  3058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3059 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3060 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3061 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3062 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3063 ;;Total ram usage:        8 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:   12
  3066 ;; This function calls:
  3067 ;;		_putUSBUSART
  3068 ;; This function is called by:
  3069 ;;		_ProcessCmd
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _SendCmdReply
  3075  0B86                     _SendCmdReply:	
  3076                           
  3077                           ;main.c: 187: USB_In_Buffer[0] = cmd[0];
  3078                           
  3079                           ; Regs used in _SendCmdReply: [wreg-status,0+pclath+cstack]
  3080  0B86  0822               	movf	SendCmdReply@cmd^(0+128),w
  3081  0B87  0086               	movwf	6
  3082  0B88  0823               	movf	(SendCmdReply@cmd+1)^(0+128),w
  3083  0B89  0087               	movwf	7
  3084  0B8A  0801               	movf	1,w
  3085  0B8B  0027               	movlb	7	; select bank7
  3086  0B8C  00A0               	movwf	_USB_In_Buffer^(0+896)
  3087                           
  3088                           ;main.c: 188: USB_In_Buffer[1] = SlaveAddress;
  3089  0B8D  0022               	movlb	2	; select bank2
  3090  0B8E  084D               	movf	_SlaveAddress^(0+256),w
  3091  0B8F  0027               	movlb	7	; select bank7
  3092  0B90  00A1               	movwf	(_USB_In_Buffer^(0+896)+1)
  3093                           
  3094                           ;main.c: 189: for(BYTE n=0; n < count; n++)
  3095  0B91  0021               	movlb	1	; select bank1
  3096  0B92  01A9               	clrf	SendCmdReply@n^(0+128)
  3097  0B93                     l6891:	
  3098  0B93  0826               	movf	SendCmdReply@count^(0+128),w
  3099  0B94  0229               	subwf	SendCmdReply@n^(0+128),w
  3100  0B95  1803               	btfsc	3,0
  3101  0B96  2BAB               	goto	l6893
  3102                           
  3103                           ;main.c: 190: USB_In_Buffer[n+2] = data[n];
  3104  0B97  0829               	movf	SendCmdReply@n^(0+128),w
  3105  0B98  3EA2               	addlw	(_USB_In_Buffer+2)& (0+255)
  3106  0B99  0086               	movwf	6
  3107  0B9A  3003               	movlw	3	; select bank7/8
  3108  0B9B  0087               	movwf	7
  3109  0B9C  0825               	movf	(SendCmdReply@data+1)^(0+128),w
  3110  0B9D  00A8               	movwf	(??_SendCmdReply^(0+128)+1)
  3111  0B9E  0824               	movf	SendCmdReply@data^(0+128),w
  3112  0B9F  00A7               	movwf	??_SendCmdReply^(0+128)
  3113  0BA0  0829               	movf	SendCmdReply@n^(0+128),w
  3114  0BA1  0727               	addwf	??_SendCmdReply^(0+128),w
  3115  0BA2  0084               	movwf	4
  3116  0BA3  0828               	movf	(??_SendCmdReply^(0+128)+1),w
  3117  0BA4  1803               	skipnc
  3118  0BA5  0A28               	incf	(??_SendCmdReply^(0+128)+1),w
  3119  0BA6  0085               	movwf	5
  3120  0BA7  0800               	movf	0,w	;code access
  3121  0BA8  0081               	movwf	1
  3122  0BA9  0AA9               	incf	SendCmdReply@n^(0+128),f
  3123  0BAA  2B93               	goto	l6891
  3124  0BAB                     l6893:	
  3125                           
  3126                           ;main.c: 192: if(USBDeviceState == DETACHED_STATE) {
  3127  0BAB  0022               	movlb	2	; select bank2
  3128  0BAC  08D1               	movf	_USBDeviceState^(0+256),f
  3129  0BAD  1D03               	skipz
  3130  0BAE  2BB5               	goto	l6897
  3131                           
  3132                           ;main.c: 193: I2CCount = count+2;
  3133  0BAF  0021               	movlb	1	; select bank1
  3134  0BB0  0826               	movf	SendCmdReply@count^(0+128),w
  3135  0BB1  3E02               	addlw	2
  3136  0BB2  0022               	movlb	2	; select bank2
  3137  0BB3  00CA               	movwf	_I2CCount^(0+256)
  3138                           
  3139                           ;main.c: 194: }
  3140  0BB4  0008               	return
  3141  0BB5                     l6897:	
  3142                           
  3143                           ;main.c: 195: else
  3144                           ;main.c: 196: putUSBUSART(USB_In_Buffer, count+2);
  3145  0BB5  0021               	movlb	1	; select bank1
  3146  0BB6  0826               	movf	SendCmdReply@count^(0+128),w
  3147  0BB7  3E02               	addlw	2
  3148  0BB8  00A0               	movwf	?_putUSBUSART^(0+128)
  3149  0BB9  30A0               	movlw	_USB_In_Buffer& (0+255)
  3150  0BBA  2FE1               	ljmp	_putUSBUSART
  3151  0BBB                     __end_of_SendCmdReply:	
  3152  0BBB                     __ptext2458:	
  3153 ;; *************** function _AsicPreCalc *****************
  3154 ;; Defined at:
  3155 ;;		line 317 in file "asic.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  work            2   16[BANK1 ] PTR struct _worktask
  3158 ;;		 -> WorkQue(180), TestWork(45), 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  m              32   30[BANK1 ] unsigned long [8]
  3161 ;;  x               4   66[BANK1 ] unsigned long 
  3162 ;;  y               4   62[BANK1 ] unsigned long 
  3163 ;;  z               4   26[BANK1 ] unsigned long 
  3164 ;;  n               1   70[BANK1 ] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;		None               void
  3167 ;; Registers used:
  3168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 1F/1
  3171 ;;		On exit  : 1F/1
  3172 ;;		Unchanged: FFFE0/0
  3173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3174 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3175 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  3176 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3177 ;;      Totals:         0       0      55       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;Total ram usage:       55 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:   12
  3181 ;; This function calls:
  3182 ;;		___bmul
  3183 ;;		_rotate
  3184 ;; This function is called by:
  3185 ;;		_ProcessCmd
  3186 ;;		_AsicPushWork
  3187 ;;		_DetectAsics
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function _AsicPreCalc
  3193  0BBB                     _AsicPreCalc:	
  3194  0BBB                     l6797:	
  3195                           ; Regs used in _AsicPreCalc: [wreg-status,0+pclath+cstack]
  3196                           
  3197                           
  3198                           ;asic.c: 318: const DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  3199                           ;asic.c: 319: DWORD x, y, z;
  3200                           ;asic.c: 320: DWORD m[8];
  3201                           ;asic.c: 321: BYTE n;
  3202                           ;asic.c: 323: for(n = 0; n < 8; n++)
  3203  0BBB  01E6               	clrf	AsicPreCalc@n^(0+128)
  3204  0BBC                     l6803:	
  3205                           
  3206                           ;asic.c: 324: m[n] = work->MidState[n];
  3207  0BBC  0866               	movf	AsicPreCalc@n^(0+128),w
  3208  0BBD  00B2               	movwf	??_AsicPreCalc^(0+128)
  3209  0BBE  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3210  0BBF  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3211  0BC0  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3212  0BC1  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3213  0BC2  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3214  0BC3  0832               	movf	??_AsicPreCalc^(0+128),w
  3215  0BC4  0730               	addwf	AsicPreCalc@work^(0+128),w
  3216  0BC5  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3217  0BC6  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3218  0BC7  3D31               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  3219  0BC8  00B5               	movwf	(??_AsicPreCalc+3)^(0+128)
  3220  0BC9  3001               	movlw	1
  3221  0BCA  0734               	addwf	(??_AsicPreCalc+2)^(0+128),w
  3222  0BCB  0084               	movwf	4
  3223  0BCC  0835               	movf	((??_AsicPreCalc+2)^(0+128)+1),w
  3224  0BCD  1803               	skipnc
  3225  0BCE  0A35               	incf	((??_AsicPreCalc+2)^(0+128)+1),w
  3226  0BCF  0085               	movwf	5
  3227  0BD0  3F00               	moviw [0]fsr0
  3228  0BD1  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3229  0BD2  3F01               	moviw [1]fsr0
  3230  0BD3  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3231  0BD4  3F02               	moviw [2]fsr0
  3232  0BD5  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3233  0BD6  3F03               	moviw [3]fsr0
  3234  0BD7  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3235  0BD8  0866               	movf	AsicPreCalc@n^(0+128),w
  3236  0BD9  0709               	addwf	9,w
  3237  0BDA  0709               	addwf	9,w
  3238  0BDB  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3239  0BDC  0086               	movwf	6
  3240  0BDD  0187               	clrf	7
  3241  0BDE  0836               	movf	(??_AsicPreCalc+4)^(0+128),w
  3242  0BDF  3FC0               	movwi [0]fsr1
  3243  0BE0  0837               	movf	(??_AsicPreCalc+5)^(0+128),w
  3244  0BE1  3FC1               	movwi [1]fsr1
  3245  0BE2  0838               	movf	(??_AsicPreCalc+6)^(0+128),w
  3246  0BE3  3FC2               	movwi [2]fsr1
  3247  0BE4  0839               	movf	(??_AsicPreCalc+7)^(0+128),w
  3248  0BE5  3FC3               	movwi [3]fsr1
  3249  0BE6  3008               	movlw	8
  3250  0BE7  0AE6               	incf	AsicPreCalc@n^(0+128),f
  3251  0BE8  0266               	subwf	AsicPreCalc@n^(0+128),w
  3252  0BE9  1C03               	skipc
  3253  0BEA  2BBC               	goto	l6803
  3254                           
  3255                           ;asic.c: 326: for(n = 0; n < 3; n++) {
  3256  0BEB  01E6               	clrf	AsicPreCalc@n^(0+128)
  3257  0BEC                     l6815:	
  3258                           
  3259                           ;asic.c: 328: x = m[5-n] ^ m[6-n];
  3260  0BEC  30FC               	movlw	-4
  3261  0BED  00A0               	movwf	?___bmul^(0+128)
  3262  0BEE  0866               	movf	AsicPreCalc@n^(0+128),w
  3263  0BEF  2683  3188         	fcall	___bmul
  3264  0BF1  3E18               	addlw	24
  3265  0BF2  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3266  0BF3  0086               	movwf	6
  3267  0BF4  0187               	clrf	7
  3268  0BF5  3F40               	moviw [0]fsr1
  3269  0BF6  00B2               	movwf	??_AsicPreCalc^(0+128)
  3270  0BF7  3F41               	moviw [1]fsr1
  3271  0BF8  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3272  0BF9  3F42               	moviw [2]fsr1
  3273  0BFA  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3274  0BFB  3F43               	moviw [3]fsr1
  3275  0BFC  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3276  0BFD  30FC               	movlw	-4
  3277  0BFE  00A0               	movwf	?___bmul^(0+128)
  3278  0BFF  0866               	movf	AsicPreCalc@n^(0+128),w
  3279  0C00  2683  3188         	fcall	___bmul
  3280  0C02  3E14               	addlw	20
  3281  0C03  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3282  0C04  0086               	movwf	6
  3283  0C05  0187               	clrf	7
  3284  0C06  3F40               	moviw [0]fsr1
  3285  0C07  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3286  0C08  3F41               	moviw [1]fsr1
  3287  0C09  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3288  0C0A  3F42               	moviw [2]fsr1
  3289  0C0B  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3290  0C0C  3F43               	moviw [3]fsr1
  3291  0C0D  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3292  0C0E  0832               	movf	??_AsicPreCalc^(0+128),w
  3293  0C0F  0636               	xorwf	(??_AsicPreCalc+4)^(0+128),w
  3294  0C10  00E2               	movwf	AsicPreCalc@x^(0+128)
  3295  0C11  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3296  0C12  0637               	xorwf	(??_AsicPreCalc+5)^(0+128),w
  3297  0C13  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3298  0C14  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3299  0C15  0638               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  3300  0C16  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3301  0C17  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3302  0C18  0639               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  3303  0C19  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3304                           
  3305                           ;asic.c: 329: x = x & m[4-n];
  3306  0C1A  30FC               	movlw	-4
  3307  0C1B  00A0               	movwf	?___bmul^(0+128)
  3308  0C1C  0866               	movf	AsicPreCalc@n^(0+128),w
  3309  0C1D  2683  3188         	fcall	___bmul
  3310  0C1F  3E10               	addlw	16
  3311  0C20  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3312  0C21  0086               	movwf	6
  3313  0C22  0187               	clrf	7
  3314  0C23  3F40               	moviw [0]fsr1
  3315  0C24  00B2               	movwf	??_AsicPreCalc^(0+128)
  3316  0C25  3F41               	moviw [1]fsr1
  3317  0C26  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3318  0C27  3F42               	moviw [2]fsr1
  3319  0C28  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3320  0C29  3F43               	moviw [3]fsr1
  3321  0C2A  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3322  0C2B  0832               	movf	??_AsicPreCalc^(0+128),w
  3323  0C2C  05E2               	andwf	AsicPreCalc@x^(0+128),f
  3324  0C2D  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3325  0C2E  05E3               	andwf	(AsicPreCalc@x+1)^(0+128),f
  3326  0C2F  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3327  0C30  05E4               	andwf	(AsicPreCalc@x+2)^(0+128),f
  3328  0C31  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3329  0C32  05E5               	andwf	(AsicPreCalc@x+3)^(0+128),f
  3330                           
  3331                           ;asic.c: 330: x = m[6-n] ^ x;
  3332  0C33  30FC               	movlw	-4
  3333  0C34  00A0               	movwf	?___bmul^(0+128)
  3334  0C35  0866               	movf	AsicPreCalc@n^(0+128),w
  3335  0C36  2683  3188         	fcall	___bmul
  3336  0C38  3E18               	addlw	24
  3337  0C39  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3338  0C3A  0086               	movwf	6
  3339  0C3B  0187               	clrf	7
  3340  0C3C  3F40               	moviw [0]fsr1
  3341  0C3D  00B2               	movwf	??_AsicPreCalc^(0+128)
  3342  0C3E  3F41               	moviw [1]fsr1
  3343  0C3F  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3344  0C40  3F42               	moviw [2]fsr1
  3345  0C41  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3346  0C42  3F43               	moviw [3]fsr1
  3347  0C43  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3348  0C44  0832               	movf	??_AsicPreCalc^(0+128),w
  3349  0C45  06E2               	xorwf	AsicPreCalc@x^(0+128),f
  3350  0C46  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3351  0C47  06E3               	xorwf	(AsicPreCalc@x+1)^(0+128),f
  3352  0C48  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3353  0C49  06E4               	xorwf	(AsicPreCalc@x+2)^(0+128),f
  3354  0C4A  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3355  0C4B  06E5               	xorwf	(AsicPreCalc@x+3)^(0+128),f
  3356                           
  3357                           ;asic.c: 331: x += K[n];
  3358  0C4C  0866               	movf	AsicPreCalc@n^(0+128),w
  3359  0C4D  00B2               	movwf	??_AsicPreCalc^(0+128)
  3360  0C4E  3021               	movlw	low (AsicPreCalc@K| (0+32768))
  3361  0C4F  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3362  0C50  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3363  0C51  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3364  0C52  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3365  0C53  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3366  0C54  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3367  0C55  3090               	movlw	high (AsicPreCalc@K| (0+32768))
  3368  0C56  00B5               	movwf	((??_AsicPreCalc+2)^(0+128)+1)
  3369  0C57  0832               	movf	??_AsicPreCalc^(0+128),w
  3370  0C58  0734               	addwf	(??_AsicPreCalc+2)^(0+128),w
  3371  0C59  0086               	movwf	6
  3372  0C5A  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3373  0C5B  3D35               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3374  0C5C  0087               	movwf	7
  3375  0C5D  3F40               	moviw [0]fsr1
  3376  0C5E  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3377  0C5F  3F41               	moviw [1]fsr1
  3378  0C60  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3379  0C61  3F42               	moviw [2]fsr1
  3380  0C62  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3381  0C63  3F43               	moviw [3]fsr1
  3382  0C64  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3383                           
  3384                           ;asic.c: 332: x += work->Merkle[n];
  3385  0C65  0866               	movf	AsicPreCalc@n^(0+128),w
  3386  0C66  00B2               	movwf	??_AsicPreCalc^(0+128)
  3387  0C67  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3388  0C68  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3389  0C69  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3390  0C6A  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3391  0C6B  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3392  0C6C  0832               	movf	??_AsicPreCalc^(0+128),w
  3393  0C6D  0730               	addwf	AsicPreCalc@work^(0+128),w
  3394  0C6E  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3395  0C6F  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3396  0C70  3D31               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  3397  0C71  00B5               	movwf	(??_AsicPreCalc+3)^(0+128)
  3398  0C72  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3399  0C73  3E21               	addlw	33
  3400  0C74  0086               	movwf	6
  3401  0C75  3000               	movlw	0
  3402  0C76  3D35               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3403  0C77  0087               	movwf	7
  3404  0C78  3F40               	moviw [0]fsr1
  3405  0C79  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3406  0C7A  3F41               	moviw [1]fsr1
  3407  0C7B  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3408  0C7C  3F42               	moviw [2]fsr1
  3409  0C7D  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3410  0C7E  3F43               	moviw [3]fsr1
  3411  0C7F  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3412                           
  3413                           ;asic.c: 333: x += m[7-n];
  3414  0C80  30FC               	movlw	-4
  3415  0C81  00A0               	movwf	?___bmul^(0+128)
  3416  0C82  0866               	movf	AsicPreCalc@n^(0+128),w
  3417  0C83  2683  3188         	fcall	___bmul
  3418  0C85  3E1C               	addlw	28
  3419  0C86  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3420  0C87  0086               	movwf	6
  3421  0C88  0187               	clrf	7
  3422  0C89  3F40               	moviw [0]fsr1
  3423  0C8A  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3424  0C8B  3F41               	moviw [1]fsr1
  3425  0C8C  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3426  0C8D  3F42               	moviw [2]fsr1
  3427  0C8E  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3428  0C8F  3F43               	moviw [3]fsr1
  3429  0C90  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3430                           
  3431                           ;asic.c: 334: y = rotate(m[4-n], 26);
  3432  0C91  30FC               	movlw	-4
  3433  0C92  00A0               	movwf	?___bmul^(0+128)
  3434  0C93  0866               	movf	AsicPreCalc@n^(0+128),w
  3435  0C94  2683  3188         	fcall	___bmul
  3436  0C96  3E10               	addlw	16
  3437  0C97  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3438  0C98  0086               	movwf	6
  3439  0C99  0187               	clrf	7
  3440  0C9A  3F40               	moviw [0]fsr1
  3441  0C9B  00A3               	movwf	?_rotate^(0+128)
  3442  0C9C  3F41               	moviw [1]fsr1
  3443  0C9D  00A4               	movwf	(?_rotate+1)^(0+128)
  3444  0C9E  3F42               	moviw [2]fsr1
  3445  0C9F  00A5               	movwf	(?_rotate+2)^(0+128)
  3446  0CA0  3F43               	moviw [3]fsr1
  3447  0CA1  00A6               	movwf	(?_rotate+3)^(0+128)
  3448  0CA2  301A               	movlw	26
  3449  0CA3  00A7               	movwf	(?_rotate^(0+128)+4)
  3450  0CA4  268F  3188         	fcall	_rotate
  3451  0CA6  0826               	movf	(?_rotate+3)^(0+128),w
  3452  0CA7  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3453  0CA8  0825               	movf	(?_rotate+2)^(0+128),w
  3454  0CA9  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3455  0CAA  0824               	movf	(?_rotate+1)^(0+128),w
  3456  0CAB  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3457  0CAC  0823               	movf	?_rotate^(0+128),w
  3458  0CAD  00DE               	movwf	AsicPreCalc@y^(0+128)
  3459                           
  3460                           ;asic.c: 335: z = rotate(m[4-n], 21);
  3461  0CAE  30FC               	movlw	-4
  3462  0CAF  00A0               	movwf	?___bmul^(0+128)
  3463  0CB0  0866               	movf	AsicPreCalc@n^(0+128),w
  3464  0CB1  2683  3188         	fcall	___bmul
  3465  0CB3  3E10               	addlw	16
  3466  0CB4  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3467  0CB5  0086               	movwf	6
  3468  0CB6  0187               	clrf	7
  3469  0CB7  3F40               	moviw [0]fsr1
  3470  0CB8  00A3               	movwf	?_rotate^(0+128)
  3471  0CB9  3F41               	moviw [1]fsr1
  3472  0CBA  00A4               	movwf	(?_rotate+1)^(0+128)
  3473  0CBB  3F42               	moviw [2]fsr1
  3474  0CBC  00A5               	movwf	(?_rotate+2)^(0+128)
  3475  0CBD  3F43               	moviw [3]fsr1
  3476  0CBE  00A6               	movwf	(?_rotate+3)^(0+128)
  3477  0CBF  3015               	movlw	21
  3478  0CC0  00A7               	movwf	(?_rotate^(0+128)+4)
  3479  0CC1  268F  3188         	fcall	_rotate
  3480  0CC3  0826               	movf	(?_rotate+3)^(0+128),w
  3481  0CC4  00BD               	movwf	(AsicPreCalc@z+3)^(0+128)
  3482  0CC5  0825               	movf	(?_rotate+2)^(0+128),w
  3483  0CC6  00BC               	movwf	(AsicPreCalc@z+2)^(0+128)
  3484  0CC7  0824               	movf	(?_rotate+1)^(0+128),w
  3485  0CC8  00BB               	movwf	(AsicPreCalc@z+1)^(0+128)
  3486  0CC9  0823               	movf	?_rotate^(0+128),w
  3487  0CCA  00BA               	movwf	AsicPreCalc@z^(0+128)
  3488                           
  3489                           ;asic.c: 336: z = y^z;
  3490  0CCB  085E               	movf	AsicPreCalc@y^(0+128),w
  3491  0CCC  06BA               	xorwf	AsicPreCalc@z^(0+128),f
  3492  0CCD  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3493  0CCE  06BB               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  3494  0CCF  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3495  0CD0  06BC               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  3496  0CD1  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3497  0CD2  06BD               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  3498                           
  3499                           ;asic.c: 337: y = rotate(m[4-n], 7);
  3500  0CD3  30FC               	movlw	-4
  3501  0CD4  00A0               	movwf	?___bmul^(0+128)
  3502  0CD5  0866               	movf	AsicPreCalc@n^(0+128),w
  3503  0CD6  2683  3188         	fcall	___bmul
  3504  0CD8  3E10               	addlw	16
  3505  0CD9  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3506  0CDA  0086               	movwf	6
  3507  0CDB  0187               	clrf	7
  3508  0CDC  3F40               	moviw [0]fsr1
  3509  0CDD  00A3               	movwf	?_rotate^(0+128)
  3510  0CDE  3F41               	moviw [1]fsr1
  3511  0CDF  00A4               	movwf	(?_rotate+1)^(0+128)
  3512  0CE0  3F42               	moviw [2]fsr1
  3513  0CE1  00A5               	movwf	(?_rotate+2)^(0+128)
  3514  0CE2  3F43               	moviw [3]fsr1
  3515  0CE3  00A6               	movwf	(?_rotate+3)^(0+128)
  3516  0CE4  3007               	movlw	7
  3517  0CE5  00A7               	movwf	(?_rotate^(0+128)+4)
  3518  0CE6  268F  3188         	fcall	_rotate
  3519  0CE8  0826               	movf	(?_rotate+3)^(0+128),w
  3520  0CE9  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3521  0CEA  0825               	movf	(?_rotate+2)^(0+128),w
  3522  0CEB  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3523  0CEC  0824               	movf	(?_rotate+1)^(0+128),w
  3524  0CED  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3525  0CEE  0823               	movf	?_rotate^(0+128),w
  3526  0CEF  00DE               	movwf	AsicPreCalc@y^(0+128)
  3527                           
  3528                           ;asic.c: 338: z = y^z;
  3529  0CF0  06BA               	xorwf	AsicPreCalc@z^(0+128),f
  3530  0CF1  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3531  0CF2  06BB               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  3532  0CF3  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3533  0CF4  06BC               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  3534  0CF5  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3535  0CF6  06BD               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  3536                           
  3537                           ;asic.c: 339: m[7-n] = z+x;
  3538  0CF7  083A               	movf	AsicPreCalc@z^(0+128),w
  3539  0CF8  0762               	addwf	AsicPreCalc@x^(0+128),w
  3540  0CF9  00B2               	movwf	??_AsicPreCalc^(0+128)
  3541  0CFA  083B               	movf	(AsicPreCalc@z+1)^(0+128),w
  3542  0CFB  3D63               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3543  0CFC  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3544  0CFD  083C               	movf	(AsicPreCalc@z+2)^(0+128),w
  3545  0CFE  3D64               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3546  0CFF  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3547  0D00  083D               	movf	(AsicPreCalc@z+3)^(0+128),w
  3548  0D01  3D65               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3549  0D02  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3550  0D03  30FC               	movlw	-4
  3551  0D04  00A0               	movwf	?___bmul^(0+128)
  3552  0D05  0866               	movf	AsicPreCalc@n^(0+128),w
  3553  0D06  2683  3188         	fcall	___bmul
  3554  0D08  3E1C               	addlw	28
  3555  0D09  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3556  0D0A  0086               	movwf	6
  3557  0D0B  0187               	clrf	7
  3558  0D0C  0832               	movf	??_AsicPreCalc^(0+128),w
  3559  0D0D  3FC0               	movwi [0]fsr1
  3560  0D0E  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3561  0D0F  3FC1               	movwi [1]fsr1
  3562  0D10  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3563  0D11  3FC2               	movwi [2]fsr1
  3564  0D12  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3565  0D13  3FC3               	movwi [3]fsr1
  3566                           
  3567                           ;asic.c: 340: m[3-n] = m[3-n] + m[7-n];
  3568  0D14  30FC               	movlw	-4
  3569  0D15  00A0               	movwf	?___bmul^(0+128)
  3570  0D16  0866               	movf	AsicPreCalc@n^(0+128),w
  3571  0D17  2683  3188         	fcall	___bmul
  3572  0D19  3E1C               	addlw	28
  3573  0D1A  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3574  0D1B  0086               	movwf	6
  3575  0D1C  0187               	clrf	7
  3576  0D1D  3F40               	moviw [0]fsr1
  3577  0D1E  00B2               	movwf	??_AsicPreCalc^(0+128)
  3578  0D1F  3F41               	moviw [1]fsr1
  3579  0D20  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3580  0D21  3F42               	moviw [2]fsr1
  3581  0D22  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3582  0D23  3F43               	moviw [3]fsr1
  3583  0D24  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3584  0D25  30FC               	movlw	-4
  3585  0D26  00A0               	movwf	?___bmul^(0+128)
  3586  0D27  0866               	movf	AsicPreCalc@n^(0+128),w
  3587  0D28  2683  3188         	fcall	___bmul
  3588  0D2A  3E0C               	addlw	12
  3589  0D2B  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3590  0D2C  0086               	movwf	6
  3591  0D2D  0187               	clrf	7
  3592  0D2E  3F40               	moviw [0]fsr1
  3593  0D2F  07B2               	addwf	??_AsicPreCalc^(0+128),f
  3594  0D30  3F41               	moviw [1]fsr1
  3595  0D31  3DB3               	addwfc	(??_AsicPreCalc^(0+128)+1),f
  3596  0D32  3F42               	moviw [2]fsr1
  3597  0D33  3DB4               	addwfc	(??_AsicPreCalc^(0+128)+2),f
  3598  0D34  3F43               	moviw [3]fsr1
  3599  0D35  3DB5               	addwfc	(??_AsicPreCalc^(0+128)+3),f
  3600  0D36  30FC               	movlw	-4
  3601  0D37  00A0               	movwf	?___bmul^(0+128)
  3602  0D38  0866               	movf	AsicPreCalc@n^(0+128),w
  3603  0D39  2683  3188         	fcall	___bmul
  3604  0D3B  3E0C               	addlw	12
  3605  0D3C  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3606  0D3D  0086               	movwf	6
  3607  0D3E  0187               	clrf	7
  3608  0D3F  0832               	movf	??_AsicPreCalc^(0+128),w
  3609  0D40  3FC0               	movwi [0]fsr1
  3610  0D41  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3611  0D42  3FC1               	movwi [1]fsr1
  3612  0D43  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3613  0D44  3FC2               	movwi [2]fsr1
  3614  0D45  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3615  0D46  3FC3               	movwi [3]fsr1
  3616                           
  3617                           ;asic.c: 341: x = rotate(m[((0-n)&7)], 30);
  3618  0D47  0866               	movf	AsicPreCalc@n^(0+128),w
  3619  0D48  3C00               	sublw	0
  3620  0D49  3907               	andlw	7
  3621  0D4A  0709               	addwf	9,w
  3622  0D4B  0709               	addwf	9,w
  3623  0D4C  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3624  0D4D  0086               	movwf	6
  3625  0D4E  3F40               	moviw [0]fsr1
  3626  0D4F  00A3               	movwf	?_rotate^(0+128)
  3627  0D50  3F41               	moviw [1]fsr1
  3628  0D51  00A4               	movwf	(?_rotate+1)^(0+128)
  3629  0D52  3F42               	moviw [2]fsr1
  3630  0D53  00A5               	movwf	(?_rotate+2)^(0+128)
  3631  0D54  3F43               	moviw [3]fsr1
  3632  0D55  00A6               	movwf	(?_rotate+3)^(0+128)
  3633  0D56  301E               	movlw	30
  3634  0D57  00A7               	movwf	(?_rotate^(0+128)+4)
  3635  0D58  268F  3188         	fcall	_rotate
  3636  0D5A  0826               	movf	(?_rotate+3)^(0+128),w
  3637  0D5B  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3638  0D5C  0825               	movf	(?_rotate+2)^(0+128),w
  3639  0D5D  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3640  0D5E  0824               	movf	(?_rotate+1)^(0+128),w
  3641  0D5F  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3642  0D60  0823               	movf	?_rotate^(0+128),w
  3643  0D61  00E2               	movwf	AsicPreCalc@x^(0+128)
  3644                           
  3645                           ;asic.c: 342: y = rotate(m[((0-n)&7)], 19);
  3646  0D62  0866               	movf	AsicPreCalc@n^(0+128),w
  3647  0D63  3C00               	sublw	0
  3648  0D64  3907               	andlw	7
  3649  0D65  0709               	addwf	9,w
  3650  0D66  0709               	addwf	9,w
  3651  0D67  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3652  0D68  0086               	movwf	6
  3653  0D69  0187               	clrf	7
  3654  0D6A  3F40               	moviw [0]fsr1
  3655  0D6B  00A3               	movwf	?_rotate^(0+128)
  3656  0D6C  3F41               	moviw [1]fsr1
  3657  0D6D  00A4               	movwf	(?_rotate+1)^(0+128)
  3658  0D6E  3F42               	moviw [2]fsr1
  3659  0D6F  00A5               	movwf	(?_rotate+2)^(0+128)
  3660  0D70  3F43               	moviw [3]fsr1
  3661  0D71  00A6               	movwf	(?_rotate+3)^(0+128)
  3662  0D72  3013               	movlw	19
  3663  0D73  00A7               	movwf	(?_rotate^(0+128)+4)
  3664  0D74  268F  3188         	fcall	_rotate
  3665  0D76  0826               	movf	(?_rotate+3)^(0+128),w
  3666  0D77  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3667  0D78  0825               	movf	(?_rotate+2)^(0+128),w
  3668  0D79  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3669  0D7A  0824               	movf	(?_rotate+1)^(0+128),w
  3670  0D7B  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3671  0D7C  0823               	movf	?_rotate^(0+128),w
  3672  0D7D  00DE               	movwf	AsicPreCalc@y^(0+128)
  3673                           
  3674                           ;asic.c: 343: y = y^x;
  3675  0D7E  0862               	movf	AsicPreCalc@x^(0+128),w
  3676  0D7F  06DE               	xorwf	AsicPreCalc@y^(0+128),f
  3677  0D80  0863               	movf	(AsicPreCalc@x+1)^(0+128),w
  3678  0D81  06DF               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  3679  0D82  0864               	movf	(AsicPreCalc@x+2)^(0+128),w
  3680  0D83  06E0               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  3681  0D84  0865               	movf	(AsicPreCalc@x+3)^(0+128),w
  3682  0D85  06E1               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  3683                           
  3684                           ;asic.c: 344: x = rotate(m[((0-n)&7)], 10);
  3685  0D86  0866               	movf	AsicPreCalc@n^(0+128),w
  3686  0D87  3C00               	sublw	0
  3687  0D88  3907               	andlw	7
  3688  0D89  0709               	addwf	9,w
  3689  0D8A  0709               	addwf	9,w
  3690  0D8B  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3691  0D8C  0086               	movwf	6
  3692  0D8D  0187               	clrf	7
  3693  0D8E  3F40               	moviw [0]fsr1
  3694  0D8F  00A3               	movwf	?_rotate^(0+128)
  3695  0D90  3F41               	moviw [1]fsr1
  3696  0D91  00A4               	movwf	(?_rotate+1)^(0+128)
  3697  0D92  3F42               	moviw [2]fsr1
  3698  0D93  00A5               	movwf	(?_rotate+2)^(0+128)
  3699  0D94  3F43               	moviw [3]fsr1
  3700  0D95  00A6               	movwf	(?_rotate+3)^(0+128)
  3701  0D96  300A               	movlw	10
  3702  0D97  00A7               	movwf	(?_rotate^(0+128)+4)
  3703  0D98  268F  3188         	fcall	_rotate
  3704  0D9A  0826               	movf	(?_rotate+3)^(0+128),w
  3705  0D9B  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3706  0D9C  0825               	movf	(?_rotate+2)^(0+128),w
  3707  0D9D  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3708  0D9E  0824               	movf	(?_rotate+1)^(0+128),w
  3709  0D9F  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3710  0DA0  0823               	movf	?_rotate^(0+128),w
  3711  0DA1  00E2               	movwf	AsicPreCalc@x^(0+128)
  3712                           
  3713                           ;asic.c: 345: y = x^y;
  3714  0DA2  06DE               	xorwf	AsicPreCalc@y^(0+128),f
  3715  0DA3  0863               	movf	(AsicPreCalc@x+1)^(0+128),w
  3716  0DA4  06DF               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  3717  0DA5  0864               	movf	(AsicPreCalc@x+2)^(0+128),w
  3718  0DA6  06E0               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  3719  0DA7  0865               	movf	(AsicPreCalc@x+3)^(0+128),w
  3720  0DA8  06E1               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  3721                           
  3722                           ;asic.c: 346: x = m[((0-n)&7)] | m[((1-n)&7)];
  3723  0DA9  0866               	movf	AsicPreCalc@n^(0+128),w
  3724  0DAA  3C01               	sublw	1
  3725  0DAB  3907               	andlw	7
  3726  0DAC  0709               	addwf	9,w
  3727  0DAD  0709               	addwf	9,w
  3728  0DAE  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3729  0DAF  0086               	movwf	6
  3730  0DB0  0187               	clrf	7
  3731  0DB1  3F40               	moviw [0]fsr1
  3732  0DB2  00B2               	movwf	??_AsicPreCalc^(0+128)
  3733  0DB3  3F41               	moviw [1]fsr1
  3734  0DB4  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3735  0DB5  3F42               	moviw [2]fsr1
  3736  0DB6  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3737  0DB7  3F43               	moviw [3]fsr1
  3738  0DB8  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3739  0DB9  0866               	movf	AsicPreCalc@n^(0+128),w
  3740  0DBA  3C00               	sublw	0
  3741  0DBB  3907               	andlw	7
  3742  0DBC  0709               	addwf	9,w
  3743  0DBD  0709               	addwf	9,w
  3744  0DBE  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3745  0DBF  0086               	movwf	6
  3746  0DC0  3F40               	moviw [0]fsr1
  3747  0DC1  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3748  0DC2  3F41               	moviw [1]fsr1
  3749  0DC3  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3750  0DC4  3F42               	moviw [2]fsr1
  3751  0DC5  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3752  0DC6  3F43               	moviw [3]fsr1
  3753  0DC7  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3754  0DC8  0832               	movf	??_AsicPreCalc^(0+128),w
  3755  0DC9  0436               	iorwf	(??_AsicPreCalc+4)^(0+128),w
  3756  0DCA  00E2               	movwf	AsicPreCalc@x^(0+128)
  3757  0DCB  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3758  0DCC  0437               	iorwf	(??_AsicPreCalc+5)^(0+128),w
  3759  0DCD  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3760  0DCE  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3761  0DCF  0438               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  3762  0DD0  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3763  0DD1  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3764  0DD2  0439               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  3765  0DD3  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3766                           
  3767                           ;asic.c: 347: x = m[((2-n)&7)] & x;
  3768  0DD4  0866               	movf	AsicPreCalc@n^(0+128),w
  3769  0DD5  3C02               	sublw	2
  3770  0DD6  3907               	andlw	7
  3771  0DD7  0709               	addwf	9,w
  3772  0DD8  0709               	addwf	9,w
  3773  0DD9  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3774  0DDA  0086               	movwf	6
  3775  0DDB  3F40               	moviw [0]fsr1
  3776  0DDC  00B2               	movwf	??_AsicPreCalc^(0+128)
  3777  0DDD  3F41               	moviw [1]fsr1
  3778  0DDE  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3779  0DDF  3F42               	moviw [2]fsr1
  3780  0DE0  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3781  0DE1  3F43               	moviw [3]fsr1
  3782  0DE2  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3783  0DE3  0832               	movf	??_AsicPreCalc^(0+128),w
  3784  0DE4  05E2               	andwf	AsicPreCalc@x^(0+128),f
  3785  0DE5  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3786  0DE6  05E3               	andwf	(AsicPreCalc@x+1)^(0+128),f
  3787  0DE7  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3788  0DE8  05E4               	andwf	(AsicPreCalc@x+2)^(0+128),f
  3789  0DE9  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3790  0DEA  05E5               	andwf	(AsicPreCalc@x+3)^(0+128),f
  3791                           
  3792                           ;asic.c: 348: z = m[((0-n)&7)] & m[((1-n)&7)];
  3793  0DEB  0866               	movf	AsicPreCalc@n^(0+128),w
  3794  0DEC  3C01               	sublw	1
  3795  0DED  3907               	andlw	7
  3796  0DEE  0709               	addwf	9,w
  3797  0DEF  0709               	addwf	9,w
  3798  0DF0  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3799  0DF1  0086               	movwf	6
  3800  0DF2  3F40               	moviw [0]fsr1
  3801  0DF3  00B2               	movwf	??_AsicPreCalc^(0+128)
  3802  0DF4  3F41               	moviw [1]fsr1
  3803  0DF5  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3804  0DF6  3F42               	moviw [2]fsr1
  3805  0DF7  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3806  0DF8  3F43               	moviw [3]fsr1
  3807  0DF9  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3808  0DFA  0866               	movf	AsicPreCalc@n^(0+128),w
  3809  0DFB  3C00               	sublw	0
  3810  0DFC  3907               	andlw	7
  3811  0DFD  0709               	addwf	9,w
  3812  0DFE  0709               	addwf	9,w
  3813  0DFF  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3814  0E00  0086               	movwf	6
  3815  0E01  3F40               	moviw [0]fsr1
  3816  0E02  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3817  0E03  3F41               	moviw [1]fsr1
  3818  0E04  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3819  0E05  3F42               	moviw [2]fsr1
  3820  0E06  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3821  0E07  3F43               	moviw [3]fsr1
  3822  0E08  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3823  0E09  0832               	movf	??_AsicPreCalc^(0+128),w
  3824  0E0A  0536               	andwf	(??_AsicPreCalc+4)^(0+128),w
  3825  0E0B  00BA               	movwf	AsicPreCalc@z^(0+128)
  3826  0E0C  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3827  0E0D  0537               	andwf	(??_AsicPreCalc+5)^(0+128),w
  3828  0E0E  00BB               	movwf	(AsicPreCalc@z+1)^(0+128)
  3829  0E0F  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3830  0E10  0538               	andwf	(??_AsicPreCalc+6)^(0+128),w
  3831  0E11  00BC               	movwf	(AsicPreCalc@z+2)^(0+128)
  3832  0E12  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3833  0E13  0539               	andwf	(??_AsicPreCalc+7)^(0+128),w
  3834  0E14  00BD               	movwf	(AsicPreCalc@z+3)^(0+128)
  3835                           
  3836                           ;asic.c: 349: x = x | z;
  3837  0E15  083A               	movf	AsicPreCalc@z^(0+128),w
  3838  0E16  04E2               	iorwf	AsicPreCalc@x^(0+128),f
  3839  0E17  083B               	movf	(AsicPreCalc@z+1)^(0+128),w
  3840  0E18  04E3               	iorwf	(AsicPreCalc@x+1)^(0+128),f
  3841  0E19  083C               	movf	(AsicPreCalc@z+2)^(0+128),w
  3842  0E1A  04E4               	iorwf	(AsicPreCalc@x+2)^(0+128),f
  3843  0E1B  083D               	movf	(AsicPreCalc@z+3)^(0+128),w
  3844  0E1C  04E5               	iorwf	(AsicPreCalc@x+3)^(0+128),f
  3845                           
  3846                           ;asic.c: 350: m[7-n] += y + x;
  3847  0E1D  085E               	movf	AsicPreCalc@y^(0+128),w
  3848  0E1E  0762               	addwf	AsicPreCalc@x^(0+128),w
  3849  0E1F  00B2               	movwf	??_AsicPreCalc^(0+128)
  3850  0E20  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3851  0E21  3D63               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3852  0E22  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3853  0E23  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3854  0E24  3D64               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3855  0E25  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3856  0E26  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3857  0E27  3D65               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3858  0E28  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3859  0E29  30FC               	movlw	-4
  3860  0E2A  00A0               	movwf	?___bmul^(0+128)
  3861  0E2B  0866               	movf	AsicPreCalc@n^(0+128),w
  3862  0E2C  2683  3188         	fcall	___bmul
  3863  0E2E  3E1C               	addlw	28
  3864  0E2F  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3865  0E30  0086               	movwf	6
  3866  0E31  0187               	clrf	7
  3867  0E32  0832               	movf	??_AsicPreCalc^(0+128),w
  3868  0E33  0781               	addwf	1,f
  3869  0E34  3141               	addfsr 1,1
  3870  0E35  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3871  0E36  3D81               	addwfc	1,f
  3872  0E37  3141               	addfsr 1,1
  3873  0E38  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3874  0E39  3D81               	addwfc	1,f
  3875  0E3A  3141               	addfsr 1,1
  3876  0E3B  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3877  0E3C  3D81               	addwfc	1,f
  3878                           
  3879                           ;asic.c: 352: PrecalcHashes[n] = m[7-n];
  3880  0E3D  30FC               	movlw	-4
  3881  0E3E  00A0               	movwf	?___bmul^(0+128)
  3882  0E3F  0866               	movf	AsicPreCalc@n^(0+128),w
  3883  0E40  2683  3188         	fcall	___bmul
  3884  0E42  3E1C               	addlw	28
  3885  0E43  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3886  0E44  0086               	movwf	6
  3887  0E45  0187               	clrf	7
  3888  0E46  3F40               	moviw [0]fsr1
  3889  0E47  00B2               	movwf	??_AsicPreCalc^(0+128)
  3890  0E48  3F41               	moviw [1]fsr1
  3891  0E49  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3892  0E4A  3F42               	moviw [2]fsr1
  3893  0E4B  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3894  0E4C  3F43               	moviw [3]fsr1
  3895  0E4D  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3896  0E4E  0866               	movf	AsicPreCalc@n^(0+128),w
  3897  0E4F  0709               	addwf	9,w
  3898  0E50  0709               	addwf	9,w
  3899  0E51  3EAF               	addlw	_PrecalcHashes& (0+255)
  3900  0E52  0086               	movwf	6
  3901  0E53  3001               	movlw	1	; select bank3/4
  3902  0E54  0087               	movwf	7
  3903  0E55  0832               	movf	??_AsicPreCalc^(0+128),w
  3904  0E56  3FC0               	movwi [0]fsr1
  3905  0E57  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3906  0E58  3FC1               	movwi [1]fsr1
  3907  0E59  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3908  0E5A  3FC2               	movwi [2]fsr1
  3909  0E5B  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3910  0E5C  3FC3               	movwi [3]fsr1
  3911                           
  3912                           ;asic.c: 353: PrecalcHashes[n+2] = m[3-n];
  3913  0E5D  30FC               	movlw	-4
  3914  0E5E  00A0               	movwf	?___bmul^(0+128)
  3915  0E5F  0866               	movf	AsicPreCalc@n^(0+128),w
  3916  0E60  2683  3188         	fcall	___bmul
  3917  0E62  3E0C               	addlw	12
  3918  0E63  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3919  0E64  0086               	movwf	6
  3920  0E65  0187               	clrf	7
  3921  0E66  3F40               	moviw [0]fsr1
  3922  0E67  00B2               	movwf	??_AsicPreCalc^(0+128)
  3923  0E68  3F41               	moviw [1]fsr1
  3924  0E69  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3925  0E6A  3F42               	moviw [2]fsr1
  3926  0E6B  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3927  0E6C  3F43               	moviw [3]fsr1
  3928  0E6D  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3929  0E6E  0866               	movf	AsicPreCalc@n^(0+128),w
  3930  0E6F  0709               	addwf	9,w
  3931  0E70  0709               	addwf	9,w
  3932  0E71  3EB7               	addlw	(_PrecalcHashes+8)& (0+255)
  3933  0E72  0086               	movwf	6
  3934  0E73  3001               	movlw	1	; select bank3/4
  3935  0E74  0087               	movwf	7
  3936  0E75  0832               	movf	??_AsicPreCalc^(0+128),w
  3937  0E76  3FC0               	movwi [0]fsr1
  3938  0E77  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3939  0E78  3FC1               	movwi [1]fsr1
  3940  0E79  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3941  0E7A  3FC2               	movwi [2]fsr1
  3942  0E7B  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3943  0E7C  3FC3               	movwi [3]fsr1
  3944  0E7D  3003               	movlw	3
  3945  0E7E  0AE6               	incf	AsicPreCalc@n^(0+128),f
  3946  0E7F  0266               	subwf	AsicPreCalc@n^(0+128),w
  3947  0E80  1803               	btfsc	3,0
  3948  0E81  0008               	return
  3949  0E82  2BEC               	goto	l6815
  3950  0E83                     __end_of_AsicPreCalc:	
  3951  0E83                     __ptext2463:	
  3952 ;; *************** function ___bmul *****************
  3953 ;; Defined at:
  3954 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  multiplier      1    wreg     unsigned char 
  3957 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  multiplier      1    2[BANK1 ] unsigned char 
  3960 ;;  product         1    1[BANK1 ] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      unsigned char 
  3963 ;; Registers used:
  3964 ;;		wreg, status,2, status,0
  3965 ;; Tracked objects:
  3966 ;;		On entry : 1F/1
  3967 ;;		On exit  : 1F/1
  3968 ;;		Unchanged: FFFE0/0
  3969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3970 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;Total ram usage:        3 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:   11
  3977 ;; This function calls:
  3978 ;;		Nothing
  3979 ;; This function is called by:
  3980 ;;		_AsicPreCalc
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           
  3985                           ;psect for function ___bmul
  3986  0E83                     ___bmul:	
  3987                           
  3988                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3989                           ;___bmul@multiplier stored from wreg
  3990  0E83  00A2               	movwf	___bmul@multiplier^(0+128)
  3991  0E84  01A1               	clrf	___bmul@product^(0+128)
  3992  0E85                     l7285:	
  3993  0E85  0820               	movf	___bmul@multiplicand^(0+128),w
  3994  0E86  1822               	btfsc	___bmul@multiplier^(0+128),0
  3995  0E87  07A1               	addwf	___bmul@product^(0+128),f
  3996  0E88  35A0               	lslf	___bmul@multiplicand^(0+128),f
  3997  0E89  36A2               	lsrf	___bmul@multiplier^(0+128),f
  3998  0E8A  08A2               	movf	___bmul@multiplier^(0+128),f
  3999  0E8B  1D03               	skipz
  4000  0E8C  2E85               	goto	l7285
  4001  0E8D  0821               	movf	___bmul@product^(0+128),w
  4002  0E8E  0008               	return
  4003  0E8F                     __end_of___bmul:	
  4004  0E8F                     __ptext2459:	
  4005 ;; *************** function _rotate *****************
  4006 ;; Defined at:
  4007 ;;		line 312 in file "asic.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  x               4    3[BANK1 ] unsigned long 
  4010 ;;  y               1    7[BANK1 ] unsigned char 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  4    3[BANK1 ] unsigned long 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0
  4017 ;; Tracked objects:
  4018 ;;		On entry : 1F/1
  4019 ;;		On exit  : 1F/1
  4020 ;;		Unchanged: FFFE0/0
  4021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4022 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;Total ram usage:       13 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:   11
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_AsicPreCalc
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function _rotate
  4038  0E8F                     _rotate:	
  4039                           
  4040                           ;asic.c: 313: return ((x<<y) | (x>>(32-y)));
  4041                           
  4042                           ; Regs used in _rotate: [wreg+status,2+status,0]
  4043  0E8F  0823               	movf	rotate@x^(0+128),w
  4044  0E90  00A8               	movwf	??_rotate^(0+128)
  4045  0E91  0824               	movf	(rotate@x+1)^(0+128),w
  4046  0E92  00A9               	movwf	(??_rotate^(0+128)+1)
  4047  0E93  0825               	movf	(rotate@x+2)^(0+128),w
  4048  0E94  00AA               	movwf	(??_rotate^(0+128)+2)
  4049  0E95  0826               	movf	(rotate@x+3)^(0+128),w
  4050  0E96  00AB               	movwf	(??_rotate^(0+128)+3)
  4051  0E97  0827               	movf	rotate@y^(0+128),w
  4052  0E98  3C20               	sublw	32
  4053  0E99  0A89               	incf	9,f
  4054  0E9A  2EA0               	goto	u5050
  4055  0E9B                     u5055:	
  4056  0E9B  1003               	clrc
  4057  0E9C  0CAB               	rrf	(??_rotate^(0+128)+3),f
  4058  0E9D  0CAA               	rrf	(??_rotate^(0+128)+2),f
  4059  0E9E  0CA9               	rrf	(??_rotate^(0+128)+1),f
  4060  0E9F  0CA8               	rrf	??_rotate^(0+128),f
  4061  0EA0                     u5050:	
  4062  0EA0  3EFF               	addlw	-1
  4063  0EA1  1D03               	skipz
  4064  0EA2  2E9B               	goto	u5055
  4065  0EA3  0823               	movf	rotate@x^(0+128),w
  4066  0EA4  00AC               	movwf	(??_rotate+4)^(0+128)
  4067  0EA5  0824               	movf	(rotate@x+1)^(0+128),w
  4068  0EA6  00AD               	movwf	((??_rotate+4)^(0+128)+1)
  4069  0EA7  0825               	movf	(rotate@x+2)^(0+128),w
  4070  0EA8  00AE               	movwf	((??_rotate+4)^(0+128)+2)
  4071  0EA9  0826               	movf	(rotate@x+3)^(0+128),w
  4072  0EAA  00AF               	movwf	((??_rotate+4)^(0+128)+3)
  4073  0EAB  0A27               	incf	rotate@y^(0+128),w
  4074  0EAC  2EB1               	goto	u5060
  4075  0EAD                     u5065:	
  4076  0EAD  35AC               	lslf	(??_rotate+4)^(0+128),f
  4077  0EAE  0DAD               	rlf	((??_rotate+4)^(0+128)+1),f
  4078  0EAF  0DAE               	rlf	((??_rotate+4)^(0+128)+2),f
  4079  0EB0  0DAF               	rlf	((??_rotate+4)^(0+128)+3),f
  4080  0EB1                     u5060:	
  4081  0EB1  0B89               	decfsz	9,f
  4082  0EB2  2EAD               	goto	u5065
  4083  0EB3  082C               	movf	(??_rotate+4)^(0+128),w
  4084  0EB4  04A8               	iorwf	??_rotate^(0+128),f
  4085  0EB5  082D               	movf	(??_rotate+5)^(0+128),w
  4086  0EB6  04A9               	iorwf	(??_rotate^(0+128)+1),f
  4087  0EB7  082E               	movf	(??_rotate+6)^(0+128),w
  4088  0EB8  04AA               	iorwf	(??_rotate^(0+128)+2),f
  4089  0EB9  082F               	movf	(??_rotate+7)^(0+128),w
  4090  0EBA  04AB               	iorwf	(??_rotate^(0+128)+3),f
  4091  0EBB  082B               	movf	(??_rotate+3)^(0+128),w
  4092  0EBC  00A6               	movwf	(?_rotate+3)^(0+128)
  4093  0EBD  082A               	movf	(??_rotate+2)^(0+128),w
  4094  0EBE  00A5               	movwf	(?_rotate+2)^(0+128)
  4095  0EBF  0829               	movf	(??_rotate+1)^(0+128),w
  4096  0EC0  00A4               	movwf	(?_rotate+1)^(0+128)
  4097  0EC1  0828               	movf	??_rotate^(0+128),w
  4098  0EC2  00A3               	movwf	?_rotate^(0+128)
  4099  0EC3  0008               	return
  4100  0EC4                     __end_of_rotate:	
  4101  0EC4                     __ptext2465:	
  4102 ;; *************** function ___lwdiv *****************
  4103 ;; Defined at:
  4104 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/lwdiv.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  divisor         2    0[BANK1 ] unsigned int 
  4107 ;;  dividend        2    2[BANK1 ] unsigned int 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  quotient        2    5[BANK1 ] unsigned int 
  4110 ;;  counter         1    4[BANK1 ] unsigned char 
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  2    0[BANK1 ] unsigned int 
  4113 ;; Registers used:
  4114 ;;		wreg, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 1F/1
  4117 ;;		On exit  : 1F/1
  4118 ;;		Unchanged: FFFE0/0
  4119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4120 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;Total ram usage:        7 bytes
  4125 ;; Hardware stack levels used:    1
  4126 ;; Hardware stack levels required when called:   11
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_ProcessCmd
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           
  4135                           ;psect for function ___lwdiv
  4136  0EC4                     ___lwdiv:	
  4137                           
  4138                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4139  0EC4  01A5               	clrf	___lwdiv@quotient^(0+128)
  4140  0EC5  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  4141  0EC6  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4142  0EC7  0420               	iorwf	___lwdiv@divisor^(0+128),w
  4143  0EC8  1903               	skipnz
  4144  0EC9  2EE4               	goto	l7337
  4145  0ECA  01A4               	clrf	___lwdiv@counter^(0+128)
  4146  0ECB                     L10:	
  4147  0ECB  0AA4               	incf	___lwdiv@counter^(0+128),f
  4148  0ECC  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  4149  0ECD  2ED1               	goto	l7325
  4150  0ECE  35A0               	lslf	___lwdiv@divisor^(0+128),f
  4151  0ECF  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  4152  0ED0  2ECB               	goto	L10
  4153  0ED1                     l7325:	
  4154  0ED1  35A5               	lslf	___lwdiv@quotient^(0+128),f
  4155  0ED2  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  4156  0ED3  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4157  0ED4  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  4158  0ED5  1D03               	skipz
  4159  0ED6  2ED9               	goto	u5555
  4160  0ED7  0820               	movf	___lwdiv@divisor^(0+128),w
  4161  0ED8  0222               	subwf	___lwdiv@dividend^(0+128),w
  4162  0ED9                     u5555:	
  4163  0ED9  1C03               	skipc
  4164  0EDA  2EE0               	goto	l7333
  4165  0EDB  0820               	movf	___lwdiv@divisor^(0+128),w
  4166  0EDC  02A2               	subwf	___lwdiv@dividend^(0+128),f
  4167  0EDD  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4168  0EDE  3BA3               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  4169  0EDF  1425               	bsf	___lwdiv@quotient^(0+128),0
  4170  0EE0                     l7333:	
  4171  0EE0  36A1               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  4172  0EE1  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  4173  0EE2  0BA4               	decfsz	___lwdiv@counter^(0+128),f
  4174  0EE3  2ED1               	goto	l7325
  4175  0EE4                     l7337:	
  4176  0EE4  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  4177  0EE5  00A1               	movwf	(?___lwdiv+1)^(0+128)
  4178  0EE6  0825               	movf	___lwdiv@quotient^(0+128),w
  4179  0EE7  00A0               	movwf	?___lwdiv^(0+128)
  4180  0EE8  0008               	return
  4181  0EE9                     __end_of___lwdiv:	
  4182  0EE9                     __ptext2449:	
  4183 ;; *************** function _I2CRelay *****************
  4184 ;; Defined at:
  4185 ;;		line 38 in file "i2c.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  data            1    wreg     PTR unsigned char 
  4188 ;;		 -> USB_Out_Buffer(64), 
  4189 ;;  count           1    0[BANK1 ] unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  data            1    1[BANK1 ] PTR unsigned char 
  4192 ;;		 -> USB_Out_Buffer(64), 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;		None               void
  4195 ;; Registers used:
  4196 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4197 ;; Tracked objects:
  4198 ;;		On entry : 1F/1
  4199 ;;		On exit  : 1F/4
  4200 ;;		Unchanged: FFFE0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4202 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;Total ram usage:        2 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:   11
  4209 ;; This function calls:
  4210 ;;		Nothing
  4211 ;; This function is called by:
  4212 ;;		_ProcessIO
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _I2CRelay
  4218  0EE9                     _I2CRelay:	
  4219                           
  4220                           ; Regs used in _I2CRelay: [wreg+fsr1l-status,0]
  4221                           ;I2CRelay@data stored from wreg
  4222  0EE9  00A1               	movwf	I2CRelay@data^(0+128)
  4223                           
  4224                           ;i2c.c: 40: I2CAddr = data[2];
  4225  0EEA  0821               	movf	I2CRelay@data^(0+128),w
  4226  0EEB  0086               	movwf	6
  4227  0EEC  3004               	movlw	4	; select bank8/9
  4228  0EED  0087               	movwf	7
  4229  0EEE  3F42               	moviw [2]fsr1
  4230  0EEF  0022               	movlb	2	; select bank2
  4231  0EF0  00C8               	movwf	_I2CAddr^(0+256)
  4232                           
  4233                           ;i2c.c: 41: I2CInBuf = data;
  4234  0EF1  0021               	movlb	1	; select bank1
  4235  0EF2  0821               	movf	I2CRelay@data^(0+128),w
  4236  0EF3  0023               	movlb	3	; select bank3
  4237  0EF4  00AC               	movwf	_I2CInBuf^(0+384)
  4238                           
  4239                           ;i2c.c: 42: I2CCount = count;
  4240  0EF5  0021               	movlb	1	; select bank1
  4241  0EF6  0820               	movf	I2CRelay@count^(0+128),w
  4242  0EF7  0022               	movlb	2	; select bank2
  4243  0EF8  00CA               	movwf	_I2CCount^(0+256)
  4244                           
  4245                           ;i2c.c: 43: I2CState.Next = 10;
  4246  0EF9  0868               	movf	_I2CState^(0+256),w
  4247  0EFA  39E0               	andlw	-32
  4248  0EFB  380A               	iorlw	10
  4249                           
  4250                           ;i2c.c: 44: SSPCON2bits.SEN = 1;
  4251  0EFC  3196  2E68         	ljmp	PL36	;call to abstracted procedure
  4252  0EFE                     __end_of_I2CRelay:	
  4253  0EFE                     __ptext2446:	
  4254 ;; *************** function _getsUSBUSART *****************
  4255 ;; Defined at:
  4256 ;;		line 605 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;  buffer          1    wreg     PTR unsigned char 
  4259 ;;		 -> USB_Out_Buffer(64), 
  4260 ;;  len             1    7[BANK1 ] unsigned char 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  buffer          1    9[BANK1 ] PTR unsigned char 
  4263 ;;		 -> USB_Out_Buffer(64), 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      unsigned char 
  4266 ;; Registers used:
  4267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4268 ;; Tracked objects:
  4269 ;;		On entry : 1F/1
  4270 ;;		On exit  : 1F/2
  4271 ;;		Unchanged: FFFE0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4273 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4277 ;;Total ram usage:        5 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; Hardware stack levels required when called:   12
  4280 ;; This function calls:
  4281 ;;		_USBTransferOnePacket
  4282 ;; This function is called by:
  4283 ;;		_ProcessIO
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           
  4288                           ;psect for function _getsUSBUSART
  4289  0EFE                     _getsUSBUSART:	
  4290                           
  4291                           ; Regs used in _getsUSBUSART: [wreg-status,0+pclath+cstack]
  4292                           ;getsUSBUSART@buffer stored from wreg
  4293  0EFE  00A9               	movwf	getsUSBUSART@buffer^(0+128)
  4294                           
  4295                           ;usb_function_cdc.c: 606: cdc_rx_len = 0;
  4296  0EFF  0022               	movlb	2	; select bank2
  4297  0F00  01D7               	clrf	_cdc_rx_len^(0+256)
  4298                           
  4299                           ;usb_function_cdc.c: 608: if(!(CDCDataOutHandle==0?0:((volatile BDT_ENTRY*)CDCDataOutHan
      +                          dle)->STAT.UOWN))
  4300  0F01  0847               	movf	_CDCDataOutHandle^(0+256),w
  4301  0F02  1903               	btfsc	3,2
  4302  0F03  2F0D               	goto	l6639
  4303  0F04  0847               	movf	_CDCDataOutHandle^(0+256),w
  4304  0F05  0086               	movwf	6
  4305  0F06  0187               	clrf	7
  4306  0F07  0D01               	rlf	1,w
  4307  0F08  0D01               	rlf	1,w
  4308  0F09  3901               	andlw	1
  4309  0F0A  0021               	movlb	1	; select bank1
  4310  0F0B  00AA               	movwf	_getsUSBUSART$2193^(0+128)
  4311  0F0C  2F0F               	goto	L1
  4312  0F0D                     l6639:	
  4313  0F0D  0021               	movlb	1	; select bank1
  4314  0F0E  01AA               	clrf	_getsUSBUSART$2193^(0+128)
  4315  0F0F                     L1:	
  4316  0F0F  01AB               	clrf	(_getsUSBUSART$2193+1)^(0+128)
  4317  0F10  082B               	movf	(_getsUSBUSART$2193+1)^(0+128),w
  4318  0F11  042A               	iorwf	_getsUSBUSART$2193^(0+128),w
  4319  0F12  1D03               	skipz
  4320  0F13  2F47               	goto	l6657
  4321                           
  4322                           ;usb_function_cdc.c: 609: {
  4323                           ;usb_function_cdc.c: 614: if(len > (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT))
  4324  0F14  0022               	movlb	2	; select bank2
  4325  0F15  0A47               	incf	_CDCDataOutHandle^(0+256),w
  4326  0F16  0086               	movwf	6
  4327  0F17  0187               	clrf	7
  4328  0F18  0021               	movlb	1	; select bank1
  4329  0F19  0827               	movf	getsUSBUSART@len^(0+128),w
  4330  0F1A  0201               	subwf	1,w
  4331  0F1B  1803               	skipnc
  4332  0F1C  2F23               	goto	l6647
  4333                           
  4334                           ;usb_function_cdc.c: 615: len = (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT);
  4335  0F1D  0022               	movlb	2	; select bank2
  4336  0F1E  0847               	movf	_CDCDataOutHandle^(0+256),w
  4337  0F1F  0086               	movwf	6
  4338  0F20  3F41               	moviw [1]fsr1
  4339  0F21  0021               	movlb	1	; select bank1
  4340  0F22  00A7               	movwf	getsUSBUSART@len^(0+128)
  4341  0F23                     l6647:	
  4342                           
  4343                           ;usb_function_cdc.c: 620: for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)
  4344  0F23  0022               	movlb	2	; select bank2
  4345  0F24  01D7               	clrf	_cdc_rx_len^(0+256)
  4346  0F25                     l6653:	
  4347  0F25  0021               	movlb	1	; select bank1
  4348  0F26  0827               	movf	getsUSBUSART@len^(0+128),w
  4349  0F27  0022               	movlb	2	; select bank2
  4350  0F28  0257               	subwf	_cdc_rx_len^(0+256),w
  4351  0F29  1803               	btfsc	3,0
  4352  0F2A  2F3C               	goto	l6655
  4353                           
  4354                           ;usb_function_cdc.c: 621: buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];
  4355  0F2B  0857               	movf	_cdc_rx_len^(0+256),w
  4356  0F2C  0021               	movlb	1	; select bank1
  4357  0F2D  0729               	addwf	getsUSBUSART@buffer^(0+128),w
  4358  0F2E  00A8               	movwf	??_getsUSBUSART^(0+128)
  4359  0F2F  0086               	movwf	6
  4360  0F30  3004               	movlw	4	; select bank8/9
  4361  0F31  0087               	movwf	7
  4362  0F32  0022               	movlb	2	; select bank2
  4363  0F33  0857               	movf	_cdc_rx_len^(0+256),w
  4364  0F34  3EA0               	addlw	160
  4365  0F35  0084               	movwf	4
  4366  0F36  3002               	movlw	2	; select bank5/6
  4367  0F37  0085               	movwf	5
  4368  0F38  0800               	movf	0,w
  4369  0F39  0081               	movwf	1
  4370  0F3A  0AD7               	incf	_cdc_rx_len^(0+256),f
  4371  0F3B  2F25               	goto	l6653
  4372  0F3C                     l6655:	
  4373                           
  4374                           ;usb_function_cdc.c: 627: CDCDataOutHandle = USBTransferOnePacket(2,0,(BYTE*)&cdc_data_r
      +                          x,sizeof(cdc_data_rx));
  4375  0F3C  0021               	movlb	1	; select bank1
  4376  0F3D  30A0               	movlw	160
  4377  0F3E  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  4378  0F3F  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  4379  0F40  3040               	movlw	64
  4380  0F41  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  4381  0F42  3002               	movlw	2
  4382  0F43  3187  27A9         	fcall	_USBTransferOnePacket
  4383  0F45  0022               	movlb	2	; select bank2
  4384  0F46  00C7               	movwf	_CDCDataOutHandle^(0+256)
  4385  0F47                     l6657:	
  4386                           
  4387                           ;usb_function_cdc.c: 629: }
  4388                           ;usb_function_cdc.c: 631: return cdc_rx_len;
  4389  0F47  0022               	movlb	2	; select bank2
  4390  0F48  0857               	movf	_cdc_rx_len^(0+256),w
  4391  0F49  0008               	return
  4392  0F4A                     __end_of_getsUSBUSART:	
  4393  0F4A                     __ptext2443:	
  4394 ;; *************** function _InitializeSystem *****************
  4395 ;; Defined at:
  4396 ;;		line 131 in file "main.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;		None
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;		None
  4401 ;; Return value:  Size  Location     Type
  4402 ;;		None               void
  4403 ;; Registers used:
  4404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 17F/0
  4407 ;;		On exit  : 1F/2
  4408 ;;		Unchanged: FFE00/0
  4409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;Total ram usage:        0 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:   15
  4417 ;; This function calls:
  4418 ;;		_UserInit
  4419 ;;		_USBDeviceInit
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _InitializeSystem
  4427  0F4A                     _InitializeSystem:	
  4428                           
  4429                           ;main.c: 133: ANSELA = 0x00;
  4430                           
  4431                           ; Regs used in _InitializeSystem: [wreg-status,0+pclath+cstack]
  4432  0F4A  0023               	movlb	3	; select bank3
  4433  0F4B  018C               	clrf	12	;volatile
  4434                           
  4435                           ;main.c: 134: ANSELB = 0x00;
  4436  0F4C  018D               	clrf	13	;volatile
  4437                           
  4438                           ;main.c: 135: ANSELC = 0x04;
  4439  0F4D  3004               	movlw	4
  4440  0F4E  008E               	movwf	14	;volatile
  4441                           
  4442                           ;main.c: 138: OSCTUNE = 0;
  4443  0F4F  0021               	movlb	1	; select bank1
  4444  0F50  0198               	clrf	24	;volatile
  4445                           
  4446                           ;main.c: 139: OSCCON = 0xFC;
  4447  0F51  30FC               	movlw	252
  4448  0F52  0099               	movwf	25	;volatile
  4449                           
  4450                           ;main.c: 140: ACTCON = 0x90;
  4451  0F53  3090               	movlw	144
  4452  0F54  0027               	movlb	7	; select bank7
  4453  0F55  009B               	movwf	27	;volatile
  4454                           
  4455                           ;main.c: 143: UserInit();
  4456  0F56  2798               	fcall	_UserInit
  4457                           
  4458                           ;main.c: 145: USBDeviceInit();
  4459  0F57  3195  2D6D         	ljmp	l6313
  4460  0F59                     __end_of_InitializeSystem:	
  4461  0F59                     __ptext2441:	
  4462 ;; *************** function _InitI2CMaster *****************
  4463 ;; Defined at:
  4464 ;;		line 176 in file "i2c.c"
  4465 ;; Parameters:    Size  Location     Type
  4466 ;;		None
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;		None               void
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, pclath, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 1F/2
  4475 ;;		On exit  : 1F/4
  4476 ;;		Unchanged: FFFE0/0
  4477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;Total ram usage:        0 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:   12
  4485 ;; This function calls:
  4486 ;;		_I2CDetect
  4487 ;; This function is called by:
  4488 ;;		_main
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           
  4493                           ;psect for function _InitI2CMaster
  4494  0F59                     _InitI2CMaster:	
  4495                           
  4496                           ;i2c.c: 177: I2CState.Master = 1; I2CState.Slave = 0;
  4497                           
  4498                           ; Regs used in _InitI2CMaster: [wreg+status,2+status,0+pclath+cstack]
  4499  0F59  1768               	bsf	_I2CState^(0+256),6
  4500  0F5A  12E8               	bcf	_I2CState^(0+256),5
  4501                           
  4502                           ;i2c.c: 178: SlaveAddress = 0;
  4503  0F5B  01CD               	clrf	_SlaveAddress^(0+256)
  4504                           
  4505                           ;i2c.c: 179: TRISBbits.TRISB4 = 1;
  4506  0F5C  0021               	movlb	1	; select bank1
  4507  0F5D  160D               	bsf	13,4	;volatile
  4508                           
  4509                           ;i2c.c: 180: TRISBbits.TRISB6 = 1;
  4510  0F5E  170D               	bsf	13,6	;volatile
  4511                           
  4512                           ;i2c.c: 181: SSPADD = 0x77;
  4513  0F5F  3077               	movlw	119
  4514  0F60  0024               	movlb	4	; select bank4
  4515  0F61  0092               	movwf	18	;volatile
  4516                           
  4517                           ;i2c.c: 182: SSPCON1bits.SSPM = 8;
  4518  0F62  0815               	movf	21,w	;volatile
  4519  0F63  39F0               	andlw	-16
  4520  0F64  3808               	iorlw	8
  4521  0F65  0095               	movwf	21	;volatile
  4522                           
  4523                           ;i2c.c: 183: SSPSTATbits.SMP = 1;
  4524  0F66  1794               	bsf	20,7	;volatile
  4525                           
  4526                           ;i2c.c: 184: SSP1EN = 1;
  4527  0F67  1695               	bsf	21,5	;volatile
  4528                           
  4529                           ;i2c.c: 185: SSP1IF = 1;
  4530  0F68  0020               	movlb	0	; select bank0
  4531  0F69  1591               	bsf	17,3	;volatile
  4532                           
  4533                           ;i2c.c: 186: I2CDetect();
  4534  0F6A  2FF6               	ljmp	l6875
  4535  0F6B                     __end_of_InitI2CMaster:	
  4536  0F6B                     __ptext2440:	
  4537 ;; *************** function _InitI2CSlave *****************
  4538 ;; Defined at:
  4539 ;;		line 162 in file "i2c.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;		None
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;		None               void
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 1F/2
  4550 ;;		On exit  : 1F/0
  4551 ;;		Unchanged: FFFE0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;Total ram usage:        0 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:   11
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _InitI2CSlave
  4569  0F6B                     _InitI2CSlave:	
  4570                           
  4571                           ;i2c.c: 163: I2CState.Slave = 1; I2CState.Master = 0;
  4572                           
  4573                           ; Regs used in _InitI2CSlave: [wreg+status,2+status,0]
  4574  0F6B  16E8               	bsf	_I2CState^(0+256),5
  4575  0F6C  1368               	bcf	_I2CState^(0+256),6
  4576                           
  4577                           ;i2c.c: 164: SSPADD = SlaveAddress;
  4578  0F6D  084D               	movf	_SlaveAddress^(0+256),w
  4579  0F6E  0024               	movlb	4	; select bank4
  4580  0F6F  0092               	movwf	18	;volatile
  4581                           
  4582                           ;i2c.c: 165: TRISBbits.TRISB4 = 1;
  4583  0F70  0021               	movlb	1	; select bank1
  4584  0F71  160D               	bsf	13,4	;volatile
  4585                           
  4586                           ;i2c.c: 166: TRISBbits.TRISB6 = 1;
  4587  0F72  170D               	bsf	13,6	;volatile
  4588                           
  4589                           ;i2c.c: 167: SSPCON1bits.SSPM = 6;
  4590  0F73  0024               	movlb	4	; select bank4
  4591  0F74  0815               	movf	21,w	;volatile
  4592  0F75  39F0               	andlw	-16
  4593  0F76  3806               	iorlw	6
  4594  0F77  0095               	movwf	21	;volatile
  4595                           
  4596                           ;i2c.c: 168: SSPCON2bits.GCEN = 1;
  4597  0F78  1796               	bsf	22,7	;volatile
  4598                           
  4599                           ;i2c.c: 169: SSPCON3bits.SBCDE = 1;
  4600  0F79  1517               	bsf	23,2	;volatile
  4601                           
  4602                           ;i2c.c: 170: SSPSTATbits.SMP = 1;
  4603  0F7A  1794               	bsf	20,7	;volatile
  4604                           
  4605                           ;i2c.c: 171: SSP1EN = 1;
  4606  0F7B  1695               	bsf	21,5	;volatile
  4607                           
  4608                           ;i2c.c: 172: SSP1IF = 1;
  4609  0F7C  0020               	movlb	0	; select bank0
  4610  0F7D  1591               	bsf	17,3	;volatile
  4611  0F7E  0008               	return
  4612  0F7F                     __end_of_InitI2CSlave:	
  4613  0F7F                     __ptext2439:	
  4614 ;; *************** function _USBDeviceAttach *****************
  4615 ;; Defined at:
  4616 ;;		line 1526 in file "../USB/usb_device.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;		None
  4621 ;; Return value:  Size  Location     Type
  4622 ;;		None               void
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0
  4625 ;; Tracked objects:
  4626 ;;		On entry : 1F/2
  4627 ;;		On exit  : 1F/2
  4628 ;;		Unchanged: FFFE0/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;Total ram usage:        0 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:   11
  4637 ;; This function calls:
  4638 ;;		Nothing
  4639 ;; This function is called by:
  4640 ;;		_main
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           
  4645                           ;psect for function _USBDeviceAttach
  4646  0F7F                     _USBDeviceAttach:	
  4647                           
  4648                           ;usb_device.c: 1529: {
  4649                           ;usb_device.c: 1530: if(1 == 1)
  4650                           
  4651                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4652  0F7F  08D1               	movf	_USBDeviceState^(0+256),f
  4653  0F80  1D03               	skipz
  4654  0F81  0008               	return
  4655                           
  4656                           ;usb_device.c: 1531: {
  4657                           ;usb_device.c: 1533: UCON = 0;
  4658  0F82  003D               	movlb	29	; select bank29
  4659  0F83  018E               	clrf	14	;volatile
  4660                           
  4661                           ;usb_device.c: 1536: UIE = 0;
  4662  0F84  0192               	clrf	18	;volatile
  4663                           
  4664                           ;usb_device.c: 1540: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 
      +                          | 0x02; };
  4665  0F85  3016               	movlw	22
  4666  0F86  0091               	movwf	17	;volatile
  4667  0F87  309F               	movlw	159
  4668  0F88  0097               	movwf	23	;volatile
  4669  0F89  307B               	movlw	123
  4670  0F8A  0092               	movwf	18	;volatile
  4671                           
  4672                           ;usb_device.c: 1542: {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits.GIE = 1;};
  4673  0F8B  0021               	movlb	1	; select bank1
  4674  0F8C  1512               	bsf	18,2	;volatile
  4675  0F8D  170B               	bsf	11,6	;volatile
  4676  0F8E  178B               	bsf	11,7	;volatile
  4677  0F8F                     l191:	
  4678                           ;usb_device.c: 1545: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4679                           
  4680  0F8F  003D               	movlb	29	; select bank29
  4681  0F90  198E               	btfsc	14,3	;volatile
  4682  0F91  2F94               	goto	l6481
  4683  0F92  158E               	bsf	14,3	;volatile
  4684  0F93  2F8F               	goto	l191
  4685  0F94                     l6481:	
  4686                           
  4687                           ;usb_device.c: 1548: USBDeviceState = ATTACHED_STATE;
  4688  0F94  3001               	movlw	1
  4689  0F95  0022               	movlb	2	; select bank2
  4690  0F96  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  4691  0F97  0008               	return
  4692  0F98                     __end_of_USBDeviceAttach:	
  4693  0F98                     __ptext2454:	
  4694 ;; *************** function _UserInit *****************
  4695 ;; Defined at:
  4696 ;;		line 151 in file "main.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;		None               void
  4703 ;; Registers used:
  4704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 17F/7
  4707 ;;		On exit  : 1F/3
  4708 ;;		Unchanged: FFE00/0
  4709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4714 ;;Total ram usage:        0 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:   14
  4717 ;; This function calls:
  4718 ;;		_InitTempSensor
  4719 ;;		_InitFAN
  4720 ;;		_InitWorkTick
  4721 ;;		_DetectAsics
  4722 ;; This function is called by:
  4723 ;;		_InitializeSystem
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           
  4728                           ;psect for function _UserInit
  4729  0F98                     _UserInit:	
  4730                           
  4731                           ;main.c: 152: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  4732                           
  4733                           ; Regs used in _UserInit: [wreg-status,0+pclath+cstack]
  4734  0F98  0021               	movlb	1	; select bank1
  4735  0F99  128C               	bcf	12,5	;volatile
  4736  0F9A  0022               	movlb	2	; select bank2
  4737  0F9B  168C               	bsf	12,5	;volatile
  4738                           
  4739                           ;main.c: 153: InitTempSensor();
  4740  0F9C  27A3  3188         	fcall	_InitTempSensor
  4741                           
  4742                           ;main.c: 154: InitFAN();
  4743  0F9E  27B4  3188         	fcall	_InitFAN
  4744                           
  4745                           ;main.c: 155: InitWorkTick();
  4746  0FA0  27CF               	fcall	_InitWorkTick
  4747                           
  4748                           ;main.c: 158: DetectAsics();
  4749  0FA1  3197  2F12         	ljmp	l7135
  4750  0FA3                     __end_of_UserInit:	
  4751  0FA3                     __ptext2461:	
  4752 ;; *************** function _InitTempSensor *****************
  4753 ;; Defined at:
  4754 ;;		line 255 in file "klondike.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;		None               void
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 17F/2
  4765 ;;		On exit  : 17F/1
  4766 ;;		Unchanged: FFE80/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:   11
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_UserInit
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _InitTempSensor
  4784  0FA3                     _InitTempSensor:	
  4785                           
  4786                           ;klondike.c: 256: TRISCbits.TRISC2=1;
  4787                           
  4788                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  4789  0FA3  0021               	movlb	1	; select bank1
  4790  0FA4  150E               	bsf	14,2	;volatile
  4791                           
  4792                           ;klondike.c: 259: ADCON0bits.CHS = 6;
  4793  0FA5  081D               	movf	29,w	;volatile
  4794  0FA6  3983               	andlw	-125
  4795  0FA7  3818               	iorlw	24
  4796  0FA8  009D               	movwf	29	;volatile
  4797                           
  4798                           ;klondike.c: 260: ADCON0bits.ADON = 1;
  4799  0FA9  141D               	bsf	29,0	;volatile
  4800                           
  4801                           ;klondike.c: 261: ADCON1bits.ADFM = 0;
  4802  0FAA  139E               	bcf	30,7	;volatile
  4803                           
  4804                           ;klondike.c: 262: ADCON1bits.ADCS = 6;
  4805  0FAB  081E               	movf	30,w	;volatile
  4806  0FAC  398F               	andlw	-113
  4807  0FAD  3860               	iorlw	96
  4808  0FAE  009E               	movwf	30	;volatile
  4809                           
  4810                           ;klondike.c: 263: ADCON1bits.ADPREF = 0;
  4811  0FAF  30FC               	movlw	-4
  4812  0FB0  059E               	andwf	30,f	;volatile
  4813                           
  4814                           ;klondike.c: 264: ADCON2bits.TRIGSEL = 0;
  4815  0FB1  308F               	movlw	-113
  4816  0FB2  059F               	andwf	31,f	;volatile
  4817  0FB3  0008               	return
  4818  0FB4                     __end_of_InitTempSensor:	
  4819  0FB4                     __ptext2460:	
  4820 ;; *************** function _InitFAN *****************
  4821 ;; Defined at:
  4822 ;;		line 235 in file "klondike.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;		None
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;		None
  4827 ;; Return value:  Size  Location     Type
  4828 ;;		None               void
  4829 ;; Registers used:
  4830 ;;		wreg, status,2, status,0
  4831 ;; Tracked objects:
  4832 ;;		On entry : 17F/1
  4833 ;;		On exit  : 17F/7
  4834 ;;		Unchanged: FFE80/0
  4835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;Total ram usage:        0 bytes
  4841 ;; Hardware stack levels used:    1
  4842 ;; Hardware stack levels required when called:   11
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_UserInit
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function _InitFAN
  4852  0FB4                     _InitFAN:	
  4853                           
  4854                           ;klondike.c: 236: TRISCbits.TRISC5 = 1;
  4855                           
  4856                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  4857  0FB4  168E               	bsf	14,5	;volatile
  4858                           
  4859                           ;klondike.c: 237: PWM1CON = 0;
  4860  0FB5  002C               	movlb	12	; select bank12
  4861  0FB6  0193               	clrf	19	;volatile
  4862                           
  4863                           ;klondike.c: 238: PR2 = 0xFF;
  4864  0FB7  30FF               	movlw	255
  4865  0FB8  0020               	movlb	0	; select bank0
  4866  0FB9  009B               	movwf	27	;volatile
  4867                           
  4868                           ;klondike.c: 239: PWM1CON = 0xC0;
  4869  0FBA  30C0               	movlw	192
  4870  0FBB  002C               	movlb	12	; select bank12
  4871  0FBC  0093               	movwf	19	;volatile
  4872                           
  4873                           ;klondike.c: 240: PWM1DCH = 128;
  4874  0FBD  3080               	movlw	128
  4875  0FBE  0092               	movwf	18	;volatile
  4876                           
  4877                           ;klondike.c: 241: PWM1DCL = 0;
  4878  0FBF  0191               	clrf	17	;volatile
  4879                           
  4880                           ;klondike.c: 242: TMR2IF = 0;
  4881  0FC0  0020               	movlb	0	; select bank0
  4882  0FC1  1091               	bcf	17,1	;volatile
  4883                           
  4884                           ;klondike.c: 243: T2CONbits.T2CKPS = 0;
  4885  0FC2  30FC               	movlw	-4
  4886  0FC3  059C               	andwf	28,f	;volatile
  4887                           
  4888                           ;klondike.c: 244: TMR2ON = 1;
  4889  0FC4  151C               	bsf	28,2	;volatile
  4890                           
  4891                           ;klondike.c: 245: TRISCbits.TRISC5 = 0;
  4892  0FC5  0021               	movlb	1	; select bank1
  4893  0FC6  128E               	bcf	14,5	;volatile
  4894                           
  4895                           ;klondike.c: 246: PWM1OE=1;
  4896  0FC7  002C               	movlb	12	; select bank12
  4897  0FC8  1713               	bsf	19,6	;volatile
  4898                           
  4899                           ;klondike.c: 249: T1GSEL = 1;
  4900  0FC9  0022               	movlb	2	; select bank2
  4901  0FCA  159D               	bsf	29,3	;volatile
  4902                           
  4903                           ;klondike.c: 250: IOCAN3 = 1;
  4904  0FCB  0027               	movlb	7	; select bank7
  4905  0FCC  1592               	bsf	18,3	;volatile
  4906                           
  4907                           ;klondike.c: 251: IOCAF3 = 0;
  4908  0FCD  1193               	bcf	19,3	;volatile
  4909  0FCE  0008               	return
  4910  0FCF                     __end_of_InitFAN:	
  4911  0FCF                     __ptext2462:	
  4912 ;; *************** function _InitWorkTick *****************
  4913 ;; Defined at:
  4914 ;;		line 268 in file "klondike.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 17F/7
  4925 ;;		On exit  : 17F/2
  4926 ;;		Unchanged: FFE80/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:   11
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_UserInit
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _InitWorkTick
  4944  0FCF                     _InitWorkTick:	
  4945                           
  4946                           ;klondike.c: 269: TMR0CS = 0;
  4947                           
  4948                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  4949  0FCF  0021               	movlb	1	; select bank1
  4950  0FD0  1295               	bcf	21,5	;volatile
  4951                           
  4952                           ;klondike.c: 270: OPTION_REGbits.PSA = 0;
  4953  0FD1  1195               	bcf	21,3	;volatile
  4954                           
  4955                           ;klondike.c: 271: OPTION_REGbits.PS = 7;
  4956  0FD2  3007               	movlw	7
  4957  0FD3  0495               	iorwf	21,f	;volatile
  4958                           
  4959                           ;klondike.c: 272: TMR0 = HashTime;
  4960  0FD4  0022               	movlb	2	; select bank2
  4961  0FD5  086F               	movf	_HashTime^(0+256),w
  4962  0FD6  0020               	movlb	0	; select bank0
  4963  0FD7  0095               	movwf	21	;volatile
  4964                           
  4965                           ;klondike.c: 274: TRISCbits.TRISC7 = 0;
  4966  0FD8  0021               	movlb	1	; select bank1
  4967  0FD9  138E               	bcf	14,7	;volatile
  4968                           
  4969                           ;klondike.c: 275: TRISCbits.TRISC6 = 0;
  4970  0FDA  130E               	bcf	14,6	;volatile
  4971                           
  4972                           ;klondike.c: 276: TRISCbits.TRISC4 = 0;
  4973  0FDB  120E               	bcf	14,4	;volatile
  4974                           
  4975                           ;klondike.c: 277: TRISCbits.TRISC3 = 0;
  4976  0FDC  118E               	bcf	14,3	;volatile
  4977                           
  4978                           ;klondike.c: 278: LATC = 0xD8;;
  4979  0FDD  30D8               	movlw	216
  4980  0FDE  0022               	movlb	2	; select bank2
  4981  0FDF  008E               	movwf	14	;volatile
  4982  0FE0  0008               	return
  4983  0FE1                     __end_of_InitWorkTick:	
  4984  0FE1                     __ptext2452:	
  4985 ;; *************** function _putUSBUSART *****************
  4986 ;; Defined at:
  4987 ;;		line 676 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  data            1    wreg     PTR unsigned char 
  4990 ;;		 -> USB_In_Buffer(64), 
  4991 ;;  length          1    0[BANK1 ] unsigned char 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  data            1    1[BANK1 ] PTR unsigned char 
  4994 ;;		 -> USB_In_Buffer(64), 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0
  4999 ;; Tracked objects:
  5000 ;;		On entry : 1F/1
  5001 ;;		On exit  : 1F/1
  5002 ;;		Unchanged: FFFE0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5004 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;Total ram usage:        2 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:   11
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_SendCmdReply
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _putUSBUSART
  5020  0FE1                     _putUSBUSART:	
  5021                           
  5022                           ; Regs used in _putUSBUSART: [wreg+status,2+status,0]
  5023                           ;putUSBUSART@data stored from wreg
  5024  0FE1  00A1               	movwf	putUSBUSART@data^(0+128)
  5025                           
  5026                           ;usb_function_cdc.c: 700: {PIE2bits.USBIE = 0;};
  5027  0FE2  1112               	bcf	18,2	;volatile
  5028                           
  5029                           ;usb_function_cdc.c: 701: if(cdc_trf_state == 0)
  5030  0FE3  0022               	movlb	2	; select bank2
  5031  0FE4  08D8               	movf	_cdc_trf_state^(0+256),f
  5032  0FE5  1D03               	skipz
  5033  0FE6  2FF3               	goto	l6671
  5034                           
  5035                           ;usb_function_cdc.c: 702: {
  5036                           ;usb_function_cdc.c: 703: { pCDCSrc.bRam = (BYTE*)data; cdc_tx_len = length; cdc_mem_typ
      +                          e = 0x01; cdc_trf_state = 1; };
  5037  0FE7  0021               	movlb	1	; select bank1
  5038  0FE8  0821               	movf	putUSBUSART@data^(0+128),w
  5039  0FE9  0023               	movlb	3	; select bank3
  5040  0FEA  00AA               	movwf	_pCDCSrc^(0+384)
  5041  0FEB  0021               	movlb	1	; select bank1
  5042  0FEC  0820               	movf	putUSBUSART@length^(0+128),w
  5043  0FED  0022               	movlb	2	; select bank2
  5044  0FEE  00D9               	movwf	_cdc_tx_len^(0+256)
  5045  0FEF  01D6               	clrf	_cdc_mem_type^(0+256)
  5046  0FF0  0AD6               	incf	_cdc_mem_type^(0+256),f
  5047  0FF1  01D8               	clrf	_cdc_trf_state^(0+256)
  5048  0FF2  0AD8               	incf	_cdc_trf_state^(0+256),f
  5049  0FF3                     l6671:	
  5050                           
  5051                           ;usb_function_cdc.c: 704: }
  5052                           ;usb_function_cdc.c: 705: {PIE2bits.USBIE = 1;};
  5053  0FF3  0021               	movlb	1	; select bank1
  5054  0FF4  1512               	bsf	18,2	;volatile
  5055  0FF5  0008               	return
  5056  0FF6                     __end_of_putUSBUSART:	
  5057  0FF6                     __ptext2442:	
  5058 ;; *************** function _I2CDetect *****************
  5059 ;; Defined at:
  5060 ;;		line 58 in file "i2c.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;		None               void
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0
  5069 ;; Tracked objects:
  5070 ;;		On entry : 1F/0
  5071 ;;		On exit  : 1F/4
  5072 ;;		Unchanged: FFFE0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:   11
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_InitI2CMaster
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _I2CDetect
  5090  0FF6                     _I2CDetect:	
  5091  0FF6                     l6875:	
  5092                           ; Regs used in _I2CDetect: [wreg+status,2+status,0]
  5093                           
  5094                           
  5095                           ;i2c.c: 59: I2CCmd = '?';
  5096  0FF6  303F               	movlw	63
  5097  0FF7  0022               	movlb	2	; select bank2
  5098  0FF8  00C9               	movwf	_I2CCmd^(0+256)
  5099                           
  5100                           ;i2c.c: 60: I2CCount = 4;
  5101  0FF9  3004               	movlw	4
  5102  0FFA  00CA               	movwf	_I2CCount^(0+256)
  5103                           
  5104                           ;i2c.c: 61: I2CState.Next = 1;
  5105  0FFB  0868               	movf	_I2CState^(0+256),w
  5106  0FFC  39E0               	andlw	-32
  5107  0FFD  3801               	iorlw	1
  5108                           
  5109                           ;i2c.c: 62: SSPCON2bits.SEN = 1;
  5110  0FFE  3196  2E68         	ljmp	PL36	;call to abstracted procedure
  5111  1000                     __end_of_I2CDetect:	
  5112                           
  5113                           	psect	bssBANK1
  5114  00EF                     __pbssBANK1:	
  5115  00EF                     _pBDTEntryEP0OutNext:	
  5116  00EF                     	ds	1
  5117                           
  5118                           	psect	bssBANK2
  5119  0131                     __pbssBANK2:	
  5120  0131                     _outPipes:	
  5121  0131                     	ds	6
  5122  0137                     _ep_data_in:	
  5123  0137                     	ds	3
  5124  013A                     _ep_data_out:	
  5125  013A                     	ds	3
  5126  013D                     _pBDTEntryIn:	
  5127  013D                     	ds	3
  5128  0140                     _pBDTEntryOut:	
  5129  0140                     	ds	3
  5130  0143                     _send32_data:	
  5131  0143                     	ds	2
  5132  0145                     _BothEP0OutUOWNsSet:	
  5133  0145                     	ds	1
  5134  0146                     _CDCDataInHandle:	
  5135  0146                     	ds	1
  5136  0147                     _CDCDataOutHandle:	
  5137  0147                     	ds	1
  5138  0148                     _I2CAddr:	
  5139  0148                     	ds	1
  5140  0149                     _I2CCmd:	
  5141  0149                     	ds	1
  5142  014A                     _I2CCount:	
  5143  014A                     	ds	1
  5144  014B                     _RemoteWakeup:	
  5145  014B                     	ds	1
  5146  014C                     _ResultQC:	
  5147  014C                     	ds	1
  5148  014D                     _SlaveAddress:	
  5149  014D                     	ds	1
  5150  014E                     _USBDeferINDataStagePackets:	
  5151  014E                     	ds	1
  5152  014F                     _USBDeferOUTDataStagePackets:	
  5153  014F                     	ds	1
  5154  0150                     _USBDeferStatusStagePacket:	
  5155  0150                     	ds	1
  5156  0151                     _USBDeviceState:	
  5157  0151                     	ds	1
  5158  0152                     _USBStatusStageEnabledFlag1:	
  5159  0152                     	ds	1
  5160  0153                     _USBStatusStageEnabledFlag2:	
  5161  0153                     	ds	1
  5162  0154                     _USBStatusStageTimeoutCounter:	
  5163  0154                     	ds	1
  5164  0155                     _WorkNow:	
  5165  0155                     	ds	1
  5166  0156                     _cdc_mem_type:	
  5167  0156                     	ds	1
  5168  0157                     _cdc_rx_len:	
  5169  0157                     	ds	1
  5170  0158                     _cdc_trf_state:	
  5171  0158                     	ds	1
  5172  0159                     _cdc_tx_len:	
  5173  0159                     	ds	1
  5174  015A                     _controlTransferState:	
  5175  015A                     	ds	1
  5176  015B                     _endpoint_number:	
  5177  015B                     	ds	1
  5178  015C                     _last_bit0:	
  5179  015C                     	ds	1
  5180  015D                     _last_bit1:	
  5181  015D                     	ds	1
  5182  015E                     _pBDTEntryEP0OutCurrent:	
  5183  015E                     	ds	1
  5184  015F                     _pDst:	
  5185  015F                     	ds	1
  5186  0160                     _ptr:	
  5187  0160                     	ds	1
  5188  0161                     _send32_count:	
  5189  0161                     	ds	1
  5190  0162                     _shortPacketStatus:	
  5191  0162                     	ds	1
  5192  0163                     _inPipes:	
  5193  0163                     	ds	5
  5194  0168                     _I2CState:	
  5195  0168                     	ds	1
  5196  0169                     _USBActiveConfiguration:	
  5197  0169                     	ds	1
  5198  016A                     _USTATcopy:	
  5199  016A                     	ds	1
  5200                           
  5201                           	psect	dataBANK2
  5202  016F                     __pdataBANK2:	
  5203  016F                     _HashTime:	
  5204  016F                     	ds	1
  5205                           
  5206                           	psect	bssBANK3
  5207  01A0                     __pbssBANK3:	
  5208  01A0                     _ResultQue:	
  5209  01A0                     	ds	8
  5210  01A8                     _pCDCDst:	
  5211  01A8                     	ds	2
  5212  01AA                     _pCDCSrc:	
  5213  01AA                     	ds	2
  5214  01AC                     _I2CInBuf:	
  5215  01AC                     	ds	1
  5216  01AD                     _SlowTick:	
  5217  01AD                     	ds	1
  5218  01AE                     _USBBusIsSuspended:	
  5219  01AE                     	ds	1
  5220  01AF                     _PrecalcHashes:	
  5221  01AF                     	ds	24
  5222  01C7                     _dummy_encapsulated_cmd_response:	
  5223  01C7                     	ds	8
  5224  01CF                     _USBAlternateInterface:	
  5225  01CF                     	ds	2
  5226                           
  5227                           	psect	dataBANK3
  5228  01D1                     __pdataBANK3:	
  5229  01D1                     _WorkTicks:	
  5230  01D1                     	ds	2
  5231  01D3                     _Status:	
  5232  01D3                     	ds	11
  5233  01DE                     _ClockCfg:	
  5234  01DE                     	ds	8
  5235  01E6                     _Cfg:	
  5236  01E6                     	ds	5
  5237                           
  5238                           	psect	bssBANK4
  5239  0260                     __pbssBANK4:	
  5240  0260                     _buf:	
  5241  0260                     	ds	16
  5242                           
  5243                           	psect	bssBANK6
  5244  0320                     __pbssBANK6:	
  5245  0320                     _NonceRanges:	
  5246  0320                     	ds	32
  5247                           
  5248                           	psect	bssBANK7
  5249  03A0                     __pbssBANK7:	
  5250  03A0                     _USB_In_Buffer:	
  5251  03A0                     	ds	64
  5252                           
  5253                           	psect	bssBANK8
  5254  0420                     __pbssBANK8:	
  5255  0420                     _USB_Out_Buffer:	
  5256  0420                     	ds	64
  5257                           
  5258                           	psect	clrtext
  5259  0802                     clear_ram:	
  5260                           ;	Called with FSR0 containing the base address, and
  5261                           ;	btemp/btemp+1 has the size to clear
  5262                           
  5263  0802  0064               	clrwdt	;clear the watchdog before getting into this loop
  5264  0803                     clrloop:	
  5265  0803  0180               	clrf	0	;clear RAM location pointed to by FSR
  5266  0804  3101               	addfsr 0,1
  5267  0805  3001               	movlw	1
  5268  0806  02FE               	subwf	126,f
  5269  0807  3000               	movlw	0
  5270  0808  3BFF               	subwfb	127,f
  5271  0809  087F               	movf	127,w
  5272  080A  047E               	iorwf	126,w
  5273  080B  1903               	btfsc	3,2
  5274  080C  3400               	retlw	0	;all done for this memory range, return
  5275  080D  2803               	goto	clrloop	;have we reached the end yet?
  5276                           
  5277                           	psect	inittext
  5278  13C5                     init_ram:	
  5279  13C5  00FE               	movwf	126
  5280  13C6                     initloop:	
  5281  13C6  0012               	moviw fsr0++
  5282  13C7  001E               	movwi fsr1++
  5283  13C8  3001               	movlw	1
  5284  13C9  02FE               	subwf	126,f
  5285  13CA  3000               	movlw	0
  5286  13CB  3BFF               	subwfb	127,f
  5287  13CC  087F               	movf	127,w
  5288  13CD  047E               	iorwf	126,w
  5289  13CE  1903               	btfsc	3,2
  5290  13CF  3400               	retlw	0
  5291  13D0  2BC6               	goto	initloop
  5292                           
  5293                           	psect	cstackBANK2
  5294  016B                     __pcstackBANK2:	
  5295  016B                     	ds	2
  5296  016D                     DetectAsics@x:	
  5297                           
  5298                           ; 1 bytes @ 0x2
  5299  016D                     	ds	1
  5300  016E                     DetectAsics@x_3058:	
  5301                           
  5302                           ; 1 bytes @ 0x3
  5303  016E                     	ds	1
  5304                           
  5305                           	psect	cstackBANK1
  5306  00A0                     __pcstackBANK1:	
  5307  00A0                     ??_Send32:	
  5308  00A0                     ??_USBDeviceInit:	
  5309                           ; 0 bytes @ 0x0
  5310                           
  5311  00A0                     ??_USBDeviceAttach:	
  5312                           ; 0 bytes @ 0x0
  5313                           
  5314  00A0                     ?_putUSBUSART:	
  5315                           ; 0 bytes @ 0x0
  5316                           
  5317  00A0                     ?_I2CRelay:	
  5318                           ; 0 bytes @ 0x0
  5319                           
  5320  00A0                     ??_I2CDetect:	
  5321                           ; 0 bytes @ 0x0
  5322                           
  5323  00A0                     ??_InitI2CSlave:	
  5324                           ; 0 bytes @ 0x0
  5325                           
  5326  00A0                     ??_InitI2CMaster:	
  5327                           ; 0 bytes @ 0x0
  5328                           
  5329  00A0                     ??_InitFAN:	
  5330                           ; 0 bytes @ 0x0
  5331                           
  5332  00A0                     ??_InitTempSensor:	
  5333                           ; 0 bytes @ 0x0
  5334                           
  5335  00A0                     ??_InitWorkTick:	
  5336                           ; 0 bytes @ 0x0
  5337                           
  5338  00A0                     ?_USBTransferOnePacket:	
  5339                           ; 0 bytes @ 0x0
  5340                           
  5341  00A0                     ?___bmul:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  00A0                     ?___wmul:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  00A0                     ?___lwdiv:	
  5348                           ; 2 bytes @ 0x0
  5349                           
  5350  00A0                     ?___awdiv:	
  5351                           ; 2 bytes @ 0x0
  5352                           
  5353  00A0                     USBTransferOnePacket@dir:	
  5354                           ; 2 bytes @ 0x0
  5355                           
  5356  00A0                     putUSBUSART@length:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  00A0                     I2CRelay@count:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  00A0                     ___bmul@multiplicand:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  00A0                     ___wmul@multiplier:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  00A0                     ___lwdiv@divisor:	
  5369                           ; 2 bytes @ 0x0
  5370                           
  5371  00A0                     ___awdiv@divisor:	
  5372                           ; 2 bytes @ 0x0
  5373                           
  5374                           
  5375                           ; 2 bytes @ 0x0
  5376  00A0                     	ds	1
  5377  00A1                     ??_putUSBUSART:	
  5378  00A1                     ??_I2CRelay:	
  5379                           ; 0 bytes @ 0x1
  5380                           
  5381  00A1                     ??___bmul:	
  5382                           ; 0 bytes @ 0x1
  5383                           
  5384  00A1                     USBTransferOnePacket@data:	
  5385                           ; 0 bytes @ 0x1
  5386                           
  5387  00A1                     putUSBUSART@data:	
  5388                           ; 1 bytes @ 0x1
  5389                           
  5390  00A1                     I2CRelay@data:	
  5391                           ; 1 bytes @ 0x1
  5392                           
  5393  00A1                     ___bmul@product:	
  5394                           ; 1 bytes @ 0x1
  5395                           
  5396                           
  5397                           ; 1 bytes @ 0x1
  5398  00A1                     	ds	1
  5399  00A2                     ?_SendCmdReply:	
  5400  00A2                     USBTransferOnePacket@len:	
  5401                           ; 0 bytes @ 0x2
  5402                           
  5403  00A2                     ___bmul@multiplier:	
  5404                           ; 1 bytes @ 0x2
  5405                           
  5406  00A2                     USBDeviceInit@p:	
  5407                           ; 1 bytes @ 0x2
  5408                           
  5409  00A2                     SendCmdReply@cmd:	
  5410                           ; 2 bytes @ 0x2
  5411                           
  5412  00A2                     ___wmul@multiplicand:	
  5413                           ; 2 bytes @ 0x2
  5414                           
  5415  00A2                     ___lwdiv@dividend:	
  5416                           ; 2 bytes @ 0x2
  5417                           
  5418  00A2                     ___awdiv@dividend:	
  5419                           ; 2 bytes @ 0x2
  5420                           
  5421                           
  5422                           ; 2 bytes @ 0x2
  5423  00A2                     	ds	1
  5424  00A3                     ??_USBTransferOnePacket:	
  5425  00A3                     ?_rotate:	
  5426                           ; 0 bytes @ 0x3
  5427                           
  5428  00A3                     rotate@x:	
  5429                           ; 4 bytes @ 0x3
  5430                           
  5431                           
  5432                           ; 4 bytes @ 0x3
  5433  00A3                     	ds	1
  5434  00A4                     ??___wmul:	
  5435  00A4                     ??___lwdiv:	
  5436                           ; 0 bytes @ 0x4
  5437                           
  5438  00A4                     ??___awdiv:	
  5439                           ; 0 bytes @ 0x4
  5440                           
  5441  00A4                     USBDeviceInit@i_750:	
  5442                           ; 0 bytes @ 0x4
  5443                           
  5444  00A4                     ___lwdiv@counter:	
  5445                           ; 1 bytes @ 0x4
  5446                           
  5447  00A4                     ___awdiv@counter:	
  5448                           ; 1 bytes @ 0x4
  5449                           
  5450  00A4                     SendCmdReply@data:	
  5451                           ; 1 bytes @ 0x4
  5452                           
  5453  00A4                     ___wmul@product:	
  5454                           ; 2 bytes @ 0x4
  5455                           
  5456                           
  5457                           ; 2 bytes @ 0x4
  5458  00A4                     	ds	1
  5459  00A5                     USBDeviceInit@i:	
  5460  00A5                     USBTransferOnePacket@ep:	
  5461                           ; 1 bytes @ 0x5
  5462                           
  5463  00A5                     ___awdiv@sign:	
  5464                           ; 1 bytes @ 0x5
  5465                           
  5466  00A5                     ___lwdiv@quotient:	
  5467                           ; 1 bytes @ 0x5
  5468                           
  5469                           
  5470                           ; 2 bytes @ 0x5
  5471  00A5                     	ds	1
  5472  00A6                     ?_SendAsicData:	
  5473  00A6                     USBTransferOnePacket@handle:	
  5474                           ; 0 bytes @ 0x6
  5475                           
  5476  00A6                     SendCmdReply@count:	
  5477                           ; 1 bytes @ 0x6
  5478                           
  5479  00A6                     SendAsicData@work:	
  5480                           ; 1 bytes @ 0x6
  5481                           
  5482  00A6                     ___awdiv@quotient:	
  5483                           ; 2 bytes @ 0x6
  5484                           
  5485                           
  5486                           ; 2 bytes @ 0x6
  5487  00A6                     	ds	1
  5488  00A7                     ??_SendCmdReply:	
  5489  00A7                     ??_CDCTxService:	
  5490                           ; 0 bytes @ 0x7
  5491                           
  5492  00A7                     ?_getsUSBUSART:	
  5493                           ; 0 bytes @ 0x7
  5494                           
  5495  00A7                     getsUSBUSART@len:	
  5496                           ; 1 bytes @ 0x7
  5497                           
  5498  00A7                     rotate@y:	
  5499                           ; 1 bytes @ 0x7
  5500                           
  5501  00A7                     _CDCTxService$2241:	
  5502                           ; 1 bytes @ 0x7
  5503                           
  5504                           
  5505                           ; 2 bytes @ 0x7
  5506  00A7                     	ds	1
  5507  00A8                     ??_getsUSBUSART:	
  5508  00A8                     ??_rotate:	
  5509                           ; 0 bytes @ 0x8
  5510                           
  5511  00A8                     SendAsicData@split:	
  5512                           ; 0 bytes @ 0x8
  5513                           
  5514                           
  5515                           ; 1 bytes @ 0x8
  5516  00A8                     	ds	1
  5517  00A9                     ??_SendAsicData:	
  5518  00A9                     getsUSBUSART@buffer:	
  5519                           ; 0 bytes @ 0x9
  5520                           
  5521  00A9                     CDCTxService@i:	
  5522                           ; 1 bytes @ 0x9
  5523                           
  5524  00A9                     SendCmdReply@n:	
  5525                           ; 1 bytes @ 0x9
  5526                           
  5527                           
  5528                           ; 1 bytes @ 0x9
  5529  00A9                     	ds	1
  5530  00AA                     CDCTxService@byte_to_send:	
  5531  00AA                     _getsUSBUSART$2193:	
  5532                           ; 1 bytes @ 0xA
  5533                           
  5534                           
  5535                           ; 2 bytes @ 0xA
  5536  00AA                     	ds	6
  5537  00B0                     ?_AsicPreCalc:	
  5538  00B0                     AsicPreCalc@work:	
  5539                           ; 0 bytes @ 0x10
  5540                           
  5541                           
  5542                           ; 2 bytes @ 0x10
  5543  00B0                     	ds	2
  5544  00B2                     ??_AsicPreCalc:	
  5545                           
  5546                           ; 0 bytes @ 0x12
  5547  00B2                     	ds	8
  5548  00BA                     AsicPreCalc@z:	
  5549                           
  5550                           ; 4 bytes @ 0x1A
  5551  00BA                     	ds	4
  5552  00BE                     AsicPreCalc@m:	
  5553                           
  5554                           ; 32 bytes @ 0x1E
  5555  00BE                     	ds	32
  5556  00DE                     AsicPreCalc@y:	
  5557                           
  5558                           ; 4 bytes @ 0x3E
  5559  00DE                     	ds	4
  5560  00E2                     AsicPreCalc@x:	
  5561                           
  5562                           ; 4 bytes @ 0x42
  5563  00E2                     	ds	4
  5564  00E6                     AsicPreCalc@n:	
  5565                           
  5566                           ; 1 bytes @ 0x46
  5567  00E6                     	ds	1
  5568  00E7                     ??_AsicPushWork:	
  5569  00E7                     ??_DetectAsics:	
  5570                           ; 0 bytes @ 0x47
  5571                           
  5572                           
  5573                           ; 0 bytes @ 0x47
  5574  00E7                     	ds	2
  5575  00E9                     ??_ProcessCmd:	
  5576                           
  5577                           ; 0 bytes @ 0x49
  5578  00E9                     	ds	2
  5579  00EB                     _ProcessCmd$3028:	
  5580                           
  5581                           ; 2 bytes @ 0x4B
  5582  00EB                     	ds	2
  5583  00ED                     ??_InitializeSystem:	
  5584  00ED                     ??_UserInit:	
  5585                           ; 0 bytes @ 0x4D
  5586                           
  5587  00ED                     ProcessCmd@cmd:	
  5588                           ; 0 bytes @ 0x4D
  5589                           
  5590                           
  5591                           ; 1 bytes @ 0x4D
  5592  00ED                     	ds	1
  5593  00EE                     ??_ProcessIO:	
  5594  00EE                     ProcessIO@numBytesRead:	
  5595                           ; 0 bytes @ 0x4E
  5596                           
  5597                           
  5598                           ; 1 bytes @ 0x4E
  5599  00EE                     	ds	1
  5600  00EF                     ??_main:	
  5601                           
  5602                           	psect	cstackCOMMON
  5603  0070                     __pcstackCOMMON:	
  5604                           ; 0 bytes @ 0x4F
  5605                           
  5606  0070                     ?_USBWakeFromSuspend:	
  5607  0070                     ?_USBSuspend:	
  5608                           ; 0 bytes @ 0x0
  5609                           
  5610  0070                     ?_USBCtrlEPAllowStatusStage:	
  5611                           ; 0 bytes @ 0x0
  5612                           
  5613  0070                     ??_USBCtrlEPAllowStatusStage:	
  5614                           ; 0 bytes @ 0x0
  5615                           
  5616  0070                     ?_USBStallHandler:	
  5617                           ; 0 bytes @ 0x0
  5618                           
  5619  0070                     ??_USBStallHandler:	
  5620                           ; 0 bytes @ 0x0
  5621                           
  5622  0070                     ?_USBCtrlEPService:	
  5623                           ; 0 bytes @ 0x0
  5624                           
  5625  0070                     ?_USBConfigureEndpoint:	
  5626                           ; 0 bytes @ 0x0
  5627                           
  5628  0070                     ?_USBCtrlTrfTxService:	
  5629                           ; 0 bytes @ 0x0
  5630                           
  5631  0070                     ??_USBCtrlTrfTxService:	
  5632                           ; 0 bytes @ 0x0
  5633                           
  5634  0070                     ?_USBCtrlTrfSetupHandler:	
  5635                           ; 0 bytes @ 0x0
  5636                           
  5637  0070                     ?_USBCtrlTrfOutHandler:	
  5638                           ; 0 bytes @ 0x0
  5639                           
  5640  0070                     ?_USBCtrlTrfInHandler:	
  5641                           ; 0 bytes @ 0x0
  5642                           
  5643  0070                     ?_USBCheckStdRequest:	
  5644                           ; 0 bytes @ 0x0
  5645                           
  5646  0070                     ?_USBStdFeatureReqHandler:	
  5647                           ; 0 bytes @ 0x0
  5648                           
  5649  0070                     ?_Send32:	
  5650                           ; 0 bytes @ 0x0
  5651                           
  5652  0070                     ?_AsicPushWork:	
  5653                           ; 0 bytes @ 0x0
  5654                           
  5655  0070                     ?_InitializeSystem:	
  5656                           ; 0 bytes @ 0x0
  5657                           
  5658  0070                     ?_ProcessIO:	
  5659                           ; 0 bytes @ 0x0
  5660                           
  5661  0070                     ?_UserInit:	
  5662                           ; 0 bytes @ 0x0
  5663                           
  5664  0070                     ?_USBDeviceInit:	
  5665                           ; 0 bytes @ 0x0
  5666                           
  5667  0070                     ?_USBDeviceTasks:	
  5668                           ; 0 bytes @ 0x0
  5669                           
  5670  0070                     ?_USBDeviceAttach:	
  5671                           ; 0 bytes @ 0x0
  5672                           
  5673  0070                     ?_USBCtrlEPAllowDataStage:	
  5674                           ; 0 bytes @ 0x0
  5675                           
  5676  0070                     ?_USBCtrlEPServiceComplete:	
  5677                           ; 0 bytes @ 0x0
  5678                           
  5679  0070                     ?_USBCtrlTrfRxService:	
  5680                           ; 0 bytes @ 0x0
  5681                           
  5682  0070                     ?_USBStdSetCfgHandler:	
  5683                           ; 0 bytes @ 0x0
  5684                           
  5685  0070                     ?_USBStdGetDscHandler:	
  5686                           ; 0 bytes @ 0x0
  5687                           
  5688  0070                     ??_USBStdGetDscHandler:	
  5689                           ; 0 bytes @ 0x0
  5690                           
  5691  0070                     ?_USBStdGetStatusHandler:	
  5692                           ; 0 bytes @ 0x0
  5693                           
  5694  0070                     ??_USBStdGetStatusHandler:	
  5695                           ; 0 bytes @ 0x0
  5696                           
  5697  0070                     ?_USBCheckCDCRequest:	
  5698                           ; 0 bytes @ 0x0
  5699                           
  5700  0070                     ??_USBCheckCDCRequest:	
  5701                           ; 0 bytes @ 0x0
  5702                           
  5703  0070                     ?_CDCInitEP:	
  5704                           ; 0 bytes @ 0x0
  5705                           
  5706  0070                     ?_CDCTxService:	
  5707                           ; 0 bytes @ 0x0
  5708                           
  5709  0070                     ?_I2CPoll:	
  5710                           ; 0 bytes @ 0x0
  5711                           
  5712  0070                     ??_I2CPoll:	
  5713                           ; 0 bytes @ 0x0
  5714                           
  5715  0070                     ?_I2CDetect:	
  5716                           ; 0 bytes @ 0x0
  5717                           
  5718  0070                     ?_I2CRead:	
  5719                           ; 0 bytes @ 0x0
  5720                           
  5721  0070                     ?_I2CWrite:	
  5722                           ; 0 bytes @ 0x0
  5723                           
  5724  0070                     ??_I2CWrite:	
  5725                           ; 0 bytes @ 0x0
  5726                           
  5727  0070                     ?_I2CSlave:	
  5728                           ; 0 bytes @ 0x0
  5729                           
  5730  0070                     ??_I2CSlave:	
  5731                           ; 0 bytes @ 0x0
  5732                           
  5733  0070                     ?_InitI2CSlave:	
  5734                           ; 0 bytes @ 0x0
  5735                           
  5736  0070                     ?_InitI2CMaster:	
  5737                           ; 0 bytes @ 0x0
  5738                           
  5739  0070                     ?_ProcessCmd:	
  5740                           ; 0 bytes @ 0x0
  5741                           
  5742  0070                     ?_CheckFanSpeed:	
  5743                           ; 0 bytes @ 0x0
  5744                           
  5745  0070                     ??_CheckFanSpeed:	
  5746                           ; 0 bytes @ 0x0
  5747                           
  5748  0070                     ?_DetectAsics:	
  5749                           ; 0 bytes @ 0x0
  5750                           
  5751  0070                     ?_WorkTick:	
  5752                           ; 0 bytes @ 0x0
  5753                           
  5754  0070                     ?_ResultRx:	
  5755                           ; 0 bytes @ 0x0
  5756                           
  5757  0070                     ?_UpdateFanSpeed:	
  5758                           ; 0 bytes @ 0x0
  5759                           
  5760  0070                     ??_UpdateFanSpeed:	
  5761                           ; 0 bytes @ 0x0
  5762                           
  5763  0070                     ?_InitFAN:	
  5764                           ; 0 bytes @ 0x0
  5765                           
  5766  0070                     ?_InitTempSensor:	
  5767                           ; 0 bytes @ 0x0
  5768                           
  5769  0070                     ?_InitWorkTick:	
  5770                           ; 0 bytes @ 0x0
  5771                           
  5772  0070                     ?_ISRCode:	
  5773                           ; 0 bytes @ 0x0
  5774                           
  5775  0070                     ?_USBCBSuspend:	
  5776                           ; 0 bytes @ 0x0
  5777                           
  5778  0070                     ??_USBCBSuspend:	
  5779                           ; 0 bytes @ 0x0
  5780                           
  5781  0070                     ?_USBCBWakeFromSuspend:	
  5782                           ; 0 bytes @ 0x0
  5783                           
  5784  0070                     ??_USBCBWakeFromSuspend:	
  5785                           ; 0 bytes @ 0x0
  5786                           
  5787  0070                     ?_USBCB_SOF_Handler:	
  5788                           ; 0 bytes @ 0x0
  5789                           
  5790  0070                     ??_USBCB_SOF_Handler:	
  5791                           ; 0 bytes @ 0x0
  5792                           
  5793  0070                     ?_USBCBErrorHandler:	
  5794                           ; 0 bytes @ 0x0
  5795                           
  5796  0070                     ??_USBCBErrorHandler:	
  5797                           ; 0 bytes @ 0x0
  5798                           
  5799  0070                     ?_USBCBCheckOtherReq:	
  5800                           ; 0 bytes @ 0x0
  5801                           
  5802  0070                     ??_USBCBCheckOtherReq:	
  5803                           ; 0 bytes @ 0x0
  5804                           
  5805  0070                     ?_USBCBStdSetDscHandler:	
  5806                           ; 0 bytes @ 0x0
  5807                           
  5808  0070                     ??_USBCBStdSetDscHandler:	
  5809                           ; 0 bytes @ 0x0
  5810                           
  5811  0070                     ?_USBCBInitEP:	
  5812                           ; 0 bytes @ 0x0
  5813                           
  5814  0070                     ?i1_USBDeviceInit:	
  5815                           ; 0 bytes @ 0x0
  5816                           
  5817  0070                     ??i1_USBDeviceInit:	
  5818                           ; 0 bytes @ 0x0
  5819                           
  5820  0070                     ?i1_putUSBUSART:	
  5821                           ; 0 bytes @ 0x0
  5822                           
  5823  0070                     ?i1_USBTransferOnePacket:	
  5824                           ; 0 bytes @ 0x0
  5825                           
  5826  0070                     ?_memset:	
  5827                           ; 1 bytes @ 0x0
  5828                           
  5829  0070                     ?_main:	
  5830                           ; 2 bytes @ 0x0
  5831                           
  5832  0070                     ?i1___wmul:	
  5833                           ; 2 bytes @ 0x0
  5834                           
  5835  0070                     USBConfigureEndpoint@direction:	
  5836                           ; 2 bytes @ 0x0
  5837                           
  5838  0070                     USBStdGetStatusHandler@p:	
  5839                           ; 1 bytes @ 0x0
  5840                           
  5841  0070                     i1USBTransferOnePacket@dir:	
  5842                           ; 1 bytes @ 0x0
  5843                           
  5844  0070                     i1putUSBUSART@length:	
  5845                           ; 1 bytes @ 0x0
  5846                           
  5847  0070                     memset@p1:	
  5848                           ; 1 bytes @ 0x0
  5849                           
  5850  0070                     i1___wmul@multiplier:	
  5851                           ; 2 bytes @ 0x0
  5852                           
  5853                           
  5854                           ; 2 bytes @ 0x0
  5855  0070                     	ds	1
  5856  0071                     ??_USBConfigureEndpoint:	
  5857  0071                     ??_WorkTick:	
  5858                           ; 0 bytes @ 0x1
  5859                           
  5860  0071                     ??i1_putUSBUSART:	
  5861                           ; 0 bytes @ 0x1
  5862                           
  5863  0071                     i1USBTransferOnePacket@data:	
  5864                           ; 0 bytes @ 0x1
  5865                           
  5866  0071                     i1putUSBUSART@data:	
  5867                           ; 1 bytes @ 0x1
  5868                           
  5869                           
  5870                           ; 1 bytes @ 0x1
  5871  0071                     	ds	1
  5872  0072                     ??_USBCtrlTrfRxService:	
  5873  0072                     ?i1_SendCmdReply:	
  5874                           ; 0 bytes @ 0x2
  5875                           
  5876  0072                     USBConfigureEndpoint@EPNum:	
  5877                           ; 0 bytes @ 0x2
  5878                           
  5879  0072                     USBCtrlTrfTxService@byteToSend:	
  5880                           ; 1 bytes @ 0x2
  5881                           
  5882  0072                     i1USBTransferOnePacket@len:	
  5883                           ; 1 bytes @ 0x2
  5884                           
  5885  0072                     memset@c:	
  5886                           ; 1 bytes @ 0x2
  5887                           
  5888  0072                     i1USBDeviceInit@p:	
  5889                           ; 2 bytes @ 0x2
  5890                           
  5891  0072                     i1SendCmdReply@cmd:	
  5892                           ; 2 bytes @ 0x2
  5893                           
  5894  0072                     i1___wmul@multiplicand:	
  5895                           ; 2 bytes @ 0x2
  5896                           
  5897                           
  5898                           ; 2 bytes @ 0x2
  5899  0072                     	ds	1
  5900  0073                     ??_USBCtrlTrfInHandler:	
  5901  0073                     ??_USBCtrlEPAllowDataStage:	
  5902                           ; 0 bytes @ 0x3
  5903                           
  5904  0073                     ??i1_USBTransferOnePacket:	
  5905                           ; 0 bytes @ 0x3
  5906                           
  5907  0073                     USBConfigureEndpoint@handle:	
  5908                           ; 0 bytes @ 0x3
  5909                           
  5910                           
  5911                           ; 1 bytes @ 0x3
  5912  0073                     	ds	1
  5913  0074                     ?_USBEnableEndpoint:	
  5914  0074                     ??i1___wmul:	
  5915                           ; 0 bytes @ 0x4
  5916                           
  5917  0074                     USBEnableEndpoint@options:	
  5918                           ; 0 bytes @ 0x4
  5919                           
  5920  0074                     USBCtrlTrfRxService@i:	
  5921                           ; 1 bytes @ 0x4
  5922                           
  5923  0074                     i1USBDeviceInit@i_750:	
  5924                           ; 1 bytes @ 0x4
  5925                           
  5926  0074                     _I2CSlave$2556:	
  5927                           ; 1 bytes @ 0x4
  5928                           
  5929  0074                     memset@n:	
  5930                           ; 2 bytes @ 0x4
  5931                           
  5932  0074                     i1SendCmdReply@data:	
  5933                           ; 2 bytes @ 0x4
  5934                           
  5935  0074                     i1___wmul@product:	
  5936                           ; 2 bytes @ 0x4
  5937                           
  5938                           
  5939                           ; 2 bytes @ 0x4
  5940  0074                     	ds	1
  5941  0075                     ??_USBEnableEndpoint:	
  5942  0075                     ??_USBCtrlEPServiceComplete:	
  5943                           ; 0 bytes @ 0x5
  5944                           
  5945  0075                     USBCtrlTrfRxService@byteToRead:	
  5946                           ; 0 bytes @ 0x5
  5947                           
  5948  0075                     USBCtrlTrfInHandler@lastDTS:	
  5949                           ; 1 bytes @ 0x5
  5950                           
  5951  0075                     i1USBDeviceInit@i:	
  5952                           ; 1 bytes @ 0x5
  5953                           
  5954  0075                     i1USBTransferOnePacket@ep:	
  5955                           ; 1 bytes @ 0x5
  5956                           
  5957                           
  5958                           ; 1 bytes @ 0x5
  5959  0075                     	ds	1
  5960  0076                     ??_memset:	
  5961  0076                     ??_USBCtrlTrfOutHandler:	
  5962                           ; 0 bytes @ 0x6
  5963                           
  5964  0076                     i1USBTransferOnePacket@handle:	
  5965                           ; 0 bytes @ 0x6
  5966                           
  5967  0076                     i1SendCmdReply@count:	
  5968                           ; 1 bytes @ 0x6
  5969                           
  5970                           
  5971                           ; 1 bytes @ 0x6
  5972  0076                     	ds	1
  5973  0077                     ??i1_SendCmdReply:	
  5974  0077                     USBEnableEndpoint@p:	
  5975                           ; 0 bytes @ 0x7
  5976                           
  5977  0077                     memset@p:	
  5978                           ; 2 bytes @ 0x7
  5979                           
  5980                           
  5981                           ; 2 bytes @ 0x7
  5982  0077                     	ds	2
  5983  0079                     USBEnableEndpoint@ep:	
  5984  0079                     i1SendCmdReply@n:	
  5985                           ; 1 bytes @ 0x9
  5986                           
  5987                           
  5988                           ; 1 bytes @ 0x9
  5989  0079                     	ds	1
  5990  007A                     ??_USBWakeFromSuspend:	
  5991  007A                     ??_USBSuspend:	
  5992                           ; 0 bytes @ 0xA
  5993                           
  5994  007A                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  5995                           ; 0 bytes @ 0xA
  5996                           
  5997  007A                     ??_USBStdFeatureReqHandler:	
  5998                           ; 0 bytes @ 0xA
  5999                           
  6000  007A                     ??_USBStdSetCfgHandler:	
  6001                           ; 0 bytes @ 0xA
  6002                           
  6003  007A                     ??_CDCInitEP:	
  6004                           ; 0 bytes @ 0xA
  6005                           
  6006  007A                     ??_I2CRead:	
  6007                           ; 0 bytes @ 0xA
  6008                           
  6009  007A                     ??_ResultRx:	
  6010                           ; 0 bytes @ 0xA
  6011                           
  6012  007A                     ??_USBCBInitEP:	
  6013                           ; 0 bytes @ 0xA
  6014                           
  6015  007A                     USBStdSetCfgHandler@p:	
  6016                           ; 0 bytes @ 0xA
  6017                           
  6018                           
  6019                           ; 2 bytes @ 0xA
  6020  007A                     	ds	2
  6021  007C                     USBStdSetCfgHandler@i_1132:	
  6022                           
  6023                           ; 1 bytes @ 0xC
  6024  007C                     	ds	1
  6025  007D                     USBStdSetCfgHandler@i:	
  6026                           
  6027                           ; 1 bytes @ 0xD
  6028  007D                     	ds	1
  6029  007E                     ??_USBCtrlTrfSetupHandler:	
  6030  007E                     ??_USBCheckStdRequest:	
  6031                           ; 0 bytes @ 0xE
  6032                           
  6033                           
  6034                           	psect	cstackBANK0
  6035  0060                     __pcstackBANK0:	
  6036                           ; 0 bytes @ 0xE
  6037                           
  6038  0060                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  6039  0060                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0060                     ResultRx@buf:	
  6043                           ; 2 bytes @ 0x0
  6044                           
  6045                           
  6046                           ; 7 bytes @ 0x0
  6047  0060                     	ds	2
  6048  0062                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  6049                           
  6050                           ; 2 bytes @ 0x2
  6051  0062                     	ds	2
  6052  0064                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  6053                           
  6054                           ; 2 bytes @ 0x4
  6055  0064                     	ds	2
  6056  0066                     USBStdFeatureReqHandler@pUEP:	
  6057                           
  6058                           ; 2 bytes @ 0x6
  6059  0066                     	ds	1
  6060  0067                     ResultRx@Rw:	
  6061                           
  6062                           ; 1 bytes @ 0x7
  6063  0067                     	ds	1
  6064  0068                     USBStdFeatureReqHandler@current_ep_data:	
  6065                           
  6066                           ; 1 bytes @ 0x8
  6067  0068                     	ds	1
  6068  0069                     USBStdFeatureReqHandler@p:	
  6069                           
  6070                           ; 1 bytes @ 0x9
  6071  0069                     	ds	1
  6072  006A                     ??_USBCtrlEPService:	
  6073                           
  6074                           ; 0 bytes @ 0xA
  6075  006A                     	ds	2
  6076  006C                     USBCtrlEPService@setup_cnt:	
  6077                           
  6078                           ; 1 bytes @ 0xC
  6079  006C                     	ds	1
  6080  006D                     ??_USBDeviceTasks:	
  6081                           
  6082                           ; 0 bytes @ 0xD
  6083  006D                     	ds	1
  6084  006E                     USBDeviceTasks@i:	
  6085                           
  6086                           ; 1 bytes @ 0xE
  6087  006E                     	ds	1
  6088  006F                     ??_ISRCode:	
  6089                           
  6090                           ; 0 bytes @ 0xF
  6091  006F                     	ds	1
  6092                           
  6093                           	psect	text2444
  6094  156D                     __ptext2444:	
  6095 ;; *************** function _USBDeviceInit *****************
  6096 ;; Defined at:
  6097 ;;		line 467 in file "../USB/usb_device.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  p               2    2[BANK1 ] PTR unsigned char 
  6102 ;;		 -> UEP1(1), 
  6103 ;;  i               1    4[BANK1 ] unsigned char 
  6104 ;;  i               1    5[BANK1 ] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;		None               void
  6107 ;; Registers used:
  6108 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6109 ;; Tracked objects:
  6110 ;;		On entry : 1F/3
  6111 ;;		On exit  : 1F/2
  6112 ;;		Unchanged: FFFE0/0
  6113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6115 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6116 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6117 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6118 ;;Total ram usage:        6 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:   11
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_InitializeSystem
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           
  6129                           ;psect for function _USBDeviceInit
  6130  156D                     _USBDeviceInit:	
  6131  156D                     l6313:	
  6132                           ; Regs used in _USBDeviceInit: [wreg+fsr1l-status,0]
  6133                           
  6134                           
  6135                           ;usb_device.c: 468: BYTE i;
  6136                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  6137  156D  0021               	movlb	1	; select bank1
  6138  156E  1112               	bcf	18,2	;volatile
  6139                           
  6140                           ;usb_device.c: 473: UEIR = 0;;
  6141  156F  003D               	movlb	29	; select bank29
  6142  1570  0193               	clrf	19	;volatile
  6143                           
  6144                           ;usb_device.c: 476: UIR = 0;;
  6145  1571  0190               	clrf	16	;volatile
  6146                           
  6147                           ;usb_device.c: 479: UEP0 = 0;
  6148  1572  0198               	clrf	24	;volatile
  6149                           
  6150                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
  6151  1573  300E               	movlw	14
  6152  1574  0021               	movlb	1	; select bank1
  6153  1575  00A3               	movwf	(USBDeviceInit@p+1)^(0+128)
  6154  1576  3099               	movlw	153
  6155  1577  00A2               	movwf	USBDeviceInit@p^(0+128)
  6156  1578  01A4               	clrf	USBDeviceInit@i_750^(0+128)
  6157  1579                     l6323:	
  6158  1579  0822               	movf	USBDeviceInit@p^(0+128),w
  6159  157A  0086               	movwf	6
  6160  157B  0823               	movf	(USBDeviceInit@p+1)^(0+128),w
  6161  157C  0087               	movwf	7
  6162  157D  0181               	clrf	1
  6163  157E  0AA2               	incf	USBDeviceInit@p^(0+128),f
  6164  157F  1903               	skipnz
  6165  1580  0AA3               	incf	(USBDeviceInit@p+1)^(0+128),f
  6166  1581  3002               	movlw	2
  6167  1582  0AA4               	incf	USBDeviceInit@i_750^(0+128),f
  6168  1583  0224               	subwf	USBDeviceInit@i_750^(0+128),w
  6169  1584  1C03               	skipc
  6170  1585  2D79               	goto	l6323
  6171                           
  6172                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6173  1586  3016               	movlw	22
  6174  1587  003D               	movlb	29	; select bank29
  6175  1588  0091               	movwf	17	;volatile
  6176  1589  309F               	movlw	159
  6177  158A  0097               	movwf	23	;volatile
  6178  158B  307B               	movlw	123
  6179  158C  0092               	movwf	18	;volatile
  6180                           
  6181                           ;usb_device.c: 486: ;
  6182                           ;usb_device.c: 489: ;
  6183                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  6184  158D  0021               	movlb	1	; select bank1
  6185  158E  01A5               	clrf	USBDeviceInit@i^(0+128)
  6186  158F                     l6339:	
  6187                           
  6188                           ;usb_device.c: 493: {
  6189                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  6190  158F  0825               	movf	USBDeviceInit@i^(0+128),w
  6191  1590  0709               	addwf	9,w
  6192  1591  0709               	addwf	9,w
  6193  1592  3E20               	addlw	32
  6194  1593  0086               	movwf	6
  6195  1594  3000               	movlw	0
  6196  1595  0187               	clrf	7
  6197  1596  3FC0               	movwi [0]fsr1
  6198  1597  3FC1               	movwi [1]fsr1
  6199  1598  3FC2               	movwi [2]fsr1
  6200  1599  3FC3               	movwi [3]fsr1
  6201  159A  300C               	movlw	12
  6202  159B  0AA5               	incf	USBDeviceInit@i^(0+128),f
  6203  159C  0225               	subwf	USBDeviceInit@i^(0+128),w
  6204  159D  1C03               	skipc
  6205  159E  2D8F               	goto	l6339
  6206                           
  6207                           ;usb_device.c: 495: }
  6208                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  6209  159F  003D               	movlb	29	; select bank29
  6210  15A0  170E               	bsf	14,6	;volatile
  6211                           
  6212                           ;usb_device.c: 501: UADDR = 0x00;
  6213  15A1  0196               	clrf	22	;volatile
  6214                           
  6215                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  6216  15A2  120E               	bcf	14,4	;volatile
  6217                           
  6218                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  6219  15A3  130E               	bcf	14,6	;volatile
  6220  15A4                     l6353:	
  6221                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  6222                           
  6223  15A4  003D               	movlb	29	; select bank29
  6224  15A5  1D90               	btfss	16,3	;volatile
  6225  15A6  2DAE               	goto	l6355
  6226                           
  6227                           ;usb_device.c: 511: {
  6228                           ;usb_device.c: 512: (UIR &= 0xF7);
  6229  15A7  1190               	bcf	16,3	;volatile
  6230                           
  6231                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  6232  15A8  0022               	movlb	2	; select bank2
  6233  15A9  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  6234                           
  6235                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  6236  15AA  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  6237                           
  6238                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  6239  15AB  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  6240  15AC  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  6241  15AD  2DA4               	goto	l6353
  6242  15AE                     l6355:	
  6243                           
  6244                           ;usb_device.c: 517: }
  6245                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  6246  15AE  3001               	movlw	1
  6247  15AF  0022               	movlb	2	; select bank2
  6248  15B0  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6249                           
  6250                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  6251  15B1  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6252                           
  6253                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  6254  15B2  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6255                           
  6256                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
  6257  15B3  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6258                           
  6259                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  6260  15B4  0023               	movlb	3	; select bank3
  6261  15B5  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  6262                           
  6263                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(2+1u); i++)
  6264  15B6  0021               	movlb	1	; select bank1
  6265  15B7  01A5               	clrf	USBDeviceInit@i^(0+128)
  6266  15B8                     l6367:	
  6267                           
  6268                           ;usb_device.c: 531: {
  6269                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  6270  15B8  0825               	movf	USBDeviceInit@i^(0+128),w
  6271  15B9  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6272  15BA  0086               	movwf	6
  6273  15BB  3001               	movlw	1	; select bank2/3
  6274  15BC  0087               	movwf	7
  6275  15BD  0181               	clrf	1
  6276                           
  6277                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  6278  15BE  0825               	movf	USBDeviceInit@i^(0+128),w
  6279  15BF  3E40               	addlw	_pBDTEntryOut& (0+255)
  6280  15C0  0086               	movwf	6
  6281  15C1  0181               	clrf	1
  6282                           
  6283                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  6284  15C2  0825               	movf	USBDeviceInit@i^(0+128),w
  6285  15C3  3E37               	addlw	_ep_data_in& (0+255)
  6286  15C4  0086               	movwf	6
  6287  15C5  0181               	clrf	1
  6288                           
  6289                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  6290  15C6  0825               	movf	USBDeviceInit@i^(0+128),w
  6291  15C7  3E3A               	addlw	_ep_data_out& (0+255)
  6292  15C8  0086               	movwf	6
  6293  15C9  3003               	movlw	3
  6294  15CA  0181               	clrf	1
  6295  15CB  0AA5               	incf	USBDeviceInit@i^(0+128),f
  6296  15CC  0225               	subwf	USBDeviceInit@i^(0+128),w
  6297  15CD  1C03               	skipc
  6298  15CE  2DB8               	goto	l6367
  6299                           
  6300                           ;usb_device.c: 536: }
  6301                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6302  15CF  3028               	movlw	40
  6303  15D0  0022               	movlb	2	; select bank2
  6304  15D1  00BD               	movwf	_pBDTEntryIn^(0+256)
  6305                           
  6306                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  6307  15D2  3016               	movlw	22
  6308  15D3  003D               	movlb	29	; select bank29
  6309  15D4  0098               	movwf	24	;volatile
  6310                           
  6311                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6312  15D5  3050               	movlw	80
  6313  15D6  0021               	movlb	1	; select bank1
  6314  15D7  00A0               	movwf	??_USBDeviceInit^(0+128)
  6315  15D8  01A1               	clrf	(??_USBDeviceInit^(0+128)+1)
  6316  15D9  0020               	movlb	0	; select bank0
  6317  15DA  00A2               	movwf	34	;volatile
  6318  15DB  0021               	movlb	1	; select bank1
  6319  15DC  0821               	movf	(??_USBDeviceInit+1)^(0+128),w
  6320  15DD  0020               	movlb	0	; select bank0
  6321  15DE  00A3               	movwf	35	;volatile
  6322                           
  6323                           ;usb_device.c: 544: BDT[0].CNT = 8;
  6324  15DF  3008               	movlw	8
  6325  15E0  00A1               	movwf	33	;volatile
  6326                           
  6327                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  6328  15E1  3084               	movlw	132
  6329  15E2  00A0               	movwf	32	;volatile
  6330                           
  6331                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  6332  15E3  0022               	movlb	2	; select bank2
  6333  15E4  01E9               	clrf	_USBActiveConfiguration^(0+256)	;volatile
  6334                           
  6335                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  6336  15E5  01D1               	clrf	_USBDeviceState^(0+256)	;volatile
  6337  15E6  0008               	return
  6338  15E7                     __end_of_USBDeviceInit:	
  6339                           
  6340                           	psect	text2447
  6341  0737                     __ptext2447:	
  6342 ;; *************** function _CDCTxService *****************
  6343 ;; Defined at:
  6344 ;;		line 956 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  byte_to_send    1   10[BANK1 ] unsigned char 
  6349 ;;  i               1    9[BANK1 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 18/2
  6356 ;;		On exit  : 1F/1
  6357 ;;		Unchanged: FFFE0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:        4 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:   12
  6366 ;; This function calls:
  6367 ;;		_USBTransferOnePacket
  6368 ;; This function is called by:
  6369 ;;		_ProcessIO
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _CDCTxService
  6375  0737                     _CDCTxService:	
  6376  0737                     l6673:	
  6377                           ; Regs used in _CDCTxService: [wreg-status,0+pclath+cstack]
  6378                           
  6379                           
  6380                           ;usb_function_cdc.c: 957: BYTE byte_to_send;
  6381                           ;usb_function_cdc.c: 958: BYTE i;
  6382                           ;usb_function_cdc.c: 960: {PIE2bits.USBIE = 0;};
  6383  0737  0021               	movlb	1	; select bank1
  6384  0738  1112               	bcf	18,2	;volatile
  6385                           
  6386                           ;usb_function_cdc.c: 962: {};
  6387                           ;usb_function_cdc.c: 964: if((CDCDataInHandle==0?0:((volatile BDT_ENTRY*)CDCDataInHandle
      +                          )->STAT.UOWN))
  6388  0739  0022               	movlb	2	; select bank2
  6389  073A  0846               	movf	_CDCDataInHandle^(0+256),w
  6390  073B  1903               	btfsc	3,2
  6391  073C  2F46               	goto	l6679
  6392  073D  0846               	movf	_CDCDataInHandle^(0+256),w
  6393  073E  0086               	movwf	6
  6394  073F  0187               	clrf	7
  6395  0740  0D01               	rlf	1,w
  6396  0741  0D01               	rlf	1,w
  6397  0742  3901               	andlw	1
  6398  0743  0021               	movlb	1	; select bank1
  6399  0744  00A7               	movwf	_CDCTxService$2241^(0+128)
  6400  0745  2F48               	goto	L2
  6401  0746                     l6679:	
  6402  0746  0021               	movlb	1	; select bank1
  6403  0747  01A7               	clrf	_CDCTxService$2241^(0+128)
  6404  0748                     L2:	
  6405  0748  01A8               	clrf	(_CDCTxService$2241+1)^(0+128)
  6406  0749  0828               	movf	(_CDCTxService$2241+1)^(0+128),w
  6407  074A  0427               	iorwf	_CDCTxService$2241^(0+128),w
  6408  074B  1903               	skipnz
  6409  074C  2F50               	goto	l6685
  6410  074D                     l6683:	
  6411                           
  6412                           ;usb_function_cdc.c: 965: {
  6413                           ;usb_function_cdc.c: 966: {PIE2bits.USBIE = 1;};
  6414  074D  0021               	movlb	1	; select bank1
  6415  074E  1512               	bsf	18,2	;volatile
  6416                           
  6417                           ;usb_function_cdc.c: 967: return;
  6418  074F  0008               	return
  6419  0750                     l6685:	
  6420                           
  6421                           ;usb_function_cdc.c: 968: }
  6422                           ;usb_function_cdc.c: 975: if(cdc_trf_state == 3)
  6423  0750  0022               	movlb	2	; select bank2
  6424  0751  0858               	movf	_cdc_trf_state^(0+256),w
  6425  0752  3A03               	xorlw	3
  6426  0753  1903               	btfsc	3,2
  6427                           
  6428                           ;usb_function_cdc.c: 976: cdc_trf_state = 0;
  6429  0754  01D8               	clrf	_cdc_trf_state^(0+256)
  6430                           
  6431                           ;usb_function_cdc.c: 981: if(cdc_trf_state == 0)
  6432  0755  08D8               	movf	_cdc_trf_state^(0+256),f
  6433  0756  1903               	btfsc	3,2
  6434  0757  2F4D               	goto	l6683
  6435                           
  6436                           ;usb_function_cdc.c: 985: }
  6437                           ;usb_function_cdc.c: 990: if(cdc_trf_state == 2)
  6438  0758  0858               	movf	_cdc_trf_state^(0+256),w
  6439  0759  3A02               	xorlw	2
  6440  075A  1D03               	skipz
  6441  075B  2F69               	goto	l6699
  6442                           
  6443                           ;usb_function_cdc.c: 991: {
  6444                           ;usb_function_cdc.c: 992: CDCDataInHandle = USBTransferOnePacket(2,1,(0),0);
  6445  075C  0021               	movlb	1	; select bank1
  6446  075D  3002               	movlw	2
  6447  075E  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  6448  075F  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  6449  0760  01A1               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  6450  0761  01A2               	clrf	(?_USBTransferOnePacket^(0+128)+2)
  6451  0762  27A9  3187         	fcall	_USBTransferOnePacket
  6452  0764  0022               	movlb	2	; select bank2
  6453  0765  00C6               	movwf	_CDCDataInHandle^(0+256)
  6454                           
  6455                           ;usb_function_cdc.c: 994: cdc_trf_state = 3;
  6456  0766  3003               	movlw	3
  6457  0767  00D8               	movwf	_cdc_trf_state^(0+256)
  6458                           
  6459                           ;usb_function_cdc.c: 995: }
  6460  0768  2F4D               	goto	l6683
  6461  0769                     l6699:	
  6462                           
  6463                           ;usb_function_cdc.c: 996: else if(cdc_trf_state == 1)
  6464  0769  0B58               	decfsz	_cdc_trf_state^(0+256),w
  6465  076A  2F4D               	goto	l6683
  6466                           
  6467                           ;usb_function_cdc.c: 997: {
  6468                           ;usb_function_cdc.c: 1001: if(cdc_tx_len > sizeof(cdc_data_tx))
  6469  076B  3041               	movlw	65
  6470  076C  0259               	subwf	_cdc_tx_len^(0+256),w
  6471  076D  1C03               	skipc
  6472  076E  2F71               	goto	l6705
  6473                           
  6474                           ;usb_function_cdc.c: 1002: byte_to_send = sizeof(cdc_data_tx);
  6475  076F  3040               	movlw	64
  6476  0770  2F72               	goto	L3
  6477  0771                     l6705:	
  6478                           
  6479                           ;usb_function_cdc.c: 1003: else
  6480                           ;usb_function_cdc.c: 1004: byte_to_send = cdc_tx_len;
  6481  0771  0859               	movf	_cdc_tx_len^(0+256),w
  6482  0772                     L3:	
  6483  0772  0021               	movlb	1	; select bank1
  6484  0773  00AA               	movwf	CDCTxService@byte_to_send^(0+128)
  6485                           
  6486                           ;usb_function_cdc.c: 1009: cdc_tx_len = cdc_tx_len - byte_to_send;
  6487  0774  0022               	movlb	2	; select bank2
  6488  0775  02D9               	subwf	_cdc_tx_len^(0+256),f
  6489                           
  6490                           ;usb_function_cdc.c: 1011: pCDCDst.bRam = (BYTE*)&cdc_data_tx;
  6491  0776  3020               	movlw	32
  6492  0777  0023               	movlb	3	; select bank3
  6493  0778  00A8               	movwf	_pCDCDst^(0+384)
  6494                           
  6495                           ;usb_function_cdc.c: 1013: i = byte_to_send;
  6496  0779  0021               	movlb	1	; select bank1
  6497  077A  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6498  077B  00A9               	movwf	CDCTxService@i^(0+128)
  6499                           
  6500                           ;usb_function_cdc.c: 1014: if(cdc_mem_type == 0x00)
  6501  077C  0022               	movlb	2	; select bank2
  6502  077D  08D6               	movf	_cdc_mem_type^(0+256),f
  6503  077E  1903               	btfsc	3,2
  6504  077F  2F83               	goto	l6723
  6505  0780  2F8A               	goto	l6733
  6506  0781                     l6715:	
  6507                           
  6508                           ;usb_function_cdc.c: 1017: {
  6509                           ;usb_function_cdc.c: 1018: *pCDCDst.bRam = *pCDCSrc.bRom;
  6510                           
  6511                           ;usb_function_cdc.c: 1019: pCDCDst.bRam++;
  6512                           
  6513                           ;usb_function_cdc.c: 1020: pCDCSrc.bRom++;
  6514                           
  6515                           ;usb_function_cdc.c: 1021: i--;
  6516  0781  27E1  3187         	fcall	PL8	;call to abstracted procedure
  6517  0783                     l6723:	
  6518  0783  0021               	movlb	1	; select bank1
  6519  0784  08A9               	movf	CDCTxService@i^(0+128),f
  6520  0785  1903               	btfsc	3,2
  6521  0786  2F8E               	goto	l6735
  6522  0787  2F81               	goto	l6715
  6523  0788                     l6725:	
  6524                           
  6525                           ;usb_function_cdc.c: 1027: {
  6526                           ;usb_function_cdc.c: 1028: *pCDCDst.bRam = *pCDCSrc.bRam;
  6527                           
  6528                           ;usb_function_cdc.c: 1029: pCDCDst.bRam++;
  6529                           
  6530                           ;usb_function_cdc.c: 1030: pCDCSrc.bRam++;
  6531                           
  6532                           ;usb_function_cdc.c: 1031: i--;
  6533  0788  27E1  3187         	fcall	PL8	;call to abstracted procedure
  6534  078A                     l6733:	
  6535  078A  0021               	movlb	1	; select bank1
  6536  078B  08A9               	movf	CDCTxService@i^(0+128),f
  6537  078C  1D03               	skipz
  6538  078D  2F88               	goto	l6725
  6539  078E                     l6735:	
  6540                           
  6541                           ;usb_function_cdc.c: 1032: }
  6542                           ;usb_function_cdc.c: 1033: }
  6543                           ;usb_function_cdc.c: 1039: if(cdc_tx_len == 0)
  6544  078E  0022               	movlb	2	; select bank2
  6545  078F  08D9               	movf	_cdc_tx_len^(0+256),f
  6546  0790  1D03               	skipz
  6547  0791  2F9C               	goto	l6743
  6548                           
  6549                           ;usb_function_cdc.c: 1040: {
  6550                           ;usb_function_cdc.c: 1041: if(byte_to_send == 64)
  6551  0792  0021               	movlb	1	; select bank1
  6552  0793  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6553  0794  3A40               	xorlw	64
  6554  0795  1D03               	skipz
  6555  0796  2F99               	goto	l6741
  6556                           
  6557                           ;usb_function_cdc.c: 1042: cdc_trf_state = 2;
  6558  0797  3002               	movlw	2
  6559  0798  2F9A               	goto	L4
  6560  0799                     l6741:	
  6561                           
  6562                           ;usb_function_cdc.c: 1043: else
  6563                           ;usb_function_cdc.c: 1044: cdc_trf_state = 3;
  6564  0799  3003               	movlw	3
  6565  079A                     L4:	
  6566  079A  0022               	movlb	2	; select bank2
  6567  079B  00D8               	movwf	_cdc_trf_state^(0+256)
  6568  079C                     l6743:	
  6569                           
  6570                           ;usb_function_cdc.c: 1045: }
  6571                           ;usb_function_cdc.c: 1046: CDCDataInHandle = USBTransferOnePacket(2,1,(BYTE*)&cdc_data_t
      +                          x,byte_to_send);
  6572  079C  0021               	movlb	1	; select bank1
  6573  079D  3020               	movlw	32
  6574  079E  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  6575  079F  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  6576  07A0  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  6577  07A1  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6578  07A2  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  6579  07A3  3002               	movlw	2
  6580  07A4  27A9  3187         	fcall	_USBTransferOnePacket
  6581  07A6  0022               	movlb	2	; select bank2
  6582  07A7  00C6               	movwf	_CDCDataInHandle^(0+256)
  6583  07A8  2F4D               	goto	l6683
  6584  07A9                     __end_of_CDCTxService:	
  6585  07A9                     __ptext2448:	
  6586 ;; *************** function _USBTransferOnePacket *****************
  6587 ;; Defined at:
  6588 ;;		line 1173 in file "../USB/usb_device.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;  ep              1    wreg     unsigned char 
  6591 ;;  dir             1    0[BANK1 ] unsigned char 
  6592 ;;  data            1    1[BANK1 ] PTR unsigned char 
  6593 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
  6594 ;;  len             1    2[BANK1 ] unsigned char 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  ep              1    5[BANK1 ] unsigned char 
  6597 ;;  handle          1    6[BANK1 ] PTR volatile struct __BD
  6598 ;;		 -> NULL(0), BDT(48), 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      PTR void 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6603 ;; Tracked objects:
  6604 ;;		On entry : 1F/1
  6605 ;;		On exit  : 1F/1
  6606 ;;		Unchanged: FFFE0/0
  6607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6608 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;Total ram usage:        7 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:   11
  6615 ;; This function calls:
  6616 ;;		Nothing
  6617 ;; This function is called by:
  6618 ;;		_getsUSBUSART
  6619 ;;		_CDCTxService
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _USBTransferOnePacket
  6625  07A9                     _USBTransferOnePacket:	
  6626                           
  6627                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l-status,0]
  6628                           ;USBTransferOnePacket@ep stored from wreg
  6629  07A9  00A5               	movwf	USBTransferOnePacket@ep^(0+128)
  6630                           
  6631                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  6632                           ;usb_device.c: 1177: if(dir != 0)
  6633  07AA  0820               	movf	USBTransferOnePacket@dir^(0+128),w
  6634  07AB  1903               	btfsc	3,2
  6635  07AC  2FB0               	goto	l6441
  6636                           
  6637                           ;usb_device.c: 1178: {
  6638                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  6639  07AD  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6640  07AE  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6641  07AF  2FB2               	goto	L5
  6642  07B0                     l6441:	
  6643                           ;usb_device.c: 1181: }
  6644                           
  6645                           
  6646                           ;usb_device.c: 1182: else
  6647                           ;usb_device.c: 1183: {
  6648                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  6649  07B0  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6650  07B1  3E40               	addlw	_pBDTEntryOut& (0+255)
  6651  07B2                     L5:	
  6652  07B2  0086               	movwf	6
  6653  07B3  3001               	movlw	1	; select bank2/3
  6654  07B4  0087               	movwf	7
  6655  07B5  0801               	movf	1,w
  6656  07B6  00A6               	movwf	USBTransferOnePacket@handle^(0+128)
  6657                           
  6658                           ;usb_device.c: 1186: }
  6659                           ;usb_device.c: 1190: if(handle == 0)
  6660  07B7  08A6               	movf	USBTransferOnePacket@handle^(0+128),f
  6661  07B8  1903               	btfsc	3,2
  6662                           
  6663                           ;usb_device.c: 1191: {
  6664                           ;usb_device.c: 1192: return 0;
  6665  07B9  3400               	retlw	0
  6666                           
  6667                           ;usb_device.c: 1193: }
  6668                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  6669  07BA  0821               	movf	USBTransferOnePacket@data^(0+128),w
  6670  07BB  00A3               	movwf	??_USBTransferOnePacket^(0+128)
  6671  07BC  3002               	movlw	2
  6672  07BD  00A4               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  6673  07BE  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6674  07BF  3E02               	addlw	2
  6675  07C0  0086               	movwf	6
  6676  07C1  0187               	clrf	7
  6677  07C2  0823               	movf	??_USBTransferOnePacket^(0+128),w
  6678  07C3  3FC0               	movwi [0]fsr1
  6679  07C4  0824               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  6680  07C5  3FC1               	movwi [1]fsr1
  6681                           
  6682                           ;usb_device.c: 1207: handle->CNT = len;
  6683  07C6  0A26               	incf	USBTransferOnePacket@handle^(0+128),w
  6684  07C7  0086               	movwf	6
  6685  07C8  0822               	movf	USBTransferOnePacket@len^(0+128),w
  6686  07C9  0081               	movwf	1
  6687                           
  6688                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  6689  07CA  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6690  07CB  0086               	movwf	6
  6691  07CC  3040               	movlw	64
  6692  07CD  0581               	andwf	1,f
  6693                           
  6694                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  6695  07CE  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6696  07CF  0086               	movwf	6
  6697  07D0  3088               	movlw	136
  6698  07D1  0481               	iorwf	1,f
  6699                           
  6700                           ;usb_device.c: 1212: if(dir != 0)
  6701  07D2  0820               	movf	USBTransferOnePacket@dir^(0+128),w
  6702  07D3  1903               	btfsc	3,2
  6703  07D4  2FD8               	goto	l6459
  6704                           
  6705                           ;usb_device.c: 1213: {
  6706                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  6707  07D5  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6708  07D6  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6709  07D7  2FDA               	goto	L6
  6710  07D8                     l6459:	
  6711                           ;usb_device.c: 1216: }
  6712                           
  6713                           
  6714                           ;usb_device.c: 1217: else
  6715                           ;usb_device.c: 1218: {
  6716                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  6717  07D8  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6718  07D9  3E40               	addlw	_pBDTEntryOut& (0+255)
  6719  07DA                     L6:	
  6720  07DA  0086               	movwf	6
  6721  07DB  3001               	movlw	1	; select bank2/3
  6722  07DC  0087               	movwf	7
  6723  07DD  3004               	movlw	4
  6724  07DE  0681               	xorwf	1,f
  6725                           
  6726                           ;usb_device.c: 1221: }
  6727                           ;usb_device.c: 1222: return (void*)handle;
  6728  07DF  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6729  07E0  0008               	return
  6730  07E1                     __end_of_USBTransferOnePacket:	
  6731  07E1                     PL8:	
  6732  07E1  0023               	movlb	3	; select bank3
  6733  07E2  0828               	movf	_pCDCDst^(0+384),w
  6734  07E3  0086               	movwf	6
  6735  07E4  3002               	movlw	2	; select bank4/5
  6736  07E5  0087               	movwf	7
  6737  07E6  082A               	movf	_pCDCSrc^(0+384),w
  6738  07E7  0084               	movwf	4
  6739  07E8  3003               	movlw	3	; select bank6/7
  6740  07E9  0085               	movwf	5
  6741  07EA  0800               	movf	0,w
  6742  07EB  0081               	movwf	1
  6743  07EC  0AA8               	incf	_pCDCDst^(0+384),f
  6744  07ED  0AAA               	incf	_pCDCSrc^(0+384),f
  6745  07EE  0021               	movlb	1	; select bank1
  6746  07EF  03A9               	decf	CDCTxService@i^(0+128),f
  6747  07F0  0008               	return
  6748  07F1                     __end_ofPL8:	
  6749                           
  6750                           	psect	text2455
  6751  1712                     __ptext2455:	
  6752 ;; *************** function _DetectAsics *****************
  6753 ;; Defined at:
  6754 ;;		line 143 in file "klondike.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  x               1    3[BANK2 ] unsigned char 
  6759 ;;  x               1    2[BANK2 ] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 17F/2
  6766 ;;		On exit  : 1F/3
  6767 ;;		Unchanged: FFE00/0
  6768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Totals:         0       0       6       4       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;Total ram usage:       10 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:   13
  6776 ;; This function calls:
  6777 ;;		_AsicPreCalc
  6778 ;;		_SendAsicData
  6779 ;;		___awdiv
  6780 ;; This function is called by:
  6781 ;;		_UserInit
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           
  6786                           ;psect for function _DetectAsics
  6787  1712                     _DetectAsics:	
  6788  1712                     l7135:	
  6789                           ; Regs used in _DetectAsics: [wreg-status,0+pclath+cstack]
  6790                           
  6791                           
  6792                           ;klondike.c: 144: BankSize = 8;
  6793  1712  3008               	movlw	8
  6794  1713  0023               	movlb	3	; select bank3
  6795  1714  00EB               	movwf	_BankSize^(0+384)
  6796                           
  6797                           ;klondike.c: 145: Status.ChipCount = 0;
  6798  1715  01D4               	clrf	(_Status^(0+384)+1)	;volatile
  6799                           
  6800                           ;klondike.c: 146: for(BYTE x = 0; x < BankSize; x++)
  6801  1716  0022               	movlb	2	; select bank2
  6802  1717  01ED               	clrf	DetectAsics@x^(0+256)
  6803  1718                     l7145:	
  6804  1718  0023               	movlb	3	; select bank3
  6805  1719  086B               	movf	_BankSize^(0+384),w
  6806  171A  0022               	movlb	2	; select bank2
  6807  171B  026D               	subwf	DetectAsics@x^(0+256),w
  6808  171C  1803               	btfsc	3,0
  6809  171D  2F2F               	goto	l7147
  6810                           
  6811                           ;klondike.c: 147: NonceRanges[x] = StartNonce;
  6812  171E  086D               	movf	DetectAsics@x^(0+256),w
  6813  171F  0709               	addwf	9,w
  6814  1720  0709               	addwf	9,w
  6815  1721  3E20               	addlw	_NonceRanges& (0+255)
  6816  1722  0086               	movwf	6
  6817  1723  3003               	movlw	3	; select bank6/7
  6818  1724  0087               	movwf	7
  6819  1725  3064               	movlw	100
  6820  1726  3FC0               	movwi [0]fsr1
  6821  1727  3052               	movlw	82
  6822  1728  3FC1               	movwi [1]fsr1
  6823  1729  30FE               	movlw	254
  6824  172A  3FC2               	movwi [2]fsr1
  6825  172B  307F               	movlw	127
  6826  172C  3FC3               	movwi [3]fsr1
  6827  172D  0AED               	incf	DetectAsics@x^(0+256),f
  6828  172E  2F18               	goto	l7145
  6829  172F                     l7147:	
  6830                           
  6831                           ;klondike.c: 148: AsicPreCalc(&TestWork);
  6832  172F  3016               	movlw	low (_TestWork| (0+32768))
  6833  1730  0021               	movlb	1	; select bank1
  6834  1731  00B0               	movwf	?_AsicPreCalc^(0+128)
  6835  1732  3091               	movlw	high (_TestWork| (0+32768))
  6836  1733  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  6837  1734  318B  23BB  3197   	fcall	_AsicPreCalc
  6838                           
  6839                           ;klondike.c: 150: SendAsicData(&WorkQue[4-1], (StartNonce & 0x80000000) ? 0x90 : 0x48);
  6840  1737  3016               	movlw	low (_TestWork| (0+32768))
  6841  1738  0084               	movwf	4
  6842  1739  3091               	movlw	high (_TestWork| (0+32768))
  6843  173A  0085               	movwf	5
  6844  173B  30C3               	movlw	195
  6845  173C  0086               	movwf	6
  6846  173D  3023               	movlw	35
  6847  173E  0087               	movwf	7
  6848  173F  302D               	movlw	45
  6849  1740  00E7               	movwf	??_DetectAsics^(0+128)
  6850  1741                     u5370:	
  6851  1741  0012               	moviw fsr0++
  6852  1742  001E               	movwi fsr1++
  6853  1743  0BE7               	decfsz	??_DetectAsics^(0+128),f
  6854  1744  2F41               	goto	u5370
  6855  1745  30C3               	movlw	195
  6856  1746  00A6               	movwf	?_SendAsicData^(0+128)
  6857  1747  3023               	movlw	35
  6858  1748  00A7               	movwf	(?_SendAsicData^(0+128)+1)
  6859  1749  3048               	movlw	72
  6860  174A  00A8               	movwf	(?_SendAsicData^(0+128)+2)
  6861  174B  3189  2114  3197   	fcall	_SendAsicData
  6862                           
  6863                           ;klondike.c: 152: Status.ChipCount = 16;
  6864  174E  3010               	movlw	16
  6865  174F  0023               	movlb	3	; select bank3
  6866  1750  00D4               	movwf	(_Status^(0+384)+1)	;volatile
  6867                           
  6868                           ;klondike.c: 155: BankSize = (Status.ChipCount+1)/2;
  6869  1751  3002               	movlw	2
  6870  1752  0021               	movlb	1	; select bank1
  6871  1753  00A0               	movwf	?___awdiv^(0+128)
  6872  1754  01A1               	clrf	(?___awdiv+1)^(0+128)
  6873  1755  0023               	movlb	3	; select bank3
  6874  1756  0854               	movf	(_Status^(0+384)+1),w	;volatile
  6875  1757  3E01               	addlw	1
  6876  1758  0021               	movlb	1	; select bank1
  6877  1759  00A2               	movwf	(?___awdiv^(0+128)+2)
  6878  175A  3000               	movlw	0
  6879  175B  1803               	skipnc
  6880  175C  3001               	movlw	1
  6881  175D  00A3               	movwf	(?___awdiv^(0+128)+3)
  6882  175E  27C0  3197         	fcall	___awdiv
  6883  1760  0820               	movf	?___awdiv^(0+128),w
  6884  1761  0023               	movlb	3	; select bank3
  6885  1762  00EB               	movwf	_BankSize^(0+384)
  6886                           
  6887                           ;klondike.c: 156: WorkTicks = 16777 / BankSize;
  6888  1763  0021               	movlb	1	; select bank1
  6889  1764  00A0               	movwf	?___awdiv^(0+128)
  6890  1765  3089               	movlw	137
  6891  1766  01A1               	clrf	(?___awdiv+1)^(0+128)
  6892  1767  00A2               	movwf	(?___awdiv^(0+128)+2)
  6893  1768  3041               	movlw	65
  6894  1769  00A3               	movwf	(?___awdiv^(0+128)+3)
  6895  176A  27C0  3197         	fcall	___awdiv
  6896  176C  0821               	movf	(?___awdiv+1)^(0+128),w
  6897  176D  0023               	movlb	3	; select bank3
  6898  176E  00D2               	movwf	(_WorkTicks+1)^(0+384)	;volatile
  6899  176F  0021               	movlb	1	; select bank1
  6900  1770  0820               	movf	?___awdiv^(0+128),w
  6901  1771  0023               	movlb	3	; select bank3
  6902  1772  00D1               	movwf	_WorkTicks^(0+384)	;volatile
  6903                           
  6904                           ;klondike.c: 157: NonceRanges[0] = 0;
  6905  1773  0026               	movlb	6	; select bank6
  6906  1774  01A0               	clrf	_NonceRanges^(0+768)
  6907  1775  01A1               	clrf	(_NonceRanges+1)^(0+768)
  6908  1776  01A2               	clrf	(_NonceRanges+2)^(0+768)
  6909  1777  01A3               	clrf	(_NonceRanges+3)^(0+768)
  6910                           
  6911                           ;klondike.c: 158: for(BYTE x = 1; x < BankSize; x++)
  6912  1778  0022               	movlb	2	; select bank2
  6913  1779  01EE               	clrf	DetectAsics@x_3058^(0+256)
  6914  177A                     L9:	
  6915  177A  0AEE               	incf	DetectAsics@x_3058^(0+256),f
  6916  177B  0023               	movlb	3	; select bank3
  6917  177C  086B               	movf	_BankSize^(0+384),w
  6918  177D  0022               	movlb	2	; select bank2
  6919  177E  026E               	subwf	DetectAsics@x_3058^(0+256),w
  6920  177F  1803               	btfsc	3,0
  6921  1780  2FBA               	goto	l7169
  6922                           
  6923                           ;klondike.c: 159: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6924  1781  0023               	movlb	3	; select bank3
  6925  1782  086B               	movf	_BankSize^(0+384),w
  6926  1783  0021               	movlb	1	; select bank1
  6927  1784  00E7               	movwf	??_DetectAsics^(0+128)
  6928  1785  30FD               	movlw	low ((_BankRanges| (0+32768)+65532))
  6929  1786  01E8               	clrf	(??_DetectAsics^(0+128)+1)
  6930  1787  35E7               	lslf	??_DetectAsics^(0+128),f
  6931  1788  0DE8               	rlf	(??_DetectAsics^(0+128)+1),f
  6932  1789  35E7               	lslf	??_DetectAsics^(0+128),f
  6933  178A  0DE8               	rlf	(??_DetectAsics^(0+128)+1),f
  6934  178B  0767               	addwf	??_DetectAsics^(0+128),w
  6935  178C  0084               	movwf	4
  6936  178D  308F               	movlw	high ((_BankRanges| (0+32768)+65532))
  6937  178E  3D68               	addwfc	(??_DetectAsics+1)^(0+128),w
  6938  178F  0085               	movwf	5
  6939  1790  3F00               	moviw [0]fsr0
  6940  1791  00E9               	movwf	(??_DetectAsics+2)^(0+128)
  6941  1792  3F01               	moviw [1]fsr0
  6942  1793  00EA               	movwf	((??_DetectAsics+2)^(0+128)+1)
  6943  1794  3F02               	moviw [2]fsr0
  6944  1795  00EB               	movwf	((??_DetectAsics+2)^(0+128)+2)
  6945  1796  3F03               	moviw [3]fsr0
  6946  1797  00EC               	movwf	((??_DetectAsics+2)^(0+128)+3)
  6947  1798  0022               	movlb	2	; select bank2
  6948  1799  086E               	movf	DetectAsics@x_3058^(0+256),w
  6949  179A  0709               	addwf	9,w
  6950  179B  0709               	addwf	9,w
  6951  179C  3E1C               	addlw	(_NonceRanges+252)& (0+255)
  6952  179D  0086               	movwf	6
  6953  179E  3003               	movlw	3	; select bank6/7
  6954  179F  0087               	movwf	7
  6955  17A0  3F40               	moviw [0]fsr1
  6956  17A1  0021               	movlb	1	; select bank1
  6957  17A2  07E9               	addwf	(??_DetectAsics+2)^(0+128),f
  6958  17A3  3F41               	moviw [1]fsr1
  6959  17A4  3DEA               	addwfc	((??_DetectAsics+2)^(0+128)+1),f
  6960  17A5  3F42               	moviw [2]fsr1
  6961  17A6  3DEB               	addwfc	((??_DetectAsics+2)^(0+128)+2),f
  6962  17A7  3F43               	moviw [3]fsr1
  6963  17A8  3DEC               	addwfc	((??_DetectAsics+2)^(0+128)+3),f
  6964  17A9  0022               	movlb	2	; select bank2
  6965  17AA  086E               	movf	DetectAsics@x_3058^(0+256),w
  6966  17AB  0709               	addwf	9,w
  6967  17AC  0709               	addwf	9,w
  6968  17AD  3E20               	addlw	_NonceRanges& (0+255)
  6969  17AE  0086               	movwf	6
  6970  17AF  0021               	movlb	1	; select bank1
  6971  17B0  0869               	movf	(??_DetectAsics+2)^(0+128),w
  6972  17B1  3FC0               	movwi [0]fsr1
  6973  17B2  086A               	movf	(??_DetectAsics+3)^(0+128),w
  6974  17B3  3FC1               	movwi [1]fsr1
  6975  17B4  086B               	movf	(??_DetectAsics+4)^(0+128),w
  6976  17B5  3FC2               	movwi [2]fsr1
  6977  17B6  086C               	movf	(??_DetectAsics+5)^(0+128),w
  6978  17B7  3FC3               	movwi [3]fsr1
  6979  17B8  0022               	movlb	2	; select bank2
  6980  17B9  2F7A               	goto	L9
  6981  17BA                     l7169:	
  6982                           
  6983                           ;klondike.c: 160: Status.State ='R';
  6984  17BA  3052               	movlw	82
  6985  17BB  0023               	movlb	3	; select bank3
  6986  17BC  00D3               	movwf	_Status^(0+384)	;volatile
  6987                           
  6988                           ;klondike.c: 161: Status.HashCount = 0;
  6989  17BD  01DA               	clrf	(_Status^(0+384)+7)	;volatile
  6990  17BE  01DB               	clrf	((_Status+1)^(0+384)+7)	;volatile
  6991  17BF  0008               	return
  6992  17C0                     __end_of_DetectAsics:	
  6993  17C0                     __ptext2466:	
  6994 ;; *************** function ___awdiv *****************
  6995 ;; Defined at:
  6996 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/awdiv.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;  divisor         2    0[BANK1 ] int 
  6999 ;;  dividend        2    2[BANK1 ] int 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  quotient        2    6[BANK1 ] int 
  7002 ;;  sign            1    5[BANK1 ] unsigned char 
  7003 ;;  counter         1    4[BANK1 ] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  2    0[BANK1 ] int 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 1F/1
  7010 ;;		On exit  : 1F/1
  7011 ;;		Unchanged: FFFE0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        8 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:   11
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_DetectAsics
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           
  7028                           ;psect for function ___awdiv
  7029  17C0                     ___awdiv:	
  7030                           
  7031                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7032  17C0  01A5               	clrf	___awdiv@sign^(0+128)
  7033  17C1  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  7034  17C2  2FCA               	goto	l7349
  7035  17C3  09A0               	comf	___awdiv@divisor^(0+128),f
  7036  17C4  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  7037  17C5  0AA0               	incf	___awdiv@divisor^(0+128),f
  7038  17C6  1903               	skipnz
  7039  17C7  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  7040  17C8  01A5               	clrf	___awdiv@sign^(0+128)
  7041  17C9  0AA5               	incf	___awdiv@sign^(0+128),f
  7042  17CA                     l7349:	
  7043  17CA  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  7044  17CB  2FD3               	goto	l7355
  7045  17CC  09A2               	comf	___awdiv@dividend^(0+128),f
  7046  17CD  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  7047  17CE  0AA2               	incf	___awdiv@dividend^(0+128),f
  7048  17CF  1903               	skipnz
  7049  17D0  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  7050  17D1  3001               	movlw	1
  7051  17D2  06A5               	xorwf	___awdiv@sign^(0+128),f
  7052  17D3                     l7355:	
  7053  17D3  01A6               	clrf	___awdiv@quotient^(0+128)
  7054  17D4  01A7               	clrf	(___awdiv@quotient+1)^(0+128)
  7055  17D5  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7056  17D6  0420               	iorwf	___awdiv@divisor^(0+128),w
  7057  17D7  1903               	skipnz
  7058  17D8  2FF3               	goto	l7377
  7059  17D9  01A4               	clrf	___awdiv@counter^(0+128)
  7060  17DA                     L11:	
  7061  17DA  0AA4               	incf	___awdiv@counter^(0+128),f
  7062  17DB  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  7063  17DC  2FE0               	goto	l7365
  7064  17DD  35A0               	lslf	___awdiv@divisor^(0+128),f
  7065  17DE  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  7066  17DF  2FDA               	goto	L11
  7067  17E0                     l7365:	
  7068  17E0  35A6               	lslf	___awdiv@quotient^(0+128),f
  7069  17E1  0DA7               	rlf	(___awdiv@quotient+1)^(0+128),f
  7070  17E2  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7071  17E3  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  7072  17E4  1D03               	skipz
  7073  17E5  2FE8               	goto	u5615
  7074  17E6  0820               	movf	___awdiv@divisor^(0+128),w
  7075  17E7  0222               	subwf	___awdiv@dividend^(0+128),w
  7076  17E8                     u5615:	
  7077  17E8  1C03               	skipc
  7078  17E9  2FEF               	goto	l7373
  7079  17EA  0820               	movf	___awdiv@divisor^(0+128),w
  7080  17EB  02A2               	subwf	___awdiv@dividend^(0+128),f
  7081  17EC  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7082  17ED  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
  7083  17EE  1426               	bsf	___awdiv@quotient^(0+128),0
  7084  17EF                     l7373:	
  7085  17EF  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
  7086  17F0  0CA0               	rrf	___awdiv@divisor^(0+128),f
  7087  17F1  0BA4               	decfsz	___awdiv@counter^(0+128),f
  7088  17F2  2FE0               	goto	l7365
  7089  17F3                     l7377:	
  7090  17F3  0825               	movf	___awdiv@sign^(0+128),w
  7091  17F4  1903               	btfsc	3,2
  7092  17F5  2FFB               	goto	l7381
  7093  17F6  09A6               	comf	___awdiv@quotient^(0+128),f
  7094  17F7  09A7               	comf	(___awdiv@quotient+1)^(0+128),f
  7095  17F8  0AA6               	incf	___awdiv@quotient^(0+128),f
  7096  17F9  1903               	skipnz
  7097  17FA  0AA7               	incf	(___awdiv@quotient+1)^(0+128),f
  7098  17FB                     l7381:	
  7099  17FB  0827               	movf	(___awdiv@quotient+1)^(0+128),w
  7100  17FC  00A1               	movwf	(?___awdiv+1)^(0+128)
  7101  17FD  0826               	movf	___awdiv@quotient^(0+128),w
  7102  17FE  00A0               	movwf	?___awdiv^(0+128)
  7103  17FF  0008               	return
  7104  1800                     __end_of___awdiv:	
  7105                           
  7106                           	psect	intentry
  7107  0004                     __pintentry:	
  7108 ;; *************** function _ISRCode *****************
  7109 ;; Defined at:
  7110 ;;		line 61 in file "main.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;		None               void
  7117 ;; Registers used:
  7118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 1F/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        1 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:   10
  7131 ;; This function calls:
  7132 ;;		_ResultRx
  7133 ;;		_WorkTick
  7134 ;;		_UpdateFanSpeed
  7135 ;;		_I2CSlave
  7136 ;;		_I2CRead
  7137 ;;		_I2CWrite
  7138 ;;		_USBDeviceTasks
  7139 ;; This function is called by:
  7140 ;;		Interrupt level 1
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144  0004                     _ISRCode:	
  7145                           
  7146                           ; Regs used in _ISRCode: [wreg-status,0+pclath+cstack]
  7147  0004  3180               	pagesel	$
  7148                           
  7149                           ;main.c: 62: if(RCIF)
  7150  0005  0020               	movlb	0	; select bank0
  7151  0006  1E91               	btfss	17,5	;volatile
  7152  0007  280B               	goto	i1l8231
  7153                           
  7154                           ;main.c: 63: ResultRx();
  7155  0008  3185  25D1  3180   	fcall	_ResultRx
  7156  000B                     i1l8231:	
  7157                           
  7158                           ;main.c: 64: if(TMR0IF)
  7159  000B  1D0B               	btfss	11,2	;volatile
  7160  000C  2810               	goto	i1l8235
  7161                           
  7162                           ;main.c: 65: WorkTick();
  7163  000D  3195  25E7  3180   	fcall	_WorkTick
  7164  0010                     i1l8235:	
  7165                           
  7166                           ;main.c: 66: if(TMR1GIF)
  7167  0010  0020               	movlb	0	; select bank0
  7168  0011  1F91               	btfss	17,7	;volatile
  7169  0012  2816               	goto	i1l8239
  7170                           
  7171                           ;main.c: 67: UpdateFanSpeed();
  7172  0013  3187  27F1  3180   	fcall	_UpdateFanSpeed
  7173  0016                     i1l8239:	
  7174                           
  7175                           ;main.c: 68: if(BCL1IF) {
  7176  0016  0020               	movlb	0	; select bank0
  7177  0017  1D92               	btfss	18,3	;volatile
  7178  0018  281D               	goto	i1l8245
  7179                           
  7180                           ;main.c: 69: BCL1IF = 0; I2CState.Next = 0;
  7181  0019  1192               	bcf	18,3	;volatile
  7182  001A  30E0               	movlw	-32
  7183  001B  0022               	movlb	2	; select bank2
  7184  001C  05E8               	andwf	_I2CState^(0+256),f
  7185  001D                     i1l8245:	
  7186                           
  7187                           ;main.c: 70: }
  7188                           ;main.c: 71: if(SSP1IF) {
  7189  001D  0020               	movlb	0	; select bank0
  7190  001E  1D91               	btfss	17,3	;volatile
  7191  001F  2837               	goto	i1l998
  7192                           
  7193                           ;main.c: 72: SSP1IF = 0;
  7194  0020  1191               	bcf	17,3	;volatile
  7195                           
  7196                           ;main.c: 73: if(I2CState.Slave)
  7197  0021  0022               	movlb	2	; select bank2
  7198  0022  1EE8               	btfss	_I2CState^(0+256),5
  7199  0023  2828               	goto	i1l8251
  7200                           
  7201                           ;main.c: 74: I2CSlave();
  7202  0024  3196  266C  3180   	fcall	_I2CSlave
  7203  0027  2837               	goto	i1l998
  7204  0028                     i1l8251:	
  7205                           
  7206                           ;main.c: 75: else if(I2CState.Next < 10)
  7207  0028  0868               	movf	_I2CState^(0+256),w
  7208  0029  391F               	andlw	31
  7209  002A  0020               	movlb	0	; select bank0
  7210  002B  00EF               	movwf	??_ISRCode
  7211  002C  300A               	movlw	10
  7212  002D  026F               	subwf	??_ISRCode,w
  7213  002E  1803               	skipnc
  7214  002F  2834               	goto	i1l8255
  7215                           
  7216                           ;main.c: 76: I2CRead();
  7217  0030  3186  2640  3180   	fcall	_I2CRead
  7218  0033  2837               	goto	i1l998
  7219  0034                     i1l8255:	
  7220                           
  7221                           ;main.c: 77: else
  7222                           ;main.c: 78: I2CWrite();
  7223  0034  3193  23D1  3180   	fcall	_I2CWrite
  7224  0037                     i1l998:	
  7225                           
  7226                           ;main.c: 79: }
  7227                           ;main.c: 81: USBDeviceTasks();
  7228  0037  3181  2176         	fcall	_USBDeviceTasks
  7229  0039  0009               	retfie
  7230  003A                     __end_of_ISRCode:	
  7231                           
  7232                           	psect	text2473
  7233  003C                     __ptext2473:	
  7234 ;; *************** function _USBCtrlTrfSetupHandler *****************
  7235 ;; Defined at:
  7236 ;;		line 2623 in file "../USB/usb_device.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;		None
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;		None
  7241 ;; Return value:  Size  Location     Type
  7242 ;;		None               void
  7243 ;; Registers used:
  7244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7245 ;; Tracked objects:
  7246 ;;		On entry : 1F/0
  7247 ;;		On exit  : 1C/0
  7248 ;;		Unchanged: FFFE0/0
  7249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;Total ram usage:        0 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; Hardware stack levels required when called:    7
  7257 ;; This function calls:
  7258 ;;		_USBCheckStdRequest
  7259 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7260 ;;		_USBCtrlEPServiceComplete
  7261 ;; This function is called by:
  7262 ;;		_USBCtrlEPService
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           
  7267                           ;psect for function _USBCtrlTrfSetupHandler
  7268  003C                     _USBCtrlTrfSetupHandler:	
  7269  003C                     i1l8063:	
  7270                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-status,0+pclath+cstack]
  7271                           
  7272                           
  7273                           ;usb_device.c: 2627: shortPacketStatus = 0;
  7274  003C  0022               	movlb	2	; select bank2
  7275  003D  01E2               	clrf	_shortPacketStatus^(0+256)	;volatile
  7276                           
  7277                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  7278  003E  01D0               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
  7279                           
  7280                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  7281  003F  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  7282                           
  7283                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  7284  0040  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  7285                           
  7286                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  7287  0041  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  7288                           
  7289                           ;usb_device.c: 2632: controlTransferState = 0;
  7290  0042  01DA               	clrf	_controlTransferState^(0+256)	;volatile
  7291                           
  7292                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  7293  0043  083D               	movf	_pBDTEntryIn^(0+256),w
  7294  0044  0086               	movwf	6
  7295  0045  3004               	movlw	4
  7296  0046  0187               	clrf	7
  7297  0047  1381               	bcf	1,7
  7298                           
  7299                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7300  0048  06BD               	xorwf	_pBDTEntryIn^(0+256),f
  7301                           
  7302                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  7303  0049  083D               	movf	_pBDTEntryIn^(0+256),w
  7304  004A  0086               	movwf	6
  7305  004B  3004               	movlw	4
  7306  004C  1381               	bcf	1,7
  7307                           
  7308                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7309  004D  06BD               	xorwf	_pBDTEntryIn^(0+256),f
  7310                           
  7311                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  7312  004E  0021               	movlb	1	; select bank1
  7313  004F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  7314  0050  0086               	movwf	6
  7315  0051  1381               	bcf	1,7
  7316                           
  7317                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  7318  0052  0022               	movlb	2	; select bank2
  7319  0053  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  7320                           
  7321                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  7322  0054  01E6               	clrf	(_inPipes^(0+256)+3)	;volatile
  7323  0055  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
  7324                           
  7325                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  7326  0056  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  7327                           
  7328                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  7329  0057  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  7330  0058  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  7331                           
  7332                           ;usb_device.c: 2656: USBCheckStdRequest();
  7333  0059  2066  3180         	fcall	_USBCheckStdRequest
  7334                           
  7335                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  7336  005B  3003               	movlw	3
  7337  005C  0020               	movlb	0	; select bank0
  7338  005D  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7339  005E  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7340  005F  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7341  0060  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7342  0061  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7343  0062  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7344  0063  2212               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7345                           
  7346                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  7347  0064  3184  2C77         	ljmp	i1l7645
  7348  0066                     __end_of_USBCtrlTrfSetupHandler:	
  7349  0066                     __ptext2481:	
  7350 ;; *************** function _USBCheckStdRequest *****************
  7351 ;; Defined at:
  7352 ;;		line 2839 in file "../USB/usb_device.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;		None
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;		None               void
  7359 ;; Registers used:
  7360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 1F/2
  7363 ;;		On exit  : 1D/0
  7364 ;;		Unchanged: FFFE0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;Total ram usage:        0 bytes
  7371 ;; Hardware stack levels used:    1
  7372 ;; Hardware stack levels required when called:    6
  7373 ;; This function calls:
  7374 ;;		_USBStdGetDscHandler
  7375 ;;		_USBStdSetCfgHandler
  7376 ;;		_USBStdGetStatusHandler
  7377 ;;		_USBStdFeatureReqHandler
  7378 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7379 ;; This function is called by:
  7380 ;;		_USBCtrlTrfSetupHandler
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           
  7385                           ;psect for function _USBCheckStdRequest
  7386  0066                     _USBCheckStdRequest:	
  7387                           
  7388                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  7389                           
  7390                           ; Regs used in _USBCheckStdRequest: [wreg-status,0+pclath+cstack]
  7391  0066  0020               	movlb	0	; select bank0
  7392  0067  0E50               	swapf	80,w	;volatile
  7393  0068  0C89               	rrf	9,f
  7394  0069  3903               	andlw	3
  7395  006A  1D03               	btfss	3,2
  7396  006B  0008               	return
  7397                           
  7398                           ;usb_device.c: 2880: break;
  7399  006C  0851               	movf	81,w	;volatile
  7400                           
  7401                           ; Switch size 1, requested type "space"
  7402                           ; Number of cases is 11, Range of values is 0 to 12
  7403                           ; switch strategies available:
  7404                           ; Name         Instructions Cycles
  7405                           ; direct_byte           32     6 (fixed)
  7406                           ; simple_byte           34    18 (average)
  7407                           ; jumptable            260     6 (fixed)
  7408                           ; rangetable            17     4 (fixed)
  7409                           ; spacedrange           31     6 (fixed)
  7410                           ; locatedrange          13     3 (fixed)
  7411                           ;	Chosen strategy is direct_byte
  7412  006D  0084               	movwf	4
  7413  006E  300D               	movlw	13
  7414  006F  0204               	subwf	4,w
  7415  0070  1803               	skipnc
  7416  0071  0008               	return
  7417  0072  3191               	movlp	high i1S8377
  7418  0073  3504               	lslf	4,w
  7419  0074  3E66               	addlw	low i1S8377
  7420  0075  0082               	movwf	2
  7421  0076                     i1l338:	
  7422  0076  0008               	return
  7423  0077                     i1l340:	
  7424                           ;usb_device.c: 2843: {
  7425                           ;usb_device.c: 2844: case 5:
  7426                           
  7427                           
  7428                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  7429  0077  0022               	movlb	2	; select bank2
  7430  0078  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7431                           
  7432                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  7433  0079  3008               	movlw	8
  7434  007A  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  7435                           
  7436                           ;usb_device.c: 2848: break;
  7437  007B  0008               	return
  7438  007C                     i1l8025:	
  7439                           
  7440                           ;usb_device.c: 2850: USBStdGetDscHandler();
  7441  007C  3194  2C93         	ljmp	i1l6533
  7442  007E                     i1l8027:	
  7443                           ;usb_device.c: 2851: break;
  7444                           
  7445                           
  7446                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  7447  007E  3194  2CF5         	ljmp	i1l7893
  7448  0080                     i1l8029:	
  7449                           ;usb_device.c: 2854: break;
  7450                           
  7451                           
  7452                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  7453  0080  3069               	movlw	_USBActiveConfiguration& (0+255)
  7454  0081                     L15:	
  7455  0081  0022               	movlb	2	; select bank2
  7456  0082  00E3               	movwf	_inPipes^(0+256)	;volatile
  7457  0083  3001               	movlw	1
  7458  0084  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
  7459                           
  7460                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  7461  0085  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
  7462                           
  7463                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  7464  0086  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
  7465                           
  7466                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  7467  0087  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7468                           
  7469                           ;usb_device.c: 2860: break;
  7470  0088  0008               	return
  7471  0089                     i1l8037:	
  7472                           
  7473                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  7474  0089  3194  2C01         	ljmp	i1l6559
  7475  008B                     i1l8039:	
  7476                           ;usb_device.c: 2863: break;
  7477                           
  7478                           
  7479                           ;usb_device.c: 2865: case 3:
  7480                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  7481  008B  28A2               	ljmp	i1l7945
  7482  008C                     i1l8041:	
  7483                           ;usb_device.c: 2867: break;
  7484                           
  7485                           
  7486                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  7487  008C  0854               	movf	84,w	;volatile
  7488  008D  3ECF               	addlw	_USBAlternateInterface& (0+255)
  7489  008E  2881               	goto	L15
  7490  008F                     i1l349:	
  7491                           ;usb_device.c: 2874: case 11:
  7492                           
  7493                           
  7494                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  7495  008F  0022               	movlb	2	; select bank2
  7496  0090  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7497                           
  7498                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  7499  0091  0020               	movlb	0	; select bank0
  7500  0092  0854               	movf	84,w	;volatile
  7501  0093  3ECF               	addlw	_USBAlternateInterface& (0+255)
  7502  0094  0086               	movwf	6
  7503  0095  3001               	movlw	1	; select bank3/4
  7504  0096  0087               	movwf	7
  7505  0097  0852               	movf	82,w	;volatile
  7506  0098  0081               	movwf	1
  7507                           
  7508                           ;usb_device.c: 2877: break;
  7509  0099  0008               	return
  7510  009A                     i1l8051:	
  7511                           
  7512                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  7513  009A  3002               	movlw	2
  7514  009B  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7515  009C  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7516  009D  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7517  009E  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7518  009F  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7519  00A0  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7520  00A1  2A12               	ljmp	i1l7849
  7521  00A2                     __end_of_USBCheckStdRequest:	
  7522  00A2                     __ptext2486:	
  7523 ;; *************** function _USBStdFeatureReqHandler *****************
  7524 ;; Defined at:
  7525 ;;		line 2907 in file "../USB/usb_device.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;		None
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  pUEP            2    6[BANK0 ] PTR unsigned char 
  7530 ;;		 -> UEP0(1), 
  7531 ;;  p               1    9[BANK0 ] PTR struct __BDT
  7532 ;;		 -> NULL(0), BDT(48), 
  7533 ;;  current_ep_d    1    8[BANK0 ] struct .
  7534 ;; Return value:  Size  Location     Type
  7535 ;;		None               void
  7536 ;; Registers used:
  7537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7538 ;; Tracked objects:
  7539 ;;		On entry : 1D/0
  7540 ;;		On exit  : 1D/0
  7541 ;;		Unchanged: FFFE0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;Total ram usage:        6 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    5
  7550 ;; This function calls:
  7551 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7552 ;; This function is called by:
  7553 ;;		_USBCheckStdRequest
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           
  7558                           ;psect for function _USBStdFeatureReqHandler
  7559  00A2                     _USBStdFeatureReqHandler:	
  7560  00A2                     i1l7945:	
  7561                           ; Regs used in _USBStdFeatureReqHandler: [wreg-status,0+pclath+cstack]
  7562                           
  7563                           
  7564                           ;usb_device.c: 2908: BDT_ENTRY *p;
  7565                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  7566                           ;usb_device.c: 2913: unsigned char* pUEP;
  7567                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  7568                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  7569  00A2  0020               	movlb	0	; select bank0
  7570  00A3  0B52               	decfsz	82,w	;volatile
  7571  00A4  28B6               	goto	i1l7957
  7572  00A5  0850               	movf	80,w	;volatile
  7573  00A6  391F               	andlw	31
  7574  00A7  1D03               	skipz
  7575  00A8  28B6               	goto	i1l7957
  7576                           
  7577                           ;usb_device.c: 2953: {
  7578                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  7579  00A9  0022               	movlb	2	; select bank2
  7580  00AA  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7581                           
  7582                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  7583  00AB  0020               	movlb	0	; select bank0
  7584  00AC  0851               	movf	81,w	;volatile
  7585  00AD  3A03               	xorlw	3
  7586  00AE  1D03               	skipz
  7587  00AF  28B4               	goto	i1l7955
  7588                           
  7589                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  7590  00B0  3001               	movlw	1
  7591  00B1  0022               	movlb	2	; select bank2
  7592  00B2  00CB               	movwf	_RemoteWakeup^(0+256)	;volatile
  7593  00B3  28B6               	goto	i1l7957
  7594  00B4                     i1l7955:	
  7595                           
  7596                           ;usb_device.c: 2957: else
  7597                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  7598  00B4  0022               	movlb	2	; select bank2
  7599  00B5  01CB               	clrf	_RemoteWakeup^(0+256)	;volatile
  7600  00B6                     i1l7957:	
  7601                           
  7602                           ;usb_device.c: 2959: }
  7603                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  7604                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  7605                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 2)&&
  7606                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  7607  00B6  0020               	movlb	0	; select bank0
  7608  00B7  0852               	movf	82,w
  7609  00B8  1D03               	skipz
  7610  00B9  0008               	return
  7611  00BA  0850               	movf	80,w	;volatile
  7612  00BB  391F               	andlw	31
  7613  00BC  3A02               	xorlw	2
  7614  00BD  1D03               	skipz
  7615  00BE  0008               	return
  7616  00BF  0854               	movf	84,w	;volatile
  7617  00C0  390F               	andlw	15
  7618  00C1  1903               	skipnz
  7619  00C2  0008               	return
  7620  00C3  0854               	movf	84,w	;volatile
  7621  00C4  390F               	andlw	15
  7622  00C5  00FA               	movwf	??_USBStdFeatureReqHandler
  7623  00C6  3003               	movlw	3
  7624  00C7  027A               	subwf	??_USBStdFeatureReqHandler,w
  7625  00C8  1803               	skipnc
  7626  00C9  0008               	return
  7627  00CA  0022               	movlb	2	; select bank2
  7628  00CB  0851               	movf	_USBDeviceState^(0+256),w	;volatile
  7629  00CC  3A20               	xorlw	32
  7630  00CD  1D03               	skipz
  7631  00CE  0008               	return
  7632                           
  7633                           ;usb_device.c: 2966: {
  7634                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  7635  00CF  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7636                           
  7637                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  7638  00D0  0020               	movlb	0	; select bank0
  7639  00D1  1BD4               	btfsc	84,7	;volatile
  7640  00D2  28DF               	goto	i1l7971
  7641                           
  7642                           ;usb_device.c: 2973: {
  7643                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  7644  00D3  0854               	movf	84,w	;volatile
  7645  00D4  390F               	andlw	15
  7646  00D5  3E40               	addlw	_pBDTEntryOut& (0+255)
  7647  00D6  0086               	movwf	6
  7648  00D7  3001               	movlw	1	; select bank2/3
  7649  00D8  0087               	movwf	7
  7650  00D9  0801               	movf	1,w
  7651  00DA  00E9               	movwf	USBStdFeatureReqHandler@p
  7652                           
  7653                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  7654  00DB  0854               	movf	84,w	;volatile
  7655  00DC  390F               	andlw	15
  7656  00DD  3E3A               	addlw	_ep_data_out& (0+255)
  7657  00DE  28EA               	goto	L17
  7658  00DF                     i1l7971:	
  7659                           ;usb_device.c: 2976: }
  7660                           
  7661                           
  7662                           ;usb_device.c: 2977: else
  7663                           ;usb_device.c: 2978: {
  7664                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  7665  00DF  0854               	movf	84,w	;volatile
  7666  00E0  390F               	andlw	15
  7667  00E1  3E3D               	addlw	_pBDTEntryIn& (0+255)
  7668  00E2  0086               	movwf	6
  7669  00E3  3001               	movlw	1	; select bank2/3
  7670  00E4  0087               	movwf	7
  7671  00E5  0801               	movf	1,w
  7672  00E6  00E9               	movwf	USBStdFeatureReqHandler@p
  7673                           
  7674                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  7675  00E7  0854               	movf	84,w	;volatile
  7676  00E8  390F               	andlw	15
  7677  00E9  3E37               	addlw	_ep_data_in& (0+255)
  7678  00EA                     L17:	
  7679  00EA  0086               	movwf	6
  7680  00EB  0801               	movf	1,w
  7681  00EC  00E8               	movwf	USBStdFeatureReqHandler@current_ep_data
  7682                           
  7683                           ;usb_device.c: 2981: }
  7684                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  7685  00ED  1868               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
  7686  00EE  28F1               	goto	i1l361
  7687                           
  7688                           ;usb_device.c: 2988: {
  7689                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  7690  00EF  1169               	bcf	USBStdFeatureReqHandler@p,2
  7691                           
  7692                           ;usb_device.c: 2990: }
  7693  00F0  28F2               	goto	i1l362
  7694  00F1                     i1l361:	
  7695                           
  7696                           ;usb_device.c: 2991: else
  7697                           ;usb_device.c: 2992: {
  7698                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  7699  00F1  1569               	bsf	USBStdFeatureReqHandler@p,2
  7700  00F2                     i1l362:	
  7701                           
  7702                           ;usb_device.c: 2994: }
  7703                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  7704  00F2  1BD4               	btfsc	84,7	;volatile
  7705  00F3  28F8               	goto	i1l7979
  7706                           
  7707                           ;usb_device.c: 3000: {
  7708                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  7709  00F4  0854               	movf	84,w	;volatile
  7710  00F5  390F               	andlw	15
  7711  00F6  3E40               	addlw	_pBDTEntryOut& (0+255)
  7712  00F7  28FB               	goto	L18
  7713  00F8                     i1l7979:	
  7714                           ;usb_device.c: 3002: }
  7715                           
  7716                           
  7717                           ;usb_device.c: 3003: else
  7718                           ;usb_device.c: 3004: {
  7719                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  7720  00F8  0854               	movf	84,w	;volatile
  7721  00F9  390F               	andlw	15
  7722  00FA  3E3D               	addlw	_pBDTEntryIn& (0+255)
  7723  00FB                     L18:	
  7724  00FB  0086               	movwf	6
  7725  00FC  3001               	movlw	1	; select bank2/3
  7726  00FD  0087               	movwf	7
  7727  00FE  0869               	movf	USBStdFeatureReqHandler@p,w
  7728  00FF  0081               	movwf	1
  7729                           
  7730                           ;usb_device.c: 3006: }
  7731                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  7732  0100  0851               	movf	81,w	;volatile
  7733  0101  3A03               	xorlw	3
  7734  0102  1D03               	skipz
  7735  0103  291C               	goto	i1l7991
  7736                           
  7737                           ;usb_device.c: 3010: {
  7738                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  7739  0104  0869               	movf	USBStdFeatureReqHandler@p,w
  7740  0105  0086               	movwf	6
  7741  0106  0187               	clrf	7
  7742  0107  1F81               	btfss	1,7
  7743  0108  2916               	goto	i1l366
  7744                           
  7745                           ;usb_device.c: 3012: {
  7746                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  7747  0109  1BD4               	btfsc	84,7	;volatile
  7748  010A  290F               	goto	i1l7989
  7749                           
  7750                           ;usb_device.c: 3016: {
  7751                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  7752  010B  0854               	movf	84,w	;volatile
  7753  010C  390F               	andlw	15
  7754  010D  3E3A               	addlw	_ep_data_out& (0+255)
  7755  010E  2912               	goto	L19
  7756  010F                     i1l7989:	
  7757                           ;usb_device.c: 3018: }
  7758                           
  7759                           
  7760                           ;usb_device.c: 3019: else
  7761                           ;usb_device.c: 3020: {
  7762                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  7763  010F  0854               	movf	84,w	;volatile
  7764  0110  390F               	andlw	15
  7765  0111  3E37               	addlw	_ep_data_in& (0+255)
  7766  0112                     L19:	
  7767  0112  0086               	movwf	6
  7768  0113  3001               	movlw	1	; select bank2/3
  7769  0114  0087               	movwf	7
  7770  0115  1481               	bsf	1,1
  7771  0116                     i1l366:	
  7772                           
  7773                           ;usb_device.c: 3022: }
  7774                           ;usb_device.c: 3023: }
  7775                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  7776  0116  0869               	movf	USBStdFeatureReqHandler@p,w
  7777  0117  0086               	movwf	6
  7778  0118  3084               	movlw	132
  7779  0119  0187               	clrf	7
  7780  011A  0481               	iorwf	1,f
  7781                           
  7782                           ;usb_device.c: 3027: }
  7783  011B  0008               	return
  7784  011C                     i1l7991:	
  7785                           
  7786                           ;usb_device.c: 3028: else
  7787                           ;usb_device.c: 3029: {
  7788                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  7789  011C  3004               	movlw	4
  7790  011D  06E9               	xorwf	USBStdFeatureReqHandler@p,f
  7791                           
  7792                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  7793  011E  0869               	movf	USBStdFeatureReqHandler@p,w
  7794  011F  0086               	movwf	6
  7795  0120  0187               	clrf	7
  7796                           
  7797                           ;usb_device.c: 3036: {
  7798                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  7799  0121  0869               	movf	USBStdFeatureReqHandler@p,w
  7800  0122  1F81               	btfss	1,7
  7801  0123  2934               	goto	L21
  7802  0124  0086               	movwf	6
  7803  0125  1381               	bcf	1,7
  7804                           
  7805                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  7806  0126  0086               	movwf	6
  7807  0127  3005               	movlw	5
  7808  0128  1701               	bsf	1,6
  7809                           
  7810                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  7811  0129  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7812  012A  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7813  012B  0869               	movf	USBStdFeatureReqHandler@p,w
  7814  012C  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7815  012D  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7816  012E  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7817  012F  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  7818  0130  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7819  0131  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7820                           
  7821                           ;usb_device.c: 3042: }
  7822  0133  2937               	goto	i1l8001
  7823  0134                     L21:	
  7824                           ;usb_device.c: 3043: else
  7825                           ;usb_device.c: 3044: {
  7826                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  7827                           
  7828  0134  0086               	movwf	6
  7829  0135  0187               	clrf	7
  7830  0136  1701               	bsf	1,6
  7831  0137                     i1l8001:	
  7832                           
  7833                           ;usb_device.c: 3047: }
  7834                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  7835  0137  3004               	movlw	4
  7836  0138  0020               	movlb	0	; select bank0
  7837  0139  06E9               	xorwf	USBStdFeatureReqHandler@p,f
  7838                           
  7839                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  7840  013A  18E8               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
  7841  013B  2941               	goto	i1l374
  7842  013C  0869               	movf	USBStdFeatureReqHandler@p,w
  7843  013D  0086               	movwf	6
  7844  013E  0187               	clrf	7
  7845  013F  1F81               	btfss	1,7
  7846  0140  295F               	goto	i1l8013
  7847  0141                     i1l374:	
  7848                           
  7849                           ;usb_device.c: 3058: {
  7850                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  7851  0141  1BD4               	btfsc	84,7	;volatile
  7852  0142  2947               	goto	i1l8009
  7853                           
  7854                           ;usb_device.c: 3060: {
  7855                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  7856  0143  0854               	movf	84,w	;volatile
  7857  0144  390F               	andlw	15
  7858  0145  3E3A               	addlw	_ep_data_out& (0+255)
  7859  0146  294A               	goto	L20
  7860  0147                     i1l8009:	
  7861                           ;usb_device.c: 3062: }
  7862                           
  7863                           
  7864                           ;usb_device.c: 3063: else
  7865                           ;usb_device.c: 3064: {
  7866                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  7867  0147  0854               	movf	84,w	;volatile
  7868  0148  390F               	andlw	15
  7869  0149  3E37               	addlw	_ep_data_in& (0+255)
  7870  014A                     L20:	
  7871  014A  0086               	movwf	6
  7872  014B  3001               	movlw	1	; select bank2/3
  7873  014C  0087               	movwf	7
  7874  014D  1081               	bcf	1,1
  7875                           
  7876                           ;usb_device.c: 3066: }
  7877                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  7878  014E  0869               	movf	USBStdFeatureReqHandler@p,w
  7879  014F  0086               	movwf	6
  7880  0150  303B               	movlw	59
  7881  0151  0187               	clrf	7
  7882  0152  0581               	andwf	1,f
  7883                           
  7884                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  7885  0153  3005               	movlw	5
  7886  0154  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7887  0155  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7888  0156  0869               	movf	USBStdFeatureReqHandler@p,w
  7889  0157  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7890  0158  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7891  0159  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7892  015A  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  7893  015B  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7894  015C  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7895                           
  7896                           ;usb_device.c: 3072: }
  7897  015E  2964               	goto	i1l8015
  7898  015F                     i1l8013:	
  7899                           
  7900                           ;usb_device.c: 3073: else
  7901                           ;usb_device.c: 3074: {
  7902                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  7903  015F  0869               	movf	USBStdFeatureReqHandler@p,w
  7904  0160  0086               	movwf	6
  7905  0161  303B               	movlw	59
  7906  0162  0187               	clrf	7
  7907  0163  0581               	andwf	1,f
  7908  0164                     i1l8015:	
  7909                           
  7910                           ;usb_device.c: 3077: }
  7911                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  7912  0164  0020               	movlb	0	; select bank0
  7913  0165  0854               	movf	84,w	;volatile
  7914  0166  390F               	andlw	15
  7915  0167  3E98               	addlw	152
  7916  0168  00FA               	movwf	??_USBStdFeatureReqHandler
  7917  0169  300E               	movlw	14
  7918  016A  01FB               	clrf	??_USBStdFeatureReqHandler+1
  7919  016B  3DFB               	addwfc	??_USBStdFeatureReqHandler+1,f
  7920  016C  087A               	movf	??_USBStdFeatureReqHandler,w
  7921  016D  00E6               	movwf	USBStdFeatureReqHandler@pUEP
  7922  016E  087B               	movf	??_USBStdFeatureReqHandler+1,w
  7923  016F  00E7               	movwf	USBStdFeatureReqHandler@pUEP+1
  7924                           
  7925                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  7926  0170  0866               	movf	USBStdFeatureReqHandler@pUEP,w
  7927  0171  0086               	movwf	6
  7928  0172  0867               	movf	USBStdFeatureReqHandler@pUEP+1,w
  7929  0173  0087               	movwf	7
  7930  0174  1001               	bcf	1,0
  7931  0175  0008               	return
  7932  0176                     __end_of_USBStdFeatureReqHandler:	
  7933  0176                     __ptext2468:	
  7934 ;; *************** function _USBDeviceTasks *****************
  7935 ;; Defined at:
  7936 ;;		line 669 in file "../USB/usb_device.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;		None
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  i               1   14[BANK0 ] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;		None               void
  7943 ;; Registers used:
  7944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7945 ;; Tracked objects:
  7946 ;;		On entry : 19/0
  7947 ;;		On exit  : 1F/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;Total ram usage:        2 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    9
  7957 ;; This function calls:
  7958 ;;		_USBWakeFromSuspend
  7959 ;;		i1_USBDeviceInit
  7960 ;;		_USBSuspend
  7961 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7962 ;;		_USBCtrlEPAllowStatusStage
  7963 ;;		_USBStallHandler
  7964 ;;		_USBCtrlEPService
  7965 ;; This function is called by:
  7966 ;;		_ISRCode
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _USBDeviceTasks
  7972  0176                     _USBDeviceTasks:	
  7973                           
  7974                           ;usb_device.c: 670: BYTE i;
  7975                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  7976                           
  7977                           ; Regs used in _USBDeviceTasks: [wreg-status,0+pclath+cstack]
  7978  0176  0022               	movlb	2	; select bank2
  7979  0177  0351               	decf	_USBDeviceState^(0+256),w	;volatile
  7980  0178  1D03               	skipz
  7981  0179  2983               	goto	i1l8137
  7982                           
  7983                           ;usb_device.c: 782: {
  7984                           ;usb_device.c: 792: if(!UCONbits.SE0)
  7985  017A  003D               	movlb	29	; select bank29
  7986  017B  1A8E               	btfsc	14,5	;volatile
  7987  017C  2983               	goto	i1l8137
  7988                           
  7989                           ;usb_device.c: 793: {
  7990                           ;usb_device.c: 794: UIR = 0;;
  7991  017D  0190               	clrf	16	;volatile
  7992                           
  7993                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  7994  017E  1412               	bsf	18,0	;volatile
  7995                           
  7996                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  7997  017F  1612               	bsf	18,4	;volatile
  7998                           
  7999                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  8000  0180  3002               	movlw	2
  8001  0181  0022               	movlb	2	; select bank2
  8002  0182  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  8003  0183                     i1l8137:	
  8004                           
  8005                           ;usb_device.c: 801: }
  8006                           ;usb_device.c: 802: }
  8007                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8008  0183  003D               	movlb	29	; select bank29
  8009  0184  1910               	btfsc	16,2	;volatile
  8010  0185  1D12               	btfss	18,2	;volatile
  8011  0186  298A               	goto	i1l8145
  8012                           
  8013                           ;usb_device.c: 819: {
  8014                           ;usb_device.c: 820: (UIR &= 0xFB);
  8015  0187  1110               	bcf	16,2	;volatile
  8016                           
  8017                           ;usb_device.c: 824: USBWakeFromSuspend();
  8018  0188  2368  3180         	fcall	_USBWakeFromSuspend
  8019  018A                     i1l8145:	
  8020                           
  8021                           ;usb_device.c: 826: }
  8022                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  8023  018A  1C8E               	btfss	14,1	;volatile
  8024  018B  298F               	goto	i1l142
  8025  018C                     i1l8147:	
  8026                           
  8027                           ;usb_device.c: 832: {
  8028                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  8029  018C  0020               	movlb	0	; select bank0
  8030  018D  1112               	bcf	18,2	;volatile
  8031                           
  8032                           ;usb_device.c: 834: return;
  8033  018E  0008               	return
  8034  018F                     i1l142:	
  8035                           
  8036                           ;usb_device.c: 835: }
  8037                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  8038  018F  1810               	btfsc	16,0	;volatile
  8039  0190  1C12               	btfss	18,0	;volatile
  8040  0191  299B               	goto	i1l8159
  8041                           
  8042                           ;usb_device.c: 848: {
  8043                           ;usb_device.c: 849: USBDeviceInit();
  8044  0192  2242  3180         	fcall	i1_USBDeviceInit
  8045                           
  8046                           ;usb_device.c: 853: {PIE2bits.USBIE = 1;};
  8047  0194  0021               	movlb	1	; select bank1
  8048  0195  1512               	bsf	18,2	;volatile
  8049                           
  8050                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  8051  0196  3004               	movlw	4
  8052  0197  0022               	movlb	2	; select bank2
  8053  0198  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  8054                           
  8055                           ;usb_device.c: 865: (UIR &= 0xFE);
  8056  0199  003D               	movlb	29	; select bank29
  8057  019A  1010               	bcf	16,0	;volatile
  8058  019B                     i1l8159:	
  8059                           
  8060                           ;usb_device.c: 866: }
  8061                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  8062  019B  1A10               	btfsc	16,4	;volatile
  8063  019C  1E12               	btfss	18,4	;volatile
  8064  019D  29A2               	goto	i1l8167
  8065                           
  8066                           ;usb_device.c: 872: {
  8067                           ;usb_device.c: 877: USBSuspend();
  8068  019E  235C  3180         	fcall	_USBSuspend
  8069                           
  8070                           ;usb_device.c: 880: (UIR &= 0xEF);
  8071  01A0  003D               	movlb	29	; select bank29
  8072  01A1  1210               	bcf	16,4	;volatile
  8073  01A2                     i1l8167:	
  8074                           
  8075                           ;usb_device.c: 881: }
  8076                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  8077  01A2  1F10               	btfss	16,6	;volatile
  8078  01A3  29BC               	goto	i1l8181
  8079                           
  8080                           ;usb_device.c: 884: {
  8081                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  8082  01A4  1F12               	btfss	18,6	;volatile
  8083  01A5  29B1               	goto	i1l8173
  8084                           
  8085                           ;usb_device.c: 886: {
  8086                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  8087  01A6  3073               	movlw	115
  8088  01A7  0020               	movlb	0	; select bank0
  8089  01A8  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8090  01A9  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8091  01AA  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8092  01AB  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8093  01AC  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8094  01AD  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  8095  01AE  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8096  01AF  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8097  01B1                     i1l8173:	
  8098                           
  8099                           ;usb_device.c: 888: }
  8100                           ;usb_device.c: 889: (UIR &= 0xBF);
  8101  01B1  003D               	movlb	29	; select bank29
  8102  01B2  1310               	bcf	16,6	;volatile
  8103                           
  8104                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  8105  01B3  0022               	movlb	2	; select bank2
  8106  01B4  0854               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  8107  01B5  1D03               	skipz
  8108                           
  8109                           ;usb_device.c: 915: {
  8110                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  8111  01B6  03D4               	decf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  8112                           
  8113                           ;usb_device.c: 917: }
  8114                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  8115  01B7  08D4               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  8116  01B8  1D03               	skipz
  8117  01B9  29BC               	goto	i1l8181
  8118                           
  8119                           ;usb_device.c: 924: {
  8120                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  8121  01BA  22B4  3180         	fcall	_USBCtrlEPAllowStatusStage
  8122  01BC                     i1l8181:	
  8123                           
  8124                           ;usb_device.c: 926: }
  8125                           ;usb_device.c: 928: }
  8126                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  8127  01BC  003D               	movlb	29	; select bank29
  8128  01BD  1A90               	btfsc	16,5	;volatile
  8129  01BE  1E92               	btfss	18,5	;volatile
  8130  01BF  29C2               	goto	i1l8187
  8131                           
  8132                           ;usb_device.c: 931: {
  8133                           ;usb_device.c: 932: USBStallHandler();
  8134  01C0  2344  3180         	fcall	_USBStallHandler
  8135  01C2                     i1l8187:	
  8136                           
  8137                           ;usb_device.c: 933: }
  8138                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  8139  01C2  1890               	btfsc	16,1	;volatile
  8140  01C3  1C92               	btfss	18,1	;volatile
  8141  01C4  29D3               	goto	i1l8195
  8142                           
  8143                           ;usb_device.c: 936: {
  8144                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  8145  01C5  30FF               	movlw	255
  8146  01C6  0020               	movlb	0	; select bank0
  8147  01C7  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8148  01C8  307F               	movlw	127
  8149  01C9  00E1               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8150  01CA  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8151  01CB  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8152  01CC  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8153  01CD  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  8154  01CE  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8155  01CF  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8156                           
  8157                           ;usb_device.c: 938: UEIR = 0;;
  8158  01D1  003D               	movlb	29	; select bank29
  8159  01D2  0193               	clrf	19	;volatile
  8160  01D3                     i1l8195:	
  8161                           
  8162                           ;usb_device.c: 946: }
  8163                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  8164  01D3  3004               	movlw	4
  8165  01D4  0022               	movlb	2	; select bank2
  8166  01D5  0251               	subwf	_USBDeviceState^(0+256),w	;volatile
  8167  01D6  1C03               	btfss	3,0
  8168  01D7  298C               	goto	i1l8147
  8169                           
  8170                           ;usb_device.c: 957: }
  8171                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  8172  01D8  003D               	movlb	29	; select bank29
  8173  01D9  1D92               	btfss	18,3	;volatile
  8174  01DA  298C               	goto	i1l8147
  8175                           
  8176                           ;usb_device.c: 963: {
  8177                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  8178  01DB  0020               	movlb	0	; select bank0
  8179  01DC  01EE               	clrf	USBDeviceTasks@i
  8180  01DD                     i1l154:	
  8181                           
  8182                           ;usb_device.c: 965: {
  8183                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  8184  01DD  003D               	movlb	29	; select bank29
  8185  01DE  1D90               	btfss	16,3	;volatile
  8186  01DF  298C               	goto	i1l8147
  8187                           
  8188                           ;usb_device.c: 967: {
  8189                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  8190  01E0  080F               	movf	15,w	;volatile
  8191  01E1  0022               	movlb	2	; select bank2
  8192  01E2  00EA               	movwf	_USTATcopy^(0+256)	;volatile
  8193                           
  8194                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  8195  01E3  0C6A               	rrf	_USTATcopy^(0+256),w	;volatile
  8196  01E4  0020               	movlb	0	; select bank0
  8197  01E5  00ED               	movwf	??_USBDeviceTasks
  8198  01E6  0CED               	rrf	??_USBDeviceTasks,f
  8199  01E7  0C6D               	rrf	??_USBDeviceTasks,w
  8200  01E8  390F               	andlw	15
  8201  01E9  0022               	movlb	2	; select bank2
  8202  01EA  00DB               	movwf	_endpoint_number^(0+256)	;volatile
  8203                           
  8204                           ;usb_device.c: 972: (UIR &= 0xF7);
  8205  01EB  003D               	movlb	29	; select bank29
  8206  01EC  1190               	bcf	16,3	;volatile
  8207                           
  8208                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  8209  01ED  0022               	movlb	2	; select bank2
  8210  01EE  196A               	btfsc	_USTATcopy^(0+256),2	;volatile
  8211  01EF  29F3               	goto	i1l8215
  8212                           
  8213                           ;usb_device.c: 978: {
  8214                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  8215  01F0  085B               	movf	_endpoint_number^(0+256),w	;volatile
  8216  01F1  3E3A               	addlw	_ep_data_out& (0+255)
  8217  01F2  29F5               	goto	L12
  8218  01F3                     i1l8215:	
  8219                           ;usb_device.c: 980: }
  8220                           
  8221                           
  8222                           ;usb_device.c: 981: else
  8223                           ;usb_device.c: 982: {
  8224                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  8225  01F3  085B               	movf	_endpoint_number^(0+256),w	;volatile
  8226  01F4  3E37               	addlw	_ep_data_in& (0+255)
  8227  01F5                     L12:	
  8228  01F5  0086               	movwf	6
  8229  01F6  3001               	movlw	1	; select bank2/3
  8230  01F7  0087               	movwf	7
  8231  01F8  0681               	xorwf	1,f
  8232                           
  8233                           ;usb_device.c: 984: }
  8234                           ;usb_device.c: 989: if(endpoint_number == 0)
  8235  01F9  08DB               	movf	_endpoint_number^(0+256),f
  8236  01FA  1D03               	skipz
  8237  01FB  29FF               	goto	i1l8221
  8238                           
  8239                           ;usb_device.c: 990: {
  8240                           ;usb_device.c: 991: USBCtrlEPService();
  8241  01FC  22EC  3180         	fcall	_USBCtrlEPService
  8242                           
  8243                           ;usb_device.c: 992: }
  8244  01FE  2A0B               	goto	i1l8223
  8245  01FF                     i1l8221:	
  8246                           
  8247                           ;usb_device.c: 993: else
  8248                           ;usb_device.c: 994: {
  8249                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  8250  01FF  3072               	movlw	114
  8251  0200  0020               	movlb	0	; select bank0
  8252  0201  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8253  0202  306A               	movlw	_USTATcopy& (0+255)
  8254  0203  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8255  0204  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8256  0205  3001               	movlw	1
  8257  0206  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8258  0207  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8259  0208  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8260  0209  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8261  020B                     i1l8223:	
  8262  020B  0020               	movlb	0	; select bank0
  8263  020C  3004               	movlw	4
  8264  020D  0AEE               	incf	USBDeviceTasks@i,f
  8265  020E  026E               	subwf	USBDeviceTasks@i,w
  8266  020F  1803               	btfsc	3,0
  8267  0210  298C               	goto	i1l8147
  8268  0211  29DD               	goto	i1l154
  8269  0212                     __end_of_USBDeviceTasks:	
  8270  0212                     __ptext2487:	
  8271 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  8272 ;; Defined at:
  8273 ;;		line 640 in file "main.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  event           2    0[BANK0 ] int 
  8276 ;;  pdata           2    2[BANK0 ] PTR void 
  8277 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(48), 
  8278 ;;  size            2    4[BANK0 ] unsigned short 
  8279 ;; Auto vars:     Size  Location     Type
  8280 ;;		None
  8281 ;; Return value:  Size  Location     Type
  8282 ;;                  1    wreg      enum E5
  8283 ;; Registers used:
  8284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8285 ;; Tracked objects:
  8286 ;;		On entry : 1F/0
  8287 ;;		On exit  : 1D/0
  8288 ;;		Unchanged: FFFE0/0
  8289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8290 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;Total ram usage:        6 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    4
  8297 ;; This function calls:
  8298 ;;		_USBCB_SOF_Handler
  8299 ;;		_USBCBSuspend
  8300 ;;		_USBCBWakeFromSuspend
  8301 ;;		_USBCBInitEP
  8302 ;;		_USBCBStdSetDscHandler
  8303 ;;		_USBCBCheckOtherReq
  8304 ;;		_USBCBErrorHandler
  8305 ;; This function is called by:
  8306 ;;		_USBDeviceTasks
  8307 ;;		_USBStdSetCfgHandler
  8308 ;;		_USBSuspend
  8309 ;;		_USBWakeFromSuspend
  8310 ;;		_USBCtrlTrfSetupHandler
  8311 ;;		_USBCheckStdRequest
  8312 ;;		_USBStdFeatureReqHandler
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           
  8317                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
  8318  0212                     _USER_USB_CALLBACK_EVENT_HANDLER:	
  8319  0212                     i1l7849:	
  8320                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-status,0+pclath+cstack]
  8321                           
  8322                           
  8323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8324                           ; Switch size 1, requested type "space"
  8325                           ; Number of cases is 2, Range of values is 0 to 127
  8326                           ; switch strategies available:
  8327                           ; Name         Instructions Cycles
  8328                           ; simple_byte            7     4 (average)
  8329                           ; direct_byte          262     6 (fixed)
  8330                           ; jumptable            260     6 (fixed)
  8331                           ; rangetable           132     6 (fixed)
  8332                           ; spacedrange          261     8 (fixed)
  8333                           ; locatedrange         128     3 (fixed)
  8334                           ;	Chosen strategy is simple_byte
  8335                           
  8336                           ;main.c: 666: break;
  8337                           
  8338                           ;main.c: 641: switch( event )
  8339  0212  0861               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
  8340  0213  3A00               	xorlw	0	; case 0
  8341  0214  1903               	skipnz
  8342  0215  2A22               	goto	i1l8379
  8343  0216  3A7F               	xorlw	127	; case 127
  8344  0217  1903               	skipnz
  8345  0218  2A3C               	goto	i1l8381
  8346  0219  2A41               	goto	i1l1086
  8347  021A                     i1l7851:	
  8348                           
  8349                           ;main.c: 647: USBCB_SOF_Handler();
  8350  021A  2C19               	ljmp	i1l1048
  8351  021B                     i1l7853:	
  8352                           ;main.c: 648: break;
  8353                           
  8354                           
  8355                           ;main.c: 650: USBCBSuspend();
  8356  021B  2C1B               	ljmp	i1l1042
  8357  021C                     i1l7855:	
  8358                           ;main.c: 651: break;
  8359                           
  8360                           
  8361                           ;main.c: 653: USBCBWakeFromSuspend();
  8362  021C  2C1A               	ljmp	i1l1045
  8363  021D                     i1l7857:	
  8364                           ;main.c: 654: break;
  8365                           
  8366                           
  8367                           ;main.c: 656: USBCBInitEP();
  8368  021D  2B77               	ljmp	i1l7703
  8369  021E                     i1l7859:	
  8370                           ;main.c: 657: break;
  8371                           
  8372                           
  8373                           ;main.c: 659: USBCBStdSetDscHandler();
  8374  021E  2C15               	ljmp	i1l1057
  8375  021F                     i1l7861:	
  8376                           ;main.c: 660: break;
  8377                           
  8378                           
  8379                           ;main.c: 662: USBCBCheckOtherReq();
  8380  021F  3194  2C43         	ljmp	i1l6585
  8381  0221                     i1l7863:	
  8382                           ;main.c: 663: break;
  8383                           
  8384                           
  8385                           ;main.c: 665: USBCBErrorHandler();
  8386  0221  2C18               	ljmp	i1l1051
  8387  0222                     i1l8379:	
  8388                           
  8389                           ; Switch size 1, requested type "space"
  8390                           ; Number of cases is 8, Range of values is 1 to 117
  8391                           ; switch strategies available:
  8392                           ; Name         Instructions Cycles
  8393                           ; simple_byte           25    13 (average)
  8394                           ; direct_byte          243     9 (fixed)
  8395                           ; jumptable            263     9 (fixed)
  8396                           ;	Chosen strategy is simple_byte
  8397  0222  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  8398  0223  3A01               	xorlw	1	; case 1
  8399  0224  1903               	skipnz
  8400  0225  2A1D               	goto	i1l7857
  8401  0226  3A03               	xorlw	3	; case 2
  8402  0227  1903               	skipnz
  8403  0228  2A1E               	goto	i1l7859
  8404  0229  3A01               	xorlw	1	; case 3
  8405  022A  1903               	skipnz
  8406  022B  2A1F               	goto	i1l7861
  8407  022C  3A06               	xorlw	6	; case 5
  8408  022D  1903               	skipnz
  8409  022E  2A41               	goto	i1l1086
  8410  022F  3A77               	xorlw	119	; case 114
  8411  0230  1903               	skipnz
  8412  0231  2A41               	goto	i1l1086
  8413  0232  3A01               	xorlw	1	; case 115
  8414  0233  1903               	skipnz
  8415  0234  2A1A               	goto	i1l7851
  8416  0235  3A07               	xorlw	7	; case 116
  8417  0236  1903               	skipnz
  8418  0237  2A1C               	goto	i1l7855
  8419  0238  3A01               	xorlw	1	; case 117
  8420  0239  1903               	skipnz
  8421  023A  2A1B               	goto	i1l7853
  8422  023B  2A41               	goto	i1l1086
  8423  023C                     i1l8381:	
  8424                           
  8425                           ; Switch size 1, requested type "space"
  8426                           ; Number of cases is 1, Range of values is 255 to 255
  8427                           ; switch strategies available:
  8428                           ; Name         Instructions Cycles
  8429                           ; simple_byte            4     3 (average)
  8430                           ; direct_byte            7     5 (fixed)
  8431                           ; jumptable            263     9 (fixed)
  8432                           ;	Chosen strategy is simple_byte
  8433  023C  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  8434  023D  3AFF               	xorlw	255	; case 255
  8435  023E  1903               	skipnz
  8436  023F  2A21               	goto	i1l7863
  8437  0240  2A41               	goto	i1l1086
  8438  0241                     i1l1086:	
  8439  0241  0008               	return
  8440  0242                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
  8441  0242                     __ptext2507:	
  8442 ;; *************** function i1_USBDeviceInit *****************
  8443 ;; Defined at:
  8444 ;;		line 467 in file "../USB/usb_device.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  USBDeviceIni    2    2[COMMON] PTR unsigned char 
  8449 ;;		 -> UEP1(1), 
  8450 ;;  USBDeviceIni    1    5[COMMON] unsigned char 
  8451 ;;  USBDeviceIni    1    4[COMMON] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;		None               void
  8454 ;; Registers used:
  8455 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8456 ;; Tracked objects:
  8457 ;;		On entry : 1F/1D
  8458 ;;		On exit  : 1F/2
  8459 ;;		Unchanged: FFFE0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;Total ram usage:        6 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; This function calls:
  8468 ;;		Nothing
  8469 ;; This function is called by:
  8470 ;;		_USBDeviceTasks
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           
  8475                           ;psect for function i1_USBDeviceInit
  8476  0242                     i1_USBDeviceInit:	
  8477                           
  8478                           ;usb_device.c: 468: BYTE i;
  8479                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  8480                           
  8481                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l-status,0]
  8482  0242  0021               	movlb	1	; select bank1
  8483  0243  1112               	bcf	18,2	;volatile
  8484                           
  8485                           ;usb_device.c: 473: UEIR = 0;;
  8486  0244  003D               	movlb	29	; select bank29
  8487  0245  0193               	clrf	19	;volatile
  8488                           
  8489                           ;usb_device.c: 476: UIR = 0;;
  8490  0246  0190               	clrf	16	;volatile
  8491                           
  8492                           ;usb_device.c: 479: UEP0 = 0;
  8493  0247  0198               	clrf	24	;volatile
  8494                           
  8495                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
  8496  0248  300E               	movlw	14
  8497  0249  00F3               	movwf	i1USBDeviceInit@p+1
  8498  024A  3099               	movlw	153
  8499  024B  00F2               	movwf	i1USBDeviceInit@p
  8500  024C  01F4               	clrf	i1USBDeviceInit@i_750
  8501  024D                     i1l7395:	
  8502  024D  0872               	movf	i1USBDeviceInit@p,w
  8503  024E  0086               	movwf	6
  8504  024F  0873               	movf	i1USBDeviceInit@p+1,w
  8505  0250  0087               	movwf	7
  8506  0251  0181               	clrf	1
  8507  0252  0AF2               	incf	i1USBDeviceInit@p,f
  8508  0253  1903               	skipnz
  8509  0254  0AF3               	incf	i1USBDeviceInit@p+1,f
  8510  0255  3002               	movlw	2
  8511  0256  0AF4               	incf	i1USBDeviceInit@i_750,f
  8512  0257  0274               	subwf	i1USBDeviceInit@i_750,w
  8513  0258  1C03               	skipc
  8514  0259  2A4D               	goto	i1l7395
  8515                           
  8516                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8517  025A  3016               	movlw	22
  8518  025B  0091               	movwf	17	;volatile
  8519  025C  309F               	movlw	159
  8520  025D  0097               	movwf	23	;volatile
  8521  025E  307B               	movlw	123
  8522  025F  0092               	movwf	18	;volatile
  8523                           
  8524                           ;usb_device.c: 486: ;
  8525                           ;usb_device.c: 489: ;
  8526                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  8527  0260  01F5               	clrf	i1USBDeviceInit@i
  8528  0261                     i1l7411:	
  8529                           
  8530                           ;usb_device.c: 493: {
  8531                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  8532  0261  0875               	movf	i1USBDeviceInit@i,w
  8533  0262  0709               	addwf	9,w
  8534  0263  0709               	addwf	9,w
  8535  0264  3E20               	addlw	32
  8536  0265  0086               	movwf	6
  8537  0266  3000               	movlw	0
  8538  0267  0187               	clrf	7
  8539  0268  3FC0               	movwi [0]fsr1
  8540  0269  3FC1               	movwi [1]fsr1
  8541  026A  3FC2               	movwi [2]fsr1
  8542  026B  3FC3               	movwi [3]fsr1
  8543  026C  300C               	movlw	12
  8544  026D  0AF5               	incf	i1USBDeviceInit@i,f
  8545  026E  0275               	subwf	i1USBDeviceInit@i,w
  8546  026F  1C03               	skipc
  8547  0270  2A61               	goto	i1l7411
  8548                           
  8549                           ;usb_device.c: 495: }
  8550                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  8551  0271  170E               	bsf	14,6	;volatile
  8552                           
  8553                           ;usb_device.c: 501: UADDR = 0x00;
  8554  0272  0196               	clrf	22	;volatile
  8555                           
  8556                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  8557  0273  120E               	bcf	14,4	;volatile
  8558                           
  8559                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  8560  0274  130E               	bcf	14,6	;volatile
  8561  0275                     i1l7425:	
  8562                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  8563                           
  8564  0275  003D               	movlb	29	; select bank29
  8565  0276  1D90               	btfss	16,3	;volatile
  8566  0277  2A7F               	goto	i1l7427
  8567                           
  8568                           ;usb_device.c: 511: {
  8569                           ;usb_device.c: 512: (UIR &= 0xF7);
  8570  0278  1190               	bcf	16,3	;volatile
  8571                           
  8572                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  8573  0279  0022               	movlb	2	; select bank2
  8574  027A  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  8575                           
  8576                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  8577  027B  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  8578                           
  8579                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  8580  027C  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  8581  027D  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  8582  027E  2A75               	goto	i1l7425
  8583  027F                     i1l7427:	
  8584                           
  8585                           ;usb_device.c: 517: }
  8586                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  8587  027F  3001               	movlw	1
  8588  0280  0022               	movlb	2	; select bank2
  8589  0281  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8590                           
  8591                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  8592  0282  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8593                           
  8594                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  8595  0283  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  8596                           
  8597                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
  8598  0284  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  8599                           
  8600                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  8601  0285  0023               	movlb	3	; select bank3
  8602  0286  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  8603                           
  8604                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(2+1u); i++)
  8605  0287  01F5               	clrf	i1USBDeviceInit@i
  8606  0288                     i1l7439:	
  8607                           
  8608                           ;usb_device.c: 531: {
  8609                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  8610  0288  0875               	movf	i1USBDeviceInit@i,w
  8611  0289  3E3D               	addlw	_pBDTEntryIn& (0+255)
  8612  028A  0086               	movwf	6
  8613  028B  3001               	movlw	1	; select bank2/3
  8614  028C  0087               	movwf	7
  8615  028D  0181               	clrf	1
  8616                           
  8617                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  8618  028E  0875               	movf	i1USBDeviceInit@i,w
  8619  028F  3E40               	addlw	_pBDTEntryOut& (0+255)
  8620  0290  0086               	movwf	6
  8621  0291  0181               	clrf	1
  8622                           
  8623                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  8624  0292  0875               	movf	i1USBDeviceInit@i,w
  8625  0293  3E37               	addlw	_ep_data_in& (0+255)
  8626  0294  0086               	movwf	6
  8627  0295  0181               	clrf	1
  8628                           
  8629                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  8630  0296  0875               	movf	i1USBDeviceInit@i,w
  8631  0297  3E3A               	addlw	_ep_data_out& (0+255)
  8632  0298  0086               	movwf	6
  8633  0299  3003               	movlw	3
  8634  029A  0181               	clrf	1
  8635  029B  0AF5               	incf	i1USBDeviceInit@i,f
  8636  029C  0275               	subwf	i1USBDeviceInit@i,w
  8637  029D  1C03               	skipc
  8638  029E  2A88               	goto	i1l7439
  8639                           
  8640                           ;usb_device.c: 536: }
  8641                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  8642  029F  3028               	movlw	40
  8643  02A0  0022               	movlb	2	; select bank2
  8644  02A1  00BD               	movwf	_pBDTEntryIn^(0+256)
  8645                           
  8646                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  8647  02A2  3016               	movlw	22
  8648  02A3  003D               	movlb	29	; select bank29
  8649  02A4  0098               	movwf	24	;volatile
  8650                           
  8651                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8652  02A5  3050               	movlw	80
  8653  02A6  00F0               	movwf	??i1_USBDeviceInit
  8654  02A7  01F1               	clrf	??i1_USBDeviceInit+1
  8655  02A8  0020               	movlb	0	; select bank0
  8656  02A9  00A2               	movwf	34	;volatile
  8657  02AA  0871               	movf	??i1_USBDeviceInit+1,w
  8658  02AB  00A3               	movwf	35	;volatile
  8659                           
  8660                           ;usb_device.c: 544: BDT[0].CNT = 8;
  8661  02AC  3008               	movlw	8
  8662  02AD  00A1               	movwf	33	;volatile
  8663                           
  8664                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  8665  02AE  3084               	movlw	132
  8666  02AF  00A0               	movwf	32	;volatile
  8667                           
  8668                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  8669  02B0  0022               	movlb	2	; select bank2
  8670  02B1  01E9               	clrf	_USBActiveConfiguration^(0+256)	;volatile
  8671                           
  8672                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  8673  02B2  01D1               	clrf	_USBDeviceState^(0+256)	;volatile
  8674  02B3  0008               	return
  8675  02B4                     __end_ofi1_USBDeviceInit:	
  8676  02B4                     __ptext2478:	
  8677 ;; *************** function _USBCtrlEPAllowStatusStage *****************
  8678 ;; Defined at:
  8679 ;;		line 1590 in file "../USB/usb_device.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;		None
  8684 ;; Return value:  Size  Location     Type
  8685 ;;		None               void
  8686 ;; Registers used:
  8687 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8688 ;; Tracked objects:
  8689 ;;		On entry : 1D/2
  8690 ;;		On exit  : 1C/0
  8691 ;;		Unchanged: FFFE0/0
  8692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;Total ram usage:        2 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_USBDeviceTasks
  8703 ;;		_USBCtrlEPServiceComplete
  8704 ;;		_USBCtrlTrfRxService
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           
  8709                           ;psect for function _USBCtrlEPAllowStatusStage
  8710  02B4                     _USBCtrlEPAllowStatusStage:	
  8711  02B4                     i1l6379:	
  8712                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l-status,0]
  8713                           
  8714                           
  8715                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
  8716  02B4  0022               	movlb	2	; select bank2
  8717  02B5  08D2               	movf	_USBStatusStageEnabledFlag1^(0+256),f
  8718  02B6  1D03               	skipz
  8719  02B7  0008               	return
  8720                           
  8721                           ;usb_device.c: 1597: {
  8722                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
  8723  02B8  3001               	movlw	1
  8724  02B9  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8725                           
  8726                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
  8727  02BA  08D3               	movf	_USBStatusStageEnabledFlag2^(0+256),f
  8728  02BB  1D03               	skipz
  8729  02BC  0008               	return
  8730                           
  8731                           ;usb_device.c: 1600: {
  8732                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
  8733  02BD  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8734                           
  8735                           ;usb_device.c: 1605: if(controlTransferState == 2)
  8736  02BE  085A               	movf	_controlTransferState^(0+256),w	;volatile
  8737  02BF  3A02               	xorlw	2
  8738  02C0  1D03               	skipz
  8739  02C1  2AC9               	goto	i1l6391
  8740                           
  8741                           ;usb_device.c: 1606: {
  8742                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
  8743  02C2  0A3D               	incf	_pBDTEntryIn^(0+256),w
  8744  02C3  0086               	movwf	6
  8745  02C4  0187               	clrf	7
  8746  02C5  0181               	clrf	1
  8747                           
  8748                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8749  02C6  083D               	movf	_pBDTEntryIn^(0+256),w
  8750                           
  8751                           ;usb_device.c: 1609: }
  8752  02C7  3185  2DCD         	ljmp	PL34	;call to abstracted procedure
  8753  02C9                     i1l6391:	
  8754                           
  8755                           ;usb_device.c: 1610: else if(controlTransferState == 1)
  8756  02C9  0B5A               	decfsz	_controlTransferState^(0+256),w	;volatile
  8757  02CA  0008               	return
  8758                           
  8759                           ;usb_device.c: 1611: {
  8760                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
  8761  02CB  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  8762                           
  8763                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
  8764  02CC  0A5E               	incf	_pBDTEntryEP0OutCurrent^(0+256),w
  8765  02CD  0086               	movwf	6
  8766  02CE  3008               	movlw	8
  8767  02CF  0187               	clrf	7
  8768  02D0  0081               	movwf	1
  8769                           
  8770                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8771  02D1  3050               	movlw	80
  8772  02D2  00F0               	movwf	??_USBCtrlEPAllowStatusStage
  8773  02D3  01F1               	clrf	??_USBCtrlEPAllowStatusStage+1
  8774  02D4  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8775  02D5  241C  3180         	fcall	PL24	;call to abstracted procedure
  8776                           
  8777                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  8778  02D7  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8779  02D8  0086               	movwf	6
  8780  02D9  3084               	movlw	132
  8781  02DA  0081               	movwf	1
  8782                           
  8783                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
  8784  02DB  3001               	movlw	1
  8785  02DC  00C5               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  8786                           
  8787                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
  8788  02DD  0021               	movlb	1	; select bank1
  8789  02DE  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
  8790  02DF  0086               	movwf	6
  8791  02E0  3008               	movlw	8
  8792  02E1  0081               	movwf	1
  8793                           
  8794                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8795  02E2  3050               	movlw	80
  8796  02E3  00F0               	movwf	??_USBCtrlEPAllowStatusStage
  8797  02E4  01F1               	clrf	??_USBCtrlEPAllowStatusStage+1
  8798  02E5  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  8799  02E6  241C               	fcall	PL24	;call to abstracted procedure
  8800                           
  8801                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  8802  02E7  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  8803  02E8  0086               	movwf	6
  8804  02E9  3080               	movlw	128
  8805  02EA  0081               	movwf	1
  8806  02EB  0008               	return
  8807  02EC                     __end_of_USBCtrlEPAllowStatusStage:	
  8808  02EC                     __ptext2472:	
  8809 ;; *************** function _USBCtrlEPService *****************
  8810 ;; Defined at:
  8811 ;;		line 2523 in file "../USB/usb_device.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  setup_cnt       1   12[BANK0 ] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;		None               void
  8818 ;; Registers used:
  8819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8820 ;; Tracked objects:
  8821 ;;		On entry : 1F/2
  8822 ;;		On exit  : 1C/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;Total ram usage:        3 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    8
  8832 ;; This function calls:
  8833 ;;		_USBCtrlTrfSetupHandler
  8834 ;;		_USBCtrlTrfOutHandler
  8835 ;;		_USBCtrlTrfInHandler
  8836 ;; This function is called by:
  8837 ;;		_USBDeviceTasks
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function _USBCtrlEPService
  8843  02EC                     _USBCtrlEPService:	
  8844                           
  8845                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)45;
  8846                           
  8847                           ; Regs used in _USBCtrlEPService: [wreg-status,0+pclath+cstack]
  8848  02EC  302D               	movlw	45
  8849  02ED  00D4               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
  8850                           
  8851                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  8852  02EE  086A               	movf	_USTATcopy^(0+256),w	;volatile
  8853  02EF  39FD               	andlw	253
  8854  02F0  1D03               	btfss	3,2
  8855  02F1  2B3B               	goto	i1l8121
  8856                           
  8857                           ;usb_device.c: 2533: {
  8858                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  8859  02F2  366A               	lsrf	_USTATcopy^(0+256),w	;volatile
  8860  02F3  393F               	andlw	63
  8861  02F4  0709               	addwf	9,w
  8862  02F5  0709               	addwf	9,w
  8863  02F6  3E20               	addlw	32
  8864  02F7  00DE               	movwf	_pBDTEntryEP0OutCurrent^(0+256)
  8865                           
  8866                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8867  02F8  0021               	movlb	1	; select bank1
  8868  02F9  00EF               	movwf	_pBDTEntryEP0OutNext^(0+128)
  8869                           
  8870                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  8871  02FA  3004               	movlw	4
  8872  02FB  06EF               	xorwf	_pBDTEntryEP0OutNext^(0+128),f
  8873                           
  8874                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  8875  02FC  0022               	movlb	2	; select bank2
  8876  02FD  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8877  02FE  0086               	movwf	6
  8878  02FF  0187               	clrf	7
  8879  0300  0C01               	rrf	1,w
  8880  0301  0C89               	rrf	9,f
  8881  0302  390F               	andlw	15
  8882  0303  3A0D               	xorlw	13
  8883  0304  1D03               	skipz
  8884  0305  2B39               	goto	i1l8119
  8885                           
  8886                           ;usb_device.c: 2550: {
  8887                           ;usb_device.c: 2551: unsigned char setup_cnt;
  8888                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  8889  0306  0020               	movlb	0	; select bank0
  8890  0307  01EC               	clrf	USBCtrlEPService@setup_cnt
  8891  0308                     i1l8107:	
  8892                           
  8893                           ;usb_device.c: 2558: {
  8894                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  8895  0308  086C               	movf	USBCtrlEPService@setup_cnt,w
  8896  0309  3E50               	addlw	80
  8897  030A  0086               	movwf	6
  8898  030B  0187               	clrf	7
  8899  030C  0022               	movlb	2	; select bank2
  8900  030D  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8901  030E  3E02               	addlw	2
  8902  030F  0084               	movwf	4
  8903  0310  0185               	clrf	5
  8904  0311  3F00               	moviw [0]fsr0
  8905  0312  0020               	movlb	0	; select bank0
  8906  0313  00EA               	movwf	??_USBCtrlEPService
  8907  0314  3F01               	moviw [1]fsr0
  8908  0315  00EB               	movwf	??_USBCtrlEPService+1
  8909  0316  086A               	movf	??_USBCtrlEPService,w
  8910  0317  0084               	movwf	4
  8911  0318  086B               	movf	??_USBCtrlEPService+1,w
  8912  0319  0085               	movwf	5
  8913  031A  0800               	movf	0,w
  8914  031B  0081               	movwf	1
  8915                           
  8916                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  8917  031C  0022               	movlb	2	; select bank2
  8918  031D  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8919  031E  3E02               	addlw	2
  8920  031F  0086               	movwf	6
  8921  0320  3001               	movlw	1
  8922  0321  0781               	addwf	1,f
  8923  0322  3141               	addfsr 1,1
  8924  0323  1803               	skipnc
  8925  0324  0A81               	incf	1,f
  8926  0325  0020               	movlb	0	; select bank0
  8927  0326  3008               	movlw	8
  8928  0327  0AEC               	incf	USBCtrlEPService@setup_cnt,f
  8929  0328  026C               	subwf	USBCtrlEPService@setup_cnt,w
  8930  0329  1C03               	skipc
  8931  032A  2B08               	goto	i1l8107
  8932                           
  8933                           ;usb_device.c: 2561: }
  8934                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8935  032B  3050               	movlw	80
  8936  032C  00EA               	movwf	??_USBCtrlEPService
  8937  032D  01EB               	clrf	??_USBCtrlEPService+1
  8938  032E  0022               	movlb	2	; select bank2
  8939  032F  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8940  0330  3E02               	addlw	2
  8941  0331  0086               	movwf	6
  8942  0332  0187               	clrf	7
  8943  0333  0020               	movlb	0	; select bank0
  8944  0334  086A               	movf	??_USBCtrlEPService,w
  8945  0335  3FC0               	movwi [0]fsr1
  8946  0336  086B               	movf	??_USBCtrlEPService+1,w
  8947  0337  3FC1               	movwi [1]fsr1
  8948                           
  8949                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  8950  0338  283C               	ljmp	i1l8063
  8951  0339                     i1l8119:	
  8952                           ;usb_device.c: 2566: }
  8953                           
  8954                           
  8955                           ;usb_device.c: 2567: else
  8956                           ;usb_device.c: 2568: {
  8957                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  8958  0339  3185  2D39         	ljmp	i1l7691
  8959  033B                     i1l8121:	
  8960                           
  8961                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  8962  033B  30FD               	movlw	253
  8963  033C  056A               	andwf	_USTATcopy^(0+256),w	;volatile
  8964  033D  0020               	movlb	0	; select bank0
  8965  033E  00EA               	movwf	??_USBCtrlEPService
  8966  033F  3A04               	xorlw	4
  8967  0340  1D03               	skipz
  8968  0341  0008               	return
  8969                           
  8970                           ;usb_device.c: 2574: {
  8971                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  8972  0342  3184  2C29         	ljmp	i1l7557
  8973  0344                     __end_of_USBCtrlEPService:	
  8974  0344                     __ptext2471:	
  8975 ;; *************** function _USBStallHandler *****************
  8976 ;; Defined at:
  8977 ;;		line 2356 in file "../USB/usb_device.c"
  8978 ;; Parameters:    Size  Location     Type
  8979 ;;		None
  8980 ;; Auto vars:     Size  Location     Type
  8981 ;;		None
  8982 ;; Return value:  Size  Location     Type
  8983 ;;		None               void
  8984 ;; Registers used:
  8985 ;;		wreg, fsr1l, fsr1h
  8986 ;; Tracked objects:
  8987 ;;		On entry : 1F/1D
  8988 ;;		On exit  : 1F/1D
  8989 ;;		Unchanged: FFFE0/0
  8990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8995 ;;Total ram usage:        0 bytes
  8996 ;; Hardware stack levels used:    1
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_USBDeviceTasks
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           
  9005                           ;psect for function _USBStallHandler
  9006  0344                     _USBStallHandler:	
  9007                           
  9008                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
  9009                           
  9010                           ; Regs used in _USBStallHandler: [wregfsr1]
  9011  0344  1C18               	btfss	24,0	;volatile
  9012  0345  2B5A               	goto	i1l6419
  9013                           
  9014                           ;usb_device.c: 2369: {
  9015                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  9016  0346  0022               	movlb	2	; select bank2
  9017  0347  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9018  0348  0086               	movwf	6
  9019  0349  0187               	clrf	7
  9020  034A  0801               	movf	1,w
  9021  034B  3A80               	xorlw	128
  9022  034C  1D03               	skipz
  9023  034D  2B58               	goto	i1l6417
  9024  034E  083D               	movf	_pBDTEntryIn^(0+256),w
  9025  034F  0086               	movwf	6
  9026  0350  0801               	movf	1,w
  9027  0351  3A84               	xorlw	132
  9028  0352  1D03               	skipz
  9029  0353  2B58               	goto	i1l6417
  9030                           
  9031                           ;usb_device.c: 2372: {
  9032                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9033  0354  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9034  0355  0086               	movwf	6
  9035  0356  308C               	movlw	140
  9036  0357  0081               	movwf	1
  9037  0358                     i1l6417:	
  9038                           
  9039                           ;usb_device.c: 2375: }
  9040                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
  9041  0358  003D               	movlb	29	; select bank29
  9042  0359  1018               	bcf	24,0	;volatile
  9043  035A                     i1l6419:	
  9044                           
  9045                           ;usb_device.c: 2377: }
  9046                           ;usb_device.c: 2379: (UIR &= 0xDF);
  9047  035A  1290               	bcf	16,5	;volatile
  9048  035B  0008               	return
  9049  035C                     __end_of_USBStallHandler:	
  9050  035C                     __ptext2470:	
  9051 ;; *************** function _USBSuspend *****************
  9052 ;; Defined at:
  9053 ;;		line 2399 in file "../USB/usb_device.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;		None               void
  9060 ;; Registers used:
  9061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 1F/1D
  9064 ;;		On exit  : 1D/0
  9065 ;;		Unchanged: FFFE0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    5
  9074 ;; This function calls:
  9075 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9076 ;; This function is called by:
  9077 ;;		_USBDeviceTasks
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _USBSuspend
  9083  035C                     _USBSuspend:	
  9084                           
  9085                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
  9086                           
  9087                           ; Regs used in _USBSuspend: [wreg-status,0+pclath+cstack]
  9088  035C  1512               	bsf	18,2	;volatile
  9089                           
  9090                           ;usb_device.c: 2424: (UIR &= 0xEF);
  9091  035D  1210               	bcf	16,4	;volatile
  9092                           
  9093                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
  9094  035E  148E               	bsf	14,1	;volatile
  9095                           
  9096                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
  9097  035F  3001               	movlw	1
  9098  0360  0023               	movlb	3	; select bank3
  9099  0361  00AE               	movwf	_USBBusIsSuspended^(0+384)	;volatile
  9100                           
  9101                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  9102  0362  3075               	movlw	117
  9103  0363  0020               	movlb	0	; select bank0
  9104  0364  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9105  0365  2423  3180         	fcall	PL28	;call to abstracted procedure
  9106  0367  2A12               	ljmp	i1l7849
  9107  0368                     __end_of_USBSuspend:	
  9108  0368                     __ptext2469:	
  9109 ;; *************** function _USBWakeFromSuspend *****************
  9110 ;; Defined at:
  9111 ;;		line 2456 in file "../USB/usb_device.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;		None               void
  9118 ;; Registers used:
  9119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9120 ;; Tracked objects:
  9121 ;;		On entry : 1F/1D
  9122 ;;		On exit  : 1F/1D
  9123 ;;		Unchanged: FFFE0/0
  9124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;Total ram usage:        0 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    5
  9132 ;; This function calls:
  9133 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9134 ;; This function is called by:
  9135 ;;		_USBDeviceTasks
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           
  9140                           ;psect for function _USBWakeFromSuspend
  9141  0368                     _USBWakeFromSuspend:	
  9142                           
  9143                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
  9144                           
  9145                           ; Regs used in _USBWakeFromSuspend: [wreg-status,0+pclath+cstack]
  9146  0368  0023               	movlb	3	; select bank3
  9147  0369  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  9148                           
  9149                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  9150  036A  3074               	movlw	116
  9151  036B  0020               	movlb	0	; select bank0
  9152  036C  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9153  036D  3000               	movlw	0
  9154  036E  2423  3180         	fcall	PL28	;call to abstracted procedure
  9155  0370  2212               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9156                           
  9157                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
  9158  0371  003D               	movlb	29	; select bank29
  9159  0372  108E               	bcf	14,1	;volatile
  9160                           
  9161                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
  9162  0373  1112               	bcf	18,2	;volatile
  9163                           
  9164                           ;usb_device.c: 2495: {
  9165                           ;usb_device.c: 2496: (UIR &= 0xFB);
  9166  0374  1110               	bcf	16,2	;volatile
  9167  0375  0008               	return
  9168  0376                     __end_of_USBWakeFromSuspend:	
  9169  0376                     __ptext2503:	
  9170 ;; *************** function _USBCBInitEP *****************
  9171 ;; Defined at:
  9172 ;;		line 442 in file "main.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;		None
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;		None
  9177 ;; Return value:  Size  Location     Type
  9178 ;;		None               void
  9179 ;; Registers used:
  9180 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : 1F/0
  9183 ;;		On exit  : 1F/2
  9184 ;;		Unchanged: FFFE0/0
  9185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;Total ram usage:        0 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:    3
  9193 ;; This function calls:
  9194 ;;		_CDCInitEP
  9195 ;; This function is called by:
  9196 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           
  9201                           ;psect for function _USBCBInitEP
  9202  0376                     _USBCBInitEP:	
  9203                           
  9204                           ;main.c: 444: CDCInitEP();
  9205                           
  9206                           ; Regs used in _USBCBInitEP: [wreg+fsr1l-status,0+pclath+cstack]
  9207  0376  2B77               	ljmp	i1l7703
  9208  0377                     __end_of_USBCBInitEP:	
  9209  0377                     __ptext2504:	
  9210 ;; *************** function _CDCInitEP *****************
  9211 ;; Defined at:
  9212 ;;		line 414 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;		None               void
  9219 ;; Registers used:
  9220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 1F/0
  9223 ;;		On exit  : 1F/2
  9224 ;;		Unchanged: FFFE0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    2
  9233 ;; This function calls:
  9234 ;;		_USBEnableEndpoint
  9235 ;;		i1_USBTransferOnePacket
  9236 ;; This function is called by:
  9237 ;;		_USBCBInitEP
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function _CDCInitEP
  9243  0377                     _CDCInitEP:	
  9244  0377                     i1l7703:	
  9245                           ; Regs used in _CDCInitEP: [wreg+fsr1l-status,0+pclath+cstack]
  9246                           
  9247                           
  9248                           ;usb_function_cdc.c: 416: line_coding.dwDTERate.Val = 19200;
  9249  0377  0022               	movlb	2	; select bank2
  9250  0378  304B               	movlw	75
  9251  0379  01A3               	clrf	35
  9252  037A  01A2               	clrf	34
  9253  037B  00A1               	movwf	33
  9254  037C  3008               	movlw	8
  9255  037D  01A0               	clrf	32
  9256                           
  9257                           ;usb_function_cdc.c: 417: line_coding.bCharFormat = 0x00;
  9258  037E  01A4               	clrf	36
  9259  037F  01A5               	clrf	37
  9260                           
  9261                           ;usb_function_cdc.c: 419: line_coding.bDataBits = 0x08;
  9262  0380  00A6               	movwf	38
  9263  0381  301A               	movlw	26
  9264                           
  9265                           ;usb_function_cdc.c: 421: cdc_rx_len = 0;
  9266  0382  01D7               	clrf	_cdc_rx_len^(0+256)
  9267                           
  9268                           ;usb_function_cdc.c: 434: USBEnableEndpoint(1,0x02|0x10|0x08);
  9269  0383  00F4               	movwf	?_USBEnableEndpoint
  9270  0384  3001               	movlw	1
  9271  0385  2397  3180         	fcall	_USBEnableEndpoint
  9272                           
  9273                           ;usb_function_cdc.c: 435: USBEnableEndpoint(2,0x02|0x04|0x10|0x08);
  9274  0387  301E               	movlw	30
  9275  0388  00F4               	movwf	?_USBEnableEndpoint
  9276  0389  3002               	movlw	2
  9277  038A  2397  3180         	fcall	_USBEnableEndpoint
  9278  038C  30A0               	movlw	160
  9279                           
  9280                           ;usb_function_cdc.c: 437: CDCDataOutHandle = USBTransferOnePacket(2,0,(BYTE*)&cdc_data_r
      +                          x,sizeof(cdc_data_rx));
  9281  038D  01F0               	clrf	?i1_USBTransferOnePacket
  9282  038E  00F1               	movwf	?i1_USBTransferOnePacket+1
  9283  038F  3040               	movlw	64
  9284  0390  00F2               	movwf	?i1_USBTransferOnePacket+2
  9285  0391  3002               	movlw	2
  9286  0392  23DD               	fcall	i1_USBTransferOnePacket
  9287  0393  00C7               	movwf	_CDCDataOutHandle^(0+256)
  9288                           
  9289                           ;usb_function_cdc.c: 438: CDCDataInHandle = (0);
  9290  0394  01C6               	clrf	_CDCDataInHandle^(0+256)
  9291                           
  9292                           ;usb_function_cdc.c: 465: cdc_trf_state = 0;
  9293  0395  01D8               	clrf	_cdc_trf_state^(0+256)
  9294  0396  0008               	return
  9295  0397                     __end_of_CDCInitEP:	
  9296  0397                     __ptext2505:	
  9297 ;; *************** function _USBEnableEndpoint *****************
  9298 ;; Defined at:
  9299 ;;		line 1056 in file "../USB/usb_device.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;  ep              1    wreg     unsigned char 
  9302 ;;  options         1    4[COMMON] unsigned char 
  9303 ;; Auto vars:     Size  Location     Type
  9304 ;;  ep              1    9[COMMON] unsigned char 
  9305 ;;  p               2    7[COMMON] PTR unsigned char 
  9306 ;;		 -> UEP0(1), 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 1F/2
  9313 ;;		On exit  : 1F/2
  9314 ;;		Unchanged: FFFE0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        6 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    1
  9323 ;; This function calls:
  9324 ;;		_USBConfigureEndpoint
  9325 ;; This function is called by:
  9326 ;;		_CDCInitEP
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function _USBEnableEndpoint
  9332  0397                     _USBEnableEndpoint:	
  9333                           
  9334                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l-status,0+pclath+cstack]
  9335                           ;USBEnableEndpoint@ep stored from wreg
  9336  0397  00F9               	movwf	USBEnableEndpoint@ep
  9337                           
  9338                           ;usb_device.c: 1057: unsigned char* p;
  9339                           ;usb_device.c: 1061: if(options & 0x04)
  9340  0398  1D74               	btfss	USBEnableEndpoint@options,2
  9341  0399  2B9D               	goto	i1l7495
  9342                           
  9343                           ;usb_device.c: 1062: {
  9344                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
  9345  039A  01F0               	clrf	?_USBConfigureEndpoint
  9346  039B  23B6  3180         	fcall	_USBConfigureEndpoint
  9347  039D                     i1l7495:	
  9348                           
  9349                           ;usb_device.c: 1064: }
  9350                           ;usb_device.c: 1065: if(options & 0x02)
  9351  039D  1CF4               	btfss	USBEnableEndpoint@options,1
  9352  039E  2BA3               	goto	i1l7499
  9353                           
  9354                           ;usb_device.c: 1066: {
  9355                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
  9356  039F  01F0               	clrf	?_USBConfigureEndpoint
  9357  03A0  0AF0               	incf	?_USBConfigureEndpoint,f
  9358  03A1  0879               	movf	USBEnableEndpoint@ep,w
  9359  03A2  23B6               	fcall	_USBConfigureEndpoint
  9360  03A3                     i1l7499:	
  9361                           
  9362                           ;usb_device.c: 1068: }
  9363                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
  9364  03A3  0879               	movf	USBEnableEndpoint@ep,w
  9365  03A4  3E98               	addlw	152
  9366  03A5  00F5               	movwf	??_USBEnableEndpoint
  9367  03A6  300E               	movlw	14
  9368  03A7  01F6               	clrf	??_USBEnableEndpoint+1
  9369  03A8  3DF6               	addwfc	??_USBEnableEndpoint+1,f
  9370  03A9  0875               	movf	??_USBEnableEndpoint,w
  9371  03AA  00F7               	movwf	USBEnableEndpoint@p
  9372  03AB  0876               	movf	??_USBEnableEndpoint+1,w
  9373  03AC  00F8               	movwf	USBEnableEndpoint@p+1
  9374                           
  9375                           ;usb_device.c: 1078: *p = options;
  9376  03AD  0874               	movf	USBEnableEndpoint@options,w
  9377  03AE  00F5               	movwf	??_USBEnableEndpoint
  9378  03AF  0877               	movf	USBEnableEndpoint@p,w
  9379  03B0  0086               	movwf	6
  9380  03B1  0878               	movf	USBEnableEndpoint@p+1,w
  9381  03B2  0087               	movwf	7
  9382  03B3  0875               	movf	??_USBEnableEndpoint,w
  9383  03B4  0081               	movwf	1
  9384  03B5  0008               	return
  9385  03B6                     __end_of_USBEnableEndpoint:	
  9386  03B6                     __ptext2506:	
  9387 ;; *************** function _USBConfigureEndpoint *****************
  9388 ;; Defined at:
  9389 ;;		line 1713 in file "../USB/usb_device.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  EPNum           1    wreg     unsigned char 
  9392 ;;  direction       1    0[COMMON] unsigned char 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  EPNum           1    2[COMMON] unsigned char 
  9395 ;;  handle          1    3[COMMON] PTR volatile struct __BD
  9396 ;;		 -> BDT(48), 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9401 ;; Tracked objects:
  9402 ;;		On entry : 1F/2
  9403 ;;		On exit  : 1F/2
  9404 ;;		Unchanged: FFFE0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        4 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_USBEnableEndpoint
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           
  9420                           ;psect for function _USBConfigureEndpoint
  9421  03B6                     _USBConfigureEndpoint:	
  9422                           
  9423                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l-status,0]
  9424                           ;USBConfigureEndpoint@EPNum stored from wreg
  9425  03B6  00F2               	movwf	USBConfigureEndpoint@EPNum
  9426                           
  9427                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
  9428                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
  9429  03B7  3020               	movlw	32
  9430  03B8  00F3               	movwf	USBConfigureEndpoint@handle
  9431                           
  9432                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
  9433  03B9  0870               	movf	USBConfigureEndpoint@direction,w
  9434  03BA  00F1               	movwf	??_USBConfigureEndpoint
  9435  03BB  35F1               	lslf	??_USBConfigureEndpoint,f
  9436  03BC  0872               	movf	USBConfigureEndpoint@EPNum,w
  9437  03BD  0709               	addwf	9,w
  9438  03BE  0709               	addwf	9,w
  9439  03BF  0771               	addwf	??_USBConfigureEndpoint,w
  9440  03C0  0709               	addwf	9,w
  9441  03C1  0709               	addwf	9,w
  9442  03C2  07F3               	addwf	USBConfigureEndpoint@handle,f
  9443                           
  9444                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
  9445  03C3  0873               	movf	USBConfigureEndpoint@handle,w
  9446  03C4  0086               	movwf	6
  9447  03C5  0187               	clrf	7
  9448  03C6  1381               	bcf	1,7
  9449                           
  9450                           ;usb_device.c: 1726: if(direction == 0)
  9451  03C7  08F0               	movf	USBConfigureEndpoint@direction,f
  9452  03C8  1D03               	skipz
  9453  03C9  2BCD               	goto	i1l6431
  9454                           
  9455                           ;usb_device.c: 1727: {
  9456                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
  9457  03CA  0872               	movf	USBConfigureEndpoint@EPNum,w
  9458  03CB  3E40               	addlw	_pBDTEntryOut& (0+255)
  9459  03CC  2BCF               	goto	L25
  9460  03CD                     i1l6431:	
  9461                           ;usb_device.c: 1729: }
  9462                           
  9463                           
  9464                           ;usb_device.c: 1730: else
  9465                           ;usb_device.c: 1731: {
  9466                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
  9467  03CD  0872               	movf	USBConfigureEndpoint@EPNum,w
  9468  03CE  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9469  03CF                     L25:	
  9470  03CF  0086               	movwf	6
  9471  03D0  3001               	movlw	1	; select bank2/3
  9472  03D1  0087               	movwf	7
  9473  03D2  0873               	movf	USBConfigureEndpoint@handle,w
  9474  03D3  0081               	movwf	1
  9475                           
  9476                           ;usb_device.c: 1733: }
  9477                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
  9478  03D4  0873               	movf	USBConfigureEndpoint@handle,w
  9479  03D5  0086               	movwf	6
  9480  03D6  0187               	clrf	7
  9481  03D7  1301               	bcf	1,6
  9482                           
  9483                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
  9484  03D8  0873               	movf	USBConfigureEndpoint@handle,w
  9485  03D9  3E04               	addlw	4
  9486  03DA  0086               	movwf	6
  9487  03DB  1701               	bsf	1,6
  9488  03DC  0008               	return
  9489  03DD                     __end_of_USBConfigureEndpoint:	
  9490  03DD                     __ptext2508:	
  9491 ;; *************** function i1_USBTransferOnePacket *****************
  9492 ;; Defined at:
  9493 ;;		line 1173 in file "../USB/usb_device.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  USBTransferO    1    wreg     unsigned char 
  9496 ;;  USBTransferO    1    0[COMMON] unsigned char 
  9497 ;;  USBTransferO    1    1[COMMON] PTR unsigned char 
  9498 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
  9499 ;;  USBTransferO    1    2[COMMON] unsigned char 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  USBTransferO    1    5[COMMON] unsigned char 
  9502 ;;  USBTransferO    1    6[COMMON] PTR volatile struct __BD
  9503 ;;		 -> NULL(0), BDT(48), 
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      PTR void 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9508 ;; Tracked objects:
  9509 ;;		On entry : 1F/2
  9510 ;;		On exit  : 1F/2
  9511 ;;		Unchanged: FFFE0/0
  9512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9513 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;Total ram usage:        7 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; This function calls:
  9520 ;;		Nothing
  9521 ;; This function is called by:
  9522 ;;		_CDCInitEP
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function i1_USBTransferOnePacket
  9528  03DD                     i1_USBTransferOnePacket:	
  9529                           
  9530                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l-status,0]
  9531                           ;i1USBTransferOnePacket@ep stored from wreg
  9532  03DD  00F5               	movwf	i1USBTransferOnePacket@ep
  9533                           
  9534                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  9535                           ;usb_device.c: 1177: if(dir != 0)
  9536  03DE  0870               	movf	i1USBTransferOnePacket@dir,w
  9537  03DF  1903               	btfsc	3,2
  9538  03E0  2BE4               	goto	i1l7455
  9539                           
  9540                           ;usb_device.c: 1178: {
  9541                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  9542  03E1  0875               	movf	i1USBTransferOnePacket@ep,w
  9543  03E2  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9544  03E3  2BE6               	goto	L26
  9545  03E4                     i1l7455:	
  9546                           ;usb_device.c: 1181: }
  9547                           
  9548                           
  9549                           ;usb_device.c: 1182: else
  9550                           ;usb_device.c: 1183: {
  9551                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  9552  03E4  0875               	movf	i1USBTransferOnePacket@ep,w
  9553  03E5  3E40               	addlw	_pBDTEntryOut& (0+255)
  9554  03E6                     L26:	
  9555  03E6  0086               	movwf	6
  9556  03E7  3001               	movlw	1	; select bank2/3
  9557  03E8  0087               	movwf	7
  9558  03E9  0801               	movf	1,w
  9559  03EA  00F6               	movwf	i1USBTransferOnePacket@handle
  9560                           
  9561                           ;usb_device.c: 1186: }
  9562                           ;usb_device.c: 1190: if(handle == 0)
  9563  03EB  08F6               	movf	i1USBTransferOnePacket@handle,f
  9564  03EC  1903               	btfsc	3,2
  9565                           
  9566                           ;usb_device.c: 1191: {
  9567                           ;usb_device.c: 1192: return 0;
  9568  03ED  3400               	retlw	0
  9569                           
  9570                           ;usb_device.c: 1193: }
  9571                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  9572  03EE  0871               	movf	i1USBTransferOnePacket@data,w
  9573  03EF  00F3               	movwf	??i1_USBTransferOnePacket
  9574  03F0  3002               	movlw	2
  9575  03F1  00F4               	movwf	??i1_USBTransferOnePacket+1
  9576  03F2  0876               	movf	i1USBTransferOnePacket@handle,w
  9577  03F3  3E02               	addlw	2
  9578  03F4  0086               	movwf	6
  9579  03F5  0187               	clrf	7
  9580  03F6  0873               	movf	??i1_USBTransferOnePacket,w
  9581  03F7  3FC0               	movwi [0]fsr1
  9582  03F8  0874               	movf	??i1_USBTransferOnePacket+1,w
  9583  03F9  3FC1               	movwi [1]fsr1
  9584                           
  9585                           ;usb_device.c: 1207: handle->CNT = len;
  9586  03FA  0A76               	incf	i1USBTransferOnePacket@handle,w
  9587  03FB  0086               	movwf	6
  9588  03FC  0872               	movf	i1USBTransferOnePacket@len,w
  9589  03FD  0081               	movwf	1
  9590                           
  9591                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  9592  03FE  0876               	movf	i1USBTransferOnePacket@handle,w
  9593  03FF  0086               	movwf	6
  9594  0400  3040               	movlw	64
  9595  0401  0581               	andwf	1,f
  9596                           
  9597                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  9598  0402  0876               	movf	i1USBTransferOnePacket@handle,w
  9599  0403  0086               	movwf	6
  9600  0404  3088               	movlw	136
  9601  0405  0481               	iorwf	1,f
  9602                           
  9603                           ;usb_device.c: 1212: if(dir != 0)
  9604  0406  0870               	movf	i1USBTransferOnePacket@dir,w
  9605  0407  1903               	btfsc	3,2
  9606  0408  2C0C               	goto	i1l7473
  9607                           
  9608                           ;usb_device.c: 1213: {
  9609                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  9610  0409  0875               	movf	i1USBTransferOnePacket@ep,w
  9611  040A  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9612  040B  2C0E               	goto	L27
  9613  040C                     i1l7473:	
  9614                           ;usb_device.c: 1216: }
  9615                           
  9616                           
  9617                           ;usb_device.c: 1217: else
  9618                           ;usb_device.c: 1218: {
  9619                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  9620  040C  0875               	movf	i1USBTransferOnePacket@ep,w
  9621  040D  3E40               	addlw	_pBDTEntryOut& (0+255)
  9622  040E                     L27:	
  9623  040E  0086               	movwf	6
  9624  040F  3001               	movlw	1	; select bank2/3
  9625  0410  0087               	movwf	7
  9626  0411  3004               	movlw	4
  9627  0412  0681               	xorwf	1,f
  9628                           
  9629                           ;usb_device.c: 1221: }
  9630                           ;usb_device.c: 1222: return (void*)handle;
  9631  0413  0876               	movf	i1USBTransferOnePacket@handle,w
  9632  0414  0008               	return
  9633  0415                     __end_ofi1_USBTransferOnePacket:	
  9634  0415                     __ptext2502:	
  9635 ;; *************** function _USBCBStdSetDscHandler *****************
  9636 ;; Defined at:
  9637 ;;		line 416 in file "main.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;		None
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;		None
  9642 ;; Return value:  Size  Location     Type
  9643 ;;		None               void
  9644 ;; Registers used:
  9645 ;;		None
  9646 ;; Tracked objects:
  9647 ;;		On entry : 1F/0
  9648 ;;		On exit  : 1F/0
  9649 ;;		Unchanged: FFFFFFE0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;Total ram usage:        0 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; This function calls:
  9658 ;;		Nothing
  9659 ;; This function is called by:
  9660 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function _USBCBStdSetDscHandler
  9666  0415                     _USBCBStdSetDscHandler:	
  9667  0415                     i1l1057:	
  9668                           ; Regs used in _USBCBStdSetDscHandler: []
  9669                           
  9670  0415  0008               	return
  9671  0416                     __end_of_USBCBStdSetDscHandler:	
  9672  0416                     __ptext2500:	
  9673 ;; *************** function _USBCBCheckOtherReq *****************
  9674 ;; Defined at:
  9675 ;;		line 391 in file "main.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;		None
  9680 ;; Return value:  Size  Location     Type
  9681 ;;		None               void
  9682 ;; Registers used:
  9683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : 1F/0
  9686 ;;		On exit  : 1D/0
  9687 ;;		Unchanged: FFFE0/0
  9688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9693 ;;Total ram usage:        0 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    1
  9696 ;; This function calls:
  9697 ;;		_USBCheckCDCRequest
  9698 ;; This function is called by:
  9699 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           
  9704                           ;psect for function _USBCBCheckOtherReq
  9705  0416                     _USBCBCheckOtherReq:	
  9706                           
  9707                           ;main.c: 392: USBCheckCDCRequest();
  9708                           
  9709                           ; Regs used in _USBCBCheckOtherReq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9710  0416  3194  2C43         	ljmp	i1l6585
  9711  0418                     __end_of_USBCBCheckOtherReq:	
  9712  0418                     __ptext2499:	
  9713 ;; *************** function _USBCBErrorHandler *****************
  9714 ;; Defined at:
  9715 ;;		line 340 in file "main.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;		None               void
  9722 ;; Registers used:
  9723 ;;		None
  9724 ;; Tracked objects:
  9725 ;;		On entry : 1F/0
  9726 ;;		On exit  : 1F/0
  9727 ;;		Unchanged: FFFFFFE0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           
  9743                           ;psect for function _USBCBErrorHandler
  9744  0418                     _USBCBErrorHandler:	
  9745  0418                     i1l1051:	
  9746                           ; Regs used in _USBCBErrorHandler: []
  9747                           
  9748  0418  0008               	return
  9749  0419                     __end_of_USBCBErrorHandler:	
  9750  0419                     __ptext2498:	
  9751 ;; *************** function _USBCB_SOF_Handler *****************
  9752 ;; Defined at:
  9753 ;;		line 315 in file "main.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;		None
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		None
  9762 ;; Tracked objects:
  9763 ;;		On entry : 1F/0
  9764 ;;		On exit  : 1F/0
  9765 ;;		Unchanged: FFFFFFE0/0
  9766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;Total ram usage:        0 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; This function calls:
  9774 ;;		Nothing
  9775 ;; This function is called by:
  9776 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _USBCB_SOF_Handler
  9782  0419                     _USBCB_SOF_Handler:	
  9783  0419                     i1l1048:	
  9784                           ; Regs used in _USBCB_SOF_Handler: []
  9785                           
  9786  0419  0008               	return
  9787  041A                     __end_of_USBCB_SOF_Handler:	
  9788  041A                     __ptext2497:	
  9789 ;; *************** function _USBCBWakeFromSuspend *****************
  9790 ;; Defined at:
  9791 ;;		line 283 in file "main.c"
  9792 ;; Parameters:    Size  Location     Type
  9793 ;;		None
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;		None
  9796 ;; Return value:  Size  Location     Type
  9797 ;;		None               void
  9798 ;; Registers used:
  9799 ;;		None
  9800 ;; Tracked objects:
  9801 ;;		On entry : 1F/0
  9802 ;;		On exit  : 1F/0
  9803 ;;		Unchanged: FFFFFFE0/0
  9804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;Total ram usage:        0 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; This function calls:
  9812 ;;		Nothing
  9813 ;; This function is called by:
  9814 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9815 ;; This function uses a non-reentrant model
  9816 ;;
  9817                           
  9818                           
  9819                           ;psect for function _USBCBWakeFromSuspend
  9820  041A                     _USBCBWakeFromSuspend:	
  9821  041A                     i1l1045:	
  9822                           ; Regs used in _USBCBWakeFromSuspend: []
  9823                           
  9824  041A  0008               	return
  9825  041B                     __end_of_USBCBWakeFromSuspend:	
  9826  041B                     __ptext2496:	
  9827 ;; *************** function _USBCBSuspend *****************
  9828 ;; Defined at:
  9829 ;;		line 238 in file "main.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;		None
  9832 ;; Auto vars:     Size  Location     Type
  9833 ;;		None
  9834 ;; Return value:  Size  Location     Type
  9835 ;;		None               void
  9836 ;; Registers used:
  9837 ;;		None
  9838 ;; Tracked objects:
  9839 ;;		On entry : 1F/0
  9840 ;;		On exit  : 1F/0
  9841 ;;		Unchanged: FFFFFFE0/0
  9842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;Total ram usage:        0 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; This function calls:
  9850 ;;		Nothing
  9851 ;; This function is called by:
  9852 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9853 ;; This function uses a non-reentrant model
  9854 ;;
  9855                           
  9856                           
  9857                           ;psect for function _USBCBSuspend
  9858  041B                     _USBCBSuspend:	
  9859  041B                     i1l1042:	
  9860                           ; Regs used in _USBCBSuspend: []
  9861                           
  9862  041B  0008               	return
  9863  041C                     __end_of_USBCBSuspend:	
  9864  041C                     PL24:	
  9865  041C  3E02               	addlw	2
  9866  041D  0086               	movwf	6
  9867  041E  0870               	movf	??_USBCtrlEPAllowStatusStage,w
  9868  041F  3FC0               	movwi [0]fsr1
  9869  0420  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
  9870  0421  3FC1               	movwi [1]fsr1
  9871  0422  0008               	return
  9872  0423                     __end_ofPL24:	
  9873  0423                     PL28:	
  9874  0423  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9875  0424  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9876  0425  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9877  0426  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9878  0427  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  9879  0428  0008               	return
  9880  0429                     __end_ofPL28:	
  9881                           
  9882                           	psect	text2479
  9883  0429                     __ptext2479:	
  9884 ;; *************** function _USBCtrlTrfInHandler *****************
  9885 ;; Defined at:
  9886 ;;		line 2748 in file "../USB/usb_device.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;		None
  9889 ;; Auto vars:     Size  Location     Type
  9890 ;;  lastDTS         1    5[COMMON] unsigned char 
  9891 ;; Return value:  Size  Location     Type
  9892 ;;		None               void
  9893 ;; Registers used:
  9894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9895 ;; Tracked objects:
  9896 ;;		On entry : 1F/0
  9897 ;;		On exit  : 1F/2
  9898 ;;		Unchanged: 0/0
  9899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;Total ram usage:        3 bytes
  9905 ;; Hardware stack levels used:    1
  9906 ;; Hardware stack levels required when called:    1
  9907 ;; This function calls:
  9908 ;;		_USBCtrlTrfTxService
  9909 ;;		Absolute function
  9910 ;; This function is called by:
  9911 ;;		_USBCtrlEPService
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           
  9916                           ;psect for function _USBCtrlTrfInHandler
  9917  0429                     _USBCtrlTrfInHandler:	
  9918  0429                     i1l7557:	
  9919                           ; Regs used in _USBCtrlTrfInHandler: [wreg-status,0+pclath+cstack]
  9920                           
  9921                           
  9922                           ;usb_device.c: 2749: BYTE lastDTS;
  9923                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  9924  0429  0022               	movlb	2	; select bank2
  9925  042A  083D               	movf	_pBDTEntryIn^(0+256),w
  9926  042B  0086               	movwf	6
  9927  042C  3000               	movlw	0
  9928  042D  0187               	clrf	7
  9929  042E  1B01               	btfsc	1,6
  9930  042F  3001               	movlw	1
  9931  0430  00F5               	movwf	USBCtrlTrfInHandler@lastDTS
  9932                           
  9933                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  9934  0431  3004               	movlw	4
  9935  0432  06BD               	xorwf	_pBDTEntryIn^(0+256),f
  9936                           
  9937                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9938  0433  0851               	movf	_USBDeviceState^(0+256),w	;volatile
  9939  0434  3A08               	xorlw	8
  9940  0435  1D03               	skipz
  9941  0436  2C43               	goto	i1l323
  9942                           
  9943                           ;usb_device.c: 2760: {
  9944                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9945  0437  0020               	movlb	0	; select bank0
  9946  0438  0852               	movf	82,w	;volatile
  9947  0439  003D               	movlb	29	; select bank29
  9948  043A  0096               	movwf	22	;volatile
  9949                           
  9950                           ;usb_device.c: 2762: if(UADDR != 0u)
  9951  043B  0816               	movf	22,w
  9952  043C  1903               	btfsc	3,2
  9953  043D  2C40               	goto	i1l7567
  9954                           
  9955                           ;usb_device.c: 2763: {
  9956                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9957  043E  3010               	movlw	16
  9958  043F  2C41               	goto	L13
  9959  0440                     i1l7567:	
  9960                           ;usb_device.c: 2765: }
  9961                           
  9962                           
  9963                           ;usb_device.c: 2766: else
  9964                           ;usb_device.c: 2767: {
  9965                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9966  0440  3004               	movlw	4
  9967  0441                     L13:	
  9968  0441  0022               	movlb	2	; select bank2
  9969  0442  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  9970  0443                     i1l323:	
  9971                           
  9972                           ;usb_device.c: 2769: }
  9973                           ;usb_device.c: 2770: }
  9974                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9975  0443  0B5A               	decfsz	_controlTransferState^(0+256),w	;volatile
  9976  0444  2C6B               	goto	i1l326
  9977                           
  9978                           ;usb_device.c: 2774: {
  9979                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9980  0445  3058               	movlw	88
  9981  0446  00F3               	movwf	??_USBCtrlTrfInHandler
  9982  0447  01F4               	clrf	??_USBCtrlTrfInHandler+1
  9983  0448  083D               	movf	_pBDTEntryIn^(0+256),w
  9984  0449  3E02               	addlw	2
  9985  044A  0086               	movwf	6
  9986  044B  0187               	clrf	7
  9987  044C  0873               	movf	??_USBCtrlTrfInHandler,w
  9988  044D  3FC0               	movwi [0]fsr1
  9989  044E  0874               	movf	??_USBCtrlTrfInHandler+1,w
  9990  044F  3FC1               	movwi [1]fsr1
  9991                           
  9992                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9993  0450  24E2  3184         	fcall	_USBCtrlTrfTxService
  9994                           
  9995                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9996  0452  0862               	movf	_shortPacketStatus^(0+256),w	;volatile
  9997  0453  3A02               	xorlw	2
  9998  0454  1D03               	skipz
  9999  0455  2C5C               	goto	i1l7577
 10000                           
 10001                           ;usb_device.c: 2783: {
 10002                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 10003  0456  083D               	movf	_pBDTEntryIn^(0+256),w
 10004  0457  0086               	movwf	6
 10005  0458  3084               	movlw	132
 10006  0459  0187               	clrf	7
 10007  045A  0081               	movwf	1
 10008                           
 10009                           ;usb_device.c: 2787: }
 10010  045B  0008               	return
 10011  045C                     i1l7577:	
 10012                           
 10013                           ;usb_device.c: 2788: else
 10014                           ;usb_device.c: 2789: {
 10015                           ;usb_device.c: 2790: if(lastDTS == 0)
 10016  045C  08F5               	movf	USBCtrlTrfInHandler@lastDTS,f
 10017  045D  1D03               	skipz
 10018  045E  2C65               	goto	i1l7581
 10019                           
 10020                           ;usb_device.c: 2791: {
 10021                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10022  045F  083D               	movf	_pBDTEntryIn^(0+256),w
 10023  0460  0086               	movwf	6
 10024  0461  30C8               	movlw	200
 10025  0462  0187               	clrf	7
 10026  0463  0081               	movwf	1
 10027                           
 10028                           ;usb_device.c: 2793: }
 10029  0464  0008               	return
 10030  0465                     i1l7581:	
 10031                           
 10032                           ;usb_device.c: 2794: else
 10033                           ;usb_device.c: 2795: {
 10034                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
 10035  0465  083D               	movf	_pBDTEntryIn^(0+256),w
 10036  0466  0086               	movwf	6
 10037  0467  3088               	movlw	136
 10038  0468  0187               	clrf	7
 10039  0469  0081               	movwf	1
 10040  046A  0008               	return
 10041  046B                     i1l326:	
 10042                           
 10043                           ;usb_device.c: 2800: else
 10044                           ;usb_device.c: 2801: {
 10045                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
 10046  046B  1FB3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10047  046C  2C75               	goto	i1l7589
 10048                           
 10049                           ;usb_device.c: 2806: {
 10050                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
 10051  046D  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10052  046E  1903               	btfsc	3,2
 10053  046F  2C73               	goto	i1l7587
 10054                           
 10055                           ;usb_device.c: 2808: {
 10056                           ;usb_device.c: 2809: outPipes[0].pFunc();
 10057  0470  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10058  0471  3184  2C29         	ljmp	$	;if you get stuck here, you called an invalid pointer
 10059  0473                     i1l7587:	
 10060                           
 10061                           ;usb_device.c: 2810: }
 10062                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
 10063  0473  0022               	movlb	2	; select bank2
 10064  0474  13B3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 10065  0475                     i1l7589:	
 10066                           
 10067                           ;usb_device.c: 2812: }
 10068                           ;usb_device.c: 2814: controlTransferState = 0;
 10069  0475  01DA               	clrf	_controlTransferState^(0+256)	;volatile
 10070  0476  0008               	return
 10071  0477                     __end_of_USBCtrlTrfInHandler:	
 10072  0477                     __ptext2474:	
 10073 ;; *************** function _USBCtrlEPServiceComplete *****************
 10074 ;; Defined at:
 10075 ;;		line 1786 in file "../USB/usb_device.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;		None
 10078 ;; Auto vars:     Size  Location     Type
 10079 ;;		None
 10080 ;; Return value:  Size  Location     Type
 10081 ;;		None               void
 10082 ;; Registers used:
 10083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 1D/2
 10086 ;;		On exit  : 1C/0
 10087 ;;		Unchanged: FFFE0/0
 10088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;Total ram usage:        2 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    2
 10096 ;; This function calls:
 10097 ;;		_USBCtrlEPAllowDataStage
 10098 ;;		_USBCtrlEPAllowStatusStage
 10099 ;; This function is called by:
 10100 ;;		_USBCtrlTrfSetupHandler
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function _USBCtrlEPServiceComplete
 10106  0477                     _USBCtrlEPServiceComplete:	
 10107  0477                     i1l7645:	
 10108                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-status,0+pclath+cstack]
 10109                           
 10110                           
 10111                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 10112  0477  003D               	movlb	29	; select bank29
 10113  0478  120E               	bcf	14,4	;volatile
 10114                           
 10115                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 10116  0479  0022               	movlb	2	; select bank2
 10117  047A  1BE5               	btfsc	(_inPipes^(0+256)+2),7	;volatile
 10118  047B  2C91               	goto	i1l216
 10119                           
 10120                           ;usb_device.c: 1798: {
 10121                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 10122  047C  1FB3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10123  047D  2C88               	goto	i1l7659
 10124                           
 10125                           ;usb_device.c: 1800: {
 10126                           ;usb_device.c: 1801: controlTransferState = 2;
 10127  047E  3002               	movlw	2
 10128  047F  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10129                           
 10130                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 10131  0480  08CF               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 10132  0481  1D03               	skipz
 10133  0482  2C84               	goto	i1l7655
 10134                           
 10135                           ;usb_device.c: 1813: {
 10136                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 10137  0483  24AC               	fcall	_USBCtrlEPAllowDataStage
 10138  0484                     i1l7655:	
 10139                           
 10140                           ;usb_device.c: 1815: }
 10141                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 10142  0484  0022               	movlb	2	; select bank2
 10143  0485  01D3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10144                           
 10145                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 10146  0486  01D2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10147                           
 10148                           ;usb_device.c: 1821: }
 10149  0487  0008               	return
 10150  0488                     i1l7659:	
 10151                           
 10152                           ;usb_device.c: 1822: else
 10153                           ;usb_device.c: 1823: {
 10154                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 10155                           
 10156                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10157                           
 10158                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10159  0488  2517               	fcall	PL6	;call to abstracted procedure
 10160  0489  308C               	movlw	140
 10161  048A  0081               	movwf	1
 10162                           
 10163                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 10164  048B  0022               	movlb	2	; select bank2
 10165  048C  083D               	movf	_pBDTEntryIn^(0+256),w
 10166  048D  0086               	movwf	6
 10167  048E  3084               	movlw	132
 10168  048F  0081               	movwf	1
 10169  0490  0008               	return
 10170  0491                     i1l216:	
 10171                           
 10172                           ;usb_device.c: 1834: else
 10173                           ;usb_device.c: 1835: {
 10174                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 10175  0491  0020               	movlb	0	; select bank0
 10176  0492  1FD0               	btfss	80,7	;volatile
 10177  0493  2CA4               	goto	i1l7675
 10178                           
 10179                           ;usb_device.c: 1837: {
 10180                           ;usb_device.c: 1838: controlTransferState = 1;
 10181  0494  3001               	movlw	1
 10182  0495  0022               	movlb	2	; select bank2
 10183  0496  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10184                           
 10185                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 10186  0497  08CE               	movf	_USBDeferINDataStagePackets^(0+256),f
 10187  0498  1D03               	skipz
 10188  0499  2C9C               	goto	i1l7667
 10189                           
 10190                           ;usb_device.c: 1853: {
 10191                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 10192  049A  24AC  3184         	fcall	_USBCtrlEPAllowDataStage
 10193  049C                     i1l7667:	
 10194                           
 10195                           ;usb_device.c: 1855: }
 10196                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 10197  049C  0022               	movlb	2	; select bank2
 10198  049D  01D3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10199                           
 10200                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 10201  049E  01D2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10202                           
 10203                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 10204  049F  08D0               	movf	_USBDeferStatusStagePacket^(0+256),f
 10205  04A0  1D03               	skipz
 10206  04A1  0008               	return
 10207                           
 10208                           ;usb_device.c: 1880: {
 10209                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 10210  04A2  3182  2AB4         	ljmp	i1l6379
 10211  04A4                     i1l7675:	
 10212                           
 10213                           ;usb_device.c: 1884: else
 10214                           ;usb_device.c: 1885: {
 10215                           ;usb_device.c: 1896: controlTransferState = 2;
 10216  04A4  3002               	movlw	2
 10217  04A5  0022               	movlb	2	; select bank2
 10218  04A6  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10219                           
 10220                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 10221                           
 10222                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10223                           
 10224                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10225  04A7  2517  3184         	fcall	PL6	;call to abstracted procedure
 10226  04A9  3084               	movlw	132
 10227  04AA  0081               	movwf	1
 10228  04AB  2C9C               	goto	i1l7667
 10229  04AC                     __end_of_USBCtrlEPServiceComplete:	
 10230                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 10231                           
 10232                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 10233                           
 10234                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 10235                           
 10236  04AC                     __ptext2475:	
 10237 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10238 ;; Defined at:
 10239 ;;		line 1660 in file "../USB/usb_device.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;		None
 10242 ;; Auto vars:     Size  Location     Type
 10243 ;;		None
 10244 ;; Return value:  Size  Location     Type
 10245 ;;		None               void
 10246 ;; Registers used:
 10247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10248 ;; Tracked objects:
 10249 ;;		On entry : 1F/2
 10250 ;;		On exit  : 1C/0
 10251 ;;		Unchanged: FFFE0/0
 10252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;Total ram usage:        2 bytes
 10258 ;; Hardware stack levels used:    1
 10259 ;; Hardware stack levels required when called:    1
 10260 ;; This function calls:
 10261 ;;		_USBCtrlTrfTxService
 10262 ;; This function is called by:
 10263 ;;		_USBCtrlEPServiceComplete
 10264 ;; This function uses a non-reentrant model
 10265 ;;
 10266                           
 10267                           
 10268                           ;psect for function _USBCtrlEPAllowDataStage
 10269  04AC                     _USBCtrlEPAllowDataStage:	
 10270                           
 10271                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 10272                           
 10273                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-status,0+pclath+cstack]
 10274  04AC  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10275                           
 10276                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 10277  04AD  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10278                           
 10279                           ;usb_device.c: 1664: if(controlTransferState == 2)
 10280  04AE  085A               	movf	_controlTransferState^(0+256),w	;volatile
 10281  04AF  3A02               	xorlw	2
 10282  04B0  1D03               	skipz
 10283  04B1  2CC1               	goto	i1l7509
 10284                           
 10285                           ;usb_device.c: 1665: {
 10286                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 10287  04B2  0021               	movlb	1	; select bank1
 10288  04B3  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10289                           
 10290                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10291  04B5  3058               	movlw	88
 10292  04B6  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10293  04B7  01F4               	clrf	??_USBCtrlEPAllowDataStage+1
 10294  04B8  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10295  04B9  3E02               	addlw	2
 10296  04BA  0086               	movwf	6
 10297  04BB  0873               	movf	??_USBCtrlEPAllowDataStage,w
 10298  04BC  3FC0               	movwi [0]fsr1
 10299  04BD  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 10300  04BE  3FC1               	movwi [1]fsr1
 10301                           
 10302                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10303  04BF  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10304                           
 10305                           ;usb_device.c: 1670: }
 10306  04C0  2DCD               	ljmp	PL34	;call to abstracted procedure
 10307  04C1                     i1l7509:	
 10308                           
 10309                           ;usb_device.c: 1671: else
 10310                           ;usb_device.c: 1672: {
 10311                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 10312  04C1  0867               	movf	((_inPipes+1)^(0+256)+3),w	;volatile
 10313  04C2  0020               	movlb	0	; select bank0
 10314  04C3  0257               	subwf	87,w	;volatile
 10315  04C4  1D03               	skipz
 10316  04C5  2CCA               	goto	u575_25
 10317  04C6  0022               	movlb	2	; select bank2
 10318  04C7  0866               	movf	(_inPipes^(0+256)+3),w	;volatile
 10319  04C8  0020               	movlb	0	; select bank0
 10320  04C9  0256               	subwf	86,w	;volatile
 10321  04CA                     u575_25:	
 10322  04CA  1803               	skipnc
 10323  04CB  2CD3               	goto	i1l7513
 10324                           
 10325                           ;usb_device.c: 1676: {
 10326                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 10327  04CC  0857               	movf	87,w	;volatile
 10328  04CD  0022               	movlb	2	; select bank2
 10329  04CE  00E7               	movwf	((_inPipes+1)^(0+256)+3)	;volatile
 10330  04CF  0020               	movlb	0	; select bank0
 10331  04D0  0856               	movf	86,w	;volatile
 10332  04D1  0022               	movlb	2	; select bank2
 10333  04D2  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 10334  04D3                     i1l7513:	
 10335                           
 10336                           ;usb_device.c: 1678: }
 10337                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 10338  04D3  24E2  3184         	fcall	_USBCtrlTrfTxService
 10339                           
 10340                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10341  04D5  3058               	movlw	88
 10342  04D6  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10343  04D7  01F4               	clrf	??_USBCtrlEPAllowDataStage+1
 10344  04D8  083D               	movf	_pBDTEntryIn^(0+256),w
 10345  04D9  3E02               	addlw	2
 10346  04DA  0086               	movwf	6
 10347  04DB  0187               	clrf	7
 10348  04DC  0873               	movf	??_USBCtrlEPAllowDataStage,w
 10349  04DD  3FC0               	movwi [0]fsr1
 10350  04DE  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 10351  04DF  3FC1               	movwi [1]fsr1
 10352                           
 10353                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10354  04E0  083D               	movf	_pBDTEntryIn^(0+256),w
 10355  04E1  2DCD               	ljmp	PL34	;call to abstracted procedure
 10356  04E2                     __end_of_USBCtrlEPAllowDataStage:	
 10357  04E2                     __ptext2480:	
 10358 ;; *************** function _USBCtrlTrfTxService *****************
 10359 ;; Defined at:
 10360 ;;		line 1938 in file "../USB/usb_device.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;		None
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  byteToSend      1    2[COMMON] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;		None               void
 10367 ;; Registers used:
 10368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10369 ;; Tracked objects:
 10370 ;;		On entry : 1D/0
 10371 ;;		On exit  : 1F/2
 10372 ;;		Unchanged: FFFE0/0
 10373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;Total ram usage:        3 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_USBCtrlEPAllowDataStage
 10384 ;;		_USBCtrlTrfInHandler
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _USBCtrlTrfTxService
 10390  04E2                     _USBCtrlTrfTxService:	
 10391                           
 10392                           ;usb_device.c: 1939: BYTE byteToSend;
 10393                           ;usb_device.c: 1943: byteToSend = 8;
 10394                           
 10395                           ; Regs used in _USBCtrlTrfTxService: [wreg-status,0+pclath]
 10396  04E2  3008               	movlw	8
 10397  04E3  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 10398                           
 10399                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 10400  04E4  3000               	movlw	0
 10401  04E5  0022               	movlb	2	; select bank2
 10402  04E6  0267               	subwf	((_inPipes+1)^(0+256)+3),w	;volatile
 10403  04E7  3008               	movlw	8
 10404  04E8  1903               	skipnz
 10405  04E9  0266               	subwf	(_inPipes^(0+256)+3),w	;volatile
 10406  04EA  1803               	skipnc
 10407  04EB  2CF7               	goto	i1l6495
 10408                           
 10409                           ;usb_device.c: 1945: {
 10410                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 10411  04EC  0866               	movf	(_inPipes^(0+256)+3),w	;volatile
 10412  04ED  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 10413                           
 10414                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 10415  04EE  08E2               	movf	_shortPacketStatus^(0+256),f
 10416  04EF  1D03               	skipz
 10417  04F0  2CF3               	goto	i1l6491
 10418                           
 10419                           ;usb_device.c: 1954: {
 10420                           ;usb_device.c: 1955: shortPacketStatus = 1;
 10421  04F1  3001               	movlw	1
 10422  04F2  2CF6               	goto	L14
 10423  04F3                     i1l6491:	
 10424                           ;usb_device.c: 1956: }
 10425                           
 10426                           
 10427                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 10428  04F3  0B62               	decfsz	_shortPacketStatus^(0+256),w	;volatile
 10429  04F4  2CF7               	goto	i1l6495
 10430                           
 10431                           ;usb_device.c: 1958: {
 10432                           ;usb_device.c: 1959: shortPacketStatus = 2;
 10433  04F5  3002               	movlw	2
 10434  04F6                     L14:	
 10435  04F6  00E2               	movwf	_shortPacketStatus^(0+256)	;volatile
 10436  04F7                     i1l6495:	
 10437                           
 10438                           ;usb_device.c: 1960: }
 10439                           ;usb_device.c: 1961: }
 10440                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 10441  04F7  0867               	movf	((_inPipes+1)^(0+256)+3),w	;volatile
 10442  04F8  00F1               	movwf	??_USBCtrlTrfTxService+1
 10443  04F9  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 10444  04FA  0266               	subwf	(_inPipes^(0+256)+3),w	;volatile
 10445  04FB  00F0               	movwf	??_USBCtrlTrfTxService
 10446  04FC  1C03               	skipc
 10447  04FD  03F1               	decf	??_USBCtrlTrfTxService+1,f
 10448  04FE  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 10449  04FF  0871               	movf	??_USBCtrlTrfTxService+1,w
 10450  0500  00E7               	movwf	((_inPipes+1)^(0+256)+3)	;volatile
 10451                           
 10452                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 10453  0501  0A3D               	incf	_pBDTEntryIn^(0+256),w
 10454  0502  0086               	movwf	6
 10455  0503  0187               	clrf	7
 10456  0504  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 10457  0505  0081               	movwf	1
 10458                           
 10459                           ;usb_device.c: 1974: pDst = (volatile BYTE*)CtrlTrfData;
 10460  0506  3058               	movlw	88
 10461  0507  00DF               	movwf	_pDst^(0+256)
 10462                           
 10463                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 10464  0508  1C65               	btfss	(_inPipes^(0+256)+2),0	;volatile
 10465  0509  2D0D               	goto	i1l6513
 10466  050A  2D13               	goto	i1l6523
 10467  050B                     i1l6505:	
 10468                           
 10469                           ;usb_device.c: 1978: {
 10470                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 10471                           
 10472                           ;usb_device.c: 1980: byteToSend--;
 10473  050B  252A  3184         	fcall	PL10	;call to abstracted procedure
 10474  050D                     i1l6513:	
 10475  050D  08F2               	movf	USBCtrlTrfTxService@byteToSend,f
 10476  050E  1903               	btfsc	3,2
 10477  050F  0008               	return
 10478  0510  2D0B               	goto	i1l6505
 10479  0511                     i1l6515:	
 10480                           
 10481                           ;usb_device.c: 1986: {
 10482                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 10483                           
 10484                           ;usb_device.c: 1988: byteToSend--;
 10485  0511  252A  3184         	fcall	PL10	;call to abstracted procedure
 10486  0513                     i1l6523:	
 10487  0513  08F2               	movf	USBCtrlTrfTxService@byteToSend,f
 10488  0514  1903               	btfsc	3,2
 10489  0515  0008               	return
 10490  0516  2D11               	goto	i1l6515
 10491  0517                     __end_of_USBCtrlTrfTxService:	
 10492  0517                     PL6:	
 10493  0517  0021               	movlb	1	; select bank1
 10494  0518  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
 10495  0519  0086               	movwf	6
 10496  051A  3008               	movlw	8
 10497  051B  0187               	clrf	7
 10498  051C  0081               	movwf	1
 10499  051D  3050               	movlw	80
 10500  051E  00F5               	movwf	??_USBCtrlEPServiceComplete
 10501  051F  01F6               	clrf	??_USBCtrlEPServiceComplete+1
 10502  0520  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10503  0521  3E02               	addlw	2
 10504  0522  0086               	movwf	6
 10505  0523  0875               	movf	??_USBCtrlEPServiceComplete,w
 10506  0524  3FC0               	movwi [0]fsr1
 10507  0525  0876               	movf	??_USBCtrlEPServiceComplete+1,w
 10508  0526  3FC1               	movwi [1]fsr1
 10509  0527  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10510  0528  0086               	movwf	6
 10511  0529  0008               	return
 10512  052A                     __end_ofPL6:	
 10513  052A                     PL10:	
 10514  052A  085F               	movf	_pDst^(0+256),w
 10515  052B  0086               	movwf	6
 10516  052C  0187               	clrf	7
 10517  052D  0863               	movf	_inPipes^(0+256),w	;volatile
 10518  052E  0084               	movwf	4
 10519  052F  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 10520  0530  0085               	movwf	5
 10521  0531  0800               	movf	0,w	;code access
 10522  0532  0081               	movwf	1
 10523  0533  0AE3               	incf	_inPipes^(0+256),f	;volatile
 10524  0534  1903               	skipnz
 10525  0535  0AE4               	incf	(_inPipes+1)^(0+256),f	;volatile
 10526  0536  0ADF               	incf	_pDst^(0+256),f
 10527  0537  03F2               	decf	USBCtrlTrfTxService@byteToSend,f
 10528  0538  0008               	return
 10529  0539                     __end_ofPL10:	
 10530  0539                     __ptext2476:	
 10531 ;; *************** function _USBCtrlTrfOutHandler *****************
 10532 ;; Defined at:
 10533 ;;		line 2695 in file "../USB/usb_device.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;		None
 10536 ;; Auto vars:     Size  Location     Type
 10537 ;;		None
 10538 ;; Return value:  Size  Location     Type
 10539 ;;		None               void
 10540 ;; Registers used:
 10541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10542 ;; Tracked objects:
 10543 ;;		On entry : 1F/2
 10544 ;;		On exit  : 1C/0
 10545 ;;		Unchanged: 0/0
 10546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;Total ram usage:        2 bytes
 10552 ;; Hardware stack levels used:    1
 10553 ;; Hardware stack levels required when called:    2
 10554 ;; This function calls:
 10555 ;;		_USBCtrlTrfRxService
 10556 ;; This function is called by:
 10557 ;;		_USBCtrlEPService
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _USBCtrlTrfOutHandler
 10563  0539                     _USBCtrlTrfOutHandler:	
 10564  0539                     i1l7691:	
 10565                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l-status,0+pclath+cstack]
 10566                           
 10567                           
 10568                           ;usb_device.c: 2696: if(controlTransferState == 2)
 10569  0539  085A               	movf	_controlTransferState^(0+256),w	;volatile
 10570  053A  3A02               	xorlw	2
 10571  053B  1D03               	skipz
 10572  053C  2D3E               	goto	i1l7695
 10573                           
 10574                           ;usb_device.c: 2697: {
 10575                           ;usb_device.c: 2698: USBCtrlTrfRxService();
 10576  053D  2D56               	ljmp	i1l7519
 10577  053E                     i1l7695:	
 10578                           ;usb_device.c: 2699: }
 10579                           
 10580                           
 10581                           ;usb_device.c: 2700: else
 10582                           ;usb_device.c: 2701: {
 10583                           ;usb_device.c: 2704: controlTransferState = 0;
 10584  053E  01DA               	clrf	_controlTransferState^(0+256)	;volatile
 10585                           
 10586                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
 10587  053F  08C5               	movf	_BothEP0OutUOWNsSet^(0+256),f
 10588  0540  1D03               	skipz
 10589  0541  2D54               	goto	i1l7701
 10590                           
 10591                           ;usb_device.c: 2712: {
 10592                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
 10593  0542  0021               	movlb	1	; select bank1
 10594  0543  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10595                           
 10596                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10597  0545  3050               	movlw	80
 10598  0546  00F6               	movwf	??_USBCtrlTrfOutHandler
 10599  0547  01F7               	clrf	??_USBCtrlTrfOutHandler+1
 10600  0548  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10601  0549  3E02               	addlw	2
 10602  054A  0086               	movwf	6
 10603  054B  0876               	movf	??_USBCtrlTrfOutHandler,w
 10604  054C  3FC0               	movwi [0]fsr1
 10605  054D  0877               	movf	??_USBCtrlTrfOutHandler+1,w
 10606  054E  3FC1               	movwi [1]fsr1
 10607                           
 10608                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10609  054F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10610  0550  0086               	movwf	6
 10611  0551  308C               	movlw	140
 10612  0552  0081               	movwf	1
 10613                           
 10614                           ;usb_device.c: 2716: }
 10615  0553  0008               	return
 10616  0554                     i1l7701:	
 10617                           
 10618                           ;usb_device.c: 2717: else
 10619                           ;usb_device.c: 2718: {
 10620                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
 10621  0554  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10622  0555  0008               	return
 10623  0556                     __end_of_USBCtrlTrfOutHandler:	
 10624  0556                     __ptext2477:	
 10625 ;; *************** function _USBCtrlTrfRxService *****************
 10626 ;; Defined at:
 10627 ;;		line 2019 in file "../USB/usb_device.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;		None
 10630 ;; Auto vars:     Size  Location     Type
 10631 ;;  byteToRead      1    5[COMMON] unsigned char 
 10632 ;;  i               1    4[COMMON] unsigned char 
 10633 ;; Return value:  Size  Location     Type
 10634 ;;		None               void
 10635 ;; Registers used:
 10636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10637 ;; Tracked objects:
 10638 ;;		On entry : 1F/2
 10639 ;;		On exit  : 1C/0
 10640 ;;		Unchanged: 0/0
 10641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10645 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10646 ;;Total ram usage:        4 bytes
 10647 ;; Hardware stack levels used:    1
 10648 ;; Hardware stack levels required when called:    1
 10649 ;; This function calls:
 10650 ;;		Absolute function
 10651 ;;		_USBCtrlEPAllowStatusStage
 10652 ;; This function is called by:
 10653 ;;		_USBCtrlTrfOutHandler
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           
 10658                           ;psect for function _USBCtrlTrfRxService
 10659  0556                     _USBCtrlTrfRxService:	
 10660  0556                     i1l7519:	
 10661                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l-status,0+pclath+cstack]
 10662                           
 10663                           
 10664                           ;usb_device.c: 2020: BYTE byteToRead;
 10665                           ;usb_device.c: 2021: BYTE i;
 10666                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
 10667  0556  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
 10668  0557  0086               	movwf	6
 10669  0558  0187               	clrf	7
 10670  0559  3F41               	moviw [1]fsr1
 10671  055A  00F5               	movwf	USBCtrlTrfRxService@byteToRead
 10672                           
 10673                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
 10674  055B  00F2               	movwf	??_USBCtrlTrfRxService
 10675  055C  01F3               	clrf	??_USBCtrlTrfRxService+1
 10676  055D  0873               	movf	??_USBCtrlTrfRxService+1,w
 10677  055E  0235               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 10678  055F  1D03               	skipz
 10679  0560  2D63               	goto	u576_25
 10680  0561  0872               	movf	??_USBCtrlTrfRxService,w
 10681  0562  0234               	subwf	(_outPipes^(0+256)+3),w	;volatile
 10682  0563                     u576_25:	
 10683  0563  1803               	skipnc
 10684  0564  2D67               	goto	i1l7525
 10685                           
 10686                           ;usb_device.c: 2032: {
 10687                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
 10688  0565  0834               	movf	(_outPipes^(0+256)+3),w	;volatile
 10689  0566  00F5               	movwf	USBCtrlTrfRxService@byteToRead
 10690  0567                     i1l7525:	
 10691                           
 10692                           ;usb_device.c: 2034: }
 10693                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
 10694  0567  0835               	movf	((_outPipes+1)^(0+256)+3),w	;volatile
 10695  0568  00F3               	movwf	??_USBCtrlTrfRxService+1
 10696  0569  0875               	movf	USBCtrlTrfRxService@byteToRead,w
 10697  056A  0234               	subwf	(_outPipes^(0+256)+3),w	;volatile
 10698  056B  00F2               	movwf	??_USBCtrlTrfRxService
 10699  056C  1C03               	skipc
 10700  056D  03F3               	decf	??_USBCtrlTrfRxService+1,f
 10701  056E  00B4               	movwf	(_outPipes^(0+256)+3)	;volatile
 10702  056F  0873               	movf	??_USBCtrlTrfRxService+1,w
 10703  0570  00B5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 10704                           
 10705                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
 10706  0571  01F4               	clrf	USBCtrlTrfRxService@i
 10707  0572                     i1l7535:	
 10708  0572  0875               	movf	USBCtrlTrfRxService@byteToRead,w
 10709  0573  0274               	subwf	USBCtrlTrfRxService@i,w
 10710  0574  1803               	btfsc	3,0
 10711  0575  2D87               	goto	i1l7537
 10712                           
 10713                           ;usb_device.c: 2041: {
 10714                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
 10715  0576  0874               	movf	USBCtrlTrfRxService@i,w
 10716  0577  3E58               	addlw	88
 10717  0578  0086               	movwf	6
 10718  0579  0187               	clrf	7
 10719  057A  0801               	movf	1,w
 10720  057B  00F2               	movwf	??_USBCtrlTrfRxService
 10721  057C  0831               	movf	_outPipes^(0+256),w	;volatile
 10722  057D  0086               	movwf	6
 10723  057E  0832               	movf	(_outPipes+1)^(0+256),w	;volatile
 10724  057F  0087               	movwf	7
 10725  0580  0872               	movf	??_USBCtrlTrfRxService,w
 10726  0581  0081               	movwf	1
 10727  0582  0AB1               	incf	_outPipes^(0+256),f	;volatile
 10728  0583  1903               	skipnz
 10729  0584  0AB2               	incf	(_outPipes+1)^(0+256),f	;volatile
 10730  0585  0AF4               	incf	USBCtrlTrfRxService@i,f
 10731  0586  2D72               	goto	i1l7535
 10732  0587                     i1l7537:	
 10733                           
 10734                           ;usb_device.c: 2043: }
 10735                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
 10736  0587  3003               	movlw	3
 10737  0588  3E31               	addlw	_outPipes& (0+255)
 10738  0589  0086               	movwf	6
 10739  058A  3001               	movlw	1	; select bank2/3
 10740  058B  0087               	movwf	7
 10741  058C  0016               	moviw fsr1++
 10742  058D  0401               	iorwf	1,w
 10743  058E  1903               	skipnz
 10744  058F  2DA5               	goto	i1l7545
 10745                           
 10746                           ;usb_device.c: 2048: {
 10747                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
 10748  0590  0021               	movlb	1	; select bank1
 10749  0591  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10750                           
 10751                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10752  0593  3058               	movlw	88
 10753  0594  25C3  3184         	fcall	PL14	;call to abstracted procedure
 10754                           
 10755                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 10756  0596  0022               	movlb	2	; select bank2
 10757  0597  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
 10758  0598  0086               	movwf	6
 10759  0599  1B01               	btfsc	1,6
 10760  059A  2D9E               	goto	i1l7543
 10761                           
 10762                           ;usb_device.c: 2052: {
 10763                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10764  059B  0021               	movlb	1	; select bank1
 10765  059C  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10766                           
 10767                           ;usb_device.c: 2054: }
 10768  059D  2DCD               	ljmp	PL34	;call to abstracted procedure
 10769  059E                     i1l7543:	
 10770                           
 10771                           ;usb_device.c: 2055: else
 10772                           ;usb_device.c: 2056: {
 10773                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
 10774  059E  0021               	movlb	1	; select bank1
 10775  059F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10776  05A0  0086               	movwf	6
 10777  05A1  3088               	movlw	136
 10778  05A2  0187               	clrf	7
 10779  05A3  0081               	movwf	1
 10780  05A4  0008               	return
 10781  05A5                     i1l7545:	
 10782                           
 10783                           ;usb_device.c: 2060: else
 10784                           ;usb_device.c: 2061: {
 10785                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
 10786  05A5  0021               	movlb	1	; select bank1
 10787  05A6  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10788                           
 10789                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10790  05A8  3050               	movlw	80
 10791  05A9  25C3  3184         	fcall	PL14	;call to abstracted procedure
 10792                           
 10793                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10794  05AB  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10795  05AC  0086               	movwf	6
 10796  05AD  3084               	movlw	132
 10797  05AE  0081               	movwf	1
 10798                           
 10799                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
 10800  05AF  0022               	movlb	2	; select bank2
 10801  05B0  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10802  05B1  1903               	btfsc	3,2
 10803  05B2  2DB6               	goto	i1l7551
 10804                           
 10805                           ;usb_device.c: 2078: {
 10806                           ;usb_device.c: 2084: outPipes[0].pFunc();
 10807  05B3  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10808  05B4  3184  2C29         	ljmp	$	;if you get stuck here, you called an invalid pointer
 10809  05B6                     i1l7551:	
 10810                           
 10811                           ;usb_device.c: 2089: }
 10812                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
 10813  05B6  0022               	movlb	2	; select bank2
 10814  05B7  13B3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 10815                           
 10816                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
 10817  05B8  08D0               	movf	_USBDeferStatusStagePacket^(0+256),f
 10818  05B9  1D03               	skipz
 10819  05BA  0008               	return
 10820                           
 10821                           ;usb_device.c: 2105: {
 10822                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
 10823  05BB  3182  2AB4         	ljmp	i1l6379
 10824  05BD                     __end_of_USBCtrlTrfRxService:	
 10825  05BD                     PL12:	
 10826  05BD  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
 10827  05BE  0086               	movwf	6
 10828  05BF  3008               	movlw	8
 10829  05C0  0187               	clrf	7
 10830  05C1  0081               	movwf	1
 10831  05C2  0008               	return
 10832  05C3                     __end_ofPL12:	
 10833  05C3                     PL14:	
 10834  05C3  00F2               	movwf	??_USBCtrlTrfRxService
 10835  05C4  01F3               	clrf	??_USBCtrlTrfRxService+1
 10836  05C5  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10837  05C6  3E02               	addlw	2
 10838  05C7  0086               	movwf	6
 10839  05C8  0872               	movf	??_USBCtrlTrfRxService,w
 10840  05C9  3FC0               	movwi [0]fsr1
 10841  05CA  0873               	movf	??_USBCtrlTrfRxService+1,w
 10842  05CB  3FC1               	movwi [1]fsr1
 10843  05CC  0008               	return
 10844  05CD                     __end_ofPL14:	
 10845  05CD                     PL34:	
 10846  05CD  0086               	movwf	6
 10847  05CE  30C8               	movlw	200
 10848  05CF  0081               	movwf	1
 10849  05D0  0008               	return
 10850  05D1                     __end_ofPL34:	
 10851                           
 10852                           	psect	swtext1
 10853  1166                     __pswtext1:	
 10854  1166                     i1S8377:	
 10855  1166  3180  2889         	ljmp	i1l8037
 10856  1168  3180  288B         	ljmp	i1l8039
 10857  116A  3180  2876         	ljmp	i1l338
 10858  116C  3180  288B         	ljmp	i1l8039
 10859  116E  3180  2876         	ljmp	i1l338
 10860  1170  3180  2877         	ljmp	i1l340
 10861  1172  3180  287C         	ljmp	i1l8025
 10862  1174  3180  289A         	ljmp	i1l8051
 10863  1176  3180  2880         	ljmp	i1l8029
 10864  1178  3180  287E         	ljmp	i1l8027
 10865  117A  3180  288C         	ljmp	i1l8041
 10866  117C  3180  288F         	ljmp	i1l349
 10867  117E  3180  2876         	ljmp	i1l338
 10868                           
 10869                           	psect	text2482
 10870  14F5                     __ptext2482:	
 10871 ;; *************** function _USBStdSetCfgHandler *****************
 10872 ;; Defined at:
 10873 ;;		line 2132 in file "../USB/usb_device.c"
 10874 ;; Parameters:    Size  Location     Type
 10875 ;;		None
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  p               2   10[COMMON] PTR unsigned char 
 10878 ;;		 -> UEP1(1), 
 10879 ;;  i               1   12[COMMON] unsigned char 
 10880 ;;  i               1   13[COMMON] unsigned char 
 10881 ;; Return value:  Size  Location     Type
 10882 ;;		None               void
 10883 ;; Registers used:
 10884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10885 ;; Tracked objects:
 10886 ;;		On entry : 1D/0
 10887 ;;		On exit  : 1F/2
 10888 ;;		Unchanged: FFFE0/0
 10889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;Total ram usage:        4 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; Hardware stack levels required when called:    5
 10897 ;; This function calls:
 10898 ;;		_memset
 10899 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10900 ;; This function is called by:
 10901 ;;		_USBCheckStdRequest
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           
 10906                           ;psect for function _USBStdSetCfgHandler
 10907  14F5                     _USBStdSetCfgHandler:	
 10908  14F5                     i1l7893:	
 10909                           ; Regs used in _USBStdSetCfgHandler: [wreg-status,0+pclath+cstack]
 10910                           
 10911                           
 10912                           ;usb_device.c: 2133: BYTE i;
 10913                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
 10914  14F5  0022               	movlb	2	; select bank2
 10915  14F6  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 10916                           
 10917                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
 10918  14F7  300E               	movlw	14
 10919  14F8  00FB               	movwf	USBStdSetCfgHandler@p+1
 10920  14F9  3099               	movlw	153
 10921  14FA  00FA               	movwf	USBStdSetCfgHandler@p
 10922  14FB  01FC               	clrf	USBStdSetCfgHandler@i_1132
 10923  14FC                     i1l7901:	
 10924  14FC  087A               	movf	USBStdSetCfgHandler@p,w
 10925  14FD  0086               	movwf	6
 10926  14FE  087B               	movf	USBStdSetCfgHandler@p+1,w
 10927  14FF  0087               	movwf	7
 10928  1500  0181               	clrf	1
 10929  1501  0AFA               	incf	USBStdSetCfgHandler@p,f
 10930  1502  1903               	skipnz
 10931  1503  0AFB               	incf	USBStdSetCfgHandler@p+1,f
 10932  1504  3002               	movlw	2
 10933  1505  0AFC               	incf	USBStdSetCfgHandler@i_1132,f
 10934  1506  027C               	subwf	USBStdSetCfgHandler@i_1132,w
 10935  1507  1C03               	skipc
 10936  1508  2CFC               	goto	i1l7901
 10937                           
 10938                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 10939  1509  3020               	movlw	32
 10940  150A  00F0               	movwf	?_memset
 10941  150B  3030               	movlw	48
 10942  150C  01F1               	clrf	?_memset+1
 10943  150D  01F2               	clrf	?_memset+2
 10944  150E  01F3               	clrf	?_memset+3
 10945  150F  00F4               	movwf	?_memset+4
 10946  1510  01F5               	clrf	?_memset+5
 10947  1511  2554  3194         	fcall	_memset
 10948                           
 10949                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
 10950  1513  003D               	movlb	29	; select bank29
 10951  1514  170E               	bsf	14,6	;volatile
 10952                           
 10953                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(2+1u); i++)
 10954  1515  01FD               	clrf	USBStdSetCfgHandler@i
 10955  1516                     i1l7919:	
 10956                           
 10957                           ;usb_device.c: 2151: {
 10958                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
 10959  1516  087D               	movf	USBStdSetCfgHandler@i,w
 10960  1517  3E37               	addlw	_ep_data_in& (0+255)
 10961  1518  0086               	movwf	6
 10962  1519  3001               	movlw	1	; select bank2/3
 10963  151A  0087               	movwf	7
 10964  151B  0181               	clrf	1
 10965                           
 10966                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
 10967  151C  087D               	movf	USBStdSetCfgHandler@i,w
 10968  151D  3E3A               	addlw	_ep_data_out& (0+255)
 10969  151E  0086               	movwf	6
 10970  151F  3003               	movlw	3
 10971  1520  0181               	clrf	1
 10972  1521  0AFD               	incf	USBStdSetCfgHandler@i,f
 10973  1522  027D               	subwf	USBStdSetCfgHandler@i,w
 10974  1523  1C03               	skipc
 10975  1524  2D16               	goto	i1l7919
 10976                           
 10977                           ;usb_device.c: 2154: }
 10978                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,2);
 10979  1525  30CF               	movlw	_USBAlternateInterface& (0+255)
 10980  1526  00F0               	movwf	?_memset
 10981  1527  3001               	movlw	1
 10982  1528  00F1               	movwf	?_memset+1
 10983  1529  3002               	movlw	2
 10984  152A  01F2               	clrf	?_memset+2
 10985  152B  01F3               	clrf	?_memset+3
 10986  152C  00F4               	movwf	?_memset+4
 10987  152D  01F5               	clrf	?_memset+5
 10988  152E  2554  3194         	fcall	_memset
 10989                           
 10990                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
 10991  1530  003D               	movlb	29	; select bank29
 10992  1531  130E               	bcf	14,6	;volatile
 10993                           
 10994                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10995  1532  3028               	movlw	40
 10996  1533  0022               	movlb	2	; select bank2
 10997  1534  00BD               	movwf	_pBDTEntryIn^(0+256)
 10998                           
 10999                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11000  1535  3020               	movlw	32
 11001  1536  00DE               	movwf	_pBDTEntryEP0OutCurrent^(0+256)
 11002                           
 11003                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11004  1537  0021               	movlb	1	; select bank1
 11005  1538  00EF               	movwf	_pBDTEntryEP0OutNext^(0+128)
 11006                           
 11007                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11008  1539  0020               	movlb	0	; select bank0
 11009  153A  0852               	movf	82,w	;volatile
 11010  153B  0022               	movlb	2	; select bank2
 11011  153C  00E9               	movwf	_USBActiveConfiguration^(0+256)	;volatile
 11012                           
 11013                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
 11014  153D  08E9               	movf	_USBActiveConfiguration^(0+256),f
 11015  153E  1D03               	skipz
 11016  153F  2D43               	goto	i1l7941
 11017                           
 11018                           ;usb_device.c: 2173: {
 11019                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
 11020  1540  3010               	movlw	16
 11021  1541  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
 11022                           
 11023                           ;usb_device.c: 2176: }
 11024  1542  0008               	return
 11025  1543                     i1l7941:	
 11026                           
 11027                           ;usb_device.c: 2177: else
 11028                           ;usb_device.c: 2178: {
 11029                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 11030  1543  0020               	movlb	0	; select bank0
 11031  1544  3069               	movlw	_USBActiveConfiguration& (0+255)
 11032  1545  01E0               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER
 11033  1546  0AE0               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER,f
 11034  1547  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
 11035  1548  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
 11036  1549  3001               	movlw	1
 11037  154A  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
 11038  154B  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
 11039  154C  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
 11040  154D  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
 11041  154E  3182  2212         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11042                           
 11043                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
 11044  1550  3020               	movlw	32
 11045  1551  0022               	movlb	2	; select bank2
 11046  1552  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
 11047  1553  0008               	return
 11048  1554                     __end_of_USBStdSetCfgHandler:	
 11049  1554                     __ptext2483:	
 11050 ;; *************** function _memset *****************
 11051 ;; Defined at:
 11052 ;;		line 10 in file "../../common/memset.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  p1              2    0[COMMON] PTR void 
 11055 ;;		 -> USBAlternateInterface(2), BDT(48), 
 11056 ;;  c               2    2[COMMON] int 
 11057 ;;  n               2    4[COMMON] unsigned int 
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;  p               2    7[COMMON] PTR unsigned char 
 11060 ;;		 -> USBAlternateInterface(2), BDT(48), 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  2    wreg      PTR void 
 11063 ;; Registers used:
 11064 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/2
 11067 ;;		On exit  : 0/2
 11068 ;;		Unchanged: FFFFF/0
 11069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11070 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11074 ;;Total ram usage:        9 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; This function calls:
 11077 ;;		Nothing
 11078 ;; This function is called by:
 11079 ;;		_USBStdSetCfgHandler
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           
 11084                           ;psect for function _memset
 11085  1554                     _memset:	
 11086                           
 11087                           ; Regs used in _memset: [wreg+fsr1l-status,0]
 11088  1554  0871               	movf	memset@p1+1,w
 11089  1555  00F8               	movwf	memset@p+1
 11090  1556  0870               	movf	memset@p1,w
 11091  1557  00F7               	movwf	memset@p
 11092  1558                     i1l6531:	
 11093  1558  3001               	movlw	1
 11094  1559  02F4               	subwf	memset@n,f
 11095  155A  3000               	movlw	0
 11096  155B  3BF5               	subwfb	memset@n+1,f
 11097  155C  0A74               	incf	memset@n,w
 11098  155D  1903               	skipnz
 11099  155E  0A75               	incf	memset@n+1,w
 11100  155F  1903               	btfsc	3,2
 11101  1560  0008               	return
 11102  1561  0872               	movf	memset@c,w
 11103  1562  00F6               	movwf	??_memset
 11104  1563  0877               	movf	memset@p,w
 11105  1564  0086               	movwf	6
 11106  1565  0878               	movf	memset@p+1,w
 11107  1566  0087               	movwf	7
 11108  1567  0876               	movf	??_memset,w
 11109  1568  0081               	movwf	1
 11110  1569  0AF7               	incf	memset@p,f
 11111  156A  1903               	skipnz
 11112  156B  0AF8               	incf	memset@p+1,f
 11113  156C  2D58               	goto	i1l6531
 11114  156D                     __end_of_memset:	
 11115                           
 11116                           	psect	text2484
 11117  1493                     __ptext2484:	
 11118 ;; *************** function _USBStdGetDscHandler *****************
 11119 ;; Defined at:
 11120 ;;		line 2207 in file "../USB/usb_device.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;		None
 11123 ;; Auto vars:     Size  Location     Type
 11124 ;;		None
 11125 ;; Return value:  Size  Location     Type
 11126 ;;		None               void
 11127 ;; Registers used:
 11128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11129 ;; Tracked objects:
 11130 ;;		On entry : 1D/0
 11131 ;;		On exit  : 1D/0
 11132 ;;		Unchanged: FFFE0/0
 11133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;Total ram usage:        2 bytes
 11139 ;; Hardware stack levels used:    1
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_USBCheckStdRequest
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           
 11148                           ;psect for function _USBStdGetDscHandler
 11149  1493                     _USBStdGetDscHandler:	
 11150  1493                     i1l6533:	
 11151                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11152                           
 11153                           
 11154                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
 11155  1493  0020               	movlb	0	; select bank0
 11156  1494  0850               	movf	80,w	;volatile
 11157  1495  3A80               	xorlw	128
 11158  1496  1D03               	skipz
 11159  1497  0008               	return
 11160                           
 11161                           ;usb_device.c: 2209: {
 11162                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 11163  1498  30C0               	movlw	192
 11164  1499  0022               	movlb	2	; select bank2
 11165  149A  00E5               	movwf	(_inPipes^(0+256)+2)	;volatile
 11166                           
 11167                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
 11168  149B  2CD3               	goto	i1l6557
 11169  149C                     i1l6537:	
 11170                           
 11171                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 11172  149C  3043               	movlw	low (_device_dsc| (0+32768))
 11173  149D  0022               	movlb	2	; select bank2
 11174  149E  00E3               	movwf	_inPipes^(0+256)	;volatile
 11175  149F  3091               	movlw	high (_device_dsc| (0+32768))
 11176  14A0  00E4               	movwf	(_inPipes^(0+256)+1)	;volatile
 11177                           
 11178                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
 11179  14A1  3012               	movlw	18
 11180  14A2  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11181  14A3  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 11182                           
 11183                           ;usb_device.c: 2221: break;
 11184  14A4  0008               	return
 11185  14A5                     i1l6539:	
 11186                           
 11187                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11188  14A5  0852               	movf	82,w	;volatile
 11189  14A6  00F0               	movwf	??_USBStdGetDscHandler
 11190  14A7  3035               	movlw	low (_USB_CD_Ptr| (0+32768))
 11191  14A8  24EF  3194         	fcall	PL30	;call to abstracted procedure
 11192  14AA  3090               	movlw	high (_USB_CD_Ptr| (0+32768))
 11193  14AB  24E0  3194         	fcall	PL18	;call to abstracted procedure
 11194                           
 11195                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 11196  14AD  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11197  14AE  00F1               	movwf	??_USBStdGetDscHandler+1
 11198  14AF  0863               	movf	_inPipes^(0+256),w	;volatile
 11199  14B0  00F0               	movwf	??_USBStdGetDscHandler
 11200  14B1  3E02               	addlw	2
 11201  14B2  24E8  3194         	fcall	PL26	;call to abstracted procedure
 11202  14B4  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11203                           
 11204                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 11205  14B5  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11206  14B6  00F1               	movwf	??_USBStdGetDscHandler+1
 11207  14B7  0863               	movf	_inPipes^(0+256),w	;volatile
 11208  14B8  00F0               	movwf	??_USBStdGetDscHandler
 11209  14B9  3E03               	addlw	3
 11210  14BA  24E8               	fcall	PL26	;call to abstracted procedure
 11211  14BB  00E7               	movwf	(_inPipes^(0+256)+4)	;volatile
 11212                           
 11213                           ;usb_device.c: 2234: break;
 11214  14BC  0008               	return
 11215  14BD                     i1l6545:	
 11216                           
 11217                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<4)
 11218  14BD  3004               	movlw	4
 11219  14BE  0252               	subwf	82,w	;volatile
 11220  14BF  1803               	skipnc
 11221  14C0  2CD0               	goto	i1l6551
 11222                           
 11223                           ;usb_device.c: 2240: {
 11224                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 11225  14C1  0852               	movf	82,w	;volatile
 11226  14C2  00F0               	movwf	??_USBStdGetDscHandler
 11227  14C3  302D               	movlw	low (_USB_SD_Ptr| (0+32768))
 11228  14C4  24EF  3194         	fcall	PL30	;call to abstracted procedure
 11229  14C6  3090               	movlw	high (_USB_SD_Ptr| (0+32768))
 11230  14C7  24E0               	fcall	PL18	;call to abstracted procedure
 11231                           
 11232                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 11233  14C8  0863               	movf	_inPipes^(0+256),w	;volatile
 11234  14C9  0084               	movwf	4
 11235  14CA  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11236  14CB  0085               	movwf	5
 11237  14CC  0800               	movf	0,w	;code access
 11238  14CD  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11239  14CE  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 11240                           
 11241                           ;usb_device.c: 2245: }
 11242  14CF  0008               	return
 11243  14D0                     i1l6551:	
 11244                           
 11245                           ;usb_device.c: 2255: else
 11246                           ;usb_device.c: 2256: {
 11247                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
 11248  14D0  0022               	movlb	2	; select bank2
 11249  14D1  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
 11250  14D2  0008               	return
 11251  14D3                     i1l6557:	
 11252  14D3  0020               	movlb	0	; select bank0
 11253  14D4  0853               	movf	83,w	;volatile
 11254                           
 11255                           ; Switch size 1, requested type "space"
 11256                           ; Number of cases is 3, Range of values is 1 to 3
 11257                           ; switch strategies available:
 11258                           ; Name         Instructions Cycles
 11259                           ; simple_byte           10     6 (average)
 11260                           ; direct_byte           15     9 (fixed)
 11261                           ; jumptable            263     9 (fixed)
 11262                           ;	Chosen strategy is simple_byte
 11263  14D5  3A01               	xorlw	1	; case 1
 11264  14D6  1903               	skipnz
 11265  14D7  2C9C               	goto	i1l6537
 11266  14D8  3A03               	xorlw	3	; case 2
 11267  14D9  1903               	skipnz
 11268  14DA  2CA5               	goto	i1l6539
 11269  14DB  3A01               	xorlw	1	; case 3
 11270  14DC  1903               	skipnz
 11271  14DD  2CBD               	goto	i1l6545
 11272  14DE  2CD0               	goto	i1l6551
 11273  14DF  0008               	return
 11274  14E0                     __end_of_USBStdGetDscHandler:	
 11275  14E0                     PL18:	
 11276  14E0  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11277  14E1  0085               	movwf	5
 11278  14E2  3F00               	moviw [0]fsr0
 11279  14E3  0022               	movlb	2	; select bank2
 11280  14E4  00E3               	movwf	_inPipes^(0+256)	;volatile
 11281  14E5  3F01               	moviw [1]fsr0
 11282  14E6  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 11283  14E7  0008               	return
 11284  14E8                     __end_ofPL18:	
 11285  14E8                     PL26:	
 11286  14E8  0084               	movwf	4
 11287  14E9  0871               	movf	??_USBStdGetDscHandler+1,w
 11288  14EA  1803               	skipnc
 11289  14EB  0A71               	incf	??_USBStdGetDscHandler+1,w
 11290  14EC  0085               	movwf	5
 11291  14ED  0800               	movf	0,w	;code access
 11292  14EE  0008               	return
 11293  14EF                     __end_ofPL26:	
 11294  14EF                     PL30:	
 11295  14EF  01F1               	clrf	??_USBStdGetDscHandler+1
 11296  14F0  35F0               	lslf	??_USBStdGetDscHandler,f
 11297  14F1  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11298  14F2  0770               	addwf	??_USBStdGetDscHandler,w
 11299  14F3  0084               	movwf	4
 11300  14F4  0008               	return
 11301  14F5                     __end_ofPL30:	
 11302                           
 11303                           	psect	text2485
 11304  1401                     __ptext2485:	
 11305 ;; *************** function _USBStdGetStatusHandler *****************
 11306 ;; Defined at:
 11307 ;;		line 2283 in file "../USB/usb_device.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;		None
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  p               1    0[COMMON] PTR struct __BDT
 11312 ;;		 -> NULL(0), BDT(48), 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11317 ;; Tracked objects:
 11318 ;;		On entry : 1D/0
 11319 ;;		On exit  : 1F/2
 11320 ;;		Unchanged: FFFE0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        1 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; This function calls:
 11329 ;;		Nothing
 11330 ;; This function is called by:
 11331 ;;		_USBCheckStdRequest
 11332 ;; This function uses a non-reentrant model
 11333 ;;
 11334                           
 11335                           
 11336                           ;psect for function _USBStdGetStatusHandler
 11337  1401                     _USBStdGetStatusHandler:	
 11338  1401                     i1l6559:	
 11339                           ; Regs used in _USBStdGetStatusHandler: [wreg-status,0]
 11340                           
 11341                           
 11342                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
 11343  1401  0020               	movlb	0	; select bank0
 11344  1402  01D8               	clrf	88	;volatile
 11345                           
 11346                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
 11347  1403  01D9               	clrf	89	;volatile
 11348                           
 11349                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
 11350  1404  2C2E               	goto	i1l6577
 11351  1405                     i1l279:	
 11352                           ;usb_device.c: 2288: {
 11353                           ;usb_device.c: 2289: case (0x00):
 11354                           
 11355                           
 11356                           ;usb_device.c: 2295: if(1 == 1)
 11357  1405  0022               	movlb	2	; select bank2
 11358  1406  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11359                           
 11360                           ;usb_device.c: 2296: {
 11361                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
 11362  1407  0020               	movlb	0	; select bank0
 11363  1408  1458               	bsf	88,0	;volatile
 11364                           
 11365                           ;usb_device.c: 2298: }
 11366                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
 11367  1409  0022               	movlb	2	; select bank2
 11368  140A  0B4B               	decfsz	_RemoteWakeup^(0+256),w	;volatile
 11369  140B  2C39               	goto	i1l282
 11370                           
 11371                           ;usb_device.c: 2301: {
 11372                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
 11373  140C  0020               	movlb	0	; select bank0
 11374  140D  14D8               	bsf	88,1	;volatile
 11375  140E  2C39               	goto	i1l282
 11376  140F                     i1l283:	
 11377                           ;usb_device.c: 2305: case (0x01):
 11378                           
 11379                           
 11380                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
 11381  140F  0022               	movlb	2	; select bank2
 11382  1410  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11383                           
 11384                           ;usb_device.c: 2307: break;
 11385  1411  2C39               	goto	i1l282
 11386  1412                     i1l284:	
 11387                           ;usb_device.c: 2308: case (0x02):
 11388                           
 11389                           
 11390                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
 11391  1412  0022               	movlb	2	; select bank2
 11392  1413  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11393                           
 11394                           ;usb_device.c: 2313: {
 11395                           ;usb_device.c: 2314: BDT_ENTRY *p;
 11396                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
 11397  1414  0020               	movlb	0	; select bank0
 11398  1415  1BD4               	btfsc	84,7	;volatile
 11399  1416  2C1B               	goto	i1l6567
 11400                           
 11401                           ;usb_device.c: 2317: {
 11402                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11403  1417  0854               	movf	84,w	;volatile
 11404  1418  390F               	andlw	15
 11405  1419  3E40               	addlw	_pBDTEntryOut& (0+255)
 11406  141A  2C1E               	goto	L16
 11407  141B                     i1l6567:	
 11408                           ;usb_device.c: 2319: }
 11409                           
 11410                           
 11411                           ;usb_device.c: 2320: else
 11412                           ;usb_device.c: 2321: {
 11413                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11414  141B  0854               	movf	84,w	;volatile
 11415  141C  390F               	andlw	15
 11416  141D  3E3D               	addlw	_pBDTEntryIn& (0+255)
 11417  141E                     L16:	
 11418  141E  0086               	movwf	6
 11419  141F  3001               	movlw	1	; select bank2/3
 11420  1420  0087               	movwf	7
 11421  1421  0801               	movf	1,w
 11422  1422  00F0               	movwf	USBStdGetStatusHandler@p
 11423                           
 11424                           ;usb_device.c: 2323: }
 11425                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 11426  1423  0086               	movwf	6
 11427  1424  0187               	clrf	7
 11428  1425  1F81               	btfss	1,7
 11429  1426  2C39               	goto	i1l282
 11430  1427  0870               	movf	USBStdGetStatusHandler@p,w
 11431  1428  0086               	movwf	6
 11432  1429  1D01               	btfss	1,2
 11433  142A  2C39               	goto	i1l282
 11434                           
 11435                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
 11436  142B  3001               	movlw	1
 11437  142C  00D8               	movwf	88	;volatile
 11438  142D  2C39               	goto	i1l282
 11439  142E                     i1l6577:	
 11440  142E  0850               	movf	80,w	;volatile
 11441  142F  391F               	andlw	31
 11442                           
 11443                           ; Switch size 1, requested type "space"
 11444                           ; Number of cases is 3, Range of values is 0 to 2
 11445                           ; switch strategies available:
 11446                           ; Name         Instructions Cycles
 11447                           ; simple_byte           10     6 (average)
 11448                           ; direct_byte           12     6 (fixed)
 11449                           ; jumptable            260     6 (fixed)
 11450                           ; rangetable             7     4 (fixed)
 11451                           ; spacedrange           11     6 (fixed)
 11452                           ; locatedrange           3     3 (fixed)
 11453                           ;	Chosen strategy is simple_byte
 11454  1430  1903               	skipnz
 11455  1431  2C05               	goto	i1l279
 11456  1432  3A01               	xorlw	1	; case 1
 11457  1433  1903               	skipnz
 11458  1434  2C0F               	goto	i1l283
 11459  1435  3A03               	xorlw	3	; case 2
 11460  1436  1903               	skipnz
 11461  1437  2C12               	goto	i1l284
 11462  1438  2C39               	goto	i1l282
 11463  1439                     i1l282:	
 11464                           
 11465                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
 11466  1439  0022               	movlb	2	; select bank2
 11467  143A  1FE5               	btfss	(_inPipes^(0+256)+2),7	;volatile
 11468  143B  0008               	return
 11469                           
 11470                           ;usb_device.c: 2332: {
 11471                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 11472  143C  3058               	movlw	88
 11473  143D  00E3               	movwf	_inPipes^(0+256)	;volatile
 11474  143E  01E4               	clrf	(_inPipes+1)^(0+256)	;volatile
 11475                           
 11476                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11477  143F  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
 11478                           
 11479                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
 11480  1440  3002               	movlw	2
 11481  1441  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11482  1442  0008               	return
 11483  1443                     __end_of_USBStdGetStatusHandler:	
 11484                           
 11485                           	psect	swtext2
 11486  1180                     __pswtext2:	
 11487  1180                     i1S8383:	
 11488  1180  3186  2E47         	ljmp	i1l7725
 11489  1182  3186  2E4D         	ljmp	i1l619
 11490  1184  3186  2E59         	ljmp	i1l621
 11491  1186  3186  2E5F         	ljmp	i1l7741
 11492  1188  3186  2E64         	ljmp	i1l7743
 11493  118A  3186  2EAD         	ljmp	i1l7779
 11494  118C  3186  2EB6         	ljmp	i1l637
 11495  118E  3186  2EB9         	ljmp	i1l638
 11496  1190  3186  2EB6         	ljmp	i1l637
 11497  1192  3186  2EC1         	ljmp	i1l7789
 11498                           
 11499                           	psect	text2489
 11500  13D1                     __ptext2489:	
 11501 ;; *************** function _I2CWrite *****************
 11502 ;; Defined at:
 11503 ;;		line 110 in file "i2c.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;		None
 11508 ;; Return value:  Size  Location     Type
 11509 ;;		None               void
 11510 ;; Registers used:
 11511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11512 ;; Tracked objects:
 11513 ;;		On entry : 1F/0
 11514 ;;		On exit  : 19/0
 11515 ;;		Unchanged: FFFE0/0
 11516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;Total ram usage:        1 bytes
 11522 ;; Hardware stack levels used:    1
 11523 ;; This function calls:
 11524 ;;		Nothing
 11525 ;; This function is called by:
 11526 ;;		_ISRCode
 11527 ;; This function uses a non-reentrant model
 11528 ;;
 11529                           
 11530                           
 11531                           ;psect for function _I2CWrite
 11532  13D1                     _I2CWrite:	
 11533                           
 11534                           ;i2c.c: 111: switch(I2CState.Next)
 11535                           
 11536                           ; Regs used in _I2CWrite: [wreg-status,0]
 11537  13D1  2BF3               	goto	i1l6917
 11538  13D2                     i1l6901:	
 11539                           
 11540                           ;i2c.c: 114: SSPBUF = I2CAddr;
 11541  13D2  0848               	movf	_I2CAddr^(0+256),w
 11542  13D3  0024               	movlb	4	; select bank4
 11543  13D4  0091               	movwf	17	;volatile
 11544                           
 11545                           ;i2c.c: 115: ptr = 0; I2CState.Next++;
 11546  13D5  0022               	movlb	2	; select bank2
 11547  13D6  01E0               	clrf	_ptr^(0+256)
 11548  13D7                     i1l6905:	
 11549  13D7  0868               	movf	_I2CState^(0+256),w
 11550  13D8  391F               	andlw	31
 11551  13D9  00F0               	movwf	??_I2CWrite
 11552  13DA  0AF0               	incf	??_I2CWrite,f
 11553  13DB  0868               	movf	_I2CState^(0+256),w
 11554  13DC  0670               	xorwf	??_I2CWrite,w
 11555  13DD  39E0               	andlw	-32
 11556  13DE  0670               	xorwf	??_I2CWrite,w
 11557  13DF  00E8               	movwf	_I2CState^(0+256)
 11558                           
 11559                           ;i2c.c: 116: break;
 11560  13E0  0008               	return
 11561  13E1                     i1l6907:	
 11562                           
 11563                           ;i2c.c: 118: SSPBUF = I2CInBuf[ptr++];
 11564  13E1  0860               	movf	_ptr^(0+256),w
 11565  13E2  0023               	movlb	3	; select bank3
 11566  13E3  072C               	addwf	_I2CInBuf^(0+384),w
 11567  13E4  00F0               	movwf	??_I2CWrite
 11568  13E5  0086               	movwf	6
 11569  13E6  3004               	movlw	4	; select bank8/9
 11570  13E7  0087               	movwf	7
 11571  13E8  0801               	movf	1,w
 11572  13E9  0024               	movlb	4	; select bank4
 11573  13EA  0091               	movwf	17	;volatile
 11574  13EB  0022               	movlb	2	; select bank2
 11575  13EC  0AE0               	incf	_ptr^(0+256),f
 11576                           
 11577                           ;i2c.c: 119: if(--I2CCount == 0)
 11578  13ED  0BCA               	decfsz	_I2CCount^(0+256),f
 11579  13EE  0008               	return
 11580  13EF  2BD7               	goto	i1l6905
 11581  13F0                     i1l650:	
 11582                           ;i2c.c: 121: case 10+2: SSPCON2bits.PEN = 1; break;
 11583                           
 11584  13F0  0024               	movlb	4	; select bank4
 11585  13F1  1516               	bsf	22,2	;volatile
 11586  13F2  0008               	return
 11587  13F3                     i1l6917:	
 11588  13F3  0022               	movlb	2	; select bank2
 11589  13F4  0868               	movf	_I2CState^(0+256),w
 11590  13F5  391F               	andlw	31
 11591                           
 11592                           ; Switch size 1, requested type "space"
 11593                           ; Number of cases is 3, Range of values is 10 to 12
 11594                           ; switch strategies available:
 11595                           ; Name         Instructions Cycles
 11596                           ; simple_byte           10     6 (average)
 11597                           ; direct_byte           15     9 (fixed)
 11598                           ; jumptable            263     9 (fixed)
 11599                           ;	Chosen strategy is simple_byte
 11600  13F6  3A0A               	xorlw	10	; case 10
 11601  13F7  1903               	skipnz
 11602  13F8  2BD2               	goto	i1l6901
 11603  13F9  3A01               	xorlw	1	; case 11
 11604  13FA  1903               	skipnz
 11605  13FB  2BE1               	goto	i1l6907
 11606  13FC  3A07               	xorlw	7	; case 12
 11607  13FD  1903               	skipnz
 11608  13FE  2BF0               	goto	i1l650
 11609  13FF  2C00               	goto	i1l652
 11610  1400                     i1l652:	
 11611  1400  0008               	return
 11612  1401                     __end_of_I2CWrite:	
 11613                           
 11614                           	psect	text2490
 11615  166C                     __ptext2490:	
 11616 ;; *************** function _I2CSlave *****************
 11617 ;; Defined at:
 11618 ;;		line 131 in file "i2c.c"
 11619 ;; Parameters:    Size  Location     Type
 11620 ;;		None
 11621 ;; Auto vars:     Size  Location     Type
 11622 ;;		None
 11623 ;; Return value:  Size  Location     Type
 11624 ;;		None               void
 11625 ;; Registers used:
 11626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11627 ;; Tracked objects:
 11628 ;;		On entry : 1F/2
 11629 ;;		On exit  : 19/0
 11630 ;;		Unchanged: FFFE0/0
 11631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;Total ram usage:        6 bytes
 11637 ;; Hardware stack levels used:    1
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_ISRCode
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           
 11646                           ;psect for function _I2CSlave
 11647  166C                     _I2CSlave:	
 11648                           
 11649                           ;i2c.c: 132: if(SSPSTATbits.P) {
 11650                           
 11651                           ; Regs used in _I2CSlave: [wreg-status,0+pclath]
 11652  166C  0024               	movlb	4	; select bank4
 11653  166D  1E14               	btfss	20,4	;volatile
 11654  166E  2EE8               	goto	i1l6991
 11655                           
 11656                           ;i2c.c: 133: I2CState.Next = 0;
 11657  166F  30E0               	movlw	-32
 11658  1670  0022               	movlb	2	; select bank2
 11659  1671  05E8               	andwf	_I2CState^(0+256),f
 11660                           
 11661                           ;i2c.c: 134: if(I2CCmd != '?' && I2CCmd != 'P')
 11662  1672  0849               	movf	_I2CCmd^(0+256),w
 11663  1673  3A3F               	xorlw	63
 11664  1674  1903               	skipnz
 11665  1675  2EE8               	goto	i1l6991
 11666  1676  0849               	movf	_I2CCmd^(0+256),w
 11667  1677  3A50               	xorlw	80
 11668  1678  1903               	skipnz
 11669  1679  2EE8               	goto	i1l6991
 11670                           
 11671                           ;i2c.c: 135: I2CCount = ptr;
 11672  167A  0860               	movf	_ptr^(0+256),w
 11673  167B  00CA               	movwf	_I2CCount^(0+256)
 11674  167C  2EE8               	goto	i1l6991
 11675  167D                     i1l6929:	
 11676  167D  0024               	movlb	4	; select bank4
 11677  167E  0811               	movf	17,w	;volatile
 11678  167F  0022               	movlb	2	; select bank2
 11679  1680  00C8               	movwf	_I2CAddr^(0+256)
 11680  1681  26F8               	fcall	PL2	;call to abstracted procedure
 11681  1682  01E0               	clrf	_ptr^(0+256)
 11682  1683  0008               	return
 11683  1684                     i1l6935:	
 11684  1684  0860               	movf	_ptr^(0+256),w
 11685  1685  270B  3196         	fcall	PL22	;call to abstracted procedure
 11686  1687  0022               	movlb	2	; select bank2
 11687  1688  00C9               	movwf	_I2CCmd^(0+256)
 11688  1689  0081               	movwf	1
 11689  168A  0AE0               	incf	_ptr^(0+256),f
 11690                           
 11691                           ;i2c.c: 141: if(I2CCmd == '?') I2CState.Next = 13+3;
 11692  168B  0849               	movf	_I2CCmd^(0+256),w
 11693  168C  3A3F               	xorlw	63
 11694  168D  1D03               	skipz
 11695  168E  2E94               	goto	i1l6943
 11696  168F  0868               	movf	_I2CState^(0+256),w
 11697  1690  39E0               	andlw	-32
 11698  1691  3810               	iorlw	16
 11699  1692  00E8               	movwf	_I2CState^(0+256)
 11700  1693  0008               	return
 11701  1694                     i1l6943:	
 11702                           
 11703                           ;i2c.c: 142: else if(I2CCmd == 'P') I2CState.Next = (I2CCount > 0) ? 13+6 : 0;
 11704  1694  0849               	movf	_I2CCmd^(0+256),w
 11705  1695  3A50               	xorlw	80
 11706  1696  1D03               	skipz
 11707  1697  2EA6               	goto	i1l6953
 11708  1698  08CA               	movf	_I2CCount^(0+256),f
 11709  1699  1D03               	skipz
 11710  169A  2E9D               	goto	i1l6949
 11711  169B  01F4               	clrf	_I2CSlave$2556
 11712  169C  2E9F               	goto	L24
 11713  169D                     i1l6949:	
 11714  169D  3013               	movlw	19
 11715  169E  00F4               	movwf	_I2CSlave$2556
 11716  169F                     L24:	
 11717  169F  01F5               	clrf	_I2CSlave$2556+1
 11718  16A0  0868               	movf	_I2CState^(0+256),w
 11719  16A1  0674               	xorwf	_I2CSlave$2556,w
 11720  16A2  39E0               	andlw	-32
 11721  16A3  0674               	xorwf	_I2CSlave$2556,w
 11722  16A4  00E8               	movwf	_I2CState^(0+256)
 11723  16A5  0008               	return
 11724  16A6                     i1l6953:	
 11725                           
 11726                           ;i2c.c: 143: else I2CState.Next++;
 11727  16A6  26F8               	fcall	PL2	;call to abstracted procedure
 11728  16A7  0008               	return
 11729  16A8                     i1l6955:	
 11730  16A8  3040               	movlw	64
 11731  16A9  0260               	subwf	_ptr^(0+256),w
 11732  16AA  1803               	skipnc
 11733  16AB  0008               	return
 11734  16AC  0860               	movf	_ptr^(0+256),w
 11735  16AD  270B               	fcall	PL22	;call to abstracted procedure
 11736  16AE  0081               	movwf	1
 11737  16AF  0022               	movlb	2	; select bank2
 11738  16B0  0AE0               	incf	_ptr^(0+256),f
 11739  16B1  0008               	return
 11740  16B2                     i1l6961:	
 11741  16B2  3056               	movlw	low ((_ID| (0+32768)+1))
 11742  16B3  0084               	movwf	4
 11743  16B4  3091               	movlw	high ((_ID| (0+32768)+1))
 11744  16B5  0085               	movwf	5
 11745  16B6  3F00               	moviw [0]fsr0
 11746  16B7  00F0               	movwf	??_I2CSlave
 11747  16B8  3F01               	moviw [1]fsr0
 11748  16B9  00F1               	movwf	??_I2CSlave+1
 11749  16BA  3F02               	moviw [2]fsr0
 11750  16BB  00F2               	movwf	??_I2CSlave+2
 11751  16BC  3F03               	moviw [3]fsr0
 11752  16BD  00F3               	movwf	??_I2CSlave+3
 11753  16BE  3060               	movlw	low _buf
 11754  16BF  0086               	movwf	6
 11755  16C0  3002               	movlw	2	; select bank4/5
 11756  16C1  0087               	movwf	7
 11757  16C2  0870               	movf	??_I2CSlave,w
 11758  16C3  3FC0               	movwi [0]fsr1
 11759  16C4  0871               	movf	??_I2CSlave+1,w
 11760  16C5  3FC1               	movwi [1]fsr1
 11761  16C6  0872               	movf	??_I2CSlave+2,w
 11762  16C7  3FC2               	movwi [2]fsr1
 11763  16C8  0873               	movf	??_I2CSlave+3,w
 11764  16C9  3FC3               	movwi [3]fsr1
 11765  16CA  01E0               	clrf	_ptr^(0+256)
 11766  16CB  26F8  3196         	fcall	PL2	;call to abstracted procedure
 11767  16CD                     i1l6967:	
 11768  16CD  0860               	movf	_ptr^(0+256),w
 11769  16CE  3E60               	addlw	_buf& (0+255)
 11770  16CF  0086               	movwf	6
 11771  16D0  3002               	movlw	2	; select bank4/5
 11772  16D1  2702  3196         	fcall	PL16	;call to abstracted procedure
 11773                           
 11774                           ;i2c.c: 149: if(ptr == 4) I2CState.Next++; break;
 11775  16D3  0022               	movlb	2	; select bank2
 11776  16D4  0860               	movf	_ptr^(0+256),w
 11777  16D5  3A04               	xorlw	4
 11778  16D6  1D03               	skipz
 11779  16D7  0008               	return
 11780  16D8  2EA6               	goto	i1l6953
 11781  16D9                     i1l6977:	
 11782  16D9  0024               	movlb	4	; select bank4
 11783  16DA  0811               	movf	17,w	;volatile
 11784  16DB  0022               	movlb	2	; select bank2
 11785  16DC  00CD               	movwf	_SlaveAddress^(0+256)
 11786  16DD  0008               	return
 11787  16DE                     i1l6979:	
 11788  16DE  01E0               	clrf	_ptr^(0+256)
 11789  16DF  01CA               	clrf	_I2CCount^(0+256)
 11790  16E0  26F8  3196         	fcall	PL2	;call to abstracted procedure
 11791  16E2                     i1l6983:	
 11792  16E2  0860               	movf	_ptr^(0+256),w
 11793  16E3  3EA0               	addlw	_USB_In_Buffer& (0+255)
 11794  16E4  0086               	movwf	6
 11795  16E5  3003               	movlw	3	; select bank7/8
 11796  16E6  2702               	fcall	PL16	;call to abstracted procedure
 11797  16E7  0008               	return
 11798  16E8                     i1l6991:	
 11799  16E8  0022               	movlb	2	; select bank2
 11800  16E9  0868               	movf	_I2CState^(0+256),w
 11801  16EA  391F               	andlw	31
 11802                           
 11803                           ; Switch size 1, requested type "space"
 11804                           ; Number of cases is 8, Range of values is 13 to 20
 11805                           ; switch strategies available:
 11806                           ; Name         Instructions Cycles
 11807                           ; direct_byte           25     9 (fixed)
 11808                           ; simple_byte           25    13 (average)
 11809                           ; jumptable            263     9 (fixed)
 11810                           ;	Chosen strategy is direct_byte
 11811  16EB  3EF3               	addlw	-13
 11812  16EC  1C03               	skipc
 11813  16ED  0008               	return
 11814  16EE  0084               	movwf	4
 11815  16EF  3008               	movlw	8
 11816  16F0  0204               	subwf	4,w
 11817  16F1  1803               	skipnc
 11818  16F2  0008               	return
 11819  16F3  3191               	movlp	high i1S8385
 11820  16F4  3504               	lslf	4,w
 11821  16F5  3E94               	addlw	low i1S8385
 11822  16F6  0082               	movwf	2
 11823  16F7  0008               	return
 11824  16F8                     __end_of_I2CSlave:	
 11825  16F8                     PL2:	
 11826  16F8  0868               	movf	_I2CState^(0+256),w
 11827  16F9  391F               	andlw	31
 11828  16FA  00F0               	movwf	??_I2CSlave
 11829  16FB  0AF0               	incf	??_I2CSlave,f
 11830  16FC  0868               	movf	_I2CState^(0+256),w
 11831  16FD  0670               	xorwf	??_I2CSlave,w
 11832  16FE  39E0               	andlw	-32
 11833  16FF  0670               	xorwf	??_I2CSlave,w
 11834  1700  00E8               	movwf	_I2CState^(0+256)
 11835  1701  0008               	return
 11836  1702                     __end_ofPL2:	
 11837  1702                     PL16:	
 11838  1702  0087               	movwf	7
 11839  1703  0801               	movf	1,w
 11840  1704  0024               	movlb	4	; select bank4
 11841  1705  0091               	movwf	17	;volatile
 11842  1706  0022               	movlb	2	; select bank2
 11843  1707  0AE0               	incf	_ptr^(0+256),f
 11844  1708  0024               	movlb	4	; select bank4
 11845  1709  1615               	bsf	21,4	;volatile
 11846  170A  0008               	return
 11847  170B                     __end_ofPL16:	
 11848  170B                     PL22:	
 11849  170B  3E20               	addlw	_USB_Out_Buffer& (0+255)
 11850  170C  0086               	movwf	6
 11851  170D  3004               	movlw	4	; select bank8/9
 11852  170E  0087               	movwf	7
 11853  170F  0024               	movlb	4	; select bank4
 11854  1710  0811               	movf	17,w	;volatile
 11855  1711  0008               	return
 11856  1712                     __end_ofPL22:	
 11857                           
 11858                           	psect	swtext3
 11859  1194                     __pswtext3:	
 11860  1194                     i1S8385:	
 11861  1194  3196  2E7D         	ljmp	i1l6929
 11862  1196  3196  2E84         	ljmp	i1l6935
 11863  1198  3196  2EA8         	ljmp	i1l6955
 11864  119A  3196  2EB2         	ljmp	i1l6961
 11865  119C  3196  2ECD         	ljmp	i1l6967
 11866  119E  3196  2ED9         	ljmp	i1l6977
 11867  11A0  3196  2EDE         	ljmp	i1l6979
 11868  11A2  3196  2EE2         	ljmp	i1l6983
 11869                           
 11870                           	psect	text2491
 11871  15E7                     __ptext2491:	
 11872 ;; *************** function _WorkTick *****************
 11873 ;; Defined at:
 11874 ;;		line 167 in file "klondike.c"
 11875 ;; Parameters:    Size  Location     Type
 11876 ;;		None
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;		None
 11879 ;; Return value:  Size  Location     Type
 11880 ;;		None               void
 11881 ;; Registers used:
 11882 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11883 ;; Tracked objects:
 11884 ;;		On entry : 1C/0
 11885 ;;		On exit  : 18/0
 11886 ;;		Unchanged: FFE00/0
 11887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;Total ram usage:        0 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    1
 11895 ;; This function calls:
 11896 ;;		_CheckFanSpeed
 11897 ;;		_I2CPoll
 11898 ;; This function is called by:
 11899 ;;		_ISRCode
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           
 11904                           ;psect for function _WorkTick
 11905  15E7                     _WorkTick:	
 11906                           
 11907                           ;klondike.c: 168: TMR0IF = 0;
 11908                           
 11909                           ; Regs used in _WorkTick: [wreg+fsr1l-status,0+pclath+cstack]
 11910  15E7  110B               	bcf	11,2	;volatile
 11911                           
 11912                           ;klondike.c: 170: if((Status.State == 'W') && (++Status.HashCount == WorkTicks)) {
 11913  15E8  0023               	movlb	3	; select bank3
 11914  15E9  0853               	movf	_Status^(0+384),w	;volatile
 11915  15EA  3A57               	xorlw	87
 11916  15EB  1D03               	skipz
 11917  15EC  2E0C               	goto	i1l7611
 11918  15ED  30DA               	movlw	(_Status& (0+255)+7)
 11919  15EE  0086               	movwf	6
 11920  15EF  3001               	movlw	1	; select bank3/4
 11921  15F0  0087               	movwf	7
 11922  15F1  0781               	addwf	1,f
 11923  15F2  3141               	addfsr 1,1
 11924  15F3  1803               	skipnc
 11925  15F4  0A81               	incf	1,f
 11926  15F5  317F               	addfsr 1,-1
 11927  15F6  3F40               	moviw [0]fsr1
 11928  15F7  0651               	xorwf	_WorkTicks^(0+384),w	;volatile
 11929  15F8  1D03               	skipz
 11930  15F9  2DFC               	goto	u590_25
 11931  15FA  3F41               	moviw [1]fsr1
 11932  15FB  0652               	xorwf	(_WorkTicks+1)^(0+384),w	;volatile
 11933  15FC                     u590_25:	
 11934  15FC  1D03               	skipz
 11935  15FD  2E0C               	goto	i1l7611
 11936                           
 11937                           ;klondike.c: 171: WorkNow = (WorkNow+1) & 4-1;
 11938  15FE  0022               	movlb	2	; select bank2
 11939  15FF  3003               	movlw	3
 11940  1600  0AD5               	incf	_WorkNow^(0+256),f
 11941  1601  05D5               	andwf	_WorkNow^(0+256),f
 11942                           
 11943                           ;klondike.c: 172: if(--Status.WorkQC > 0) {
 11944  1602  0023               	movlb	3	; select bank3
 11945  1603  03D6               	decf	(_Status^(0+384)+3),f	;volatile
 11946  1604  1903               	btfsc	3,2
 11947  1605  2E09               	goto	i1l7609
 11948                           
 11949                           ;klondike.c: 173: Status.State = 'P';
 11950  1606  3050               	movlw	80
 11951  1607  00D3               	movwf	_Status^(0+384)	;volatile
 11952  1608  0008               	return
 11953  1609                     i1l7609:	
 11954                           
 11955                           ;klondike.c: 176: else
 11956                           ;klondike.c: 177: Status.State = 'R';
 11957  1609  3052               	movlw	82
 11958  160A  00D3               	movwf	_Status^(0+384)	;volatile
 11959  160B  2E10               	goto	i1l7613
 11960  160C                     i1l7611:	
 11961                           
 11962                           ;klondike.c: 179: else
 11963                           ;klondike.c: 180: TMR0 = HashTime;
 11964  160C  0022               	movlb	2	; select bank2
 11965  160D  086F               	movf	_HashTime^(0+256),w
 11966  160E  0020               	movlb	0	; select bank0
 11967  160F  0095               	movwf	21	;volatile
 11968  1610                     i1l7613:	
 11969                           
 11970                           ;klondike.c: 182: if(++SlowTick == 0) {
 11971  1610  0023               	movlb	3	; select bank3
 11972  1611  0FAD               	incfsz	_SlowTick^(0+384),f
 11973  1612  2E1D               	goto	i1l7623
 11974                           
 11975                           ;klondike.c: 183: LATAbits.LATA5 = 0;;
 11976  1613  0022               	movlb	2	; select bank2
 11977  1614  128C               	bcf	12,5	;volatile
 11978                           
 11979                           ;klondike.c: 184: Status.Temp = ADRESH;
 11980  1615  0021               	movlb	1	; select bank1
 11981  1616  081C               	movf	28,w	;volatile
 11982  1617  0023               	movlb	3	; select bank3
 11983  1618  00D8               	movwf	(_Status^(0+384)+5)	;volatile
 11984                           
 11985                           ;klondike.c: 186: ADCON0bits.GO_nDONE = 1;
 11986  1619  0021               	movlb	1	; select bank1
 11987  161A  149D               	bsf	29,1	;volatile
 11988                           
 11989                           ;klondike.c: 187: CheckFanSpeed();
 11990  161B  261E  3195         	fcall	_CheckFanSpeed
 11991  161D                     i1l7623:	
 11992                           
 11993                           ;klondike.c: 188: }
 11994                           ;klondike.c: 190: I2CPoll();
 11995  161D  2E5C               	ljmp	i1l6865
 11996  161E                     __end_of_WorkTick:	
 11997  161E                     __ptext2493:	
 11998 ;; *************** function _CheckFanSpeed *****************
 11999 ;; Defined at:
 12000 ;;		line 119 in file "klondike.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;		None
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, status,2, status,0
 12009 ;; Tracked objects:
 12010 ;;		On entry : 1F/1
 12011 ;;		On exit  : 18/0
 12012 ;;		Unchanged: FFE00/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;Total ram usage:        1 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; This function calls:
 12021 ;;		Nothing
 12022 ;; This function is called by:
 12023 ;;		_WorkTick
 12024 ;; This function uses a non-reentrant model
 12025 ;;
 12026                           
 12027                           
 12028                           ;psect for function _CheckFanSpeed
 12029  161E                     _CheckFanSpeed:	
 12030                           
 12031                           ;klondike.c: 120: if(PWM1OE == 0) {
 12032                           
 12033                           ; Regs used in _CheckFanSpeed: [wreg+status,2+status,0]
 12034  161E  002C               	movlb	12	; select bank12
 12035  161F  1B13               	btfsc	19,6	;volatile
 12036  1620  2E28               	goto	i1l845
 12037                           
 12038                           ;klondike.c: 121: LATCbits.LATC5 = 0;
 12039  1621  0022               	movlb	2	; select bank2
 12040  1622  128E               	bcf	14,5	;volatile
 12041                           
 12042                           ;klondike.c: 122: PWM1OE = 1;
 12043  1623  002C               	movlb	12	; select bank12
 12044  1624  1713               	bsf	19,6	;volatile
 12045                           
 12046                           ;klondike.c: 123: Status.FanSpeed = 0;
 12047  1625  0023               	movlb	3	; select bank3
 12048  1626  01D9               	clrf	(_Status^(0+384)+6)	;volatile
 12049                           
 12050                           ;klondike.c: 124: }
 12051  1627  0008               	return
 12052  1628                     i1l845:	
 12053                           
 12054                           ;klondike.c: 125: else if( IOCAF3 == 1) {
 12055  1628  0027               	movlb	7	; select bank7
 12056  1629  1D93               	btfss	19,3	;volatile
 12057  162A  0008               	return
 12058                           
 12059                           ;klondike.c: 126: IOCAF3 = 0;
 12060  162B  1193               	bcf	19,3	;volatile
 12061                           
 12062                           ;klondike.c: 127: LATCbits.LATC5 = 1;
 12063  162C  0022               	movlb	2	; select bank2
 12064  162D  168E               	bsf	14,5	;volatile
 12065                           
 12066                           ;klondike.c: 128: PWM1OE=0;
 12067  162E  002C               	movlb	12	; select bank12
 12068  162F  1313               	bcf	19,6	;volatile
 12069                           
 12070                           ;klondike.c: 129: T1CONbits.TMR1CS = 0;
 12071  1630  303F               	movlw	-193
 12072  1631  0020               	movlb	0	; select bank0
 12073  1632  0598               	andwf	24,f	;volatile
 12074                           
 12075                           ;klondike.c: 130: T1CONbits.T1CKPS = 3;
 12076  1633  3030               	movlw	48
 12077  1634  0498               	iorwf	24,f	;volatile
 12078                           
 12079                           ;klondike.c: 131: T1CONbits.TMR1ON = TMR1GE = 1;
 12080  1635  1799               	bsf	25,7	;volatile
 12081  1636  3000               	movlw	0
 12082  1637  1B99               	btfsc	25,7	;volatile
 12083  1638  3001               	movlw	1
 12084  1639  00F0               	movwf	??_CheckFanSpeed
 12085  163A  0818               	movf	24,w	;volatile
 12086  163B  0670               	xorwf	??_CheckFanSpeed,w
 12087  163C  39FE               	andlw	-2
 12088  163D  0670               	xorwf	??_CheckFanSpeed,w
 12089  163E  0098               	movwf	24	;volatile
 12090                           
 12091                           ;klondike.c: 132: T1GCONbits.T1GPOL = 1;
 12092  163F  1719               	bsf	25,6	;volatile
 12093                           
 12094                           ;klondike.c: 133: T1GCONbits.T1GSS = T1GCONbits.T1GTM = 0;
 12095  1640  0819               	movf	25,w	;volatile
 12096  1641  39DF               	andlw	-33
 12097  1642  0099               	movwf	25	;volatile
 12098  1643  0E19               	swapf	25,w	;volatile
 12099  1644  0C89               	rrf	9,f
 12100  1645  3901               	andlw	1
 12101  1646  00F0               	movwf	??_CheckFanSpeed
 12102  1647  0819               	movf	25,w	;volatile
 12103  1648  0670               	xorwf	??_CheckFanSpeed,w
 12104  1649  39FC               	andlw	-4
 12105  164A  0670               	xorwf	??_CheckFanSpeed,w
 12106  164B  0099               	movwf	25	;volatile
 12107                           
 12108                           ;klondike.c: 134: T1GSPM = 1;
 12109  164C  1619               	bsf	25,4	;volatile
 12110                           
 12111                           ;klondike.c: 135: TMR1H = TMR1L = 0;
 12112  164D  0196               	clrf	22	;volatile
 12113  164E  0197               	clrf	23	;volatile
 12114                           
 12115                           ;klondike.c: 136: TMR1ON = 1;
 12116  164F  1418               	bsf	24,0	;volatile
 12117                           
 12118                           ;klondike.c: 137: TMR1GIE = TMR1IE = 1;
 12119  1650  0021               	movlb	1	; select bank1
 12120  1651  1411               	bsf	17,0	;volatile
 12121  1652  1C11               	btfss	17,0	;volatile
 12122  1653  2E57               	goto	u534_20
 12123  1654  0021               	movlb	1	; select bank1
 12124  1655  1791               	bsf	17,7	;volatile
 12125  1656  2E59               	goto	i1l7133
 12126  1657                     u534_20:	
 12127  1657  0021               	movlb	1	; select bank1
 12128  1658  1391               	bcf	17,7	;volatile
 12129  1659                     i1l7133:	
 12130                           
 12131                           ;klondike.c: 138: T1GCONbits.T1GGO_nDONE = 1;
 12132  1659  0020               	movlb	0	; select bank0
 12133  165A  1599               	bsf	25,3	;volatile
 12134  165B  0008               	return
 12135  165C                     __end_of_CheckFanSpeed:	
 12136  165C                     __ptext2492:	
 12137 ;; *************** function _I2CPoll *****************
 12138 ;; Defined at:
 12139 ;;		line 48 in file "i2c.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;		None
 12144 ;; Return value:  Size  Location     Type
 12145 ;;		None               void
 12146 ;; Registers used:
 12147 ;;		wreg, status,2, status,0
 12148 ;; Tracked objects:
 12149 ;;		On entry : 18/3
 12150 ;;		On exit  : 19/0
 12151 ;;		Unchanged: FFFE0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;Total ram usage:        0 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; This function calls:
 12160 ;;		Nothing
 12161 ;; This function is called by:
 12162 ;;		_WorkTick
 12163 ;; This function uses a non-reentrant model
 12164 ;;
 12165                           
 12166                           
 12167                           ;psect for function _I2CPoll
 12168  165C                     _I2CPoll:	
 12169  165C                     i1l6865:	
 12170                           ; Regs used in _I2CPoll: [wreg+status,2+status,0]
 12171                           
 12172                           
 12173                           ;i2c.c: 49: if(I2CState.Next == 0) {
 12174  165C  0022               	movlb	2	; select bank2
 12175  165D  0868               	movf	_I2CState^(0+256),w
 12176  165E  391F               	andlw	31
 12177  165F  1D03               	skipz
 12178  1660  0008               	return
 12179                           
 12180                           ;i2c.c: 50: I2CCmd = 'P';
 12181  1661  3050               	movlw	80
 12182  1662  00C9               	movwf	_I2CCmd^(0+256)
 12183                           
 12184                           ;i2c.c: 51: I2CCount = 0;
 12185  1663  01CA               	clrf	_I2CCount^(0+256)
 12186                           
 12187                           ;i2c.c: 52: I2CState.Next = 1;
 12188  1664  0868               	movf	_I2CState^(0+256),w
 12189  1665  39E0               	andlw	-32
 12190  1666  3801               	iorlw	1
 12191                           
 12192                           ;i2c.c: 53: SSPCON2bits.SEN = 1;
 12193  1667  2E68               	ljmp	PL36	;call to abstracted procedure
 12194  1668                     __end_of_I2CPoll:	
 12195  1668                     PL36:	
 12196  1668  00E8               	movwf	_I2CState^(0+256)
 12197  1669  0024               	movlb	4	; select bank4
 12198  166A  1416               	bsf	22,0	;volatile
 12199  166B  0008               	return
 12200  166C                     __end_ofPL36:	
 12201                           
 12202                           	psect	text2494
 12203  05D1                     __ptext2494:	
 12204 ;; *************** function _ResultRx *****************
 12205 ;; Defined at:
 12206 ;;		line 194 in file "klondike.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;		None
 12209 ;; Auto vars:     Size  Location     Type
 12210 ;;  buf             7    0[BANK0 ] unsigned char [7]
 12211 ;;  Rw              1    7[BANK0 ] unsigned char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;		None               void
 12214 ;; Registers used:
 12215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12216 ;; Tracked objects:
 12217 ;;		On entry : 1F/0
 12218 ;;		On exit  : 1C/0
 12219 ;;		Unchanged: FFFE0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:       10 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    2
 12228 ;; This function calls:
 12229 ;;		i1___wmul
 12230 ;;		i1_SendCmdReply
 12231 ;; This function is called by:
 12232 ;;		_ISRCode
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _ResultRx
 12238  05D1                     _ResultRx:	
 12239                           
 12240                           ;klondike.c: 195: GIE = 0;
 12241                           
 12242                           ; Regs used in _ResultRx: [wreg-status,0+pclath+cstack]
 12243  05D1  138B               	bcf	11,7	;volatile
 12244                           
 12245                           ;klondike.c: 196: RCIF = 0;
 12246  05D2  1291               	bcf	17,5	;volatile
 12247                           
 12248                           ;klondike.c: 197: BYTE Rw = ResultQC & 0xFC;
 12249  05D3  0022               	movlb	2	; select bank2
 12250  05D4  084C               	movf	_ResultQC^(0+256),w
 12251  05D5  0020               	movlb	0	; select bank0
 12252  05D6  00E7               	movwf	ResultRx@Rw
 12253  05D7  30FC               	movlw	252
 12254  05D8  05E7               	andwf	ResultRx@Rw,f
 12255                           
 12256                           ;klondike.c: 198: ResultQue[ResultQC] = RCREG;
 12257  05D9  0022               	movlb	2	; select bank2
 12258  05DA  084C               	movf	_ResultQC^(0+256),w
 12259  05DB  3EA0               	addlw	_ResultQue& (0+255)
 12260  05DC  0086               	movwf	6
 12261  05DD  3001               	movlw	1	; select bank3/4
 12262  05DE  0087               	movwf	7
 12263  05DF  0023               	movlb	3	; select bank3
 12264  05E0  0819               	movf	25,w	;volatile
 12265  05E1  0081               	movwf	1
 12266                           
 12267                           ;klondike.c: 199: ResultQC = (ResultQC+1) & (2*4-1);
 12268  05E2  0022               	movlb	2	; select bank2
 12269  05E3  3007               	movlw	7
 12270  05E4  0ACC               	incf	_ResultQC^(0+256),f
 12271  05E5  05CC               	andwf	_ResultQC^(0+256),f
 12272                           
 12273                           ;klondike.c: 201: if(RCSTAbits.OERR) {
 12274  05E6  0023               	movlb	3	; select bank3
 12275  05E7  1C9D               	btfss	29,1	;volatile
 12276  05E8  2DEE               	goto	i1l7823
 12277                           
 12278                           ;klondike.c: 202: Status.ErrorCount++;
 12279  05E9  0ADC               	incf	(_Status^(0+384)+9),f	;volatile
 12280  05EA  1903               	skipnz
 12281  05EB  0ADD               	incf	((_Status+1)^(0+384)+9),f	;volatile
 12282                           
 12283                           ;klondike.c: 203: RCSTAbits.CREN = 0;
 12284  05EC  121D               	bcf	29,4	;volatile
 12285                           
 12286                           ;klondike.c: 204: RCSTAbits.CREN = 1;
 12287  05ED  161D               	bsf	29,4	;volatile
 12288  05EE                     i1l7823:	
 12289                           
 12290                           ;klondike.c: 205: }
 12291                           ;klondike.c: 207: if((ResultQC & 3) == 0) {
 12292  05EE  0022               	movlb	2	; select bank2
 12293  05EF  084C               	movf	_ResultQC^(0+256),w
 12294  05F0  3903               	andlw	3
 12295  05F1  1D03               	btfss	3,2
 12296  05F2  2E29               	goto	i1l7845
 12297                           
 12298                           ;klondike.c: 208: BYTE buf[7];
 12299                           ;klondike.c: 209: buf[0] = '=';
 12300  05F3  303D               	movlw	61
 12301  05F4  0020               	movlb	0	; select bank0
 12302  05F5  00E0               	movwf	ResultRx@buf
 12303                           
 12304                           ;klondike.c: 210: buf[1] = SlaveAddress;
 12305  05F6  0022               	movlb	2	; select bank2
 12306  05F7  084D               	movf	_SlaveAddress^(0+256),w
 12307  05F8  0020               	movlb	0	; select bank0
 12308  05F9  00E1               	movwf	ResultRx@buf+1
 12309                           
 12310                           ;klondike.c: 211: buf[2] = WorkQue[WorkNow].WorkID;
 12311  05FA  0022               	movlb	2	; select bank2
 12312  05FB  0855               	movf	_WorkNow^(0+256),w
 12313  05FC  00F0               	movwf	?i1___wmul
 12314  05FD  302D               	movlw	45
 12315  05FE  01F1               	clrf	?i1___wmul+1
 12316  05FF  00F2               	movwf	?i1___wmul+2
 12317  0600  01F3               	clrf	?i1___wmul+3
 12318  0601  262B  3185         	fcall	i1___wmul
 12319  0603  303C               	movlw	60
 12320  0604  00FA               	movwf	??_ResultRx
 12321  0605  3023               	movlw	35
 12322  0606  00FB               	movwf	??_ResultRx+1
 12323  0607  0870               	movf	?i1___wmul,w
 12324  0608  077A               	addwf	??_ResultRx,w
 12325  0609  0086               	movwf	6
 12326  060A  0871               	movf	?i1___wmul+1,w
 12327  060B  3D7B               	addwfc	??_ResultRx+1,w
 12328  060C  0087               	movwf	7
 12329  060D  0801               	movf	1,w
 12330  060E  0020               	movlb	0	; select bank0
 12331  060F  00E2               	movwf	ResultRx@buf+2
 12332                           
 12333                           ;klondike.c: 212: buf[3] = ResultQue[Rw++];
 12334  0610  0867               	movf	ResultRx@Rw,w
 12335  0611  3EA0               	addlw	_ResultQue& (0+255)
 12336  0612  0086               	movwf	6
 12337  0613  3001               	movlw	1	; select bank3/4
 12338  0614  0087               	movwf	7
 12339  0615  0801               	movf	1,w
 12340  0616  00E3               	movwf	ResultRx@buf+3
 12341                           
 12342                           ;klondike.c: 213: buf[4] = ResultQue[Rw++];
 12343  0617  2731  3185         	fcall	PL20	;call to abstracted procedure
 12344  0619  00E4               	movwf	ResultRx@buf+4
 12345                           
 12346                           ;klondike.c: 214: buf[5] = ResultQue[Rw++];
 12347  061A  2731  3185         	fcall	PL20	;call to abstracted procedure
 12348  061C  00E5               	movwf	ResultRx@buf+5
 12349                           
 12350                           ;klondike.c: 215: buf[6] = ResultQue[Rw];
 12351  061D  2731  3185         	fcall	PL20	;call to abstracted procedure
 12352  061F  00E6               	movwf	ResultRx@buf+6
 12353                           
 12354                           ;klondike.c: 217: SendCmdReply(buf, buf+2, sizeof(DWORD));
 12355  0620  3060               	movlw	ResultRx@buf& (0+255)
 12356  0621  00F2               	movwf	?i1_SendCmdReply
 12357  0622  3062               	movlw	(ResultRx@buf+2)& (0+255)
 12358  0623  01F3               	clrf	?i1_SendCmdReply+1
 12359  0624  00F4               	movwf	?i1_SendCmdReply+2
 12360  0625  3004               	movlw	4
 12361  0626  01F5               	clrf	?i1_SendCmdReply+3
 12362  0627  00F6               	movwf	?i1_SendCmdReply+4
 12363  0628  26E1               	fcall	i1_SendCmdReply
 12364  0629                     i1l7845:	
 12365                           
 12366                           ;klondike.c: 218: }
 12367                           ;klondike.c: 219: GIE = 1;
 12368  0629  178B               	bsf	11,7	;volatile
 12369  062A  0008               	return
 12370  062B                     __end_of_ResultRx:	
 12371  062B                     __ptext2511:	
 12372 ;; *************** function i1___wmul *****************
 12373 ;; Defined at:
 12374 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;  __wmul          2    0[COMMON] unsigned int 
 12377 ;;  __wmul          2    2[COMMON] unsigned int 
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;  __wmul          2    4[COMMON] unsigned int 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  2    0[COMMON] unsigned int 
 12382 ;; Registers used:
 12383 ;;		wreg, status,2, status,0
 12384 ;; Tracked objects:
 12385 ;;		On entry : 1F/2
 12386 ;;		On exit  : 1F/2
 12387 ;;		Unchanged: FFFE0/0
 12388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12389 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;Total ram usage:        6 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; This function calls:
 12396 ;;		Nothing
 12397 ;; This function is called by:
 12398 ;;		_ResultRx
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           
 12403                           ;psect for function i1___wmul
 12404  062B                     i1___wmul:	
 12405                           
 12406                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 12407  062B  01F4               	clrf	i1___wmul@product
 12408  062C  01F5               	clrf	i1___wmul@product+1
 12409  062D                     i1l5357:	
 12410  062D  1C70               	btfss	i1___wmul@multiplier,0
 12411  062E  2E33               	goto	i1l5361
 12412  062F  0872               	movf	i1___wmul@multiplicand,w
 12413  0630  07F4               	addwf	i1___wmul@product,f
 12414  0631  0873               	movf	i1___wmul@multiplicand+1,w
 12415  0632  3DF5               	addwfc	i1___wmul@product+1,f
 12416  0633                     i1l5361:	
 12417  0633  35F2               	lslf	i1___wmul@multiplicand,f
 12418  0634  0DF3               	rlf	i1___wmul@multiplicand+1,f
 12419  0635  36F1               	lsrf	i1___wmul@multiplier+1,f
 12420  0636  0CF0               	rrf	i1___wmul@multiplier,f
 12421  0637  0871               	movf	i1___wmul@multiplier+1,w
 12422  0638  0470               	iorwf	i1___wmul@multiplier,w
 12423  0639  1D03               	skipz
 12424  063A  2E2D               	goto	i1l5357
 12425  063B  0875               	movf	i1___wmul@product+1,w
 12426  063C  00F1               	movwf	?i1___wmul+1
 12427  063D  0874               	movf	i1___wmul@product,w
 12428  063E  00F0               	movwf	?i1___wmul
 12429  063F  0008               	return
 12430  0640                     __end_ofi1___wmul:	
 12431  0640                     __ptext2488:	
 12432 ;; *************** function _I2CRead *****************
 12433 ;; Defined at:
 12434 ;;		line 66 in file "i2c.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;		None
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;		None
 12439 ;; Return value:  Size  Location     Type
 12440 ;;		None               void
 12441 ;; Registers used:
 12442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 1F/0
 12445 ;;		On exit  : 19/0
 12446 ;;		Unchanged: FFFE0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;Total ram usage:        1 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    2
 12455 ;; This function calls:
 12456 ;;		i1_SendCmdReply
 12457 ;; This function is called by:
 12458 ;;		_ISRCode
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           
 12463                           ;psect for function _I2CRead
 12464  0640                     _I2CRead:	
 12465                           
 12466                           ;i2c.c: 67: if(SSPSTATbits.P)
 12467                           
 12468                           ; Regs used in _I2CRead: [wreg-status,0+pclath+cstack]
 12469  0640  0024               	movlb	4	; select bank4
 12470  0641  1E14               	btfss	20,4	;volatile
 12471  0642  2ED1               	goto	i1l7795
 12472                           
 12473                           ;i2c.c: 68: I2CState.Next = 0;
 12474  0643  30E0               	movlw	-32
 12475  0644  0022               	movlb	2	; select bank2
 12476  0645  05E8               	andwf	_I2CState^(0+256),f
 12477  0646  2ED1               	goto	i1l7795
 12478  0647                     i1l7725:	
 12479  0647  0024               	movlb	4	; select bank4
 12480  0648  0191               	clrf	17	;volatile
 12481  0649  0022               	movlb	2	; select bank2
 12482  064A  2727               	fcall	PL4	;call to abstracted procedure
 12483  064B  01E0               	clrf	_ptr^(0+256)
 12484  064C  0008               	return
 12485  064D                     i1l619:	
 12486                           ;i2c.c: 72: case 1+1:
 12487                           
 12488                           
 12489                           ;i2c.c: 73: if(SSPCON2bits.ACKSTAT)
 12490  064D  0024               	movlb	4	; select bank4
 12491  064E  1F16               	btfss	22,6	;volatile
 12492  064F  2E52               	goto	i1l7733
 12493  0650                     i1l7731:	
 12494                           
 12495                           ;i2c.c: 74: { SSPCON2bits.PEN = 1; break; }
 12496  0650  1516               	bsf	22,2	;volatile
 12497  0651  0008               	return
 12498  0652                     i1l7733:	
 12499                           
 12500                           ;i2c.c: 75: SSPBUF = I2CCmd; I2CState.Next++; break;
 12501  0652  0022               	movlb	2	; select bank2
 12502  0653  0849               	movf	_I2CCmd^(0+256),w
 12503  0654                     L23:	
 12504  0654  0024               	movlb	4	; select bank4
 12505  0655  0091               	movwf	17	;volatile
 12506  0656                     i1l7735:	
 12507  0656  0022               	movlb	2	; select bank2
 12508  0657  2727               	fcall	PL4	;call to abstracted procedure
 12509  0658  0008               	return
 12510  0659                     i1l621:	
 12511                           ;i2c.c: 76: case 1+2:
 12512                           
 12513                           
 12514                           ;i2c.c: 77: if(SSPCON2bits.ACKSTAT)
 12515  0659  0024               	movlb	4	; select bank4
 12516  065A  1B16               	btfsc	22,6	;volatile
 12517  065B  2E50               	goto	i1l7731
 12518                           
 12519                           ;i2c.c: 79: I2CState.Next++;
 12520  065C  0022               	movlb	2	; select bank2
 12521  065D  2727  3185         	fcall	PL4	;call to abstracted procedure
 12522  065F                     i1l7741:	
 12523                           
 12524                           ;i2c.c: 81: SSPCON2bits.RCEN = 1; I2CState.Next++; break;
 12525  065F  0024               	movlb	4	; select bank4
 12526  0660  1596               	bsf	22,3	;volatile
 12527  0661  0022               	movlb	2	; select bank2
 12528  0662  2727               	fcall	PL4	;call to abstracted procedure
 12529  0663  0008               	return
 12530  0664                     i1l7743:	
 12531                           
 12532                           ;i2c.c: 83: if(I2CCount == 0) {
 12533  0664  08CA               	movf	_I2CCount^(0+256),f
 12534  0665  1D03               	skipz
 12535  0666  2E7B               	goto	i1l7759
 12536                           
 12537                           ;i2c.c: 84: if(SSPBUF == '=') I2CCount = sizeof(DWORD)+3;
 12538  0667  0024               	movlb	4	; select bank4
 12539  0668  0811               	movf	17,w
 12540  0669  3A3D               	xorlw	61
 12541  066A  1D03               	skipz
 12542  066B  2E6E               	goto	i1l7749
 12543  066C                     i1l7747:	
 12544  066C  3007               	movlw	7
 12545  066D  2E79               	goto	L22
 12546  066E                     i1l7749:	
 12547                           
 12548                           ;i2c.c: 85: else if (SSPBUF == 'I') I2CCount = sizeof(IDENTITY)+2;
 12549  066E  0811               	movf	17,w
 12550  066F  3A49               	xorlw	73
 12551  0670  1D03               	skipz
 12552  0671  2E74               	goto	i1l7753
 12553  0672  300F               	movlw	15
 12554  0673  2E79               	goto	L22
 12555  0674                     i1l7753:	
 12556                           
 12557                           ;i2c.c: 86: else if (SSPBUF == 'C') I2CCount = sizeof(WORKCFG)+2;
 12558  0674  0811               	movf	17,w
 12559  0675  3A43               	xorlw	67
 12560  0676  1903               	btfsc	3,2
 12561  0677  2E6C               	goto	i1l7747
 12562                           
 12563                           ;i2c.c: 87: else I2CCount = sizeof(WORKSTATUS)+2;
 12564  0678  300D               	movlw	13
 12565  0679                     L22:	
 12566  0679  0022               	movlb	2	; select bank2
 12567  067A  00CA               	movwf	_I2CCount^(0+256)
 12568  067B                     i1l7759:	
 12569                           
 12570                           ;i2c.c: 88: }
 12571                           ;i2c.c: 89: buf[ptr++] = SSPBUF;
 12572  067B  0860               	movf	_ptr^(0+256),w
 12573  067C  3E60               	addlw	_buf& (0+255)
 12574  067D  0086               	movwf	6
 12575  067E  3002               	movlw	2	; select bank4/5
 12576  067F  0087               	movwf	7
 12577  0680  0024               	movlb	4	; select bank4
 12578  0681  0811               	movf	17,w	;volatile
 12579  0682  0081               	movwf	1
 12580  0683  0022               	movlb	2	; select bank2
 12581  0684  0AE0               	incf	_ptr^(0+256),f
 12582                           
 12583                           ;i2c.c: 90: SSPCON2bits.ACKDT = (I2CCount-- == 1);
 12584  0685  034A               	decf	_I2CCount^(0+256),w
 12585  0686  3000               	movlw	0
 12586  0687  1903               	skipnz
 12587  0688  3001               	movlw	1
 12588  0689  00FA               	movwf	??_I2CRead
 12589  068A  0EFA               	swapf	??_I2CRead,f
 12590  068B  0DFA               	rlf	??_I2CRead,f
 12591  068C  0024               	movlb	4	; select bank4
 12592  068D  0816               	movf	22,w	;volatile
 12593  068E  067A               	xorwf	??_I2CRead,w
 12594  068F  39DF               	andlw	-33
 12595  0690  067A               	xorwf	??_I2CRead,w
 12596  0691  0096               	movwf	22	;volatile
 12597  0692  0022               	movlb	2	; select bank2
 12598  0693  03CA               	decf	_I2CCount^(0+256),f
 12599                           
 12600                           ;i2c.c: 91: SSPCON2bits.ACKEN = 1;
 12601  0694  0024               	movlb	4	; select bank4
 12602  0695  1616               	bsf	22,4	;volatile
 12603                           
 12604                           ;i2c.c: 92: if(I2CCount > 0)
 12605  0696  0022               	movlb	2	; select bank2
 12606  0697  084A               	movf	_I2CCount^(0+256),w
 12607  0698  1903               	btfsc	3,2
 12608  0699  2EA4               	goto	i1l7773
 12609                           
 12610                           ;i2c.c: 93: I2CState.Next--;
 12611  069A  0868               	movf	_I2CState^(0+256),w
 12612  069B  391F               	andlw	31
 12613  069C  00FA               	movwf	??_I2CRead
 12614  069D  03FA               	decf	??_I2CRead,f
 12615  069E  0868               	movf	_I2CState^(0+256),w
 12616  069F  067A               	xorwf	??_I2CRead,w
 12617  06A0  39E0               	andlw	-32
 12618  06A1  067A               	xorwf	??_I2CRead,w
 12619  06A2  00E8               	movwf	_I2CState^(0+256)
 12620  06A3  0008               	return
 12621  06A4                     i1l7773:	
 12622                           
 12623                           ;i2c.c: 94: else if(I2CCmd == 'P')
 12624  06A4  0849               	movf	_I2CCmd^(0+256),w
 12625  06A5  3A50               	xorlw	80
 12626  06A6  1D03               	skipz
 12627  06A7  2E56               	goto	i1l7735
 12628                           
 12629                           ;i2c.c: 95: I2CState.Next = 1+8;
 12630  06A8  0868               	movf	_I2CState^(0+256),w
 12631  06A9  39E0               	andlw	-32
 12632  06AA  3809               	iorlw	9
 12633  06AB  00E8               	movwf	_I2CState^(0+256)
 12634  06AC  0008               	return
 12635  06AD                     i1l7779:	
 12636  06AD  3002               	movlw	2
 12637  06AE  3ED3               	addlw	_Status& (0+255)
 12638  06AF  0086               	movwf	6
 12639  06B0  3001               	movlw	1	; select bank3/4
 12640  06B1  0087               	movwf	7
 12641  06B2  3F40               	moviw [0]fsr1
 12642  06B3  3E01               	addlw	1
 12643  06B4  3FC0               	movwi [0]fsr1
 12644  06B5  2E54               	goto	L23
 12645  06B6                     i1l637:	
 12646                           ;i2c.c: 100: case 1+6: SSPCON2bits.PEN = 1; I2CState.Next++; break;
 12647                           
 12648  06B6  0024               	movlb	4	; select bank4
 12649  06B7  1516               	bsf	22,2	;volatile
 12650  06B8  2E56               	goto	i1l7735
 12651  06B9                     i1l638:	
 12652                           ;i2c.c: 101: case 1+7: SSPCON2bits.SEN = 1; I2CState.Next = 1; break;
 12653                           
 12654  06B9  0024               	movlb	4	; select bank4
 12655  06BA  1416               	bsf	22,0	;volatile
 12656  06BB  0022               	movlb	2	; select bank2
 12657  06BC  0868               	movf	_I2CState^(0+256),w
 12658  06BD  39E0               	andlw	-32
 12659  06BE  3801               	iorlw	1
 12660  06BF  00E8               	movwf	_I2CState^(0+256)
 12661  06C0  0008               	return
 12662  06C1                     i1l7789:	
 12663  06C1  3060               	movlw	_buf& (0+255)
 12664  06C2  00F2               	movwf	?i1_SendCmdReply
 12665  06C3  3002               	movlw	2
 12666  06C4  00F3               	movwf	?i1_SendCmdReply+1
 12667  06C5  3062               	movlw	(_buf+2)& (0+255)
 12668  06C6  00F4               	movwf	?i1_SendCmdReply+2
 12669  06C7  3002               	movlw	2
 12670  06C8  00F5               	movwf	?i1_SendCmdReply+3
 12671  06C9  0860               	movf	_ptr^(0+256),w
 12672  06CA  3EFD               	addlw	253
 12673  06CB  00F6               	movwf	?i1_SendCmdReply+4
 12674  06CC  26E1               	fcall	i1_SendCmdReply
 12675  06CD  30E0               	movlw	-32
 12676  06CE  0022               	movlb	2	; select bank2
 12677  06CF  05E8               	andwf	_I2CState^(0+256),f
 12678  06D0  0008               	return
 12679  06D1                     i1l7795:	
 12680  06D1  0022               	movlb	2	; select bank2
 12681  06D2  0868               	movf	_I2CState^(0+256),w
 12682  06D3  391F               	andlw	31
 12683                           
 12684                           ; Switch size 1, requested type "space"
 12685                           ; Number of cases is 10, Range of values is 1 to 10
 12686                           ; switch strategies available:
 12687                           ; Name         Instructions Cycles
 12688                           ; direct_byte           29     9 (fixed)
 12689                           ; simple_byte           31    16 (average)
 12690                           ; jumptable            263     9 (fixed)
 12691                           ;	Chosen strategy is direct_byte
 12692  06D4  3EFF               	addlw	-1
 12693  06D5  1C03               	skipc
 12694  06D6  0008               	return
 12695  06D7  0084               	movwf	4
 12696  06D8  300A               	movlw	10
 12697  06D9  0204               	subwf	4,w
 12698  06DA  1803               	skipnc
 12699  06DB  0008               	return
 12700  06DC  3191               	movlp	high i1S8383
 12701  06DD  3504               	lslf	4,w
 12702  06DE  3E80               	addlw	low i1S8383
 12703  06DF  0082               	movwf	2
 12704  06E0  0008               	return
 12705  06E1                     __end_of_I2CRead:	
 12706  06E1                     __ptext2509:	
 12707 ;; *************** function i1_SendCmdReply *****************
 12708 ;; Defined at:
 12709 ;;		line 186 in file "main.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  SendCmdReply    2    2[COMMON] PTR unsigned char 
 12712 ;;		 -> ResultRx@buf(7), USB_Out_Buffer(64), buf(16), 
 12713 ;;  SendCmdReply    2    4[COMMON] PTR unsigned char 
 12714 ;;		 -> ResultRx@buf(7), Cfg(5), ID(13), Status(11), 
 12715 ;;		 -> buf(16), I2CState(1), 
 12716 ;;  SendCmdReply    1    6[COMMON] unsigned char 
 12717 ;; Auto vars:     Size  Location     Type
 12718 ;;  SendCmdReply    1    9[COMMON] unsigned char 
 12719 ;; Return value:  Size  Location     Type
 12720 ;;		None               void
 12721 ;; Registers used:
 12722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12723 ;; Tracked objects:
 12724 ;;		On entry : 1D/2
 12725 ;;		On exit  : 1C/0
 12726 ;;		Unchanged: FFFE0/0
 12727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12728 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12732 ;;Total ram usage:        8 bytes
 12733 ;; Hardware stack levels used:    1
 12734 ;; Hardware stack levels required when called:    1
 12735 ;; This function calls:
 12736 ;;		i1_putUSBUSART
 12737 ;; This function is called by:
 12738 ;;		_I2CRead
 12739 ;;		_ResultRx
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function i1_SendCmdReply
 12745  06E1                     i1_SendCmdReply:	
 12746                           
 12747                           ;main.c: 187: USB_In_Buffer[0] = cmd[0];
 12748                           
 12749                           ; Regs used in i1_SendCmdReply: [wreg-status,0+pclath+cstack]
 12750  06E1  0872               	movf	i1SendCmdReply@cmd,w
 12751  06E2  0086               	movwf	6
 12752  06E3  0873               	movf	i1SendCmdReply@cmd+1,w
 12753  06E4  0087               	movwf	7
 12754  06E5  0801               	movf	1,w
 12755  06E6  0027               	movlb	7	; select bank7
 12756  06E7  00A0               	movwf	_USB_In_Buffer^(0+896)
 12757                           
 12758                           ;main.c: 188: USB_In_Buffer[1] = SlaveAddress;
 12759  06E8  0022               	movlb	2	; select bank2
 12760  06E9  084D               	movf	_SlaveAddress^(0+256),w
 12761  06EA  0027               	movlb	7	; select bank7
 12762  06EB  00A1               	movwf	(_USB_In_Buffer^(0+896)+1)
 12763                           
 12764                           ;main.c: 189: for(BYTE n=0; n < count; n++)
 12765  06EC  01F9               	clrf	i1SendCmdReply@n
 12766  06ED                     i1l7637:	
 12767  06ED  0876               	movf	i1SendCmdReply@count,w
 12768  06EE  0279               	subwf	i1SendCmdReply@n,w
 12769  06EF  1803               	btfsc	3,0
 12770  06F0  2F05               	goto	i1l7639
 12771                           
 12772                           ;main.c: 190: USB_In_Buffer[n+2] = data[n];
 12773  06F1  0879               	movf	i1SendCmdReply@n,w
 12774  06F2  3EA2               	addlw	(_USB_In_Buffer+2)& (0+255)
 12775  06F3  0086               	movwf	6
 12776  06F4  3003               	movlw	3	; select bank7/8
 12777  06F5  0087               	movwf	7
 12778  06F6  0875               	movf	i1SendCmdReply@data+1,w
 12779  06F7  00F8               	movwf	??i1_SendCmdReply+1
 12780  06F8  0874               	movf	i1SendCmdReply@data,w
 12781  06F9  00F7               	movwf	??i1_SendCmdReply
 12782  06FA  0879               	movf	i1SendCmdReply@n,w
 12783  06FB  0777               	addwf	??i1_SendCmdReply,w
 12784  06FC  0084               	movwf	4
 12785  06FD  0878               	movf	??i1_SendCmdReply+1,w
 12786  06FE  1803               	skipnc
 12787  06FF  0A78               	incf	??i1_SendCmdReply+1,w
 12788  0700  0085               	movwf	5
 12789  0701  0800               	movf	0,w	;code access
 12790  0702  0081               	movwf	1
 12791  0703  0AF9               	incf	i1SendCmdReply@n,f
 12792  0704  2EED               	goto	i1l7637
 12793  0705                     i1l7639:	
 12794                           
 12795                           ;main.c: 192: if(USBDeviceState == DETACHED_STATE) {
 12796  0705  0022               	movlb	2	; select bank2
 12797  0706  08D1               	movf	_USBDeviceState^(0+256),f
 12798  0707  1D03               	skipz
 12799  0708  2F0D               	goto	i1l7643
 12800                           
 12801                           ;main.c: 193: I2CCount = count+2;
 12802  0709  0876               	movf	i1SendCmdReply@count,w
 12803  070A  3E02               	addlw	2
 12804  070B  00CA               	movwf	_I2CCount^(0+256)
 12805                           
 12806                           ;main.c: 194: }
 12807  070C  0008               	return
 12808  070D                     i1l7643:	
 12809                           
 12810                           ;main.c: 195: else
 12811                           ;main.c: 196: putUSBUSART(USB_In_Buffer, count+2);
 12812  070D  0876               	movf	i1SendCmdReply@count,w
 12813  070E  3E02               	addlw	2
 12814  070F  00F0               	movwf	?i1_putUSBUSART
 12815  0710  30A0               	movlw	_USB_In_Buffer& (0+255)
 12816  0711  2713               	fcall	i1_putUSBUSART
 12817  0712  0008               	return
 12818  0713                     __end_ofi1_SendCmdReply:	
 12819  0713                     __ptext2510:	
 12820 ;; *************** function i1_putUSBUSART *****************
 12821 ;; Defined at:
 12822 ;;		line 676 in file "../USB/CDC Device Driver/usb_function_cdc.c"
 12823 ;; Parameters:    Size  Location     Type
 12824 ;;  putUSBUSART     1    wreg     PTR unsigned char 
 12825 ;;		 -> USB_In_Buffer(64), 
 12826 ;;  putUSBUSART     1    0[COMMON] unsigned char 
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;  putUSBUSART     1    1[COMMON] PTR unsigned char 
 12829 ;;		 -> USB_In_Buffer(64), 
 12830 ;; Return value:  Size  Location     Type
 12831 ;;		None               void
 12832 ;; Registers used:
 12833 ;;		wreg, status,2, status,0
 12834 ;; Tracked objects:
 12835 ;;		On entry : 1F/2
 12836 ;;		On exit  : 1F/1
 12837 ;;		Unchanged: FFFE0/0
 12838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12839 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;Total ram usage:        2 bytes
 12844 ;; Hardware stack levels used:    1
 12845 ;; This function calls:
 12846 ;;		Nothing
 12847 ;; This function is called by:
 12848 ;;		i1_SendCmdReply
 12849 ;; This function uses a non-reentrant model
 12850 ;;
 12851                           
 12852                           
 12853                           ;psect for function i1_putUSBUSART
 12854  0713                     i1_putUSBUSART:	
 12855                           
 12856                           ; Regs used in i1_putUSBUSART: [wreg+status,2+status,0]
 12857                           ;i1putUSBUSART@data stored from wreg
 12858  0713  00F1               	movwf	i1putUSBUSART@data
 12859                           
 12860                           ;usb_function_cdc.c: 700: {PIE2bits.USBIE = 0;};
 12861  0714  0021               	movlb	1	; select bank1
 12862  0715  1112               	bcf	18,2	;volatile
 12863                           
 12864                           ;usb_function_cdc.c: 701: if(cdc_trf_state == 0)
 12865  0716  0022               	movlb	2	; select bank2
 12866  0717  08D8               	movf	_cdc_trf_state^(0+256),f
 12867  0718  1D03               	skipz
 12868  0719  2F24               	goto	i1l7489
 12869                           
 12870                           ;usb_function_cdc.c: 702: {
 12871                           ;usb_function_cdc.c: 703: { pCDCSrc.bRam = (BYTE*)data; cdc_tx_len = length; cdc_mem_typ
      +                          e = 0x01; cdc_trf_state = 1; };
 12872  071A  0871               	movf	i1putUSBUSART@data,w
 12873  071B  0023               	movlb	3	; select bank3
 12874  071C  00AA               	movwf	_pCDCSrc^(0+384)
 12875  071D  0870               	movf	i1putUSBUSART@length,w
 12876  071E  0022               	movlb	2	; select bank2
 12877  071F  00D9               	movwf	_cdc_tx_len^(0+256)
 12878  0720  01D6               	clrf	_cdc_mem_type^(0+256)
 12879  0721  0AD6               	incf	_cdc_mem_type^(0+256),f
 12880  0722  01D8               	clrf	_cdc_trf_state^(0+256)
 12881  0723  0AD8               	incf	_cdc_trf_state^(0+256),f
 12882  0724                     i1l7489:	
 12883                           
 12884                           ;usb_function_cdc.c: 704: }
 12885                           ;usb_function_cdc.c: 705: {PIE2bits.USBIE = 1;};
 12886  0724  0021               	movlb	1	; select bank1
 12887  0725  1512               	bsf	18,2	;volatile
 12888  0726  0008               	return
 12889  0727                     __end_ofi1_putUSBUSART:	
 12890  0727                     PL4:	
 12891  0727  0868               	movf	_I2CState^(0+256),w
 12892  0728  391F               	andlw	31
 12893  0729  00FA               	movwf	??_I2CRead
 12894  072A  0AFA               	incf	??_I2CRead,f
 12895  072B  0868               	movf	_I2CState^(0+256),w
 12896  072C  067A               	xorwf	??_I2CRead,w
 12897  072D  39E0               	andlw	-32
 12898  072E  067A               	xorwf	??_I2CRead,w
 12899  072F  00E8               	movwf	_I2CState^(0+256)
 12900  0730  0008               	return
 12901  0731                     __end_ofPL4:	
 12902  0731                     PL20:	
 12903  0731  0AE7               	incf	ResultRx@Rw,f
 12904  0732  0867               	movf	ResultRx@Rw,w
 12905  0733  3EA0               	addlw	_ResultQue& (0+255)
 12906  0734  0086               	movwf	6
 12907  0735  0801               	movf	1,w
 12908  0736  0008               	return
 12909  0737                     __end_ofPL20:	
 12910                           
 12911                           	psect	text2495
 12912  07F1                     __ptext2495:	
 12913 ;; *************** function _UpdateFanSpeed *****************
 12914 ;; Defined at:
 12915 ;;		line 223 in file "klondike.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;		None
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;		None
 12920 ;; Return value:  Size  Location     Type
 12921 ;;		None               void
 12922 ;; Registers used:
 12923 ;;		wreg
 12924 ;; Tracked objects:
 12925 ;;		On entry : 1F/0
 12926 ;;		On exit  : 1F/C
 12927 ;;		Unchanged: FFFE0/0
 12928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;Total ram usage:        0 bytes
 12934 ;; Hardware stack levels used:    1
 12935 ;; This function calls:
 12936 ;;		Nothing
 12937 ;; This function is called by:
 12938 ;;		_ISRCode
 12939 ;; This function uses a non-reentrant model
 12940 ;;
 12941                           
 12942                           
 12943                           ;psect for function _UpdateFanSpeed
 12944  07F1                     _UpdateFanSpeed:	
 12945                           
 12946                           ;klondike.c: 224: TMR1GIF = TMR1IF = 0;
 12947                           
 12948                           ; Regs used in _UpdateFanSpeed: [wreg]
 12949  07F1  1011               	bcf	17,0	;volatile
 12950  07F2  1391               	bcf	17,7	;volatile
 12951                           
 12952                           ;klondike.c: 225: IOCAF3 = 0;
 12953  07F3  0027               	movlb	7	; select bank7
 12954  07F4  1193               	bcf	19,3	;volatile
 12955                           
 12956                           ;klondike.c: 226: TMR1ON = 0;
 12957  07F5  0020               	movlb	0	; select bank0
 12958  07F6  1018               	bcf	24,0	;volatile
 12959                           
 12960                           ;klondike.c: 227: Status.FanSpeed = TMR1H;
 12961  07F7  0817               	movf	23,w	;volatile
 12962  07F8  0023               	movlb	3	; select bank3
 12963  07F9  00D9               	movwf	(_Status^(0+384)+6)	;volatile
 12964                           
 12965                           ;klondike.c: 228: LATCbits.LATC5 = 0;
 12966  07FA  0022               	movlb	2	; select bank2
 12967  07FB  128E               	bcf	14,5	;volatile
 12968                           
 12969                           ;klondike.c: 229: PWM1OE=1;
 12970  07FC  002C               	movlb	12	; select bank12
 12971  07FD  1713               	bsf	19,6	;volatile
 12972  07FE  0008               	return
 12973  07FF                     __end_of_UpdateFanSpeed:	
 12974                           
 12975                           	psect	text2501
 12976  1443                     __ptext2501:	
 12977 ;; *************** function _USBCheckCDCRequest *****************
 12978 ;; Defined at:
 12979 ;;		line 267 in file "../USB/CDC Device Driver/usb_function_cdc.c"
 12980 ;; Parameters:    Size  Location     Type
 12981 ;;		None
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;		None
 12984 ;; Return value:  Size  Location     Type
 12985 ;;		None               void
 12986 ;; Registers used:
 12987 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12988 ;; Tracked objects:
 12989 ;;		On entry : 1F/0
 12990 ;;		On exit  : 1D/0
 12991 ;;		Unchanged: FFFE0/0
 12992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12997 ;;Total ram usage:        0 bytes
 12998 ;; Hardware stack levels used:    1
 12999 ;; This function calls:
 13000 ;;		Nothing
 13001 ;; This function is called by:
 13002 ;;		_USBCBCheckOtherReq
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           
 13007                           ;psect for function _USBCheckCDCRequest
 13008  1443                     _USBCheckCDCRequest:	
 13009  1443                     i1l6585:	
 13010                           ; Regs used in _USBCheckCDCRequest: [wreg-fsr0h+status,2+status,0]
 13011                           
 13012                           
 13013                           ;usb_function_cdc.c: 271: if(SetupPkt.Recipient != (0x01)) return;
 13014  1443  0850               	movf	80,w	;volatile
 13015  1444  391F               	andlw	31
 13016  1445  3A01               	xorlw	1
 13017  1446  1D03               	btfss	3,2
 13018  1447  0008               	return
 13019                           
 13020                           ;usb_function_cdc.c: 276: if(SetupPkt.RequestType != (0x20>>5)) return;
 13021  1448  0E50               	swapf	80,w	;volatile
 13022  1449  0C89               	rrf	9,f
 13023  144A  3903               	andlw	3
 13024  144B  3A01               	xorlw	1
 13025  144C  1D03               	btfss	3,2
 13026  144D  0008               	return
 13027                           
 13028                           ;usb_function_cdc.c: 282: if((SetupPkt.bIntfID != 0x0)&&
 13029                           ;usb_function_cdc.c: 283: (SetupPkt.bIntfID != 0x01)) return;
 13030  144E  0854               	movf	84,w	;volatile
 13031  144F  1903               	btfsc	3,2
 13032  1450  2C7B               	goto	i1l6631
 13033  1451  0354               	decf	84,w	;volatile
 13034  1452  1D03               	btfss	3,2
 13035  1453  0008               	return
 13036  1454  2C7B               	goto	i1l6631
 13037  1455                     i1l6599:	
 13038                           
 13039                           ;usb_function_cdc.c: 290: inPipes[0].pSrc.bRam = (BYTE*)&dummy_encapsulated_cmd_response;
 13040  1455  248D               	fcall	PL32	;call to abstracted procedure
 13041                           
 13042                           ;usb_function_cdc.c: 291: inPipes[0].wCount.Val = 0x08;
 13043  1456  3008               	movlw	8
 13044  1457  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 13045  1458  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 13046                           
 13047                           ;usb_function_cdc.c: 292: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13048  1459  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
 13049  145A                     i1l6605:	
 13050                           
 13051                           ;usb_function_cdc.c: 293: inPipes[0].info.bits.busy = 1;
 13052  145A  0022               	movlb	2	; select bank2
 13053  145B  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 13054                           
 13055                           ;usb_function_cdc.c: 294: break;
 13056  145C  0008               	return
 13057  145D                     i1l6607:	
 13058                           
 13059                           ;usb_function_cdc.c: 297: inPipes[0].pSrc.bRam = (BYTE*)&dummy_encapsulated_cmd_response;
 13060  145D  248D  3194         	fcall	PL32	;call to abstracted procedure
 13061  145F  2C5A               	goto	i1l6605
 13062  1460                     i1l6611:	
 13063                           
 13064                           ;usb_function_cdc.c: 304: outPipes[0].wCount.Val = SetupPkt.wLength;
 13065  1460  0857               	movf	87,w	;volatile
 13066  1461  0022               	movlb	2	; select bank2
 13067  1462  00B5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13068  1463  0020               	movlb	0	; select bank0
 13069  1464  0856               	movf	86,w	;volatile
 13070  1465  0022               	movlb	2	; select bank2
 13071  1466  00B4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13072                           
 13073                           ;usb_function_cdc.c: 305: outPipes[0].pDst.bRam = (BYTE*)&line_coding._byte[0];
 13074  1467  3020               	movlw	32
 13075  1468  00B1               	movwf	_outPipes^(0+256)	;volatile
 13076  1469  3001               	movlw	1
 13077  146A  00B2               	movwf	(_outPipes+1)^(0+256)	;volatile
 13078                           
 13079                           ;usb_function_cdc.c: 306: outPipes[0].pFunc = (0);
 13080  146B  01B6               	clrf	(_outPipes+5)^(0+256)	;volatile
 13081                           
 13082                           ;usb_function_cdc.c: 307: outPipes[0].info.bits.busy = 1;
 13083  146C  17B3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13084                           
 13085                           ;usb_function_cdc.c: 308: break;
 13086  146D  0008               	return
 13087  146E                     i1l6619:	
 13088                           
 13089                           ;usb_function_cdc.c: 311: { inPipes[0].pSrc.bRam = (BYTE*)&line_coding; inPipes[0].wCoun
      +                          t.Val = 0x07; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 13090  146E  3020               	movlw	32
 13091  146F  0022               	movlb	2	; select bank2
 13092  1470  00E3               	movwf	_inPipes^(0+256)	;volatile
 13093  1471  3001               	movlw	1
 13094  1472  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 13095  1473  3007               	movlw	7
 13096  1474  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 13097  1475  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 13098  1476  30C1               	movlw	193
 13099  1477  00E5               	movwf	(_inPipes^(0+256)+2)	;volatile
 13100                           
 13101                           ;usb_function_cdc.c: 315: break;
 13102  1478  0008               	return
 13103  1479                     i1l6625:	
 13104                           
 13105                           ;usb_function_cdc.c: 318: control_signal_bitmap._byte = (BYTE)SetupPkt.W_Value.v[0];
 13106  1479  0852               	movf	82,w	;volatile
 13107  147A  2C5A               	goto	i1l6605
 13108  147B                     i1l6631:	
 13109  147B  0851               	movf	81,w	;volatile
 13110                           
 13111                           ; Switch size 1, requested type "space"
 13112                           ; Number of cases is 5, Range of values is 0 to 34
 13113                           ; switch strategies available:
 13114                           ; Name         Instructions Cycles
 13115                           ; simple_byte           16     9 (average)
 13116                           ; direct_byte           76     6 (fixed)
 13117                           ; jumptable            260     6 (fixed)
 13118                           ; rangetable            39     4 (fixed)
 13119                           ; spacedrange           75     6 (fixed)
 13120                           ; locatedrange          35     3 (fixed)
 13121                           ;	Chosen strategy is simple_byte
 13122  147C  3A00               	xorlw	0	; case 0
 13123  147D  1903               	skipnz
 13124  147E  2C55               	goto	i1l6599
 13125  147F  3A01               	xorlw	1	; case 1
 13126  1480  1903               	skipnz
 13127  1481  2C5D               	goto	i1l6607
 13128  1482  3A21               	xorlw	33	; case 32
 13129  1483  1903               	skipnz
 13130  1484  2C60               	goto	i1l6611
 13131  1485  3A01               	xorlw	1	; case 33
 13132  1486  1903               	skipnz
 13133  1487  2C6E               	goto	i1l6619
 13134  1488  3A03               	xorlw	3	; case 34
 13135  1489  1903               	skipnz
 13136  148A  2C79               	goto	i1l6625
 13137  148B  2C8C               	goto	i1l424
 13138  148C                     i1l424:	
 13139  148C  0008               	return
 13140  148D                     __end_of_USBCheckCDCRequest:	
 13141  148D                     PL32:	
 13142  148D  30C7               	movlw	_dummy_encapsulated_cmd_response& (0+255)
 13143  148E  0022               	movlb	2	; select bank2
 13144  148F  00E3               	movwf	_inPipes^(0+256)	;volatile
 13145  1490  3001               	movlw	1
 13146  1491  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 13147  1492  0008               	return
 13148  1493                     __end_ofPL32:	
 13149                           
 13150                           	psect	text2512
 13151  0000                     __ptext2512:	
 13152                           
 13153                           ;psect for function i1___wmul
 13154  007E                     btemp	set	126	;btemp
 13155  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    357
    Data        27
    BSS         284
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            16     16      16
    BANK1            80     79      80
    BANK2            63      4      63
    BANK3            80      0      76
    BANK4            16      0      16
    BANK5            16      0       0
    BANK6            80      0      32
    BANK7            80      0      64
    BANK8            80      0      64
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 48
		 -> USTATcopy(BANK2[1]), USBActiveConfiguration(BANK2[1]), NULL(NULL[0]), BDT(BANK0[48]), 

    memset@p1	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 16
		 -> ResultRx@buf(BANK0[7]), Cfg(BANK3[5]), ID(CODE[13]), Status(BANK3[11]), 
		 -> buf(BANK4[16]), I2CState(BANK2[1]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultRx@buf(BANK0[7]), USB_Out_Buffer(BANK8[64]), buf(BANK4[16]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), NULL(NULL[0]), 

    I2CRelay@data	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), TestWork(CODE[45]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    putUSBUSART@data	PTR unsigned char  size(1) Largest target is 64
		 -> USB_In_Buffer(BANK7[64]), 

    getsUSBUSART@buffer	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    CDCDataInHandle	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    CDCDataOutHandle	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pCDCDst.wRom	PTR const unsigned short  size(1) Largest target is 0

    pCDCDst.bRom	PTR const unsigned char  size(1) Largest target is 0

    pCDCDst.wRam	PTR unsigned short  size(1) Largest target is 0

    pCDCDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S1392_POINTER$wRom	PTR const unsigned short  size(1) Largest target is 0

    pCDCSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S1392_POINTER$bRom	PTR const unsigned char  size(1) Largest target is 0

    pCDCSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S1392_POINTER$wRam	PTR unsigned short  size(1) Largest target is 0

    pCDCSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S1392_POINTER$bRam	PTR unsigned char  size(1) Largest target is 0

    pCDCSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USB_SD_Ptr	const PTR const unsigned char [4] size(2) Largest target is 52
		 -> sd003(CODE[52]), sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 67
		 -> configDescriptor1(CODE[67]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 48
		 -> BDT(BANK0[48]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> cdc_data_tx(BANK4[64]), cdc_data_rx(BANK5[64]), NULL(NULL[0]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0
		 -> Absolute function(), 

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0
		 -> Absolute function(), 

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _I2CRead->i1_SendCmdReply
    _WorkTick->_CheckFanSpeed
    _ResultRx->i1_SendCmdReply
    _CDCInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    i1_SendCmdReply->i1_putUSBUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISRCode in BANK0

    _ISRCode->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _ProcessIO->_ProcessCmd
    _getsUSBUSART->_USBTransferOnePacket
    _CDCTxService->_USBTransferOnePacket
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->_putUSBUSART
    _AsicPushWork->_AsicPreCalc
    _UserInit->_DetectAsics
    _DetectAsics->_AsicPreCalc
    _SendAsicData->___wmul
    _AsicPreCalc->_rotate
    _rotate->___bmul

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _UserInit->_DetectAsics

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14265
                   _InitializeSystem
                    _USBDeviceAttach
                       _InitI2CSlave
                      _InitI2CMaster
                       _AsicPushWork
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2CSlave                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2CMaster                                        0     0      0       0
                          _I2CDetect
 ---------------------------------------------------------------------------------
 (2) _I2CDetect                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0    3662
                           _UserInit
                      _USBDeviceInit
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     396
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            1     1      0    7850
                                             78 BANK1      1     1      0
                         _ProcessCmd
                       _getsUSBUSART
                           _I2CRelay
                       _CDCTxService
 ---------------------------------------------------------------------------------
 (2) _getsUSBUSART                                         5     4      1     573
                                              7 BANK1      5     4      1
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _CDCTxService                                         4     4      0     678
                                              7 BANK1      4     4      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (3) _USBTransferOnePacket                                 7     4      3     440
                                              0 BANK1      7     4      3
 ---------------------------------------------------------------------------------
 (2) _I2CRelay                                             2     1      1      93
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           5     5      0    6441
                                             73 BANK1      5     5      0
                             ___wmul
                        _AsicPreCalc
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                         8     3      5     316
                                              2 BANK1      8     3      5
                        _putUSBUSART
 ---------------------------------------------------------------------------------
 (4) _putUSBUSART                                          2     1      1      62
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         2     2      0    2753
                                             71 BANK1      2     2      0
                             ___wmul
                       _SendAsicData
                        _AsicPreCalc
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0    3266
                     _InitTempSensor
                            _InitFAN
                       _InitWorkTick
                        _DetectAsics
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0    3266
                                             71 BANK1      6     6      0
                                              0 BANK2      4     4      0
                        _AsicPreCalc
                       _SendAsicData
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         3     0      3      93
                                              6 BANK1      3     0      3
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         55    53      2    2524
                                             16 BANK1     55    53      2
                             ___bmul
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              3 BANK1     13     8      5
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     136
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     136
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     241
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     445
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISRCode                                              1     1      0   17921
                                             15 BANK0      1     1      0
                           _ResultRx
                           _WorkTick
                     _UpdateFanSpeed
                           _I2CSlave
                            _I2CRead
                           _I2CWrite
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (7) _USBDeviceTasks                                       2     2      0   15362
                                             13 BANK0      2     2      0
                 _USBWakeFromSuspend
                    i1_USBDeviceInit
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (8) _USBWakeFromSuspend                                   0     0      0    1809
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (8) _USBSuspend                                           0     0      0    1809
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (8) _USBStallHandler                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlEPService                                     3     3      0    8771
                                             10 BANK0      3     3      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfSetupHandler                               0     0      0    8335
                 _USBCheckStdRequest
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPServiceComplete                            2     2      0     136
                                              5 COMMON     2     2      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPAllowDataStage                             2     2      0     136
                                              3 COMMON     2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfOutHandler                                 2     2      0     167
                                              6 COMMON     2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (10) _USBCtrlTrfRxService                                 4     4      0     167
                                              2 COMMON     4     4      0
                   Absolute function
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPAllowStatusStage                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfInHandler                                  3     3      0     170
                                              3 COMMON     3     3      0
                _USBCtrlTrfTxService
                   Absolute function
 ---------------------------------------------------------------------------------
 (10) _USBCtrlTrfTxService                                 3     3      0     136
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _USBCheckStdRequest                                  0     0      0    6390
                _USBStdGetDscHandler
                _USBStdSetCfgHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBStdSetCfgHandler                                 4     4      0    2181
                                             10 COMMON     4     4      0
                             _memset
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (12) _memset                                              9     3      6     137
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (11) _USBStdGetDscHandler                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _USBStdGetStatusHandler                              1     1      0      68
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBStdFeatureReqHandler                             6     6      0    2332
                                             10 COMMON     2     2      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USER_USB_CALLBACK_EVENT_HANDLER                     6     0      6    1809
                                              0 BANK0      6     0      6
                  _USBCB_SOF_Handler
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                        _USBCBInitEP
              _USBCBStdSetDscHandler
                 _USBCBCheckOtherReq
                  _USBCBErrorHandler
 ---------------------------------------------------------------------------------
 (7) _I2CRead                                              1     1      0     890
                                             10 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (7) _I2CWrite                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2CSlave                                             6     6      0      37
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) _WorkTick                                             0     0      0       0
                      _CheckFanSpeed
                            _I2CPoll
 ---------------------------------------------------------------------------------
 (8) _I2CPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _CheckFanSpeed                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ResultRx                                            10    10      0    1632
                                             10 COMMON     2     2      0
                                              0 BANK0      8     8      0
                           i1___wmul
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (7) _UpdateFanSpeed                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBSuspend                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBWakeFromSuspend                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCB_SOF_Handler                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBErrorHandler                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBCheckOtherReq                                  0     0      0       0
                 _USBCheckCDCRequest
 ---------------------------------------------------------------------------------
 (12) _USBCheckCDCRequest                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBStdSetDscHandler                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBInitEP                                         0     0      0    1778
                          _CDCInitEP
 ---------------------------------------------------------------------------------
 (12) _CDCInitEP                                           0     0      0    1778
                  _USBEnableEndpoint
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (13) _USBEnableEndpoint                                   6     5      1     536
                                              4 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (14) _USBConfigureEndpoint                                4     3      1     316
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) i1_USBDeviceInit                                      6     6      0    1096
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (13) i1_USBTransferOnePacket                              7     4      3    1242
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (8) i1_SendCmdReply                                       8     3      5     890
                                              2 COMMON     8     3      5
                      i1_putUSBUSART
 ---------------------------------------------------------------------------------
 (9) i1_putUSBUSART                                        2     1      1     176
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeSystem
     _UserInit
       _InitTempSensor
       _InitFAN
       _InitWorkTick
       _DetectAsics
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
         _SendAsicData
           _Send32
           ___wmul (ARG)
         ___awdiv
     _USBDeviceInit
   _USBDeviceAttach
   _InitI2CSlave
   _InitI2CMaster
     _I2CDetect
   _AsicPushWork
     ___wmul
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       ___bmul
       _rotate
         ___bmul (ARG)
       ___wmul (ARG)
   _ProcessIO
     _ProcessCmd
       ___wmul
       _AsicPreCalc
         ___bmul
         _rotate
           ___bmul (ARG)
         ___wmul (ARG)
       _AsicPushWork
         ___wmul
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
       _SendCmdReply
         _putUSBUSART
       ___lwdiv
     _getsUSBUSART
       _USBTransferOnePacket
     _I2CRelay
     _CDCTxService
       _USBTransferOnePacket

 _ISRCode (ROOT)
   _ResultRx
     i1___wmul
     i1_SendCmdReply
       i1_putUSBUSART
   _WorkTick
     _CheckFanSpeed
     _I2CPoll
   _UpdateFanSpeed
   _I2CSlave
   _I2CRead
     i1_SendCmdReply
       i1_putUSBUSART
   _I2CWrite
   _USBDeviceTasks
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i1_USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckCDCRequest
         _USBCBErrorHandler
     i1_USBDeviceInit
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i1_USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckCDCRequest
         _USBCBErrorHandler
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCB_SOF_Handler
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCBInitEP
         _CDCInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           i1_USBTransferOnePacket
       _USBCBStdSetDscHandler
       _USBCBCheckOtherReq
         _USBCheckCDCRequest
       _USBCBErrorHandler
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdGetDscHandler
           _USBStdSetCfgHandler
             _memset
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i1_USBTransferOnePacket
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckCDCRequest
               _USBCBErrorHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i1_USBTransferOnePacket
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckCDCRequest
               _USBCBErrorHandler
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCB_SOF_Handler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCBInitEP
               _CDCInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_USBTransferOnePacket
             _USBCBStdSetDscHandler
             _USBCBCheckOtherReq
               _USBCheckCDCRequest
             _USBCBErrorHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCB_SOF_Handler
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCBInitEP
             _CDCInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               i1_USBTransferOnePacket
           _USBCBStdSetDscHandler
           _USBCBCheckOtherReq
             _USBCheckCDCRequest
           _USBCBErrorHandler
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           Absolute function(Fake)
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         Absolute function(Fake)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      1B       3        0.0%
BITBANK0            10      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               10     10      10       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            3F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               3F      4      3F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0      10      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      20      17       40.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      40      19       80.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      40      22       80.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1C4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Fri Jun 14 07:33:00 2013

                   __end_ofi1_putUSBUSART 0727                                _USB_SD_Ptr 102D  
                                       pc 0002                            ___bmul@product 00A1  
                                      PL2 16F8                                        PL4 0727  
                                      PL6 0517                                        PL8 07E1  
                             _SSPSTATbits 0214                                        _ID 1155  
                            ___awdiv@sign 00A5                             _USBDeviceInit 156D  
                     ___wmul@multiplicand 00A2                          i1___wmul@product 0074  
                      __size_of_CDCInitEP 0020                                       PL10 052A  
                                     PL20 0731                                       PL12 05BD  
                                     PL30 14EF                                       PL22 170B  
                                     PL14 05C3                                       PL32 148D  
                                     PL24 041C                                       PL16 1702  
                                     PL34 05CD                                       PL26 14E8  
                                     PL18 14E0                       __end_of_AsicPreCalc 0E83  
                                     PL36 1668                                       PL28 0423  
                                     LATC 010E                                _BankRanges 1001  
    USER_USB_CALLBACK_EVENT_HANDLER@event 0060      USER_USB_CALLBACK_EVENT_HANDLER@pdata 0062  
                     __end_of_DetectAsics 17C0               __end_of_USBStdGetDscHandler 14E0  
                                     l191 0F8F                                       l821 0A89  
                                     l830 0B01                                       l823 0B83  
                                     _BDT 0020                                       l829 0AF6  
                                     _GIE 005F                                       _PR2 001B  
                                     _UIE 0E92                                       _UIR 0E90  
                                     _Cfg 01E6                                       _buf 0260  
                         __end_of_I2CRead 06E1                                _USBSuspend 035C  
                                     _ptr 0160                           __end_of_I2CPoll 1668  
                    USBStdSetCfgHandler@i 007D                      USBStdSetCfgHandler@p 007A  
                                     wreg 0009                            _USBDeviceTasks 0176  
                          _USBDeviceState 0151                            ??_InitI2CSlave 00A0  
                  ??_USBCBWakeFromSuspend 0070                     ??_USBCtrlTrfRxService 0072  
                          ??_getsUSBUSART 00A8                  USBEnableEndpoint@options 0074  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR1H 0007                                      FSR1L 0006  
                                    l1008 089A                USBConfigureEndpoint@handle 0073  
                                    l6313 156D                                      l6323 1579  
                                    l7301 0901                                      l7135 1712  
                                    l7063 0AD4                                      l7047 0A97  
                                    l7039 0A3C                                      l7231 0892  
                                    l7305 0907                                      l7145 1718  
                                    l7081 0B29                                      l6441 07B0  
                                    l6353 15A4                                      l7147 172F  
                                    l7083 0B37                                      l7059 0AC7  
                                    l6355 15AE                                      l6339 158F  
                                    l7243 08A5                                      l7227 088C  
                                    l7333 0EE0                                      l7325 0ED1  
                                    l7093 0B5B                                      l7263 0A1C  
                                    l6367 15B8                                      l7239 089E  
                                    l7337 0EE4                                      l7169 17BA  
                                    l7089 0B55                                      l7097 0B68  
                                    l6705 0771                                      l7273 0A35  
                                    l6481 0F94                                      l7355 17D3  
                                    l6803 0BBC                                      l6459 07D8  
                                    l6715 0781                                      l6723 0783  
                                    l7275 0A37                                      l7381 17FB  
                                    l7373 17EF                                      l7365 17E0  
                                    l7349 17CA                                      l7285 0E85  
                                    l6741 0799                                      l6725 0788  
                                    l6733 078A                                      l6653 0F25  
                                    l6815 0BEC                                      l6671 0FF3  
                                    l6743 079C                                      l6735 078E  
                                    l6655 0F3C                                      l6647 0F23  
                                    l6639 0F0D                                      l7377 17F3  
                                    l6673 0737                                      l6657 0F47  
                                    l6683 074D                                      l6685 0750  
                                    l6679 0746                                      l6891 0B93  
                                    l6699 0769                                      l6875 0FF6  
                                    l6797 0BBB                                      l6893 0BAB  
                                    l6897 0BB5                                      _LATC 010E  
                                    u5050 0EA0                                      u5060 0EB1  
                                    u5220 0A66                                      u5055 0E9B  
                                    u5240 0AC0                                      u5065 0EAD  
                                    u5260 0AE6                                      u5370 1741  
                                    _RCIF 008D                                      u5615 17E8  
                                    u5295 0B08                                      u5555 0ED9  
                   ??_USBCtrlTrfTxService 0070                                      _UCFG 0E91  
                                    _UEP0 0E98                                      _UEP1 0E99  
                                    _UEIE 0E97                                      _UEIR 0E93  
                                    _UCON 0E8E                                      _TMR0 0015  
                         __end_of_ISRCode 003A                           _CDCDataInHandle 0146  
  USBStdFeatureReqHandler@current_ep_data 0068                                      _pDst 015F  
                                    _main 088A                          __end_of_I2CRelay 0EFE  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                         _USBDeviceAttach 0F7F                          __end_of_I2CSlave 16F8  
                                    btemp 007E                          __end_of_I2CWrite 1401  
                    __end_of_AsicPushWork 08FF                                      start 003A  
                           __CFG_IESO$OFF 0000                           ??_InitI2CMaster 00A0  
                      _USBCBCheckOtherReq 0416                __end_of_USBCheckStdRequest 00A2  
                  ??_USBCtrlTrfOutHandler 0076                         ___bmul@multiplier 00A2  
               ??_USBStdFeatureReqHandler 007A                           __end_of_InitFAN 0FCF  
                ??_USBStdGetStatusHandler 0070                            ?_USBDeviceInit 0070  
                       DetectAsics@x_3058 016E                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 0079                                     ?_main 0070  
                           _USB_In_Buffer 03A0                           __end_of___awdiv 1800  
                           __CFG_WDTE$OFF 0000         __size_of_USBCtrlEPServiceComplete 0035  
                         ___awdiv@divisor 00A0                    __end_of_USBDeviceTasks 0212  
               ?_USBCtrlEPServiceComplete 0070                           __end_of___lwdiv 0EE9  
                                   i1l142 018F                                     i1l216 0491  
                                   i1l154 01DD                                     i1l323 0443  
                                   i1l340 0077                                     i1l326 046B  
                                   i1l424 148C                                     i1l361 00F1  
                                   i1l362 00F2                                     i1l282 1439  
                                   i1l338 0076                                     i1l283 140F  
                                   i1l284 1412                                     i1l621 0659  
                                   i1l349 008F                                     i1l374 0141  
                                   i1l366 0116                                     i1l279 1405  
                                   i1l650 13F0                                     i1l619 064D  
                                   i1l652 1400                                     i1l637 06B6  
                                   i1l638 06B9                                     i1l845 1628  
                                   i1l998 0037                                     _UADDR 0E96  
                         ___awdiv@counter 00A4                                     _RCREG 0199  
                           ?_InitWorkTick 0070                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _USTAT 0E8F  
      __size_of_USBCtrlEPAllowStatusStage 0038                             __CFG_PWRTE$ON 0000  
                          __CFG_FCMEN$OFF 0000           __end_of_USBCtrlEPAllowDataStage 04E2  
                                   _sd000 1162                                     _sd001 107A  
                                   _sd002 10AE                                     _sd003 10E2  
                       __end_of_I2CDetect 1000                      ??_USBCBCheckOtherReq 0070  
                        __end_ofi1___wmul 0640                         __end_of_CDCInitEP 0397  
                        ??i1_SendCmdReply 0077                                     status 0003  
                     i1___wmul@multiplier 0070                                     wtemp0 007E  
                         putUSBUSART@data 00A1              __size_of_USBStdSetCfgHandler 005F  
                          __CFG_MCLRE$OFF 0000                           __initialization 0828  
                             _AsicPreCalc 0BBB                              __end_of_main 08A8  
                             _DetectAsics 1712                                 ??_I2CRead 007A  
                               ??_I2CPoll 0070                 __size_of_USBCtrlEPService 0058  
                                  ??_main 00EF                            ??_InitWorkTick 00A0  
               __size_of_InitializeSystem 000F                           ?_USBDeviceTasks 0070  
                             ?_USBSuspend 0070                           i1_USBDeviceInit 0242  
                        __end_of_ResultRx 062B                          __end_of_TestWork 1143  
                               ??_ISRCode 006F                              _cdc_mem_type 0156  
                          _InitTempSensor 0FA3                          __end_of_UserInit 0FA3  
                                  _BCL1IF 0093                   __end_of_USBDeviceAttach 0F98  
                        _CDCDataOutHandle 0147                                    _I2CCmd 0149  
                       _getsUSBUSART$2193 00AA                                    _ACTCON 039B  
                                  _ADRESH 009C                                    i1S8383 1180  
                                  i1S8385 1194                                    i1S8377 1166  
                       SendAsicData@split 00A8                          ___awdiv@dividend 00A2  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                           getsUSBUSART@len 00A7  
                        __end_of_WorkTick 161E                                    _T1GSEL 08EB  
                                  _IOCAF3 1C9B                                    _IOCAN3 1C93  
                                  _T1GSPM 00CC                                    i1l1042 041B  
                                  i1l1051 0418                                    i1l1045 041A  
                   __size_of_CDCTxService 0072                                    i1l1048 0419  
                                  i1l1057 0415                                    i1l1086 0241  
                                  i1l5361 0633                                    i1l8001 0137  
                                  i1l5357 062D                                    i1l7133 1659  
                                  i1l8013 015F                                    i1l6431 03CD  
                                  i1l8015 0164                                    i1l8009 0147  
                                  i1l8041 008C                                    i1l8025 007C  
                                  i1l6505 050B                                    i1l6513 050D  
                                  i1l8121 033B                                    i1l6417 0358  
                                  i1l7411 0261                                    i1l6611 1460  
                                  i1l6531 1558                                    i1l8051 009A  
                                  i1l8027 007E                                    i1l6515 0511  
                                  i1l6523 0513                                    i1l8107 0308  
                                  i1l6419 035A                                    i1l6605 145A  
                                  i1l6533 1493                                    i1l8037 0089  
                                  i1l8029 0080                                    i1l8221 01FF  
                                  i1l6607 145D                                    i1l6631 147B  
                                  i1l6551 14D0                                    i1l8039 008B  
                                  i1l6391 02C9                                    i1l8063 003C  
                                  i1l8119 0339                                    i1l8223 020B  
                                  i1l8215 01F3                                    i1l8231 000B  
                                  i1l7425 0275                                    i1l6625 1479  
                                  i1l6545 14BD                                    i1l6537 149C  
                                  i1l7513 04D3                                    i1l8145 018A  
                                  i1l8137 0183                                    i1l7427 027F  
                                  i1l6619 146E                                    i1l7611 160C  
                                  i1l6539 14A5                                    i1l6491 04F3  
                                  i1l6379 02B4                                    i1l8147 018C  
                                  i1l8251 0028                                    i1l8235 0010  
                                  i1l7613 1610                                    i1l6901 13D2  
                                  i1l6557 14D3                                    i1l7525 0567  
                                  i1l7701 0554                                    i1l7509 04C1  
                                  i1l8173 01B1                                    i1l8181 01BC  
                                  i1l8245 001D                                    i1l7455 03E4  
                                  i1l7439 0288                                    i1l7703 0377  
                                  i1l7623 161D                                    i1l6567 141B  
                                  i1l6559 1401                                    i1l6495 04F7  
                                  i1l7551 05B6                                    i1l7543 059E  
                                  i1l7535 0572                                    i1l7519 0556  
                                  i1l8167 01A2                                    i1l8159 019B  
                                  i1l8255 0034                                    i1l8239 0016  
                                  i1l7473 040C                                    i1l6585 1443  
                                  i1l7609 1609                                    i1l6905 13D7  
                                  i1l6577 142E                                    i1l7545 05A5  
                                  i1l7537 0587                                    i1l7643 070D  
                                  i1l7395 024D                                    i1l6907 13E1  
                                  i1l7731 0650                                    i1l8195 01D3  
                                  i1l8187 01C2                                    i1l7637 06ED  
                                  i1l6917 13F3                                    i1l7741 065F  
                                  i1l7733 0652                                    i1l7725 0647  
                                  i1l8381 023C                                    i1l7901 14FC  
                                  i1l7581 0465                                    i1l7557 0429  
                                  i1l7645 0477                                    i1l7639 0705  
                                  i1l7495 039D                                    i1l6599 1455  
                                  i1l7823 05EE                                    i1l6943 1694  
                                  i1l6935 1684                                    i1l7743 0664  
                                  i1l7735 0656                                    i1l7567 0440  
                                  i1l7655 0484                                    i1l7489 0724  
                                  i1l6865 165C                                    i1l6961 16B2  
                                  i1l6953 16A6                                    i1l6929 167D  
                                  i1l7753 0674                                    i1l7577 045C  
                                  i1l7499 03A3                                    i1l6955 16A8  
                                  i1l7747 066C                                    i1l8379 0222  
                                  i1l7851 021A                                    i1l7587 0473  
                                  i1l7691 0539                                    i1l7667 049C  
                                  i1l7675 04A4                                    i1l7659 0488  
                                  i1l7845 0629                                    i1l6949 169D  
                                  i1l7773 06A4                                    i1l7749 066E  
                                  i1l7861 021F                                    i1l7853 021B  
                                  i1l7941 1543                                    i1l7589 0475  
                                  i1l6983 16E2                                    i1l6967 16CD  
                                  i1l6991 16E8                                    i1l7759 067B  
                                  i1l7863 0221                                    i1l7855 021C  
                                  i1l7919 1516                                    i1l7695 053E  
                                  i1l6977 16D9                                    i1l7857 021D  
                                  i1l7849 0212                                    i1l7945 00A2  
                                  i1l6979 16DE                                    i1l7779 06AD  
                                  i1l7795 06D1                                    i1l7859 021E  
                                  i1l7971 00DF                                    i1l7955 00B4  
                                  i1l7789 06C1                                    i1l7957 00B6  
                                  i1l7893 14F5                                    i1l7991 011C  
                                  i1l7979 00F8                                    i1l7989 010F  
                                  u534_20 1657                                    _OSCCON 0099  
                  __size_of_CheckFanSpeed 003E                                    u590_25 15FC  
                                  u575_25 04CA                                    u576_25 0563  
                           CDCTxService@i 00A9                                    _TMR1GE 00CF  
                                  _TMR0IF 005A                                    _TMR0CS 04AD  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _PWM1OE 309E                                    _TMR2IF 0089  
                                  _TMR1ON 00C0                                    _TMR2ON 00E2  
                                  _SSP1EN 10AD                                    _SSP1IF 008B  
                                  _SSPADD 0212                                    _SSPBUF 0211  
            i1USBTransferOnePacket@handle 0076                                 ??_InitFAN 00A0  
                                  _Send32 0961                         _shortPacketStatus 0162  
                           ?_SendCmdReply 00A2                                ResultRx@Rw 0067  
                         USBDeviceTasks@i 006E                             ?_SendAsicData 00A6  
                           _I2CSlave$2556 0074               USBStdFeatureReqHandler@pUEP 0066  
                USBTransferOnePacket@data 00A1                USBCtrlTrfInHandler@lastDTS 0075  
                    __end_of_InitI2CSlave 0F7F                                    _Status 01D3  
                         ??_USBDeviceInit 00A0                                    ___bmul 0E83  
                            ?_putUSBUSART 00A0                                    ___wmul 08FF  
                               ??___awdiv 00A4                      __end_of_getsUSBUSART 0F4A  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 00A4  
                       _USBEnableEndpoint 0397           __size_of_USBStdGetStatusHandler 0042  
                                  _memset 1554                          ___awdiv@quotient 00A6  
                              _ProcessCmd 0A39                        ?_USBEnableEndpoint 0074  
                                  _rotate 0E8F                     _USBCBStdSetDscHandler 0415  
                                  clrloop 0803             __size_of_USBTransferOnePacket 0038  
                               ?_I2CRelay 00A0                        __size_of_ProcessIO 0029  
                               ?_I2CSlave 0070                    __end_of_InitTempSensor 0FB4  
                            _CDCTxService 0737                                 ?_I2CWrite 0070  
                     ??_USBEnableEndpoint 0075                               _CtrlTrfData 0058  
                   __size_of_AsicPushWork 0057                      _controlTransferState 015A  
                 __end_of__initialization 0888                i1USBTransferOnePacket@data 0071  
                __size_of_USBStallHandler 0018                            ??_SendCmdReply 00A7  
                     ___bmul@multiplicand 00A0                            ??_SendAsicData 00A9  
                     __size_of_USBSuspend 000C                      i1USBDeviceInit@i_750 0074  
                          __pcstackCOMMON 0070                 __end_of_USBEnableEndpoint 03B6  
                           __end_of_sd000 1166                             __end_of_sd001 10AE  
                           __end_of_sd002 10E2                             __end_of_sd003 1116  
                            __pidataBANK2 0000                              __pidataBANK3 080E  
                       _USBCB_SOF_Handler 0419          __size_of_USBCtrlEPAllowDataStage 0036  
           __size_of_USBConfigureEndpoint 0027                   __end_ofi1_USBDeviceInit 02B4  
             __end_of_USBCtrlTrfInHandler 0477                                __end_ofPL2 1702  
                      ?_USBCB_SOF_Handler 0070                                __end_ofPL4 0731  
                              __end_ofPL6 052A                                __end_ofPL8 07F1  
                           _CheckFanSpeed 161E                                __end_of_ID 1162  
                               ?i1___wmul 0070                                ??_I2CRelay 00A1  
                          _OPTION_REGbits 0095                         _CDCTxService$2241 00A7  
                              ??_I2CSlave 0070                              _AsicPushWork 08A8  
                         ?_InitTempSensor 0070                                _cdc_notice 0127  
                     i1SendCmdReply@count 0076                                ??_I2CWrite 0070  
                     ??_USBCB_SOF_Handler 0070                                _cdc_rx_len 0157  
                              _cdc_tx_len 0159                  ??_USBCtrlTrfSetupHandler 007E  
                          _USB_Out_Buffer 0420                          ?_USBDeviceAttach 0070  
                  _USBStdGetStatusHandler 1401                                __pbssBANK1 00EF  
                              __pbssBANK2 0131                                __pbssBANK3 01A0  
                              __pbssBANK4 0260                                __pbssBANK6 0320  
                              __pbssBANK7 03A0                                __pbssBANK8 0420  
                       i1SendCmdReply@cmd 0072                      __end_of_InitWorkTick 0FE1  
             __size_of_USBWakeFromSuspend 000E                               _pBDTEntryIn 013D  
                       __end_of_ProcessIO 0A39          __end_of_USBCtrlEPServiceComplete 04AC  
                                 ?_Send32 0070                              I2CRelay@data 00A1  
               __end_of_USBCB_SOF_Handler 041A               __size_of_USBCheckCDCRequest 004A  
                              __pmaintext 088A                      USBCtrlTrfRxService@i 0074  
                               ?_ResultRx 0070                                   ?___bmul 00A0  
                                 ?___wmul 00A0                                __pintentry 0004  
                               ?_UserInit 0070                                   _I2CAddr 0148  
                          ?_CheckFanSpeed 0070                                   _I2CRead 0640  
                              __ptext2500 0416                                __ptext2501 1443  
                              __ptext2510 0713                                __ptext2502 0415  
                              __ptext2511 062B                                __ptext2503 0376  
                              __ptext2512 0000                                __ptext2504 0377  
                              __ptext2440 0F6B                                __ptext2505 0397  
                              __ptext2441 0F59                                __ptext2506 03B6  
                              __ptext2450 0A39                                __ptext2442 0FF6  
                              __ptext2507 0242                                __ptext2451 0B86  
                              __ptext2443 0F4A                                __ptext2508 03DD  
                              __ptext2460 0FB4                                __ptext2452 0FE1  
                              __ptext2444 156D                                __ptext2509 06E1  
                              __ptext2461 0FA3                                __ptext2453 08A8  
                              __ptext2445 0A10                                __ptext2470 035C  
                              __ptext2462 0FCF                                __ptext2454 0F98  
                              __ptext2446 0EFE                                __ptext2471 0344  
                              __ptext2463 0E83                                __ptext2455 1712  
                              __ptext2447 0737                                __ptext2439 0F7F  
                              __ptext2480 04E2                                __ptext2472 02EC  
                              __ptext2464 08FF                                __ptext2456 0914  
                              __ptext2448 07A9                                __ptext2481 0066  
                              __ptext2473 003C                                __ptext2465 0EC4  
                              __ptext2457 0961                                __ptext2449 0EE9  
                              __ptext2490 166C                                __ptext2482 14F5  
                              __ptext2474 0477                                __ptext2466 17C0  
                              __ptext2458 0BBB                                __ptext2491 15E7  
                              __ptext2483 1554                                __ptext2475 04AC  
                              __ptext2459 0E8F                                __ptext2492 165C  
                              __ptext2484 1493                                __ptext2476 0539  
                              __ptext2468 0176                                __ptext2493 161E  
                              __ptext2485 1401                                __ptext2477 0556  
                              __ptext2469 0368                                __ptext2494 05D1  
                              __ptext2486 00A2                                __ptext2478 02B4  
                              __ptext2495 07F1                                __ptext2487 0212  
                              __ptext2479 0429                                __ptext2496 041B  
                              __ptext2488 0640                                __ptext2497 041A  
                              __ptext2489 13D1                                   ?_memset 0070  
                              __ptext2498 0419                                __ptext2499 0418  
                  ?_USBCBStdSetDscHandler 0070                                   _I2CPoll 165C  
                              _device_dsc 1143                          _USBCtrlEPService 02EC  
                               ?_WorkTick 0070                               ?_ProcessCmd 0070  
                              _ep_data_in 0137                                   ?_rotate 00A3  
                              ??i1___wmul 0074                          _InitializeSystem 0F4A  
                             _NonceRanges 0320               __end_of_USBCtrlTrfRxService 05BD  
                      _USBCheckStdRequest 0066                         _configDescriptor1 1037  
             __end_of_USBCtrlTrfTxService 0517                       _USBStdSetCfgHandler 14F5  
                                 _ISRCode 0004                                   _PWM1DCH 0612  
                                 _PWM1DCL 0611                                   _OSCTUNE 0098  
                                 _PWM1CON 0613                                   _TMR1GIE 048F  
                                 _TMR1GIF 008F                       ?_USBCheckStdRequest 0070  
            __size_of_USBStdGetDscHandler 004D                                   _UIEbits 0E92  
           __size_of_USBCBWakeFromSuspend 0001                                __stringtab 1000  
                  __size_ofi1_putUSBUSART 0014                                   _UIRbits 0E90  
                               _I2CDetect 0FF6                             _cdc_trf_state 0158  
                ??i1_USBTransferOnePacket 0073                     __size_of_InitI2CSlave 0014  
                                 _InitFAN 0FB4                                   _pCDCDst 01A8  
                                 _pCDCSrc 01AA                     __size_of_getsUSBUSART 004C  
                    ?_USBStdSetCfgHandler 0070                                 _CDCInitEP 0377  
                         __size_of_Send32 00AF                     __end_of_InitI2CMaster 0F6B  
                              ??_ResultRx 007A                __size_of_USBEnableEndpoint 001F  
                             ResultRx@buf 0060                              ?_AsicPreCalc 00B0  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 007E  
                         __size_of___bmul 000C             __size_of_USBCtrlTrfOutHandler 001D  
                                 ___awdiv 17C0                          ??_USBDeviceTasks 006D  
                         __size_of___wmul 0015                                   _WorkNow 0155  
                                 _WorkQue 233C                                   ___lwdiv 0EC4  
                       ??_USBStallHandler 0070                                ??_UserInit 00ED  
                        ?i1_USBDeviceInit 0070                      __size_of_putUSBUSART 0015  
                      getsUSBUSART@buffer 00A9                           __size_of_memset 0019  
                              ??_WorkTick 0071                 __end_of_configDescriptor1 107A  
                    __size_of_USBCBInitEP 0001                                   _inPipes 0163  
             _USBDeferOUTDataStagePackets 014F                           __size_of_rotate 0035  
                 __size_of_UpdateFanSpeed 000E                                 _T1CONbits 0018  
                            ??_USBSuspend 007A                                 _T2CONbits 001C  
                       _USBCBErrorHandler 0418                     ProcessIO@numBytesRead 00EE  
                    __end_of_SendCmdReply 0BBB                      __end_of_SendAsicData 0961  
                      ?_USBCBErrorHandler 0070                             ?_USBCBSuspend 0070  
                            _InitI2CSlave 0F6B                        __end_of_USB_CD_Ptr 1037  
         __size_of_USBCtrlTrfSetupHandler 002A                      end_of_initialization 0888  
                            _getsUSBUSART 0EFE               __size_of_USBCBCheckOtherReq 0002  
                      __end_of_USB_SD_Ptr 1035                                ?_I2CDetect 0070  
                    __end_ofAsicPreCalc@K 102D                       _pBDTEntryEP0OutNext 00EF  
                                 init_ram 13C5                       ??_USBCBErrorHandler 0070  
                                 memset@c 0072                                   memset@n 0074  
                                 memset@p 0077                                   initloop 13C6  
         _dummy_encapsulated_cmd_response 01C7                       __size_of_ProcessCmd 014D  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 007A  
                      __end_of_BankRanges 1021                                ?_CDCInitEP 0070  
                        SendCmdReply@data 00A4                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 0368                   _USBCtrlEPAllowDataStage 04AC  
                               _RCSTAbits 019D                           ??_CheckFanSpeed 0070  
                                 rotate@x 00A3                                   rotate@y 00A7  
                         AsicPreCalc@work 00B0                              __pstringtext 1000  
                           i1_putUSBUSART 0713                  _USBCtrlEPServiceComplete 0477  
                   i1___wmul@multiplicand 0072                _USBStatusStageEnabledFlag1 0152  
              _USBStatusStageEnabledFlag2 0153                        USBEnableEndpoint@p 0077  
               __end_of_USBCBErrorHandler 0419                          __CFG_FOSC$INTOSC 0000  
                               _TRISAbits 008C                                 _TRISBbits 008D  
                               _TRISCbits 008E                            ??_USBCBSuspend 0070  
                      _BothEP0OutUOWNsSet 0145                 USBStdSetCfgHandler@i_1132 007C  
                       __size_of_I2CRelay 0015                         __size_of_I2CSlave 008C  
                       __size_of_I2CWrite 0030                 USBConfigureEndpoint@EPNum 0072  
              ?_USBCtrlEPAllowStatusStage 0070                     __size_of_InitWorkTick 0012  
     USER_USB_CALLBACK_EVENT_HANDLER@size 0064                                 _USTATcopy 016A  
                i1USBTransferOnePacket@ep 0075              __end_of_USBTransferOnePacket 07E1  
         __size_ofi1_USBTransferOnePacket 0038                             _PrecalcHashes 01AF  
                       putUSBUSART@length 00A0                        USBDeviceInit@i_750 00A4  
                          __end_of_Send32 0A10                    _USBCtrlTrfSetupHandler 003C  
                          ?i1_putUSBUSART 0070                   __size_ofi1_SendCmdReply 0032  
                          __end_of___bmul 0E8F                     __end_of_USBDeviceInit 15E7  
                          __end_of___wmul 0914                          ??_InitTempSensor 00A0  
                          __end_of_memset 156D                         _USBBusIsSuspended 01AE  
                          __end_of_rotate 0EC4                              _InitWorkTick 0FCF  
                             __end_ofPL10 0539                               __end_ofPL20 0737  
                             __end_ofPL12 05C3                               __end_ofPL30 14F5  
                             __end_ofPL22 1712                               __end_ofPL14 05CD  
                             __end_ofPL32 1493                               __end_ofPL24 0423  
                             __end_ofPL16 170B                               __end_ofPL34 05D1  
                             __end_ofPL26 14EF                               __end_ofPL18 14E8  
                             __end_ofPL36 166C                               __end_ofPL28 0429  
                     start_initialization 0828                         __size_ofi1___wmul 0015  
                 ?_USBStdGetStatusHandler 0070             USBCtrlTrfRxService@byteToRead 0075  
                             _cdc_data_rx 02A0                               _cdc_data_tx 0220  
            __end_of_USBConfigureEndpoint 03DD           __end_of_USBStdFeatureReqHandler 0176  
       __end_of_USBCtrlEPAllowStatusStage 02EC                               ??_I2CDetect 00A0  
                __end_of_USBCtrlEPService 0344                          SendAsicData@work 00A6  
                __end_of_InitializeSystem 0F59                 ??_USBCtrlEPAllowDataStage 0073  
                             ??_CDCInitEP 007A                            USBDeviceInit@i 00A5  
                                ??_Send32 00A0                            USBDeviceInit@p 00A2  
                  _pBDTEntryEP0OutCurrent 015E                   USBTransferOnePacket@dir 00A0  
                 USBTransferOnePacket@len 00A2                   ??_USBCBStdSetDscHandler 0070  
                                ??___bmul 00A1                                 _ResultQue 01A0  
                                ??___wmul 00A4                       _USBStdGetDscHandler 1493  
                               _ProcessIO 0A10                               __pdataBANK2 016F  
                             __pdataBANK3 01D1                         __size_of_ResultRx 005A  
                    __size_of_AsicPreCalc 02C8                                  ?_I2CRead 0070  
                                ??_memset 0076                                  ?_I2CPoll 0070  
                    __size_of_DetectAsics 00AE                              ??_ProcessCmd 00E9  
                   __size_of_SendCmdReply 0035                                  ??_rotate 00A8  
                  i1_USBTransferOnePacket 03DD                __size_of_USBCBErrorHandler 0001  
                          _UpdateFanSpeed 07F1                     __size_of_SendAsicData 004D  
                       __size_of_UserInit 000B                    _USBActiveConfiguration 0169  
          __end_of_USBStdGetStatusHandler 1443                 i1USBTransferOnePacket@dir 0070  
                             __pbssBIGRAM 233C                 i1USBTransferOnePacket@len 0072  
                       __size_of_WorkTick 0037                             __pcstackBANK0 0060  
                           __pcstackBANK1 00A0                             __pcstackBANK2 016B  
            __size_of_USBCtrlTrfInHandler 004E                                  ?_ISRCode 0070  
                               _WorkTicks 01D1                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0074                __end_of_USBWakeFromSuspend 0376  
                         _USBStallHandler 0344                              _pBDTEntryOut 0140  
                                ?_InitFAN 0070                __end_of_USBCheckCDCRequest 148D  
                            _send32_count 0161                                 __pnvBANK3 01EB  
                      __end_of_ProcessCmd 0B86                  __size_of_USBDeviceAttach 0019  
                           I2CRelay@count 00A0                          ___lwdiv@dividend 00A2  
                         ??i1_putUSBUSART 0071                              _SendCmdReply 0B86  
                            _SendAsicData 0914                      __end_of_USBCBSuspend 041C  
            __end_of_USBCBWakeFromSuspend 041B                                  ?___awdiv 00A0  
                              ?_ProcessIO 0070                                  ?___lwdiv 00A0  
                  __end_of_UpdateFanSpeed 07FF                              AsicPreCalc@K 1021  
                            AsicPreCalc@m 00BE                              AsicPreCalc@n 00E6  
                            AsicPreCalc@x 00E2                              AsicPreCalc@y 00DE  
                            AsicPreCalc@z 00BA                                 __pswtext1 1166  
                               __pswtext2 1180                                 __pswtext3 1194  
                    _USBTransferOnePacket 07A9                                  _I2CInBuf 01AC  
                            DetectAsics@x 016D                                  _I2CCount 014A  
                                _I2CRelay 0EE9                                  _I2CSlave 166C  
                                _I2CState 0168                                  _I2CWrite 13D1  
                               _last_bit0 015C                                 _last_bit1 015D  
            __end_of_USBCtrlTrfOutHandler 0556                     ??_USBStdGetDscHandler 0070  
                             _ep_data_out 013A                          ___lwdiv@quotient 00A5  
            __size_of_USBCtrlTrfRxService 0067             USBConfigureEndpoint@direction 0070  
            __size_of_USBCtrlTrfTxService 0035                            ___wmul@product 00A4  
                                _LATAbits 010C                                  _LATCbits 010E  
                       i1putUSBUSART@data 0071                ??_USBCtrlEPServiceComplete 0075  
                                _PIE2bits 0092                           SendCmdReply@cmd 00A2  
                                _PIR2bits 0012                 USBCtrlEPService@setup_cnt 006C  
                           ??_putUSBUSART 00A1                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 014E                            i1_SendCmdReply 06E1  
                           ??_USBCBInitEP 007A               __size_of_USBCheckStdRequest 003C  
                                _UCONbits 0E8E                      _USBConfigureEndpoint 03B6  
                         ?_UpdateFanSpeed 0070                             ProcessCmd@cmd 00ED  
        __size_of_USBStdFeatureReqHandler 00D4                          __size_of_I2CRead 00A1  
                        __size_of_I2CPoll 000C                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 00A0                     ?_USBTransferOnePacket 00A0  
                                i1___wmul 062B                                  _BankSize 01EB  
                           ?_CDCTxService 0070                              _RemoteWakeup 014B  
                __size_ofi1_USBDeviceInit 0072                                  _ClockCfg 01DE  
              __end_of_USBCBCheckOtherReq 0418                                  _HashTime 016F  
                 __end_of_USBStallHandler 035C                          __size_of_ISRCode 0036  
                  __size_of_InitI2CMaster 0012               ??_USBCtrlEPAllowStatusStage 0070  
             __end_of_USBStdSetCfgHandler 1554                              _SlaveAddress 014D  
                      __end_of_device_dsc 1155                   ?_USBCtrlTrfSetupHandler 0070  
                        __size_of_InitFAN 001B                   USBStdGetStatusHandler@p 0070  
                  __end_ofi1_SendCmdReply 0713                    USBTransferOnePacket@ep 00A5  
                                _ResultQC 014C                                  _ResultRx 05D1  
                                _SetupPkt 0050                                  _TestWork 1116  
                                _SlowTick 01AD                               ??_ProcessIO 00EE  
                   ?_USBConfigureEndpoint 0070                         ??_USBDeviceAttach 00A0  
                                _UserInit 0F98                     __end_of_CheckFanSpeed 165C  
                        __size_of___awdiv 0040                          __size_of___lwdiv 0025  
                                _WorkTick 15E7                        __end_of__stringtab 1001  
                     __end_of_putUSBUSART 0FF6                               _line_coding 0120  
                          ??_CDCTxService 00A7                       __end_of_USBCBInitEP 0377  
                           ?_AsicPushWork 0070                               _send32_data 0143  
                 __size_of_USBDeviceTasks 009C                           ___lwdiv@divisor 00A0  
                         ___lwdiv@counter 00A4                                _T1GCONbits 0019  
                    _USBCBWakeFromSuspend 041A            __end_of_USBCtrlTrfSetupHandler 0066  
                           __size_of_main 001E                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 006A                                  clear_ram 0802  
                     _USBCtrlTrfInHandler 0429                           ?i1_SendCmdReply 0072  
                      ??_InitializeSystem 00ED                                  _outPipes 0131  
                           _InitI2CMaster 0F59                      _USBCtrlTrfOutHandler 0539  
                 ?i1_USBTransferOnePacket 0070                 _USBCtrlEPAllowStatusStage 02B4  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0416  
                  ??_USBTransferOnePacket 00A3                            ??_AsicPushWork 00E7  
               _USBDeferStatusStagePacket 0150                  CDCTxService@byte_to_send 00AA  
                        i1USBDeviceInit@i 0075                          i1USBDeviceInit@p 0072  
                              _INTCONbits 000B                       i1putUSBUSART@length 0070  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0072  
                                memset@p1 0070                              _USBCBSuspend 041B  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 0069  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 007A   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 0242  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 0030          ?_USER_USB_CALLBACK_EVENT_HANDLER 0060  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 007A           _USER_USB_CALLBACK_EVENT_HANDLER 0212  
                       ??i1_USBDeviceInit 0070                                  next_word 0966  
                       SendCmdReply@count 00A6                             SendCmdReply@n 00A9  
                           ??_AsicPreCalc 00B2            __end_ofi1_USBTransferOnePacket 0415  
                          ?_InitI2CMaster 0070                           _ProcessCmd$3028 00EB  
                           ??_DetectAsics 00E7                    ??_USBConfigureEndpoint 0071  
                   ?_USBCtrlTrfOutHandler 0070                               _putUSBUSART 0FE1  
                    __CFG_CPUDIV$NOCLKDIV 0000                       _USBCtrlTrfRxService 0556  
                             _USBCBInitEP 0376                        _USBWakeFromSuspend 0368  
                 _USBStdFeatureReqHandler 00A2                        _USBCheckCDCRequest 1443  
                     _USBCtrlTrfTxService 04E2                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 0073                     _USBAlternateInterface 01CF  
                     ?_USBCheckCDCRequest 0070                               _SSPCON1bits 0215  
                             _SSPCON2bits 0216                       USBEnableEndpoint@ep 0079  
                             _SSPCON3bits 0217                             ?_InitI2CSlave 0070  
                         _endpoint_number 015B                   __size_of_InitTempSensor 0011  
                    ?_USBCtrlTrfRxService 0070                             ?_getsUSBUSART 00A7  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 0154                      ??_USBWakeFromSuspend 007A  
              USBTransferOnePacket@handle 00A6                      __end_of_CDCTxService 07A9  
                    ??_USBCheckCDCRequest 0070                                _USB_CD_Ptr 1035  
                        ??_UpdateFanSpeed 0070                        __size_of_I2CDetect 000A  
