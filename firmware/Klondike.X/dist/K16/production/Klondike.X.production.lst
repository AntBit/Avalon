

Microchip Technology PIC PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Nov 17 01:37:14 2013

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK6,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text18,local,class=CODE,merge=1,delta=2
    23                           	psect	text25,local,class=CODE,merge=1,delta=2
    24                           	psect	text26,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text54,local,class=CODE,merge=1,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x620,48
    30                           	dabs	1,0x5A0,80
    31                           	dabs	1,0x53C,52
    32                           	dabs	1,0x20,32,_BDT
    33                           	dabs	1,0x48,8,_CtrlTrfData
    34                           	dabs	1,0x40,8,_SetupPkt
    35                           	dabs	1,0x220,64,_INPacket
    36                           	dabs	1,0x2A0,64,_OUTPacket
    37                           	dabs	1,0x233C,0,_WorkQue
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0008                     	;# 
    48  0009                     	;# 
    49  000A                     	;# 
    50  000B                     	;# 
    51  000C                     	;# 
    52  000D                     	;# 
    53  000E                     	;# 
    54  0011                     	;# 
    55  0012                     	;# 
    56  0015                     	;# 
    57  0016                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001C                     	;# 
    65  008C                     	;# 
    66  008D                     	;# 
    67  008E                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0095                     	;# 
    71  0096                     	;# 
    72  0097                     	;# 
    73  0098                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009B                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  010C                     	;# 
    83  010D                     	;# 
    84  010E                     	;# 
    85  0111                     	;# 
    86  0112                     	;# 
    87  0113                     	;# 
    88  0114                     	;# 
    89  0115                     	;# 
    90  0116                     	;# 
    91  0117                     	;# 
    92  0118                     	;# 
    93  0119                     	;# 
    94  011D                     	;# 
    95  018C                     	;# 
    96  018D                     	;# 
    97  018E                     	;# 
    98  0191                     	;# 
    99  0191                     	;# 
   100  0192                     	;# 
   101  0193                     	;# 
   102  0193                     	;# 
   103  0194                     	;# 
   104  0195                     	;# 
   105  0196                     	;# 
   106  0199                     	;# 
   107  019A                     	;# 
   108  019B                     	;# 
   109  019B                     	;# 
   110  019C                     	;# 
   111  019D                     	;# 
   112  019E                     	;# 
   113  019F                     	;# 
   114  020C                     	;# 
   115  020D                     	;# 
   116  0211                     	;# 
   117  0211                     	;# 
   118  0212                     	;# 
   119  0212                     	;# 
   120  0213                     	;# 
   121  0213                     	;# 
   122  0214                     	;# 
   123  0214                     	;# 
   124  0215                     	;# 
   125  0215                     	;# 
   126  0215                     	;# 
   127  0216                     	;# 
   128  0216                     	;# 
   129  0217                     	;# 
   130  0217                     	;# 
   131  0391                     	;# 
   132  0392                     	;# 
   133  0393                     	;# 
   134  0394                     	;# 
   135  0395                     	;# 
   136  0396                     	;# 
   137  039A                     	;# 
   138  039B                     	;# 
   139  0611                     	;# 
   140  0612                     	;# 
   141  0613                     	;# 
   142  0613                     	;# 
   143  0614                     	;# 
   144  0615                     	;# 
   145  0616                     	;# 
   146  0616                     	;# 
   147  0691                     	;# 
   148  0692                     	;# 
   149  0693                     	;# 
   150  0694                     	;# 
   151  0695                     	;# 
   152  0E8E                     	;# 
   153  0E8F                     	;# 
   154  0E90                     	;# 
   155  0E91                     	;# 
   156  0E92                     	;# 
   157  0E93                     	;# 
   158  0E94                     	;# 
   159  0E94                     	;# 
   160  0E95                     	;# 
   161  0E96                     	;# 
   162  0E97                     	;# 
   163  0E98                     	;# 
   164  0E99                     	;# 
   165  0E9A                     	;# 
   166  0E9B                     	;# 
   167  0E9C                     	;# 
   168  0E9D                     	;# 
   169  0E9E                     	;# 
   170  0E9F                     	;# 
   171  0FE4                     	;# 
   172  0FE5                     	;# 
   173  0FE6                     	;# 
   174  0FE7                     	;# 
   175  0FE8                     	;# 
   176  0FE9                     	;# 
   177  0FEA                     	;# 
   178  0FEB                     	;# 
   179  0FED                     	;# 
   180  0FEE                     	;# 
   181  0FEF                     	;# 
   182  0000                     	;# 
   183  0001                     	;# 
   184  0002                     	;# 
   185  0003                     	;# 
   186  0004                     	;# 
   187  0005                     	;# 
   188  0006                     	;# 
   189  0007                     	;# 
   190  0008                     	;# 
   191  0009                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000D                     	;# 
   196  000E                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  008C                     	;# 
   209  008D                     	;# 
   210  008E                     	;# 
   211  0091                     	;# 
   212  0092                     	;# 
   213  0095                     	;# 
   214  0096                     	;# 
   215  0097                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009A                     	;# 
   219  009B                     	;# 
   220  009B                     	;# 
   221  009C                     	;# 
   222  009D                     	;# 
   223  009E                     	;# 
   224  009F                     	;# 
   225  010C                     	;# 
   226  010D                     	;# 
   227  010E                     	;# 
   228  0111                     	;# 
   229  0112                     	;# 
   230  0113                     	;# 
   231  0114                     	;# 
   232  0115                     	;# 
   233  0116                     	;# 
   234  0117                     	;# 
   235  0118                     	;# 
   236  0119                     	;# 
   237  011D                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240  018E                     	;# 
   241  0191                     	;# 
   242  0191                     	;# 
   243  0192                     	;# 
   244  0193                     	;# 
   245  0193                     	;# 
   246  0194                     	;# 
   247  0195                     	;# 
   248  0196                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019C                     	;# 
   254  019D                     	;# 
   255  019E                     	;# 
   256  019F                     	;# 
   257  020C                     	;# 
   258  020D                     	;# 
   259  0211                     	;# 
   260  0211                     	;# 
   261  0212                     	;# 
   262  0212                     	;# 
   263  0213                     	;# 
   264  0213                     	;# 
   265  0214                     	;# 
   266  0214                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0391                     	;# 
   275  0392                     	;# 
   276  0393                     	;# 
   277  0394                     	;# 
   278  0395                     	;# 
   279  0396                     	;# 
   280  039A                     	;# 
   281  039B                     	;# 
   282  0611                     	;# 
   283  0612                     	;# 
   284  0613                     	;# 
   285  0613                     	;# 
   286  0614                     	;# 
   287  0615                     	;# 
   288  0616                     	;# 
   289  0616                     	;# 
   290  0691                     	;# 
   291  0692                     	;# 
   292  0693                     	;# 
   293  0694                     	;# 
   294  0695                     	;# 
   295  0E8E                     	;# 
   296  0E8F                     	;# 
   297  0E90                     	;# 
   298  0E91                     	;# 
   299  0E92                     	;# 
   300  0E93                     	;# 
   301  0E94                     	;# 
   302  0E94                     	;# 
   303  0E95                     	;# 
   304  0E96                     	;# 
   305  0E97                     	;# 
   306  0E98                     	;# 
   307  0E99                     	;# 
   308  0E9A                     	;# 
   309  0E9B                     	;# 
   310  0E9C                     	;# 
   311  0E9D                     	;# 
   312  0E9E                     	;# 
   313  0E9F                     	;# 
   314  0FE4                     	;# 
   315  0FE5                     	;# 
   316  0FE6                     	;# 
   317  0FE7                     	;# 
   318  0FE8                     	;# 
   319  0FE9                     	;# 
   320  0FEA                     	;# 
   321  0FEB                     	;# 
   322  0FED                     	;# 
   323  0FEE                     	;# 
   324  0FEF                     	;# 
   325  0000                     	;# 
   326  0001                     	;# 
   327  0002                     	;# 
   328  0003                     	;# 
   329  0004                     	;# 
   330  0005                     	;# 
   331  0006                     	;# 
   332  0007                     	;# 
   333  0008                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  0011                     	;# 
   341  0012                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  0111                     	;# 
   372  0112                     	;# 
   373  0113                     	;# 
   374  0114                     	;# 
   375  0115                     	;# 
   376  0116                     	;# 
   377  0117                     	;# 
   378  0118                     	;# 
   379  0119                     	;# 
   380  011D                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  018E                     	;# 
   384  0191                     	;# 
   385  0191                     	;# 
   386  0192                     	;# 
   387  0193                     	;# 
   388  0193                     	;# 
   389  0194                     	;# 
   390  0195                     	;# 
   391  0196                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019C                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019F                     	;# 
   400  020C                     	;# 
   401  020D                     	;# 
   402  0211                     	;# 
   403  0211                     	;# 
   404  0212                     	;# 
   405  0212                     	;# 
   406  0213                     	;# 
   407  0213                     	;# 
   408  0214                     	;# 
   409  0214                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0215                     	;# 
   413  0216                     	;# 
   414  0216                     	;# 
   415  0217                     	;# 
   416  0217                     	;# 
   417  0391                     	;# 
   418  0392                     	;# 
   419  0393                     	;# 
   420  0394                     	;# 
   421  0395                     	;# 
   422  0396                     	;# 
   423  039A                     	;# 
   424  039B                     	;# 
   425  0611                     	;# 
   426  0612                     	;# 
   427  0613                     	;# 
   428  0613                     	;# 
   429  0614                     	;# 
   430  0615                     	;# 
   431  0616                     	;# 
   432  0616                     	;# 
   433  0691                     	;# 
   434  0692                     	;# 
   435  0693                     	;# 
   436  0694                     	;# 
   437  0695                     	;# 
   438  0E8E                     	;# 
   439  0E8F                     	;# 
   440  0E90                     	;# 
   441  0E91                     	;# 
   442  0E92                     	;# 
   443  0E93                     	;# 
   444  0E94                     	;# 
   445  0E94                     	;# 
   446  0E95                     	;# 
   447  0E96                     	;# 
   448  0E97                     	;# 
   449  0E98                     	;# 
   450  0E99                     	;# 
   451  0E9A                     	;# 
   452  0E9B                     	;# 
   453  0E9C                     	;# 
   454  0E9D                     	;# 
   455  0E9E                     	;# 
   456  0E9F                     	;# 
   457  0FE4                     	;# 
   458  0FE5                     	;# 
   459  0FE6                     	;# 
   460  0FE7                     	;# 
   461  0FE8                     	;# 
   462  0FE9                     	;# 
   463  0FEA                     	;# 
   464  0FEB                     	;# 
   465  0FED                     	;# 
   466  0FEE                     	;# 
   467  0FEF                     	;# 
   468  0000                     	;# 
   469  0001                     	;# 
   470  0002                     	;# 
   471  0003                     	;# 
   472  0004                     	;# 
   473  0005                     	;# 
   474  0006                     	;# 
   475  0007                     	;# 
   476  0008                     	;# 
   477  0009                     	;# 
   478  000A                     	;# 
   479  000B                     	;# 
   480  000C                     	;# 
   481  000D                     	;# 
   482  000E                     	;# 
   483  0011                     	;# 
   484  0012                     	;# 
   485  0015                     	;# 
   486  0016                     	;# 
   487  0016                     	;# 
   488  0017                     	;# 
   489  0018                     	;# 
   490  0019                     	;# 
   491  001A                     	;# 
   492  001B                     	;# 
   493  001C                     	;# 
   494  008C                     	;# 
   495  008D                     	;# 
   496  008E                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0095                     	;# 
   500  0096                     	;# 
   501  0097                     	;# 
   502  0098                     	;# 
   503  0099                     	;# 
   504  009A                     	;# 
   505  009B                     	;# 
   506  009B                     	;# 
   507  009C                     	;# 
   508  009D                     	;# 
   509  009E                     	;# 
   510  009F                     	;# 
   511  010C                     	;# 
   512  010D                     	;# 
   513  010E                     	;# 
   514  0111                     	;# 
   515  0112                     	;# 
   516  0113                     	;# 
   517  0114                     	;# 
   518  0115                     	;# 
   519  0116                     	;# 
   520  0117                     	;# 
   521  0118                     	;# 
   522  0119                     	;# 
   523  011D                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0194                     	;# 
   533  0195                     	;# 
   534  0196                     	;# 
   535  0199                     	;# 
   536  019A                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020D                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0391                     	;# 
   561  0392                     	;# 
   562  0393                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  039A                     	;# 
   567  039B                     	;# 
   568  0611                     	;# 
   569  0612                     	;# 
   570  0613                     	;# 
   571  0613                     	;# 
   572  0614                     	;# 
   573  0615                     	;# 
   574  0616                     	;# 
   575  0616                     	;# 
   576  0691                     	;# 
   577  0692                     	;# 
   578  0693                     	;# 
   579  0694                     	;# 
   580  0695                     	;# 
   581  0E8E                     	;# 
   582  0E8F                     	;# 
   583  0E90                     	;# 
   584  0E91                     	;# 
   585  0E92                     	;# 
   586  0E93                     	;# 
   587  0E94                     	;# 
   588  0E94                     	;# 
   589  0E95                     	;# 
   590  0E96                     	;# 
   591  0E97                     	;# 
   592  0E98                     	;# 
   593  0E99                     	;# 
   594  0E9A                     	;# 
   595  0E9B                     	;# 
   596  0E9C                     	;# 
   597  0E9D                     	;# 
   598  0E9E                     	;# 
   599  0E9F                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0098                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019C                     	;# 
   683  019D                     	;# 
   684  019E                     	;# 
   685  019F                     	;# 
   686  020C                     	;# 
   687  020D                     	;# 
   688  0211                     	;# 
   689  0211                     	;# 
   690  0212                     	;# 
   691  0212                     	;# 
   692  0213                     	;# 
   693  0213                     	;# 
   694  0214                     	;# 
   695  0214                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0215                     	;# 
   699  0216                     	;# 
   700  0216                     	;# 
   701  0217                     	;# 
   702  0217                     	;# 
   703  0391                     	;# 
   704  0392                     	;# 
   705  0393                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  039A                     	;# 
   710  039B                     	;# 
   711  0611                     	;# 
   712  0612                     	;# 
   713  0613                     	;# 
   714  0613                     	;# 
   715  0614                     	;# 
   716  0615                     	;# 
   717  0616                     	;# 
   718  0616                     	;# 
   719  0691                     	;# 
   720  0692                     	;# 
   721  0693                     	;# 
   722  0694                     	;# 
   723  0695                     	;# 
   724  0E8E                     	;# 
   725  0E8F                     	;# 
   726  0E90                     	;# 
   727  0E91                     	;# 
   728  0E92                     	;# 
   729  0E93                     	;# 
   730  0E94                     	;# 
   731  0E94                     	;# 
   732  0E95                     	;# 
   733  0E96                     	;# 
   734  0E97                     	;# 
   735  0E98                     	;# 
   736  0E99                     	;# 
   737  0E9A                     	;# 
   738  0E9B                     	;# 
   739  0E9C                     	;# 
   740  0E9D                     	;# 
   741  0E9E                     	;# 
   742  0E9F                     	;# 
   743  0FE4                     	;# 
   744  0FE5                     	;# 
   745  0FE6                     	;# 
   746  0FE7                     	;# 
   747  0FE8                     	;# 
   748  0FE9                     	;# 
   749  0FEA                     	;# 
   750  0FEB                     	;# 
   751  0FED                     	;# 
   752  0FEE                     	;# 
   753  0FEF                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000D                     	;# 
   768  000E                     	;# 
   769  0011                     	;# 
   770  0012                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008D                     	;# 
   782  008E                     	;# 
   783  0091                     	;# 
   784  0092                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0098                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  010C                     	;# 
   798  010D                     	;# 
   799  010E                     	;# 
   800  0111                     	;# 
   801  0112                     	;# 
   802  0113                     	;# 
   803  0114                     	;# 
   804  0115                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  0118                     	;# 
   808  0119                     	;# 
   809  011D                     	;# 
   810  018C                     	;# 
   811  018D                     	;# 
   812  018E                     	;# 
   813  0191                     	;# 
   814  0191                     	;# 
   815  0192                     	;# 
   816  0193                     	;# 
   817  0193                     	;# 
   818  0194                     	;# 
   819  0195                     	;# 
   820  0196                     	;# 
   821  0199                     	;# 
   822  019A                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019C                     	;# 
   826  019D                     	;# 
   827  019E                     	;# 
   828  019F                     	;# 
   829  020C                     	;# 
   830  020D                     	;# 
   831  0211                     	;# 
   832  0211                     	;# 
   833  0212                     	;# 
   834  0212                     	;# 
   835  0213                     	;# 
   836  0213                     	;# 
   837  0214                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  0391                     	;# 
   847  0392                     	;# 
   848  0393                     	;# 
   849  0394                     	;# 
   850  0395                     	;# 
   851  0396                     	;# 
   852  039A                     	;# 
   853  039B                     	;# 
   854  0611                     	;# 
   855  0612                     	;# 
   856  0613                     	;# 
   857  0613                     	;# 
   858  0614                     	;# 
   859  0615                     	;# 
   860  0616                     	;# 
   861  0616                     	;# 
   862  0691                     	;# 
   863  0692                     	;# 
   864  0693                     	;# 
   865  0694                     	;# 
   866  0695                     	;# 
   867  0E8E                     	;# 
   868  0E8F                     	;# 
   869  0E90                     	;# 
   870  0E91                     	;# 
   871  0E92                     	;# 
   872  0E93                     	;# 
   873  0E94                     	;# 
   874  0E94                     	;# 
   875  0E95                     	;# 
   876  0E96                     	;# 
   877  0E97                     	;# 
   878  0E98                     	;# 
   879  0E99                     	;# 
   880  0E9A                     	;# 
   881  0E9B                     	;# 
   882  0E9C                     	;# 
   883  0E9D                     	;# 
   884  0E9E                     	;# 
   885  0E9F                     	;# 
   886  0FE4                     	;# 
   887  0FE5                     	;# 
   888  0FE6                     	;# 
   889  0FE7                     	;# 
   890  0FE8                     	;# 
   891  0FE9                     	;# 
   892  0FEA                     	;# 
   893  0FEB                     	;# 
   894  0FED                     	;# 
   895  0FEE                     	;# 
   896  0FEF                     	;# 
   897  0000                     	;# 
   898  0001                     	;# 
   899  0002                     	;# 
   900  0003                     	;# 
   901  0004                     	;# 
   902  0005                     	;# 
   903  0006                     	;# 
   904  0007                     	;# 
   905  0008                     	;# 
   906  0009                     	;# 
   907  000A                     	;# 
   908  000B                     	;# 
   909  000C                     	;# 
   910  000D                     	;# 
   911  000E                     	;# 
   912  0011                     	;# 
   913  0012                     	;# 
   914  0015                     	;# 
   915  0016                     	;# 
   916  0016                     	;# 
   917  0017                     	;# 
   918  0018                     	;# 
   919  0019                     	;# 
   920  001A                     	;# 
   921  001B                     	;# 
   922  001C                     	;# 
   923  008C                     	;# 
   924  008D                     	;# 
   925  008E                     	;# 
   926  0091                     	;# 
   927  0092                     	;# 
   928  0095                     	;# 
   929  0096                     	;# 
   930  0097                     	;# 
   931  0098                     	;# 
   932  0099                     	;# 
   933  009A                     	;# 
   934  009B                     	;# 
   935  009B                     	;# 
   936  009C                     	;# 
   937  009D                     	;# 
   938  009E                     	;# 
   939  009F                     	;# 
   940  010C                     	;# 
   941  010D                     	;# 
   942  010E                     	;# 
   943  0111                     	;# 
   944  0112                     	;# 
   945  0113                     	;# 
   946  0114                     	;# 
   947  0115                     	;# 
   948  0116                     	;# 
   949  0117                     	;# 
   950  0118                     	;# 
   951  0119                     	;# 
   952  011D                     	;# 
   953  018C                     	;# 
   954  018D                     	;# 
   955  018E                     	;# 
   956  0191                     	;# 
   957  0191                     	;# 
   958  0192                     	;# 
   959  0193                     	;# 
   960  0193                     	;# 
   961  0194                     	;# 
   962  0195                     	;# 
   963  0196                     	;# 
   964  0199                     	;# 
   965  019A                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019C                     	;# 
   969  019D                     	;# 
   970  019E                     	;# 
   971  019F                     	;# 
   972  020C                     	;# 
   973  020D                     	;# 
   974  0211                     	;# 
   975  0211                     	;# 
   976  0212                     	;# 
   977  0212                     	;# 
   978  0213                     	;# 
   979  0213                     	;# 
   980  0214                     	;# 
   981  0214                     	;# 
   982  0215                     	;# 
   983  0215                     	;# 
   984  0215                     	;# 
   985  0216                     	;# 
   986  0216                     	;# 
   987  0217                     	;# 
   988  0217                     	;# 
   989  0391                     	;# 
   990  0392                     	;# 
   991  0393                     	;# 
   992  0394                     	;# 
   993  0395                     	;# 
   994  0396                     	;# 
   995  039A                     	;# 
   996  039B                     	;# 
   997  0611                     	;# 
   998  0612                     	;# 
   999  0613                     	;# 
  1000  0613                     	;# 
  1001  0614                     	;# 
  1002  0615                     	;# 
  1003  0616                     	;# 
  1004  0616                     	;# 
  1005  0691                     	;# 
  1006  0692                     	;# 
  1007  0693                     	;# 
  1008  0694                     	;# 
  1009  0695                     	;# 
  1010  0E8E                     	;# 
  1011  0E8F                     	;# 
  1012  0E90                     	;# 
  1013  0E91                     	;# 
  1014  0E92                     	;# 
  1015  0E93                     	;# 
  1016  0E94                     	;# 
  1017  0E94                     	;# 
  1018  0E95                     	;# 
  1019  0E96                     	;# 
  1020  0E97                     	;# 
  1021  0E98                     	;# 
  1022  0E99                     	;# 
  1023  0E9A                     	;# 
  1024  0E9B                     	;# 
  1025  0E9C                     	;# 
  1026  0E9D                     	;# 
  1027  0E9E                     	;# 
  1028  0E9F                     	;# 
  1029  0FE4                     	;# 
  1030  0FE5                     	;# 
  1031  0FE6                     	;# 
  1032  0FE7                     	;# 
  1033  0FE8                     	;# 
  1034  0FE9                     	;# 
  1035  0FEA                     	;# 
  1036  0FEB                     	;# 
  1037  0FED                     	;# 
  1038  0FEE                     	;# 
  1039  0FEF                     	;# 
  1040  0000                     	;# 
  1041  0001                     	;# 
  1042  0002                     	;# 
  1043  0003                     	;# 
  1044  0004                     	;# 
  1045  0005                     	;# 
  1046  0006                     	;# 
  1047  0007                     	;# 
  1048  0008                     	;# 
  1049  0009                     	;# 
  1050  000A                     	;# 
  1051  000B                     	;# 
  1052  000C                     	;# 
  1053  000D                     	;# 
  1054  000E                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0015                     	;# 
  1058  0016                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001C                     	;# 
  1066  008C                     	;# 
  1067  008D                     	;# 
  1068  008E                     	;# 
  1069  0091                     	;# 
  1070  0092                     	;# 
  1071  0095                     	;# 
  1072  0096                     	;# 
  1073  0097                     	;# 
  1074  0098                     	;# 
  1075  0099                     	;# 
  1076  009A                     	;# 
  1077  009B                     	;# 
  1078  009B                     	;# 
  1079  009C                     	;# 
  1080  009D                     	;# 
  1081  009E                     	;# 
  1082  009F                     	;# 
  1083  010C                     	;# 
  1084  010D                     	;# 
  1085  010E                     	;# 
  1086  0111                     	;# 
  1087  0112                     	;# 
  1088  0113                     	;# 
  1089  0114                     	;# 
  1090  0115                     	;# 
  1091  0116                     	;# 
  1092  0117                     	;# 
  1093  0118                     	;# 
  1094  0119                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020C                     	;# 
  1116  020D                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0391                     	;# 
  1133  0392                     	;# 
  1134  0393                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  039A                     	;# 
  1139  039B                     	;# 
  1140  0611                     	;# 
  1141  0612                     	;# 
  1142  0613                     	;# 
  1143  0613                     	;# 
  1144  0614                     	;# 
  1145  0615                     	;# 
  1146  0616                     	;# 
  1147  0616                     	;# 
  1148  0691                     	;# 
  1149  0692                     	;# 
  1150  0693                     	;# 
  1151  0694                     	;# 
  1152  0695                     	;# 
  1153  0E8E                     	;# 
  1154  0E8F                     	;# 
  1155  0E90                     	;# 
  1156  0E91                     	;# 
  1157  0E92                     	;# 
  1158  0E93                     	;# 
  1159  0E94                     	;# 
  1160  0E94                     	;# 
  1161  0E95                     	;# 
  1162  0E96                     	;# 
  1163  0E97                     	;# 
  1164  0E98                     	;# 
  1165  0E99                     	;# 
  1166  0E9A                     	;# 
  1167  0E9B                     	;# 
  1168  0E9C                     	;# 
  1169  0E9D                     	;# 
  1170  0E9E                     	;# 
  1171  0E9F                     	;# 
  1172  0FE4                     	;# 
  1173  0FE5                     	;# 
  1174  0FE6                     	;# 
  1175  0FE7                     	;# 
  1176  0FE8                     	;# 
  1177  0FE9                     	;# 
  1178  0FEA                     	;# 
  1179  0FEB                     	;# 
  1180  0FED                     	;# 
  1181  0FEE                     	;# 
  1182  0FEF                     	;_WorkQue
  1183                           
  1184                           	psect	idataBANK2
  1185  07DD                     __pidataBANK2:	
  1186                           
  1187                           ;initializer for _HashTime
  1188  07DD  34D0               	retlw	208
  1189                           
  1190                           ;initializer for _Status
  1191  07DE  3449               	retlw	73
  1192  07DF  3400               	retlw	0
  1193  07E0  3400               	retlw	0
  1194  07E1  3400               	retlw	0
  1195  07E2  3400               	retlw	0
  1196  07E3  3400               	retlw	0
  1197  07E4  3400               	retlw	0
  1198  07E5  3400               	retlw	0
  1199  07E6  3400               	retlw	0
  1200  07E7  3400               	retlw	0
  1201  07E8  3400               	retlw	0
  1202  07E9  3440               	retlw	64
  1203  07EA  3400               	retlw	0
  1204                           
  1205                           ;initializer for _ClockCfg
  1206  07EB  3407               	retlw	7
  1207  07EC  3400               	retlw	0
  1208  07ED  3403               	retlw	3
  1209  07EE  3404               	retlw	4
  1210  07EF  3472               	retlw	114
  1211  07F0  3401               	retlw	1
  1212  07F1  3400               	retlw	0
  1213  07F2  3400               	retlw	0
  1214                           
  1215                           ;initializer for _Cfg
  1216  07F3  3400               	retlw	0
  1217  07F4  3401               	retlw	1
  1218  07F5  343C               	retlw	60
  1219  07F6  3450               	retlw	80
  1220  07F7  34E6               	retlw	230
  1221  07F8  3400               	retlw	0
  1222                           
  1223                           	psect	idataBANK3
  1224  08B2                     __pidataBANK3:	
  1225                           
  1226                           ;initializer for AsicPreCalc@F3348
  1227  08B2  3498               	retlw	152
  1228  08B3  342F               	retlw	47
  1229  08B4  348A               	retlw	138
  1230  08B5  3442               	retlw	66
  1231  08B6  3491               	retlw	145
  1232  08B7  3444               	retlw	68
  1233  08B8  3437               	retlw	55
  1234  08B9  3471               	retlw	113
  1235  08BA  34CF               	retlw	207
  1236  08BB  34FB               	retlw	251
  1237  08BC  34C0               	retlw	192
  1238  08BD  34B5               	retlw	181
  1239                           
  1240                           	psect	idataBANK6
  1241  07BD                     __pidataBANK6:	
  1242                           
  1243                           ;initializer for _BankRanges
  1244  07BD  3400               	retlw	0
  1245  07BE  3400               	retlw	0
  1246  07BF  3400               	retlw	0
  1247  07C0  3400               	retlw	0
  1248  07C1  3400               	retlw	0
  1249  07C2  3400               	retlw	0
  1250  07C3  3400               	retlw	0
  1251  07C4  3440               	retlw	64
  1252  07C5  34AA               	retlw	170
  1253  07C6  34AA               	retlw	170
  1254  07C7  34AA               	retlw	170
  1255  07C8  342A               	retlw	42
  1256  07C9  3400               	retlw	0
  1257  07CA  3400               	retlw	0
  1258  07CB  3400               	retlw	0
  1259  07CC  3420               	retlw	32
  1260  07CD  3499               	retlw	153
  1261  07CE  3499               	retlw	153
  1262  07CF  3499               	retlw	153
  1263  07D0  3419               	retlw	25
  1264  07D1  3455               	retlw	85
  1265  07D2  3455               	retlw	85
  1266  07D3  3455               	retlw	85
  1267  07D4  3415               	retlw	21
  1268  07D5  3492               	retlw	146
  1269  07D6  3424               	retlw	36
  1270  07D7  3449               	retlw	73
  1271  07D8  3412               	retlw	18
  1272  07D9  3400               	retlw	0
  1273  07DA  3400               	retlw	0
  1274  07DB  3400               	retlw	0
  1275  07DC  3410               	retlw	16
  1276                           
  1277                           	psect	strings
  1278  0800                     __pstrings:	
  1279  0800                     __stringtab:	
  1280  0800  3400               	retlw	0
  1281  0801                     __end_of__stringtab:	
  1282  0801                     _USB_SD_Ptr:	
  1283  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1284  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1285  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1286  0804                     __end_of_USB_SD_Ptr:	
  1287  0804                     _USB_CD_Ptr:	
  1288  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1289  0805                     __end_of_USB_CD_Ptr:	
  1290  0805                     _sd001:	
  1291  0805  3434               	retlw	52
  1292  0806  3403               	retlw	3
  1293  0807  344B               	retlw	75
  1294  0808  3400               	retlw	0
  1295  0809  346C               	retlw	108
  1296  080A  3400               	retlw	0
  1297  080B  346F               	retlw	111
  1298  080C  3400               	retlw	0
  1299  080D  346E               	retlw	110
  1300  080E  3400               	retlw	0
  1301  080F  3464               	retlw	100
  1302  0810  3400               	retlw	0
  1303  0811  3469               	retlw	105
  1304  0812  3400               	retlw	0
  1305  0813  346B               	retlw	107
  1306  0814  3400               	retlw	0
  1307  0815  3465               	retlw	101
  1308  0816  3400               	retlw	0
  1309  0817  3420               	retlw	32
  1310  0818  3400               	retlw	0
  1311  0819  3450               	retlw	80
  1312  081A  3400               	retlw	0
  1313  081B  3472               	retlw	114
  1314  081C  3400               	retlw	0
  1315  081D  346F               	retlw	111
  1316  081E  3400               	retlw	0
  1317  081F  346A               	retlw	106
  1318  0820  3400               	retlw	0
  1319  0821  3465               	retlw	101
  1320  0822  3400               	retlw	0
  1321  0823  3463               	retlw	99
  1322  0824  3400               	retlw	0
  1323  0825  3474               	retlw	116
  1324  0826  3400               	retlw	0
  1325  0827  3400               	retlw	0
  1326  0828  3400               	retlw	0
  1327  0829  3400               	retlw	0
  1328  082A  3400               	retlw	0
  1329  082B  3400               	retlw	0
  1330  082C  3400               	retlw	0
  1331  082D  3400               	retlw	0
  1332  082E  3400               	retlw	0
  1333  082F  3400               	retlw	0
  1334  0830  3400               	retlw	0
  1335  0831  3400               	retlw	0
  1336  0832  3400               	retlw	0
  1337  0833  3400               	retlw	0
  1338  0834  3400               	retlw	0
  1339  0835  3400               	retlw	0
  1340  0836  3400               	retlw	0
  1341  0837  3400               	retlw	0
  1342  0838  3400               	retlw	0
  1343  0839                     __end_of_sd001:	
  1344  0839                     _sd002:	
  1345  0839  3434               	retlw	52
  1346  083A  3403               	retlw	3
  1347  083B  344B               	retlw	75
  1348  083C  3400               	retlw	0
  1349  083D  3431               	retlw	49
  1350  083E  3400               	retlw	0
  1351  083F  3436               	retlw	54
  1352  0840  3400               	retlw	0
  1353  0841  3400               	retlw	0
  1354  0842  3400               	retlw	0
  1355  0843  3400               	retlw	0
  1356  0844  3400               	retlw	0
  1357  0845  3400               	retlw	0
  1358  0846  3400               	retlw	0
  1359  0847  3400               	retlw	0
  1360  0848  3400               	retlw	0
  1361  0849  3400               	retlw	0
  1362  084A  3400               	retlw	0
  1363  084B  3400               	retlw	0
  1364  084C  3400               	retlw	0
  1365  084D  3400               	retlw	0
  1366  084E  3400               	retlw	0
  1367  084F  3400               	retlw	0
  1368  0850  3400               	retlw	0
  1369  0851  3400               	retlw	0
  1370  0852  3400               	retlw	0
  1371  0853  3400               	retlw	0
  1372  0854  3400               	retlw	0
  1373  0855  3400               	retlw	0
  1374  0856  3400               	retlw	0
  1375  0857  3400               	retlw	0
  1376  0858  3400               	retlw	0
  1377  0859  3400               	retlw	0
  1378  085A  3400               	retlw	0
  1379  085B  3400               	retlw	0
  1380  085C  3400               	retlw	0
  1381  085D  3400               	retlw	0
  1382  085E  3400               	retlw	0
  1383  085F  3400               	retlw	0
  1384  0860  3400               	retlw	0
  1385  0861  3400               	retlw	0
  1386  0862  3400               	retlw	0
  1387  0863  3400               	retlw	0
  1388  0864  3400               	retlw	0
  1389  0865  3400               	retlw	0
  1390  0866  3400               	retlw	0
  1391  0867  3400               	retlw	0
  1392  0868  3400               	retlw	0
  1393  0869  3400               	retlw	0
  1394  086A  3400               	retlw	0
  1395  086B  3400               	retlw	0
  1396  086C  3400               	retlw	0
  1397  086D                     __end_of_sd002:	
  1398  086D                     _configDescriptor1:	
  1399  086D  3409               	retlw	9
  1400  086E  3402               	retlw	2
  1401  086F  3420               	retlw	32
  1402  0870  3400               	retlw	0
  1403  0871  3401               	retlw	1
  1404  0872  3401               	retlw	1
  1405  0873  3400               	retlw	0
  1406  0874  34C0               	retlw	192
  1407  0875  3432               	retlw	50
  1408  0876  3409               	retlw	9
  1409  0877  3404               	retlw	4
  1410  0878  3400               	retlw	0
  1411  0879  3400               	retlw	0
  1412  087A  3402               	retlw	2
  1413  087B  34FF               	retlw	255
  1414  087C  34FF               	retlw	255
  1415  087D  34FF               	retlw	255
  1416  087E  3400               	retlw	0
  1417  087F  3407               	retlw	7
  1418  0880  3405               	retlw	5
  1419  0881  3401               	retlw	1
  1420  0882  3402               	retlw	2
  1421  0883  3440               	retlw	64
  1422  0884  3400               	retlw	0
  1423  0885  3401               	retlw	1
  1424  0886  3407               	retlw	7
  1425  0887  3405               	retlw	5
  1426  0888  3481               	retlw	129
  1427  0889  3402               	retlw	2
  1428  088A  3440               	retlw	64
  1429  088B  3400               	retlw	0
  1430  088C  3401               	retlw	1
  1431  088D                     __end_of_configDescriptor1:	
  1432  088D                     _device_dsc:	
  1433  088D  3412               	retlw	18
  1434  088E  3401               	retlw	1
  1435  088F  3400               	retlw	0
  1436  0890  3402               	retlw	2
  1437  0891  3400               	retlw	0
  1438  0892  3400               	retlw	0
  1439  0893  3400               	retlw	0
  1440  0894  3408               	retlw	8
  1441  0895  34D8               	retlw	216
  1442  0896  3404               	retlw	4
  1443  0897  340A               	retlw	10
  1444  0898  34F6               	retlw	246
  1445  0899  3400               	retlw	0
  1446  089A  3400               	retlw	0
  1447  089B  3401               	retlw	1
  1448  089C  3402               	retlw	2
  1449  089D  3400               	retlw	0
  1450  089E  3401               	retlw	1
  1451  089F                     __end_of_device_dsc:	
  1452  089F                     _ID:	
  1453  089F  3410               	retlw	16
  1454  08A0  344B               	retlw	75
  1455  08A1  3431               	retlw	49
  1456  08A2  3436               	retlw	54
  1457  08A3  3400               	retlw	0
  1458  08A4  3400               	retlw	0
  1459  08A5  3400               	retlw	0
  1460  08A6  3400               	retlw	0
  1461  08A7  34EF               	retlw	239
  1462  08A8  34BE               	retlw	190
  1463  08A9  34AD               	retlw	173
  1464  08AA  34DE               	retlw	222
  1465  08AB                     __end_of_ID:	
  1466  08AB                     _sd000:	
  1467  08AB  3404               	retlw	4
  1468  08AC  3403               	retlw	3
  1469  08AD  3409               	retlw	9
  1470  08AE  3404               	retlw	4
  1471  08AF                     __end_of_sd000:	
  1472                           
  1473                           	psect	nvBANK2
  1474  016A                     __pnvBANK2:	
  1475  016A                     _BankSize:	
  1476  016A                     	ds	1
  1477  000B                     _INTCONbits	set	11
  1478  0012                     _PIR2bits	set	18
  1479  001B                     _PR2	set	27
  1480  001C                     _T2CONbits	set	28
  1481  0015                     _TMR0	set	21
  1482  005F                     _GIE	set	95
  1483  008D                     _RCIF	set	141
  1484  005A                     _TMR0IF	set	90
  1485  0089                     _TMR2IF	set	137
  1486  00E2                     _TMR2ON	set	226
  1487  009D                     _ADCON0bits	set	157
  1488  009E                     _ADCON1bits	set	158
  1489  009F                     _ADCON2bits	set	159
  1490  009C                     _ADRESH	set	156
  1491  0095                     _OPTION_REGbits	set	149
  1492  0099                     _OSCCON	set	153
  1493  0098                     _OSCTUNE	set	152
  1494  0092                     _PIE2bits	set	146
  1495  008C                     _TRISAbits	set	140
  1496  008E                     _TRISCbits	set	142
  1497  04AD                     _TMR0CS	set	1197
  1498  010C                     _LATAbits	set	268
  1499  010E                     _LATC	set	270
  1500  018C                     _ANSELA	set	396
  1501  018D                     _ANSELB	set	397
  1502  018D                     _ANSELBbits	set	397
  1503  018E                     _ANSELC	set	398
  1504  019F                     _BAUDCONbits	set	415
  1505  0199                     _RCREG	set	409
  1506  019D                     _RCSTAbits	set	413
  1507  019E                     _TXSTAbits	set	414
  1508  039B                     _ACTCON	set	923
  1509  0396                     _IOCBF	set	918
  1510  0394                     _IOCBPbits	set	916
  1511  0613                     _PWM1CON	set	1555
  1512  0612                     _PWM1DCH	set	1554
  1513  0611                     _PWM1DCL	set	1553
  1514  309E                     _PWM1OE	set	12446
  1515  0E96                     _UADDR	set	3734
  1516  0E91                     _UCFG	set	3729
  1517  0E8E                     _UCON	set	3726
  1518  0E8E                     _UCONbits	set	3726
  1519  0E97                     _UEIE	set	3735
  1520  0E93                     _UEIR	set	3731
  1521  0E98                     _UEP0bits	set	3736
  1522  0E92                     _UIE	set	3730
  1523  0E92                     _UIEbits	set	3730
  1524  0E90                     _UIR	set	3728
  1525  0E90                     _UIRbits	set	3728
  1526  0E8F                     _USTAT	set	3727
  1527  0E98                     _UEP0	set	3736
  1528  0E99                     _UEP1	set	3737
  1529                           
  1530                           ; #config settings
  1531  0000                     
  1532                           	psect	bssBANK0
  1533  006A                     __pbssBANK0:	
  1534  006A                     _pBDTEntryIn:	
  1535  006A                     	ds	2
  1536  006C                     _USBDeferStatusStagePacket:	
  1537  006C                     	ds	1
  1538  006D                     _controlTransferState:	
  1539  006D                     	ds	1
  1540  006E                     _pBDTEntryEP0OutCurrent:	
  1541  006E                     	ds	1
  1542  006F                     _pBDTEntryEP0OutNext:	
  1543  006F                     	ds	1
  1544                           
  1545                           	psect	bssBANK1
  1546  00EA                     __pbssBANK1:	
  1547  00EA                     _USBDeviceState:	
  1548  00EA                     	ds	1
  1549  00EB                     _WorkNow:	
  1550  00EB                     	ds	1
  1551  00EC                     _shortPacketStatus:	
  1552  00EC                     	ds	1
  1553  00ED                     _USBActiveConfiguration:	
  1554  00ED                     	ds	1
  1555  00EE                     _USBAlternateInterface:	
  1556  00EE                     	ds	1
  1557  00EF                     _USTATcopy:	
  1558  00EF                     	ds	1
  1559                           
  1560                           	psect	bssBANK2
  1561  0120                     __pbssBANK2:	
  1562  0120                     _outPipes:	
  1563  0120                     	ds	6
  1564  0126                     _ep_data_in:	
  1565  0126                     	ds	2
  1566  0128                     _ep_data_out:	
  1567  0128                     	ds	2
  1568  012A                     _pBDTEntryOut:	
  1569  012A                     	ds	2
  1570  012C                     _send32_data:	
  1571  012C                     	ds	2
  1572  012E                     _BothEP0OutUOWNsSet:	
  1573  012E                     	ds	1
  1574  012F                     _RemoteWakeup:	
  1575  012F                     	ds	1
  1576  0130                     _ResultQC:	
  1577  0130                     	ds	1
  1578  0131                     _SlaveAddress:	
  1579  0131                     	ds	1
  1580  0132                     _SlowTick:	
  1581  0132                     	ds	1
  1582  0133                     _USBDeferINDataStagePackets:	
  1583  0133                     	ds	1
  1584  0134                     _USBDeferOUTDataStagePackets:	
  1585  0134                     	ds	1
  1586  0135                     _USBGenericInHandle:	
  1587  0135                     	ds	1
  1588  0136                     _USBGenericOutHandle:	
  1589  0136                     	ds	1
  1590  0137                     _USBStatusStageEnabledFlag1:	
  1591  0137                     	ds	1
  1592  0138                     _USBStatusStageEnabledFlag2:	
  1593  0138                     	ds	1
  1594  0139                     _USBStatusStageTimeoutCounter:	
  1595  0139                     	ds	1
  1596  013A                     _WQI:	
  1597  013A                     	ds	1
  1598  013B                     _WQX:	
  1599  013B                     	ds	1
  1600  013C                     _endpoint_number:	
  1601  013C                     	ds	1
  1602  013D                     _last_bit0:	
  1603  013D                     	ds	1
  1604  013E                     _last_bit1:	
  1605  013E                     	ds	1
  1606  013F                     _pDst:	
  1607  013F                     	ds	1
  1608  0140                     _send32_count:	
  1609  0140                     	ds	1
  1610  0141                     _ResultQue:	
  1611  0141                     	ds	8
  1612  0149                     _inPipes:	
  1613  0149                     	ds	5
  1614                           
  1615                           	psect	dataBANK2
  1616  014E                     __pdataBANK2:	
  1617  014E                     _HashTime:	
  1618  014E                     	ds	1
  1619  014F                     _Status:	
  1620  014F                     	ds	13
  1621  015C                     _ClockCfg:	
  1622  015C                     	ds	8
  1623  0164                     _Cfg:	
  1624  0164                     	ds	6
  1625                           
  1626                           	psect	bssBANK3
  1627  01A0                     __pbssBANK3:	
  1628  01A0                     _NonceRanges:	
  1629  01A0                     	ds	32
  1630  01C0                     _PrecalcHashes:	
  1631  01C0                     	ds	24
  1632                           
  1633                           	psect	dataBANK3
  1634  01D8                     __pdataBANK3:	
  1635  01D8                     AsicPreCalc@F3348:	
  1636  01D8                     	ds	12
  1637                           
  1638                           	psect	dataBANK6
  1639  0320                     __pdataBANK6:	
  1640  0320                     _BankRanges:	
  1641  0320                     	ds	32
  1642                           
  1643                           	psect	clrtext
  1644  1778                     clear_ram0:	
  1645                           ;	Called with FSR0 containing the base address, and
  1646                           ;	btemp/btemp+1 has the size to clear
  1647                           
  1648  1778  0064               	clrwdt	;clear the watchdog before getting into this loop
  1649  1779                     clrloop0:	
  1650  1779  0180               	clrf	0	;clear RAM location pointed to by FSR
  1651  177A  3101               	addfsr 0,1
  1652  177B  3001               	movlw	1
  1653  177C  02FE               	subwf	126,f
  1654  177D  3000               	movlw	0
  1655  177E  3BFF               	subwfb	127,f
  1656  177F  087F               	movf	127,w
  1657  1780  047E               	iorwf	126,w
  1658  1781  1903               	btfsc	3,2
  1659  1782  3400               	retlw	0	;all done for this memory range, return
  1660  1783  2F79               	goto	clrloop0	;have we reached the end yet?
  1661                           
  1662                           	psect	inittext
  1663  176C                     init_ram:	
  1664  176C  00FE               	movwf	126
  1665  176D                     initloop:	
  1666  176D  0012               	moviw fsr0++
  1667  176E  001E               	movwi fsr1++
  1668  176F  3001               	movlw	1
  1669  1770  02FE               	subwf	126,f
  1670  1771  3000               	movlw	0
  1671  1772  3BFF               	subwfb	127,f
  1672  1773  087F               	movf	127,w
  1673  1774  047E               	iorwf	126,w
  1674  1775  1903               	btfsc	3,2
  1675  1776  3400               	retlw	0
  1676  1777  2F6D               	goto	initloop
  1677                           
  1678                           	psect	cstackBANK1
  1679  00A0                     __pcstackBANK1:	
  1680  00A0                     ??_AsicPreCalc:	
  1681  00A0                     USBStdFeatureReqHandler@pUEP:	
  1682                           ; 0 bytes @ 0x0
  1683                           
  1684                           
  1685                           ; 2 bytes @ 0x0
  1686  00A0                     	ds	2
  1687  00A2                     USBStdFeatureReqHandler@current_ep_data:	
  1688                           
  1689                           ; 1 bytes @ 0x2
  1690  00A2                     	ds	1
  1691  00A3                     USBStdFeatureReqHandler@p:	
  1692                           
  1693                           ; 1 bytes @ 0x3
  1694  00A3                     	ds	1
  1695  00A4                     ??_USBCtrlEPService:	
  1696                           
  1697                           ; 0 bytes @ 0x4
  1698  00A4                     	ds	2
  1699  00A6                     ??_USBDeviceTasks:	
  1700                           
  1701                           ; 0 bytes @ 0x6
  1702  00A6                     	ds	1
  1703  00A7                     USBDeviceTasks@i:	
  1704                           
  1705                           ; 1 bytes @ 0x7
  1706  00A7                     	ds	1
  1707  00A8                     AsicPreCalc@K:	
  1708                           
  1709                           ; 12 bytes @ 0x8
  1710  00A8                     	ds	12
  1711  00B4                     AsicPreCalc@z:	
  1712                           
  1713                           ; 4 bytes @ 0x14
  1714  00B4                     	ds	4
  1715  00B8                     AsicPreCalc@m:	
  1716                           
  1717                           ; 32 bytes @ 0x18
  1718  00B8                     	ds	32
  1719  00D8                     AsicPreCalc@y:	
  1720                           
  1721                           ; 4 bytes @ 0x38
  1722  00D8                     	ds	4
  1723  00DC                     AsicPreCalc@x:	
  1724                           
  1725                           ; 4 bytes @ 0x3C
  1726  00DC                     	ds	4
  1727  00E0                     AsicPreCalc@n:	
  1728                           
  1729                           ; 1 bytes @ 0x40
  1730  00E0                     	ds	1
  1731  00E1                     ??_ProcessCmd:	
  1732                           
  1733                           ; 0 bytes @ 0x41
  1734  00E1                     	ds	2
  1735  00E3                     _ProcessCmd$2047:	
  1736                           
  1737                           ; 2 bytes @ 0x43
  1738  00E3                     	ds	2
  1739  00E5                     ProcessCmd@cmd:	
  1740                           
  1741                           ; 1 bytes @ 0x45
  1742  00E5                     	ds	1
  1743  00E6                     _ProcessIO$2365:	
  1744                           
  1745                           ; 2 bytes @ 0x46
  1746  00E6                     	ds	2
  1747  00E8                     _ProcessIO$2399:	
  1748                           
  1749                           ; 2 bytes @ 0x48
  1750  00E8                     	ds	2
  1751                           
  1752                           	psect	cstackCOMMON
  1753  0070                     __pcstackCOMMON:	
  1754  0070                     ?_USBWakeFromSuspend:	
  1755  0070                     ?_USBSuspend:	
  1756                           ; 0 bytes @ 0x0
  1757                           
  1758  0070                     ?_USBCtrlEPAllowStatusStage:	
  1759                           ; 0 bytes @ 0x0
  1760                           
  1761  0070                     ?_USBStallHandler:	
  1762                           ; 0 bytes @ 0x0
  1763                           
  1764  0070                     ?_USBCtrlEPService:	
  1765                           ; 0 bytes @ 0x0
  1766                           
  1767  0070                     ?_USBCtrlTrfTxService:	
  1768                           ; 0 bytes @ 0x0
  1769                           
  1770  0070                     ?_USBCtrlTrfSetupHandler:	
  1771                           ; 0 bytes @ 0x0
  1772                           
  1773  0070                     ?_USBCtrlTrfOutHandler:	
  1774                           ; 0 bytes @ 0x0
  1775                           
  1776  0070                     ?_USBCtrlTrfInHandler:	
  1777                           ; 0 bytes @ 0x0
  1778                           
  1779  0070                     ?_USBCheckStdRequest:	
  1780                           ; 0 bytes @ 0x0
  1781                           
  1782  0070                     ?_USBStdFeatureReqHandler:	
  1783                           ; 0 bytes @ 0x0
  1784                           
  1785  0070                     ?_Send32:	
  1786                           ; 0 bytes @ 0x0
  1787                           
  1788  0070                     ?_AsicPushWork:	
  1789                           ; 0 bytes @ 0x0
  1790                           
  1791  0070                     ?_InitializeSystem:	
  1792                           ; 0 bytes @ 0x0
  1793                           
  1794  0070                     ?_ProcessIO:	
  1795                           ; 0 bytes @ 0x0
  1796                           
  1797  0070                     ?_UserInit:	
  1798                           ; 0 bytes @ 0x0
  1799                           
  1800  0070                     ?_USBDeviceInit:	
  1801                           ; 0 bytes @ 0x0
  1802                           
  1803  0070                     ?_USBDeviceTasks:	
  1804                           ; 0 bytes @ 0x0
  1805                           
  1806  0070                     ?_USBCtrlEPAllowDataStage:	
  1807                           ; 0 bytes @ 0x0
  1808                           
  1809  0070                     ?_USBCtrlEPServiceComplete:	
  1810                           ; 0 bytes @ 0x0
  1811                           
  1812  0070                     ?_USBCtrlTrfRxService:	
  1813                           ; 0 bytes @ 0x0
  1814                           
  1815  0070                     ?_USBStdSetCfgHandler:	
  1816                           ; 0 bytes @ 0x0
  1817                           
  1818  0070                     ?_USBStdGetDscHandler:	
  1819                           ; 0 bytes @ 0x0
  1820                           
  1821  0070                     ?_USBStdGetStatusHandler:	
  1822                           ; 0 bytes @ 0x0
  1823                           
  1824  0070                     ?_USBCheckVendorRequest:	
  1825                           ; 0 bytes @ 0x0
  1826                           
  1827  0070                     ?_ProcessCmd:	
  1828                           ; 0 bytes @ 0x0
  1829                           
  1830  0070                     ?_DetectAsics:	
  1831                           ; 0 bytes @ 0x0
  1832                           
  1833  0070                     ?_WorkTick:	
  1834                           ; 0 bytes @ 0x0
  1835                           
  1836  0070                     ?_ResultRx:	
  1837                           ; 0 bytes @ 0x0
  1838                           
  1839  0070                     ?_InitFAN:	
  1840                           ; 0 bytes @ 0x0
  1841                           
  1842  0070                     ?_InitTempSensor:	
  1843                           ; 0 bytes @ 0x0
  1844                           
  1845  0070                     ?_InitWorkTick:	
  1846                           ; 0 bytes @ 0x0
  1847                           
  1848  0070                     ?_InitResultRx:	
  1849                           ; 0 bytes @ 0x0
  1850                           
  1851  0070                     ?_ISRCode:	
  1852                           ; 0 bytes @ 0x0
  1853                           
  1854  0070                     ?_USBCBSuspend:	
  1855                           ; 0 bytes @ 0x0
  1856                           
  1857  0070                     ?_USBCBWakeFromSuspend:	
  1858                           ; 0 bytes @ 0x0
  1859                           
  1860  0070                     ?_USBCB_SOF_Handler:	
  1861                           ; 0 bytes @ 0x0
  1862                           
  1863  0070                     ?_USBCBErrorHandler:	
  1864                           ; 0 bytes @ 0x0
  1865                           
  1866  0070                     ?_USBCBCheckOtherReq:	
  1867                           ; 0 bytes @ 0x0
  1868                           
  1869  0070                     ?_USBCBStdSetDscHandler:	
  1870                           ; 0 bytes @ 0x0
  1871                           
  1872  0070                     ?_USBCBInitEP:	
  1873                           ; 0 bytes @ 0x0
  1874                           
  1875  0070                     ?i1___bmul:	
  1876                           ; 0 bytes @ 0x0
  1877                           
  1878  0070                     ?_main:	
  1879                           ; 1 bytes @ 0x0
  1880                           
  1881  0070                     ?i1___wmul:	
  1882                           ; 2 bytes @ 0x0
  1883                           
  1884  0070                     i1___bmul@multiplicand:	
  1885                           ; 2 bytes @ 0x0
  1886                           
  1887  0070                     i1___wmul@multiplier:	
  1888                           ; 1 bytes @ 0x0
  1889                           
  1890                           
  1891                           ; 2 bytes @ 0x0
  1892  0070                     	ds	1
  1893  0071                     ??i1___bmul:	
  1894  0071                     i1___bmul@multiplier:	
  1895                           ; 0 bytes @ 0x1
  1896                           
  1897                           
  1898                           ; 1 bytes @ 0x1
  1899  0071                     	ds	1
  1900  0072                     i1___bmul@product:	
  1901  0072                     i1___wmul@multiplicand:	
  1902                           ; 1 bytes @ 0x2
  1903                           
  1904                           
  1905                           ; 2 bytes @ 0x2
  1906  0072                     	ds	2
  1907  0074                     ??i1___wmul:	
  1908  0074                     i1___wmul@product:	
  1909                           ; 0 bytes @ 0x4
  1910                           
  1911                           
  1912                           ; 2 bytes @ 0x4
  1913  0074                     	ds	2
  1914  0076                     ?i1_SendCmdReply:	
  1915  0076                     i1SendCmdReply@cmd:	
  1916                           ; 0 bytes @ 0x6
  1917                           
  1918                           
  1919                           ; 2 bytes @ 0x6
  1920  0076                     	ds	2
  1921  0078                     i1SendCmdReply@data:	
  1922                           
  1923                           ; 2 bytes @ 0x8
  1924  0078                     	ds	2
  1925  007A                     i1SendCmdReply@count:	
  1926                           
  1927                           ; 1 bytes @ 0xA
  1928  007A                     	ds	1
  1929  007B                     i1SendCmdReply@n:	
  1930                           
  1931                           ; 1 bytes @ 0xB
  1932  007B                     	ds	1
  1933  007C                     ??_ResultRx:	
  1934  007C                     ResultRx@TimeOut:	
  1935                           ; 0 bytes @ 0xC
  1936                           
  1937                           
  1938                           ; 1 bytes @ 0xC
  1939  007C                     	ds	1
  1940  007D                     ??_ISRCode:	
  1941                           
  1942                           ; 0 bytes @ 0xD
  1943  007D                     	ds	1
  1944                           
  1945                           	psect	cstackBANK0
  1946  0050                     __pcstackBANK0:	
  1947  0050                     ??i1_SendCmdReply:	
  1948                           
  1949                           ; 0 bytes @ 0x0
  1950  0050                     	ds	6
  1951  0056                     ??_USBCtrlEPAllowStatusStage:	
  1952  0056                     ??_USBStallHandler:	
  1953                           ; 0 bytes @ 0x6
  1954                           
  1955  0056                     ?_USBConfigureEndpoint:	
  1956                           ; 0 bytes @ 0x6
  1957                           
  1958  0056                     ??_USBCtrlTrfTxService:	
  1959                           ; 0 bytes @ 0x6
  1960                           
  1961  0056                     ??_Send32:	
  1962                           ; 0 bytes @ 0x6
  1963                           
  1964  0056                     ??_USBDeviceInit:	
  1965                           ; 0 bytes @ 0x6
  1966                           
  1967  0056                     ??_USBStdGetDscHandler:	
  1968                           ; 0 bytes @ 0x6
  1969                           
  1970  0056                     ??_USBStdGetStatusHandler:	
  1971                           ; 0 bytes @ 0x6
  1972                           
  1973  0056                     ??_USBCheckVendorRequest:	
  1974                           ; 0 bytes @ 0x6
  1975                           
  1976  0056                     ??_WorkTick:	
  1977                           ; 0 bytes @ 0x6
  1978                           
  1979  0056                     ??_InitFAN:	
  1980                           ; 0 bytes @ 0x6
  1981                           
  1982  0056                     ??_InitTempSensor:	
  1983                           ; 0 bytes @ 0x6
  1984                           
  1985  0056                     ??_InitWorkTick:	
  1986                           ; 0 bytes @ 0x6
  1987                           
  1988  0056                     ??_InitResultRx:	
  1989                           ; 0 bytes @ 0x6
  1990                           
  1991  0056                     ??_USBCBSuspend:	
  1992                           ; 0 bytes @ 0x6
  1993                           
  1994  0056                     ??_USBCBWakeFromSuspend:	
  1995                           ; 0 bytes @ 0x6
  1996                           
  1997  0056                     ??_USBCB_SOF_Handler:	
  1998                           ; 0 bytes @ 0x6
  1999                           
  2000  0056                     ??_USBCBErrorHandler:	
  2001                           ; 0 bytes @ 0x6
  2002                           
  2003  0056                     ??_USBCBCheckOtherReq:	
  2004                           ; 0 bytes @ 0x6
  2005                           
  2006  0056                     ??_USBCBStdSetDscHandler:	
  2007                           ; 0 bytes @ 0x6
  2008                           
  2009  0056                     ?_memset:	
  2010                           ; 0 bytes @ 0x6
  2011                           
  2012  0056                     ?___bmul:	
  2013                           ; 1 bytes @ 0x6
  2014                           
  2015  0056                     ?___awdiv:	
  2016                           ; 1 bytes @ 0x6
  2017                           
  2018  0056                     ?___lwdiv:	
  2019                           ; 2 bytes @ 0x6
  2020                           
  2021  0056                     ?___wmul:	
  2022                           ; 2 bytes @ 0x6
  2023                           
  2024  0056                     USBConfigureEndpoint@direction:	
  2025                           ; 2 bytes @ 0x6
  2026                           
  2027  0056                     USBStdGetStatusHandler@p:	
  2028                           ; 1 bytes @ 0x6
  2029                           
  2030  0056                     ___bmul@multiplicand:	
  2031                           ; 1 bytes @ 0x6
  2032                           
  2033  0056                     ___awdiv@divisor:	
  2034                           ; 1 bytes @ 0x6
  2035                           
  2036  0056                     ___lwdiv@divisor:	
  2037                           ; 2 bytes @ 0x6
  2038                           
  2039  0056                     memset@c:	
  2040                           ; 2 bytes @ 0x6
  2041                           
  2042  0056                     ___wmul@multiplier:	
  2043                           ; 2 bytes @ 0x6
  2044                           
  2045                           
  2046                           ; 2 bytes @ 0x6
  2047  0056                     	ds	1
  2048  0057                     ??_USBConfigureEndpoint:	
  2049  0057                     ??___bmul:	
  2050                           ; 0 bytes @ 0x7
  2051                           
  2052  0057                     ___bmul@product:	
  2053                           ; 0 bytes @ 0x7
  2054                           
  2055                           
  2056                           ; 1 bytes @ 0x7
  2057  0057                     	ds	1
  2058  0058                     ??_USBCtrlTrfRxService:	
  2059  0058                     USBConfigureEndpoint@EPNum:	
  2060                           ; 0 bytes @ 0x8
  2061                           
  2062  0058                     USBCtrlTrfTxService@byteToSend:	
  2063                           ; 1 bytes @ 0x8
  2064                           
  2065  0058                     ___bmul@multiplier:	
  2066                           ; 1 bytes @ 0x8
  2067                           
  2068  0058                     USBDeviceInit@p:	
  2069                           ; 1 bytes @ 0x8
  2070                           
  2071  0058                     ___awdiv@dividend:	
  2072                           ; 2 bytes @ 0x8
  2073                           
  2074  0058                     ___lwdiv@dividend:	
  2075                           ; 2 bytes @ 0x8
  2076                           
  2077  0058                     memset@n:	
  2078                           ; 2 bytes @ 0x8
  2079                           
  2080  0058                     ___wmul@multiplicand:	
  2081                           ; 2 bytes @ 0x8
  2082                           
  2083                           
  2084                           ; 2 bytes @ 0x8
  2085  0058                     	ds	1
  2086  0059                     ??_USBCtrlTrfInHandler:	
  2087  0059                     ??_USBCtrlEPAllowDataStage:	
  2088                           ; 0 bytes @ 0x9
  2089                           
  2090  0059                     ?_USBTransferOnePacket:	
  2091                           ; 0 bytes @ 0x9
  2092                           
  2093  0059                     ?_rotate:	
  2094                           ; 1 bytes @ 0x9
  2095                           
  2096  0059                     USBTransferOnePacket@dir:	
  2097                           ; 4 bytes @ 0x9
  2098                           
  2099  0059                     USBConfigureEndpoint@handle:	
  2100                           ; 1 bytes @ 0x9
  2101                           
  2102  0059                     rotate@x:	
  2103                           ; 1 bytes @ 0x9
  2104                           
  2105                           
  2106                           ; 4 bytes @ 0x9
  2107  0059                     	ds	1
  2108  005A                     ??_memset:	
  2109  005A                     ?_USBEnableEndpoint:	
  2110                           ; 0 bytes @ 0xA
  2111                           
  2112  005A                     ??___awdiv:	
  2113                           ; 0 bytes @ 0xA
  2114                           
  2115  005A                     ??___lwdiv:	
  2116                           ; 0 bytes @ 0xA
  2117                           
  2118  005A                     ??___wmul:	
  2119                           ; 0 bytes @ 0xA
  2120                           
  2121  005A                     USBDeviceInit@i_718:	
  2122                           ; 0 bytes @ 0xA
  2123                           
  2124  005A                     USBEnableEndpoint@options:	
  2125                           ; 1 bytes @ 0xA
  2126                           
  2127  005A                     USBTransferOnePacket@data:	
  2128                           ; 1 bytes @ 0xA
  2129                           
  2130  005A                     USBCtrlTrfRxService@i:	
  2131                           ; 1 bytes @ 0xA
  2132                           
  2133  005A                     ___awdiv@counter:	
  2134                           ; 1 bytes @ 0xA
  2135                           
  2136  005A                     ___lwdiv@counter:	
  2137                           ; 1 bytes @ 0xA
  2138                           
  2139  005A                     memset@p1:	
  2140                           ; 1 bytes @ 0xA
  2141                           
  2142  005A                     ___wmul@product:	
  2143                           ; 1 bytes @ 0xA
  2144                           
  2145                           
  2146                           ; 2 bytes @ 0xA
  2147  005A                     	ds	1
  2148  005B                     ??_USBEnableEndpoint:	
  2149  005B                     ??_USBCtrlEPServiceComplete:	
  2150                           ; 0 bytes @ 0xB
  2151                           
  2152  005B                     USBDeviceInit@i:	
  2153                           ; 0 bytes @ 0xB
  2154                           
  2155  005B                     USBTransferOnePacket@len:	
  2156                           ; 1 bytes @ 0xB
  2157                           
  2158  005B                     USBCtrlTrfRxService@byteToRead:	
  2159                           ; 1 bytes @ 0xB
  2160                           
  2161  005B                     USBCtrlTrfInHandler@lastDTS:	
  2162                           ; 1 bytes @ 0xB
  2163                           
  2164  005B                     ___awdiv@sign:	
  2165                           ; 1 bytes @ 0xB
  2166                           
  2167  005B                     memset@p:	
  2168                           ; 1 bytes @ 0xB
  2169                           
  2170  005B                     ___lwdiv@quotient:	
  2171                           ; 1 bytes @ 0xB
  2172                           
  2173                           
  2174                           ; 2 bytes @ 0xB
  2175  005B                     	ds	1
  2176  005C                     ??_USBCtrlTrfOutHandler:	
  2177  005C                     ?_SendCmdReply:	
  2178                           ; 0 bytes @ 0xC
  2179                           
  2180  005C                     ??_USBTransferOnePacket:	
  2181                           ; 0 bytes @ 0xC
  2182                           
  2183  005C                     ?_SendAsicData:	
  2184                           ; 0 bytes @ 0xC
  2185                           
  2186  005C                     SendAsicData@work:	
  2187                           ; 0 bytes @ 0xC
  2188                           
  2189  005C                     SendCmdReply@cmd:	
  2190                           ; 2 bytes @ 0xC
  2191                           
  2192  005C                     ___awdiv@quotient:	
  2193                           ; 2 bytes @ 0xC
  2194                           
  2195                           
  2196                           ; 2 bytes @ 0xC
  2197  005C                     	ds	1
  2198  005D                     rotate@y:	
  2199  005D                     USBEnableEndpoint@p:	
  2200                           ; 1 bytes @ 0xD
  2201                           
  2202                           
  2203                           ; 2 bytes @ 0xD
  2204  005D                     	ds	1
  2205  005E                     ??_rotate:	
  2206  005E                     ??_DetectAsics:	
  2207                           ; 0 bytes @ 0xE
  2208                           
  2209  005E                     USBTransferOnePacket@ep:	
  2210                           ; 0 bytes @ 0xE
  2211                           
  2212  005E                     SendAsicData@split:	
  2213                           ; 1 bytes @ 0xE
  2214                           
  2215  005E                     SendCmdReply@data:	
  2216                           ; 1 bytes @ 0xE
  2217                           
  2218                           
  2219                           ; 2 bytes @ 0xE
  2220  005E                     	ds	1
  2221  005F                     ??_SendAsicData:	
  2222  005F                     USBEnableEndpoint@ep:	
  2223                           ; 0 bytes @ 0xF
  2224                           
  2225  005F                     USBTransferOnePacket@handle:	
  2226                           ; 1 bytes @ 0xF
  2227                           
  2228                           
  2229                           ; 1 bytes @ 0xF
  2230  005F                     	ds	1
  2231  0060                     ??_USBCBInitEP:	
  2232  0060                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  2233                           ; 0 bytes @ 0x10
  2234                           
  2235  0060                     SendCmdReply@count:	
  2236                           ; 1 bytes @ 0x10
  2237                           
  2238  0060                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  2239                           ; 1 bytes @ 0x10
  2240                           
  2241                           
  2242                           ; 2 bytes @ 0x10
  2243  0060                     	ds	1
  2244  0061                     ??_SendCmdReply:	
  2245                           
  2246                           ; 0 bytes @ 0x11
  2247  0061                     	ds	1
  2248  0062                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  2249                           
  2250                           ; 1 bytes @ 0x12
  2251  0062                     	ds	1
  2252  0063                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  2253                           
  2254                           ; 2 bytes @ 0x13
  2255  0063                     	ds	2
  2256  0065                     ??_USBWakeFromSuspend:	
  2257  0065                     ??_USBSuspend:	
  2258                           ; 0 bytes @ 0x15
  2259                           
  2260  0065                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  2261                           ; 0 bytes @ 0x15
  2262                           
  2263  0065                     ??_USBStdFeatureReqHandler:	
  2264                           ; 0 bytes @ 0x15
  2265                           
  2266  0065                     ??_USBStdSetCfgHandler:	
  2267                           ; 0 bytes @ 0x15
  2268                           
  2269  0065                     USBStdSetCfgHandler@p:	
  2270                           ; 0 bytes @ 0x15
  2271                           
  2272                           
  2273                           ; 2 bytes @ 0x15
  2274  0065                     	ds	1
  2275  0066                     ?_AsicPreCalc:	
  2276  0066                     DetectAsics@x:	
  2277                           ; 0 bytes @ 0x16
  2278                           
  2279  0066                     AsicPreCalc@work:	
  2280                           ; 1 bytes @ 0x16
  2281                           
  2282                           
  2283                           ; 2 bytes @ 0x16
  2284  0066                     	ds	1
  2285  0067                     ??_InitializeSystem:	
  2286  0067                     ??_UserInit:	
  2287                           ; 0 bytes @ 0x17
  2288                           
  2289  0067                     USBStdSetCfgHandler@i_1089:	
  2290                           ; 0 bytes @ 0x17
  2291                           
  2292  0067                     SendCmdReply@n:	
  2293                           ; 1 bytes @ 0x17
  2294                           
  2295                           
  2296                           ; 1 bytes @ 0x17
  2297  0067                     	ds	1
  2298  0068                     ??_AsicPushWork:	
  2299  0068                     USBStdSetCfgHandler@i:	
  2300                           ; 0 bytes @ 0x18
  2301                           
  2302                           
  2303                           ; 1 bytes @ 0x18
  2304  0068                     	ds	1
  2305  0069                     ??_USBCtrlTrfSetupHandler:	
  2306  0069                     ??_USBCheckStdRequest:	
  2307                           ; 0 bytes @ 0x19
  2308                           
  2309  0069                     USBCtrlEPService@setup_cnt:	
  2310                           ; 0 bytes @ 0x19
  2311                           
  2312                           
  2313                           ; 1 bytes @ 0x19
  2314  0069                     	ds	1
  2315  006A                     ??_ProcessIO:	
  2316  006A                     ??_main:	
  2317                           ; 0 bytes @ 0x1A
  2318                           
  2319                           
  2320                           	psect	text2
  2321  0A3B                     __ptext2:	
  2322 ;; *************** function _ProcessCmd *****************
  2323 ;; Defined at:
  2324 ;;		line 44 in file "klondike.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  cmd             1    wreg     PTR unsigned char 
  2327 ;;		 -> OUTPacket(64), 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  cmd             1   69[BANK1 ] PTR unsigned char 
  2330 ;;		 -> OUTPacket(64), 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;		None               void
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 1F/1
  2337 ;;		On exit  : 1F/2
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2341 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2342 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2343 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  2344 ;;Total ram usage:        5 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    7
  2347 ;; This function calls:
  2348 ;;		_AsicPreCalc
  2349 ;;		_AsicPushWork
  2350 ;;		_SendCmdReply
  2351 ;;		___lwdiv
  2352 ;;		___wmul
  2353 ;; This function is called by:
  2354 ;;		_ProcessIO
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           
  2359                           ;psect for function _ProcessCmd
  2360  0A3B                     _ProcessCmd:	
  2361                           
  2362                           ;incstack = 0
  2363                           ; Regs used in _ProcessCmd: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2364                           ;ProcessCmd@cmd stored from wreg
  2365  0A3B  00E5               	movwf	ProcessCmd@cmd^(0+128)
  2366                           
  2367                           ;klondike.c: 47: switch(cmd[0]) {
  2368  0A3C  2B47               	goto	l5956
  2369  0A3D                     l5890:	
  2370                           
  2371                           ;klondike.c: 49: if( Status.WorkQC < 4-1 ) {
  2372  0A3D  3003               	movlw	3
  2373  0A3E  0022               	movlb	2	; select bank2
  2374  0A3F  0252               	subwf	(_Status^(0+256)+3),w	;volatile
  2375  0A40  1803               	skipnc
  2376  0A41  2A8B               	goto	l675
  2377                           
  2378                           ;klondike.c: 50: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2379  0A42  0021               	movlb	1	; select bank1
  2380  0A43  27EA  318A         	fcall	PL62	;call to abstracted procedure
  2381  0A45  086B               	movf	_WorkNow^(0+128),w
  2382  0A46  0020               	movlb	0	; select bank0
  2383  0A47  00D6               	movwf	?___wmul
  2384  0A48  01D7               	clrf	?___wmul+1
  2385  0A49  0022               	movlb	2	; select bank2
  2386  0A4A  0852               	movf	(_Status^(0+256)+3),w	;volatile
  2387  0A4B  0020               	movlb	0	; select bank0
  2388  0A4C  07D6               	addwf	?___wmul,f
  2389  0A4D  1803               	skipnc
  2390  0A4E  0AD7               	incf	?___wmul+1,f
  2391  0A4F  3003               	movlw	3
  2392  0A50  05D6               	andwf	?___wmul,f
  2393  0A51  302D               	movlw	45
  2394  0A52  01D7               	clrf	?___wmul+1
  2395  0A53  00D8               	movwf	?___wmul+2
  2396  0A54  01D9               	clrf	?___wmul+3
  2397  0A55  23C9  318A         	fcall	___wmul
  2398  0A57  303C               	movlw	60
  2399  0A58  0021               	movlb	1	; select bank1
  2400  0A59  00E1               	movwf	??_ProcessCmd^(0+128)
  2401  0A5A  3023               	movlw	35
  2402  0A5B  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  2403  0A5C  0020               	movlb	0	; select bank0
  2404  0A5D  0856               	movf	?___wmul,w
  2405  0A5E  0021               	movlb	1	; select bank1
  2406  0A5F  0761               	addwf	??_ProcessCmd^(0+128),w
  2407  0A60  0084               	movwf	4
  2408  0A61  0020               	movlb	0	; select bank0
  2409  0A62  0857               	movf	?___wmul+1,w
  2410  0A63  0021               	movlb	1	; select bank1
  2411  0A64  3D62               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2412  0A65  0085               	movwf	5
  2413  0A66  302D               	movlw	45
  2414  0A67  00FF               	movwf	127
  2415  0A68                     u4590:	
  2416  0A68  0016               	moviw fsr1++
  2417  0A69  001A               	movwi fsr0++
  2418  0A6A  0BFF               	decfsz	127,f
  2419  0A6B  2A68               	goto	u4590
  2420  0A6C  0022               	movlb	2	; select bank2
  2421  0A6D  0AD2               	incf	(_Status^(0+256)+3),f	;volatile
  2422                           
  2423                           ;klondike.c: 51: if(Status.State == 'R') {
  2424  0A6E  084F               	movf	_Status^(0+256),w	;volatile
  2425  0A6F  3A52               	xorlw	82
  2426  0A70  1D03               	skipz
  2427  0A71  2A8B               	goto	l675
  2428                           
  2429                           ;klondike.c: 52: AsicPreCalc(&WorkQue[WorkNow]);
  2430  0A72  303C               	movlw	60
  2431  0A73  27B6  318A         	fcall	PL34	;call to abstracted procedure
  2432  0A75  278E  318A         	fcall	PL22	;call to abstracted procedure
  2433  0A77  23C9  318A         	fcall	___wmul
  2434  0A79  0856               	movf	?___wmul,w
  2435  0A7A  0021               	movlb	1	; select bank1
  2436  0A7B  00E1               	movwf	??_ProcessCmd^(0+128)
  2437  0A7C  0020               	movlb	0	; select bank0
  2438  0A7D  0857               	movf	?___wmul+1,w
  2439  0A7E  0021               	movlb	1	; select bank1
  2440  0A7F  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  2441  0A80  0861               	movf	??_ProcessCmd^(0+128),w
  2442  0A81  0020               	movlb	0	; select bank0
  2443  0A82  07E6               	addwf	?_AsicPreCalc,f
  2444  0A83  0021               	movlb	1	; select bank1
  2445  0A84  0862               	movf	(??_ProcessCmd^(0+128)+1),w
  2446  0A85  0020               	movlb	0	; select bank0
  2447  0A86  3DE7               	addwfc	?_AsicPreCalc+1,f
  2448  0A87  2514  318A         	fcall	_AsicPreCalc
  2449                           
  2450                           ;klondike.c: 53: AsicPushWork();
  2451  0A89  23DE  318A         	fcall	_AsicPushWork
  2452  0A8B                     l675:	
  2453                           
  2454                           ;klondike.c: 54: }
  2455                           ;klondike.c: 55: }
  2456                           ;klondike.c: 56: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2457  0A8B  0021               	movlb	1	; select bank1
  2458  0A8C  27E4  318A         	fcall	PL58	;call to abstracted procedure
  2459  0A8E  304F               	movlw	low _Status
  2460  0A8F  00DE               	movwf	?_SendCmdReply+2
  2461  0A90  3001               	movlw	high _Status
  2462  0A91  00DF               	movwf	?_SendCmdReply+3
  2463  0A92  300D               	movlw	13
  2464  0A93  00E0               	movwf	?_SendCmdReply+4
  2465  0A94  2362  318A         	fcall	_SendCmdReply
  2466                           
  2467                           ;klondike.c: 57: break;
  2468  0A96  2B5F               	goto	l677
  2469  0A97                     l5900:	
  2470                           
  2471                           ;klondike.c: 59: Status.WorkQC = WorkNow = 0;
  2472  0A97  01EB               	clrf	_WorkNow^(0+128)
  2473  0A98  0022               	movlb	2	; select bank2
  2474  0A99  01D2               	clrf	(_Status^(0+256)+3)	;volatile
  2475                           
  2476                           ;klondike.c: 60: Status.State = 'R';
  2477  0A9A  3052               	movlw	82
  2478  0A9B  2B45               	goto	L3
  2479  0A9C                     l5906:	
  2480                           
  2481                           ;klondike.c: 64: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  2482  0A9C  27E4  318A         	fcall	PL58	;call to abstracted procedure
  2483  0A9E  309F               	movlw	low (_ID| (0+32768))
  2484  0A9F  00DE               	movwf	?_SendCmdReply+2
  2485  0AA0  3088               	movlw	high (_ID| (0+32768))
  2486  0AA1  00DF               	movwf	?_SendCmdReply+3
  2487  0AA2  300C               	movlw	12
  2488  0AA3  00E0               	movwf	?_SendCmdReply+4
  2489  0AA4  2362  318A         	fcall	_SendCmdReply
  2490                           
  2491                           ;klondike.c: 65: break;
  2492  0AA6  2B5F               	goto	l677
  2493  0AA7                     l5910:	
  2494                           
  2495                           ;klondike.c: 70: if( *(WORD *)&cmd[2] != 0 ) {
  2496  0AA7  27EA  318A         	fcall	PL62	;call to abstracted procedure
  2497  0AA9  0016               	moviw fsr1++
  2498  0AAA  0401               	iorwf	1,w
  2499  0AAB  1903               	skipnz
  2500  0AAC  2B1A               	goto	l5942
  2501                           
  2502                           ;klondike.c: 71: Cfg = *(WORKCFG *)(cmd+2);
  2503  0AAD  0865               	movf	ProcessCmd@cmd^(0+128),w
  2504  0AAE  3E02               	addlw	2
  2505  0AAF  0086               	movwf	6
  2506  0AB0  3002               	movlw	2	; select bank4/5
  2507  0AB1  0087               	movwf	7
  2508  0AB2  3064               	movlw	low _Cfg
  2509  0AB3  0084               	movwf	4
  2510  0AB4  3001               	movlw	high _Cfg
  2511  0AB5  0085               	movwf	5
  2512  0AB6  3006               	movlw	6
  2513  0AB7  00FF               	movwf	127
  2514  0AB8                     u4620:	
  2515  0AB8  0016               	moviw fsr1++
  2516  0AB9  001A               	movwi fsr0++
  2517  0ABA  0BFF               	decfsz	127,f
  2518  0ABB  2AB8               	goto	u4620
  2519                           
  2520                           ;klondike.c: 72: if(Cfg.HashClock < 128)
  2521  0ABC  3000               	movlw	0
  2522  0ABD  0022               	movlb	2	; select bank2
  2523  0ABE  0265               	subwf	(_Cfg+1)^(0+256),w
  2524  0ABF  3080               	movlw	128
  2525  0AC0  1903               	skipnz
  2526  0AC1  0264               	subwf	_Cfg^(0+256),w
  2527  0AC2  1803               	skipnc
  2528  0AC3  2AC7               	goto	l683
  2529                           
  2530                           ;klondike.c: 73: Cfg.HashClock = 128;
  2531  0AC4  3080               	movlw	128
  2532  0AC5  00E4               	movwf	_Cfg^(0+256)
  2533  0AC6  01E5               	clrf	(_Cfg+1)^(0+256)
  2534  0AC7                     l683:	
  2535                           
  2536                           ;klondike.c: 74: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  2537  0AC7  3000               	movlw	0
  2538  0AC8  0265               	subwf	(_Cfg+1)^(0+256),w
  2539  0AC9  30FB               	movlw	251
  2540  0ACA  1903               	skipnz
  2541  0ACB  0264               	subwf	_Cfg^(0+256),w
  2542  0ACC  1803               	skipnc
  2543  0ACD  2AD8               	goto	l684
  2544  0ACE  3000               	movlw	0
  2545  0ACF  0265               	subwf	(_Cfg+1)^(0+256),w
  2546  0AD0  30E1               	movlw	225
  2547  0AD1  1903               	skipnz
  2548  0AD2  0264               	subwf	_Cfg^(0+256),w
  2549  0AD3  1C03               	skipc
  2550  0AD4  2AD8               	goto	l684
  2551                           
  2552                           ;klondike.c: 75: Cfg.HashClock = 450/2-1;
  2553  0AD5  30E0               	movlw	224
  2554  0AD6  00E4               	movwf	_Cfg^(0+256)
  2555  0AD7  01E5               	clrf	(_Cfg+1)^(0+256)
  2556  0AD8                     l684:	
  2557                           
  2558                           ;klondike.c: 76: if(Cfg.HashClock >= 450)
  2559  0AD8  3001               	movlw	1
  2560  0AD9  0265               	subwf	(_Cfg+1)^(0+256),w
  2561  0ADA  30C2               	movlw	194
  2562  0ADB  1903               	skipnz
  2563  0ADC  0264               	subwf	_Cfg^(0+256),w
  2564  0ADD  1C03               	skipc
  2565  0ADE  2AE3               	goto	l685
  2566                           
  2567                           ;klondike.c: 77: Cfg.HashClock = 450-1;
  2568  0ADF  30C1               	movlw	193
  2569  0AE0  00E4               	movwf	_Cfg^(0+256)
  2570  0AE1  3001               	movlw	1
  2571  0AE2  00E5               	movwf	(_Cfg^(0+256)+1)
  2572  0AE3                     l685:	
  2573                           
  2574                           ;klondike.c: 78: if(Cfg.HashClock <= 250)
  2575  0AE3  3000               	movlw	0
  2576  0AE4  0265               	subwf	(_Cfg+1)^(0+256),w
  2577  0AE5  30FB               	movlw	251
  2578  0AE6  1903               	skipnz
  2579  0AE7  0264               	subwf	_Cfg^(0+256),w
  2580                           
  2581                           ;klondike.c: 79: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  2582  0AE8  0864               	movf	_Cfg^(0+256),w
  2583  0AE9  00DC               	movwf	_ClockCfg^(0+256)
  2584  0AEA  0865               	movf	(_Cfg+1)^(0+256),w
  2585  0AEB  00DD               	movwf	(_ClockCfg^(0+256)+1)
  2586  0AEC  01DE               	clrf	(_ClockCfg^(0+256)+2)
  2587  0AED  01DF               	clrf	(_ClockCfg^(0+256)+3)
  2588  0AEE  1803               	skipnc
  2589  0AEF  2AF7               	goto	L6
  2590  0AF0  3013               	movlw	19
  2591  0AF1                     u4685:	
  2592  0AF1  27FB  318A         	fcall	PL88	;call to abstracted procedure
  2593  0AF3  0B89               	decfsz	9,f
  2594  0AF4  2AF1               	goto	u4685
  2595  0AF5  3017               	movlw	23
  2596  0AF6  2AFD               	goto	L4
  2597  0AF7                     L6:	
  2598                           ;klondike.c: 80: else
  2599                           ;klondike.c: 81: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  2600                           
  2601  0AF7  3012               	movlw	18
  2602  0AF8                     u4695:	
  2603  0AF8  27FB  318A         	fcall	PL88	;call to abstracted procedure
  2604  0AFA  0B89               	decfsz	9,f
  2605  0AFB  2AF8               	goto	u4695
  2606  0AFC  3007               	movlw	7
  2607  0AFD                     L4:	
  2608  0AFD  04DC               	iorwf	_ClockCfg^(0+256),f
  2609  0AFE  3000               	movlw	0
  2610  0AFF  04DD               	iorwf	(_ClockCfg+1)^(0+256),f
  2611  0B00  3003               	movlw	3
  2612  0B01  04DE               	iorwf	(_ClockCfg+2)^(0+256),f
  2613  0B02  3000               	movlw	0
  2614  0B03  04DF               	iorwf	(_ClockCfg+3)^(0+256),f
  2615                           
  2616                           ;klondike.c: 82: HashTime = 256 - ((WORD)12292/Cfg.HashClock);
  2617  0B04  0865               	movf	(_Cfg+1)^(0+256),w
  2618  0B05  0020               	movlb	0	; select bank0
  2619  0B06  00D7               	movwf	?___lwdiv+1
  2620  0B07  0022               	movlb	2	; select bank2
  2621  0B08  0864               	movf	_Cfg^(0+256),w
  2622  0B09  0020               	movlb	0	; select bank0
  2623  0B0A  00D6               	movwf	?___lwdiv
  2624  0B0B  3004               	movlw	4
  2625  0B0C  00D8               	movwf	?___lwdiv+2
  2626  0B0D  3030               	movlw	48
  2627  0B0E  00D9               	movwf	?___lwdiv+3
  2628  0B0F  26F9  318A         	fcall	___lwdiv
  2629  0B11  0856               	movf	?___lwdiv,w
  2630  0B12  3C00               	sublw	0
  2631  0B13  0022               	movlb	2	; select bank2
  2632  0B14  00CE               	movwf	_HashTime^(0+256)
  2633                           
  2634                           ;klondike.c: 83: PWM1DCH = Cfg.FanTarget;
  2635  0B15  0868               	movf	(_Cfg^(0+256)+4),w
  2636  0B16  002C               	movlb	12	; select bank12
  2637  0B17  0092               	movwf	18	;volatile
  2638                           
  2639                           ;klondike.c: 84: Status.ErrorCount = 0;
  2640  0B18  0022               	movlb	2	; select bank2
  2641  0B19  01D6               	clrf	(_Status^(0+256)+7)	;volatile
  2642  0B1A                     l5942:	
  2643                           
  2644                           ;klondike.c: 85: }
  2645                           ;klondike.c: 86: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  2646  0B1A  0021               	movlb	1	; select bank1
  2647  0B1B  27E4  318A         	fcall	PL58	;call to abstracted procedure
  2648  0B1D  3064               	movlw	low _Cfg
  2649  0B1E  00DE               	movwf	?_SendCmdReply+2
  2650  0B1F  3001               	movlw	high _Cfg
  2651  0B20  00DF               	movwf	?_SendCmdReply+3
  2652  0B21  3006               	movlw	6
  2653  0B22  00E0               	movwf	?_SendCmdReply+4
  2654  0B23  2362  318A         	fcall	_SendCmdReply
  2655                           
  2656                           ;klondike.c: 87: break;
  2657  0B25  2B5F               	goto	l677
  2658  0B26                     l5944:	
  2659                           
  2660                           ;klondike.c: 89: LATAbits.LATA4 = (cmd[2] == '1');
  2661  0B26  27EA  318A         	fcall	PL62	;call to abstracted procedure
  2662  0B28  0801               	movf	1,w
  2663  0B29  3A31               	xorlw	49
  2664  0B2A  3000               	movlw	0
  2665  0B2B  1903               	skipnz
  2666  0B2C  3001               	movlw	1
  2667  0B2D  00E1               	movwf	??_ProcessCmd^(0+128)
  2668  0B2E  0EE1               	swapf	??_ProcessCmd^(0+128),f
  2669  0B2F  0022               	movlb	2	; select bank2
  2670  0B30  080C               	movf	12,w	;volatile
  2671  0B31  0021               	movlb	1	; select bank1
  2672  0B32  0661               	xorwf	??_ProcessCmd^(0+128),w
  2673  0B33  39EF               	andlw	-17
  2674  0B34  0661               	xorwf	??_ProcessCmd^(0+128),w
  2675  0B35  0022               	movlb	2	; select bank2
  2676  0B36  008C               	movwf	12	;volatile
  2677                           
  2678                           ;klondike.c: 90: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  2679  0B37  0021               	movlb	1	; select bank1
  2680  0B38  0865               	movf	ProcessCmd@cmd^(0+128),w
  2681  0B39  3E02               	addlw	2
  2682  0B3A  0086               	movwf	6
  2683  0B3B  0801               	movf	1,w
  2684  0B3C  3A31               	xorlw	49
  2685  0B3D  1903               	skipnz
  2686  0B3E  2B41               	goto	l5950
  2687  0B3F  3044               	movlw	68
  2688  0B40  2B42               	goto	L5
  2689  0B41                     l5950:	
  2690  0B41  3052               	movlw	82
  2691  0B42                     L5:	
  2692  0B42  00E3               	movwf	_ProcessCmd$2047^(0+128)
  2693  0B43  01E4               	clrf	(_ProcessCmd$2047+1)^(0+128)
  2694  0B44  0022               	movlb	2	; select bank2
  2695  0B45                     L3:	
  2696  0B45  00CF               	movwf	_Status^(0+256)	;volatile
  2697  0B46  2A8B               	goto	l675
  2698  0B47                     l5956:	
  2699  0B47  0865               	movf	ProcessCmd@cmd^(0+128),w
  2700  0B48  0086               	movwf	6
  2701  0B49  3002               	movlw	2	; select bank4/5
  2702  0B4A  0087               	movwf	7
  2703  0B4B  0801               	movf	1,w
  2704                           
  2705                           ; Switch size 1, requested type "space"
  2706                           ; Number of cases is 6, Range of values is 65 to 87
  2707                           ; switch strategies available:
  2708                           ; Name         Instructions Cycles
  2709                           ; simple_byte           19    10 (average)
  2710                           ; direct_byte           55     9 (fixed)
  2711                           ; jumptable            263     9 (fixed)
  2712                           ;	Chosen strategy is simple_byte
  2713  0B4C  3A41               	xorlw	65	; case 65
  2714  0B4D  1903               	skipnz
  2715  0B4E  2A97               	goto	l5900
  2716  0B4F  3A02               	xorlw	2	; case 67
  2717  0B50  1903               	skipnz
  2718  0B51  2AA7               	goto	l5910
  2719  0B52  3A06               	xorlw	6	; case 69
  2720  0B53  1903               	skipnz
  2721  0B54  2B26               	goto	l5944
  2722  0B55  3A0C               	xorlw	12	; case 73
  2723  0B56  1903               	skipnz
  2724  0B57  2A9C               	goto	l5906
  2725  0B58  3A1A               	xorlw	26	; case 83
  2726  0B59  1903               	skipnz
  2727  0B5A  2A8B               	goto	l675
  2728  0B5B  3A04               	xorlw	4	; case 87
  2729  0B5C  1903               	skipnz
  2730  0B5D  2A3D               	goto	l5890
  2731  0B5E  2B5F               	goto	l677
  2732  0B5F                     l677:	
  2733                           
  2734                           ;klondike.c: 102: LATAbits.LATA5 = 1;;
  2735  0B5F  0022               	movlb	2	; select bank2
  2736  0B60  168C               	bsf	12,5	;volatile
  2737  0B61  0008               	return
  2738  0B62                     __end_of_ProcessCmd:	
  2739  0B62                     __ptext4:	
  2740 ;; *************** function _SendCmdReply *****************
  2741 ;; Defined at:
  2742 ;;		line 208 in file "main.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  cmd             2   12[BANK0 ] PTR unsigned char 
  2745 ;;		 -> ResultQue(8), OUTPacket(64), 
  2746 ;;  data            2   14[BANK0 ] PTR unsigned char 
  2747 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
  2748 ;;  count           1   16[BANK0 ] unsigned char 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  n               1   23[BANK0 ] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 1F/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2760 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2762 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2763 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2764 ;;Total ram usage:       12 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    5
  2767 ;; This function calls:
  2768 ;;		___bmul
  2769 ;;		___wmul
  2770 ;; This function is called by:
  2771 ;;		_ProcessCmd
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _SendCmdReply
  2777  0B62                     _SendCmdReply:	
  2778                           
  2779                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  2783  0B62  0860               	movf	SendCmdReply@count,w
  2784  0B63  00E1               	movwf	??_SendCmdReply
  2785  0B64  01E2               	clrf	??_SendCmdReply+1
  2786  0B65  0022               	movlb	2	; select bank2
  2787  0B66  083A               	movf	_WQI^(0+256),w
  2788  0B67  0020               	movlb	0	; select bank0
  2789  0B68  00D6               	movwf	?___wmul
  2790  0B69  300F               	movlw	15
  2791  0B6A  01D7               	clrf	?___wmul+1
  2792  0B6B  00D8               	movwf	?___wmul+2
  2793  0B6C  01D9               	clrf	?___wmul+3
  2794  0B6D  23C9  318A         	fcall	___wmul
  2795  0B6F  0861               	movf	??_SendCmdReply,w
  2796  0B70  0756               	addwf	?___wmul,w
  2797  0B71  00E3               	movwf	??_SendCmdReply+2
  2798  0B72  0862               	movf	??_SendCmdReply+1,w
  2799  0B73  3D57               	addwfc	?___wmul+1,w
  2800  0B74  00E4               	movwf	??_SendCmdReply+3
  2801  0B75  0863               	movf	??_SendCmdReply+2,w
  2802  0B76  3E02               	addlw	2
  2803  0B77  00E5               	movwf	??_SendCmdReply+4
  2804  0B78  3000               	movlw	0
  2805  0B79  3D64               	addwfc	??_SendCmdReply+3,w
  2806  0B7A  00E6               	movwf	??_SendCmdReply+5
  2807  0B7B  3A80               	xorlw	128
  2808  0B7C  00FF               	movwf	127
  2809  0B7D  3080               	movlw	128
  2810  0B7E  027F               	subwf	127,w
  2811  0B7F  1D03               	skipz
  2812  0B80  2B83               	goto	u4725
  2813  0B81  3040               	movlw	64
  2814  0B82  0265               	subwf	??_SendCmdReply+4,w
  2815  0B83                     u4725:	
  2816  0B83  1803               	skipnc
  2817  0B84  0008               	return
  2818                           
  2819                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  2820  0B85  300F               	movlw	15
  2821  0B86  0020               	movlb	0	; select bank0
  2822  0B87  00D6               	movwf	?___bmul
  2823  0B88  0022               	movlb	2	; select bank2
  2824  0B89  083A               	movf	_WQI^(0+256),w
  2825  0B8A  26B7  318A         	fcall	___bmul
  2826  0B8C  3E20               	addlw	32
  2827  0B8D  0086               	movwf	6
  2828  0B8E  3002               	movlw	2	; select bank4/5
  2829  0B8F  0087               	movwf	7
  2830  0B90  085C               	movf	SendCmdReply@cmd,w
  2831  0B91  0084               	movwf	4
  2832  0B92  085D               	movf	SendCmdReply@cmd+1,w
  2833  0B93  0085               	movwf	5
  2834  0B94  0800               	movf	0,w
  2835  0B95  0081               	movwf	1
  2836                           
  2837                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  2838  0B96  300F               	movlw	15
  2839  0B97  00D6               	movwf	?___bmul
  2840  0B98  0022               	movlb	2	; select bank2
  2841  0B99  083A               	movf	_WQI^(0+256),w
  2842  0B9A  26B7  318A         	fcall	___bmul
  2843  0B9C  3E21               	addlw	33
  2844  0B9D  0086               	movwf	6
  2845  0B9E  3002               	movlw	2	; select bank4/5
  2846  0B9F  0087               	movwf	7
  2847  0BA0  0022               	movlb	2	; select bank2
  2848  0BA1  0831               	movf	_SlaveAddress^(0+256),w
  2849  0BA2  0081               	movwf	1
  2850                           
  2851                           ;main.c: 212: for(BYTE n=0; n < count; n++)
  2852  0BA3  0020               	movlb	0	; select bank0
  2853  0BA4  01E7               	clrf	SendCmdReply@n
  2854  0BA5                     l5988:	
  2855  0BA5  0860               	movf	SendCmdReply@count,w
  2856  0BA6  0267               	subwf	SendCmdReply@n,w
  2857  0BA7  1803               	btfsc	3,0
  2858  0BA8  2BC4               	goto	l5990
  2859                           
  2860                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  2861  0BA9  300F               	movlw	15
  2862  0BAA  00D6               	movwf	?___bmul
  2863  0BAB  0022               	movlb	2	; select bank2
  2864  0BAC  083A               	movf	_WQI^(0+256),w
  2865  0BAD  26B7  318A         	fcall	___bmul
  2866  0BAF  3E22               	addlw	34
  2867  0BB0  0767               	addwf	SendCmdReply@n,w
  2868  0BB1  00E1               	movwf	??_SendCmdReply
  2869  0BB2  0086               	movwf	6
  2870  0BB3  3002               	movlw	2	; select bank4/5
  2871  0BB4  0087               	movwf	7
  2872  0BB5  085F               	movf	SendCmdReply@data+1,w
  2873  0BB6  00E3               	movwf	??_SendCmdReply+2
  2874  0BB7  085E               	movf	SendCmdReply@data,w
  2875  0BB8  00E2               	movwf	??_SendCmdReply+1
  2876  0BB9  0867               	movf	SendCmdReply@n,w
  2877  0BBA  0762               	addwf	??_SendCmdReply+1,w
  2878  0BBB  0084               	movwf	4
  2879  0BBC  0863               	movf	??_SendCmdReply+2,w
  2880  0BBD  1803               	skipnc
  2881  0BBE  0A63               	incf	??_SendCmdReply+2,w
  2882  0BBF  0085               	movwf	5
  2883  0BC0  0800               	movf	0,w	;code access
  2884  0BC1  0081               	movwf	1
  2885  0BC2  0AE7               	incf	SendCmdReply@n,f
  2886  0BC3  2BA5               	goto	l5988
  2887  0BC4                     l5990:	
  2888                           
  2889                           ;main.c: 214: WQI = (WQI+1) & 3;
  2890  0BC4  0022               	movlb	2	; select bank2
  2891  0BC5  3003               	movlw	3
  2892  0BC6  0ABA               	incf	_WQI^(0+256),f
  2893  0BC7  05BA               	andwf	_WQI^(0+256),f
  2894  0BC8  0008               	return
  2895  0BC9                     __end_of_SendCmdReply:	
  2896  0BC9                     __ptext6:	
  2897 ;; *************** function ___wmul *****************
  2898 ;; Defined at:
  2899 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\wmul.c"
  2900 ;; Parameters:    Size  Location     Type
  2901 ;;  multiplier      2    6[BANK0 ] unsigned int 
  2902 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  product         2   10[BANK0 ] unsigned int 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  2    6[BANK0 ] unsigned int 
  2907 ;; Registers used:
  2908 ;;		wreg, status,2, status,0
  2909 ;; Tracked objects:
  2910 ;;		On entry : 1F/0
  2911 ;;		On exit  : 1F/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2915 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2917 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2918 ;;Total ram usage:        6 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; Hardware stack levels required when called:    4
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_ProcessCmd
  2925 ;;		_AsicPushWork
  2926 ;;		_SendCmdReply
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function ___wmul
  2932  0BC9                     ___wmul:	
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2936  0BC9  01DA               	clrf	___wmul@product
  2937  0BCA  01DB               	clrf	___wmul@product+1
  2938  0BCB                     l6128:	
  2939  0BCB  1C56               	btfss	___wmul@multiplier,0
  2940  0BCC  2BD1               	goto	l6132
  2941  0BCD  0858               	movf	___wmul@multiplicand,w
  2942  0BCE  07DA               	addwf	___wmul@product,f
  2943  0BCF  0859               	movf	___wmul@multiplicand+1,w
  2944  0BD0  3DDB               	addwfc	___wmul@product+1,f
  2945  0BD1                     l6132:	
  2946  0BD1  35D8               	lslf	___wmul@multiplicand,f
  2947  0BD2  0DD9               	rlf	___wmul@multiplicand+1,f
  2948  0BD3  36D7               	lsrf	___wmul@multiplier+1,f
  2949  0BD4  0CD6               	rrf	___wmul@multiplier,f
  2950  0BD5  0857               	movf	___wmul@multiplier+1,w
  2951  0BD6  0456               	iorwf	___wmul@multiplier,w
  2952  0BD7  1D03               	skipz
  2953  0BD8  2BCB               	goto	l6128
  2954  0BD9  085B               	movf	___wmul@product+1,w
  2955  0BDA  00D7               	movwf	?___wmul+1
  2956  0BDB  085A               	movf	___wmul@product,w
  2957  0BDC  00D6               	movwf	?___wmul
  2958  0BDD  0008               	return
  2959  0BDE                     __end_of___wmul:	
  2960  0BDE                     __ptext5:	
  2961 ;; *************** function _AsicPushWork *****************
  2962 ;; Defined at:
  2963 ;;		line 106 in file "klondike.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 1C/2
  2974 ;;		On exit  : 1C/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2979 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2981 ;;Total ram usage:        2 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    6
  2984 ;; This function calls:
  2985 ;;		_SendAsicData
  2986 ;;		_AsicPreCalc
  2987 ;;		___wmul
  2988 ;; This function is called by:
  2989 ;;		_ProcessCmd
  2990 ;;		_main
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           
  2995                           ;psect for function _AsicPushWork
  2996  0BDE                     _AsicPushWork:	
  2997                           
  2998                           ;klondike.c: 107: Status.WorkID = WorkQue[WorkNow].WorkID;
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in _AsicPushWork: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3002  0BDE  278E  318A         	fcall	PL22	;call to abstracted procedure
  3003  0BE0  23C9  318A         	fcall	___wmul
  3004  0BE2  303C               	movlw	60
  3005  0BE3  00E8               	movwf	??_AsicPushWork
  3006  0BE4  3023               	movlw	35
  3007  0BE5  00E9               	movwf	??_AsicPushWork+1
  3008  0BE6  0856               	movf	?___wmul,w
  3009  0BE7  0768               	addwf	??_AsicPushWork,w
  3010  0BE8  0086               	movwf	6
  3011  0BE9  0857               	movf	?___wmul+1,w
  3012  0BEA  3D69               	addwfc	??_AsicPushWork+1,w
  3013  0BEB  0087               	movwf	7
  3014  0BEC  0801               	movf	1,w
  3015  0BED  0022               	movlb	2	; select bank2
  3016  0BEE  00D3               	movwf	(_Status^(0+256)+4)	;volatile
  3017                           
  3018                           ;klondike.c: 108: SendAsicData(&WorkQue[WorkNow], 0x50);
  3019  0BEF  303C               	movlw	60
  3020  0BF0  0020               	movlb	0	; select bank0
  3021  0BF1  00DC               	movwf	?_SendAsicData
  3022  0BF2  3023               	movlw	35
  3023  0BF3  00DD               	movwf	?_SendAsicData+1
  3024  0BF4  278E  318A         	fcall	PL22	;call to abstracted procedure
  3025  0BF6  23C9  318A         	fcall	___wmul
  3026  0BF8  27F5  318A         	fcall	PL80	;call to abstracted procedure
  3027  0BFA  07DC               	addwf	?_SendAsicData,f
  3028  0BFB  0869               	movf	??_AsicPushWork+1,w
  3029  0BFC  3DDD               	addwfc	?_SendAsicData+1,f
  3030  0BFD  3050               	movlw	80
  3031  0BFE  00DE               	movwf	?_SendAsicData+2
  3032  0BFF  241E  318A         	fcall	_SendAsicData
  3033                           
  3034                           ;klondike.c: 109: WorkNow = (WorkNow+1) & 4-1;
  3035  0C01  0021               	movlb	1	; select bank1
  3036  0C02  3003               	movlw	3
  3037  0C03  0AEB               	incf	_WorkNow^(0+128),f
  3038  0C04  05EB               	andwf	_WorkNow^(0+128),f
  3039                           
  3040                           ;klondike.c: 110: Status.HashCount = 0;
  3041  0C05  0022               	movlb	2	; select bank2
  3042  0C06  01D7               	clrf	(_Status^(0+256)+8)	;volatile
  3043  0C07  01D8               	clrf	((_Status+1)^(0+256)+8)	;volatile
  3044                           
  3045                           ;klondike.c: 111: TMR0 = HashTime;
  3046  0C08  084E               	movf	_HashTime^(0+256),w
  3047  0C09  0020               	movlb	0	; select bank0
  3048  0C0A  0095               	movwf	21	;volatile
  3049                           
  3050                           ;klondike.c: 112: Status.State ='W';
  3051  0C0B  3057               	movlw	87
  3052  0C0C  0022               	movlb	2	; select bank2
  3053  0C0D  00CF               	movwf	_Status^(0+256)	;volatile
  3054                           
  3055                           ;klondike.c: 113: if(--Status.WorkQC > 0)
  3056  0C0E  03D2               	decf	(_Status^(0+256)+3),f	;volatile
  3057  0C0F  1903               	btfsc	3,2
  3058  0C10  0008               	return
  3059                           
  3060                           ;klondike.c: 114: AsicPreCalc(&WorkQue[WorkNow]);
  3061  0C11  303C               	movlw	60
  3062  0C12  27B6  318A         	fcall	PL34	;call to abstracted procedure
  3063  0C14  278E  318A         	fcall	PL22	;call to abstracted procedure
  3064  0C16  23C9  318A         	fcall	___wmul
  3065  0C18  27F5  318A         	fcall	PL80	;call to abstracted procedure
  3066  0C1A  07E6               	addwf	?_AsicPreCalc,f
  3067  0C1B  0869               	movf	??_AsicPushWork+1,w
  3068  0C1C  3DE7               	addwfc	?_AsicPreCalc+1,f
  3069  0C1D  2D14               	ljmp	l5828
  3070  0C1E                     __end_of_AsicPushWork:	
  3071  0C1E                     __ptext10:	
  3072 ;; *************** function _SendAsicData *****************
  3073 ;; Defined at:
  3074 ;;		line 36 in file "asic.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  work            2   12[BANK0 ] PTR struct _worktask
  3077 ;;		 -> WorkQue(180), 
  3078 ;;  split           1   14[BANK0 ] unsigned char 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;		None
  3081 ;; Return value:  Size  Location     Type
  3082 ;;		None               void
  3083 ;; Registers used:
  3084 ;;		wreg, status,2, status,0, pclath, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 1F/0
  3087 ;;		On exit  : 1F/2
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3090 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3094 ;;Total ram usage:        3 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    5
  3097 ;; This function calls:
  3098 ;;		_Send32
  3099 ;; This function is called by:
  3100 ;;		_AsicPushWork
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function _SendAsicData
  3106  0C1E                     _SendAsicData:	
  3107                           
  3108                           ;asic.c: 37: GIE = 0;
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  3112  0C1E  138B               	bcf	11,7	;volatile
  3113                           
  3114                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  3115  0C1F  3048               	movlw	72
  3116  0C20  0022               	movlb	2	; select bank2
  3117  0C21  00BD               	movwf	_last_bit0^(0+256)
  3118  0C22  3090               	movlw	144
  3119  0C23  00BE               	movwf	_last_bit1^(0+256)
  3120                           
  3121                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  3122  0C24  305C               	movlw	low _ClockCfg
  3123  0C25  00AC               	movwf	_send32_data^(0+256)
  3124  0C26  3001               	movlw	high _ClockCfg
  3125  0C27  00AD               	movwf	(_send32_data+1)^(0+256)
  3126  0C28  3002               	movlw	2
  3127  0C29  00C0               	movwf	_send32_count^(0+256)
  3128                           
  3129                           ;asic.c: 40: Send32();
  3130  0C2A  2468  318A         	fcall	_Send32
  3131                           
  3132                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  3133  0C2C  27CB  318A         	fcall	PL48	;call to abstracted procedure
  3134  0C2E  3021               	movlw	33
  3135  0C2F  07AC               	addwf	_send32_data^(0+256),f
  3136  0C30  1803               	skipnc
  3137  0C31  0AAD               	incf	(_send32_data+1)^(0+256),f
  3138  0C32  3003               	movlw	3
  3139  0C33  00C0               	movwf	_send32_count^(0+256)
  3140                           
  3141                           ;asic.c: 42: Send32();
  3142  0C34  2468  318A         	fcall	_Send32
  3143                           
  3144                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  3145  0C36  30C4               	movlw	low (_PrecalcHashes+4)
  3146  0C37  0022               	movlb	2	; select bank2
  3147  0C38  00AC               	movwf	_send32_data^(0+256)
  3148  0C39  3001               	movlw	high (_PrecalcHashes+4)
  3149  0C3A  00AD               	movwf	(_send32_data+1)^(0+256)
  3150  0C3B  3005               	movlw	5
  3151  0C3C  00C0               	movwf	_send32_count^(0+256)
  3152                           
  3153                           ;asic.c: 44: Send32();
  3154  0C3D  2468  318A         	fcall	_Send32
  3155                           
  3156                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  3157  0C3F  27CB  318A         	fcall	PL48	;call to abstracted procedure
  3158  0C41  0AAC               	incf	_send32_data^(0+256),f
  3159  0C42  1903               	skipnz
  3160  0C43  0AAD               	incf	(_send32_data+1)^(0+256),f
  3161  0C44  3008               	movlw	8
  3162  0C45  00C0               	movwf	_send32_count^(0+256)
  3163                           
  3164                           ;asic.c: 46: Send32();
  3165  0C46  2468  318A         	fcall	_Send32
  3166                           
  3167                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  3168  0C48  30C0               	movlw	low _PrecalcHashes
  3169  0C49  0022               	movlb	2	; select bank2
  3170  0C4A  00AC               	movwf	_send32_data^(0+256)
  3171  0C4B  3001               	movlw	high _PrecalcHashes
  3172  0C4C  00AD               	movwf	(_send32_data+1)^(0+256)
  3173  0C4D  01C0               	clrf	_send32_count^(0+256)
  3174  0C4E  0AC0               	incf	_send32_count^(0+256),f
  3175                           
  3176                           ;asic.c: 48: Send32();
  3177  0C4F  2468  318A         	fcall	_Send32
  3178                           
  3179                           ;asic.c: 50: last_bit0 = last_bit1 = split;
  3180  0C51  0020               	movlb	0	; select bank0
  3181  0C52  085E               	movf	SendAsicData@split,w
  3182  0C53  0022               	movlb	2	; select bank2
  3183  0C54  00BE               	movwf	_last_bit1^(0+256)
  3184  0C55  00BD               	movwf	_last_bit0^(0+256)
  3185                           
  3186                           ;asic.c: 51: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  3187  0C56  30A0               	movlw	low _NonceRanges
  3188  0C57  00AC               	movwf	_send32_data^(0+256)
  3189  0C58  3001               	movlw	high _NonceRanges
  3190  0C59  00AD               	movwf	(_send32_data+1)^(0+256)
  3191  0C5A  086A               	movf	_BankSize^(0+256),w
  3192  0C5B  00C0               	movwf	_send32_count^(0+256)
  3193                           
  3194                           ;asic.c: 52: Send32();
  3195  0C5C  2468               	fcall	_Send32
  3196                           
  3197                           ;asic.c: 53: LATC = 0xD8;;
  3198  0C5D  30D8               	movlw	216
  3199  0C5E  0022               	movlb	2	; select bank2
  3200  0C5F  008E               	movwf	14	;volatile
  3201                           
  3202                           ;asic.c: 54: GIE = 1;
  3203  0C60  178B               	bsf	11,7	;volatile
  3204                           
  3205                           ;asic.c: 55: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  3206  0C61  30FD               	movlw	253
  3207  0C62  05DC               	andwf	_ClockCfg^(0+256),f
  3208  0C63  30FF               	movlw	255
  3209  0C64  05DD               	andwf	(_ClockCfg+1)^(0+256),f
  3210  0C65  05DE               	andwf	(_ClockCfg+2)^(0+256),f
  3211  0C66  05DF               	andwf	(_ClockCfg+3)^(0+256),f
  3212  0C67  0008               	return
  3213  0C68                     __end_of_SendAsicData:	
  3214  0C68                     __ptext11:	
  3215 ;; *************** function _Send32 *****************
  3216 ;; Defined at:
  3217 ;;		line 59 in file "asic.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;		None               void
  3224 ;; Registers used:
  3225 ;;		None
  3226 ;; Tracked objects:
  3227 ;;		On entry : 1F/2
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3235 ;;Total ram usage:        0 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    4
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_SendAsicData
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _Send32
  3247  0C68                     _Send32:	
  3248                           
  3249                           ;incstack = 0
  3250                           ; Regs used in _Send32: []
  3251  0C68  0022               	banksel	270	;# 
  3252  0C69  082C               	movf	_send32_data& (0+127),w	;# 
  3253  0C6A  0086               	movwf	6	;# 
  3254  0C6B  082D               	movf	(_send32_data+1)& (0+127),w	;# 
  3255  0C6C  0087               	movwf	7	;# 
  3256  0C6D                     next_word:	
  3257                           
  3258                           ;# 
  3259  0C6D  3048               	movlw	72	;# 
  3260  0C6E  018E               	clrf	14	;# 
  3261  0C6F  1801               	btfsc	1,0	;# 
  3262  0C70  3090               	movlw	144	;# 
  3263  0C71  008E               	movwf	14	;# 
  3264  0C72  3048               	movlw	72	;# 
  3265  0C73  018E               	clrf	14	;# 
  3266  0C74  1881               	btfsc	1,1	;# 
  3267  0C75  3090               	movlw	144	;# 
  3268  0C76  008E               	movwf	14	;# 
  3269  0C77  3048               	movlw	72	;# 
  3270  0C78  018E               	clrf	14	;# 
  3271  0C79  1901               	btfsc	1,2	;# 
  3272  0C7A  3090               	movlw	144	;# 
  3273  0C7B  008E               	movwf	14	;# 
  3274  0C7C  3048               	movlw	72	;# 
  3275  0C7D  018E               	clrf	14	;# 
  3276  0C7E  1981               	btfsc	1,3	;# 
  3277  0C7F  3090               	movlw	144	;# 
  3278  0C80  008E               	movwf	14	;# 
  3279  0C81  3048               	movlw	72	;# 
  3280  0C82  018E               	clrf	14	;# 
  3281  0C83  1A01               	btfsc	1,4	;# 
  3282  0C84  3090               	movlw	144	;# 
  3283  0C85  008E               	movwf	14	;# 
  3284  0C86  3048               	movlw	72	;# 
  3285  0C87  018E               	clrf	14	;# 
  3286  0C88  1A81               	btfsc	1,5	;# 
  3287  0C89  3090               	movlw	144	;# 
  3288  0C8A  008E               	movwf	14	;# 
  3289  0C8B  3048               	movlw	72	;# 
  3290  0C8C  018E               	clrf	14	;# 
  3291  0C8D  1B01               	btfsc	1,6	;# 
  3292  0C8E  3090               	movlw	144	;# 
  3293  0C8F  008E               	movwf	14	;# 
  3294  0C90  3048               	movlw	72	;# 
  3295  0C91  018E               	clrf	14	;# 
  3296  0C92  1B81               	btfsc	1,7	;# 
  3297  0C93  3090               	movlw	144	;# 
  3298  0C94  008E               	movwf	14	;# 
  3299  0C95  3141               	addfsr 1,1	;# 
  3300  0C96  3048               	movlw	72	;# 
  3301  0C97  018E               	clrf	14	;# 
  3302  0C98  1801               	btfsc	1,0	;# 
  3303  0C99  3090               	movlw	144	;# 
  3304  0C9A  008E               	movwf	14	;# 
  3305  0C9B  3048               	movlw	72	;# 
  3306  0C9C  018E               	clrf	14	;# 
  3307  0C9D  1881               	btfsc	1,1	;# 
  3308  0C9E  3090               	movlw	144	;# 
  3309  0C9F  008E               	movwf	14	;# 
  3310  0CA0  3048               	movlw	72	;# 
  3311  0CA1  018E               	clrf	14	;# 
  3312  0CA2  1901               	btfsc	1,2	;# 
  3313  0CA3  3090               	movlw	144	;# 
  3314  0CA4  008E               	movwf	14	;# 
  3315  0CA5  3048               	movlw	72	;# 
  3316  0CA6  018E               	clrf	14	;# 
  3317  0CA7  1981               	btfsc	1,3	;# 
  3318  0CA8  3090               	movlw	144	;# 
  3319  0CA9  008E               	movwf	14	;# 
  3320  0CAA  3048               	movlw	72	;# 
  3321  0CAB  018E               	clrf	14	;# 
  3322  0CAC  1A01               	btfsc	1,4	;# 
  3323  0CAD  3090               	movlw	144	;# 
  3324  0CAE  008E               	movwf	14	;# 
  3325  0CAF  3048               	movlw	72	;# 
  3326  0CB0  018E               	clrf	14	;# 
  3327  0CB1  1A81               	btfsc	1,5	;# 
  3328  0CB2  3090               	movlw	144	;# 
  3329  0CB3  008E               	movwf	14	;# 
  3330  0CB4  3048               	movlw	72	;# 
  3331  0CB5  018E               	clrf	14	;# 
  3332  0CB6  1B01               	btfsc	1,6	;# 
  3333  0CB7  3090               	movlw	144	;# 
  3334  0CB8  008E               	movwf	14	;# 
  3335  0CB9  3048               	movlw	72	;# 
  3336  0CBA  018E               	clrf	14	;# 
  3337  0CBB  1B81               	btfsc	1,7	;# 
  3338  0CBC  3090               	movlw	144	;# 
  3339  0CBD  008E               	movwf	14	;# 
  3340  0CBE  3141               	addfsr 1,1	;# 
  3341  0CBF  3048               	movlw	72	;# 
  3342  0CC0  018E               	clrf	14	;# 
  3343  0CC1  1801               	btfsc	1,0	;# 
  3344  0CC2  3090               	movlw	144	;# 
  3345  0CC3  008E               	movwf	14	;# 
  3346  0CC4  3048               	movlw	72	;# 
  3347  0CC5  018E               	clrf	14	;# 
  3348  0CC6  1881               	btfsc	1,1	;# 
  3349  0CC7  3090               	movlw	144	;# 
  3350  0CC8  008E               	movwf	14	;# 
  3351  0CC9  3048               	movlw	72	;# 
  3352  0CCA  018E               	clrf	14	;# 
  3353  0CCB  1901               	btfsc	1,2	;# 
  3354  0CCC  3090               	movlw	144	;# 
  3355  0CCD  008E               	movwf	14	;# 
  3356  0CCE  3048               	movlw	72	;# 
  3357  0CCF  018E               	clrf	14	;# 
  3358  0CD0  1981               	btfsc	1,3	;# 
  3359  0CD1  3090               	movlw	144	;# 
  3360  0CD2  008E               	movwf	14	;# 
  3361  0CD3  3048               	movlw	72	;# 
  3362  0CD4  018E               	clrf	14	;# 
  3363  0CD5  1A01               	btfsc	1,4	;# 
  3364  0CD6  3090               	movlw	144	;# 
  3365  0CD7  008E               	movwf	14	;# 
  3366  0CD8  3048               	movlw	72	;# 
  3367  0CD9  018E               	clrf	14	;# 
  3368  0CDA  1A81               	btfsc	1,5	;# 
  3369  0CDB  3090               	movlw	144	;# 
  3370  0CDC  008E               	movwf	14	;# 
  3371  0CDD  3048               	movlw	72	;# 
  3372  0CDE  018E               	clrf	14	;# 
  3373  0CDF  1B01               	btfsc	1,6	;# 
  3374  0CE0  3090               	movlw	144	;# 
  3375  0CE1  008E               	movwf	14	;# 
  3376  0CE2  3048               	movlw	72	;# 
  3377  0CE3  018E               	clrf	14	;# 
  3378  0CE4  1B81               	btfsc	1,7	;# 
  3379  0CE5  3090               	movlw	144	;# 
  3380  0CE6  008E               	movwf	14	;# 
  3381  0CE7  3141               	addfsr 1,1	;# 
  3382  0CE8  3048               	movlw	72	;# 
  3383  0CE9  018E               	clrf	14	;# 
  3384  0CEA  1801               	btfsc	1,0	;# 
  3385  0CEB  3090               	movlw	144	;# 
  3386  0CEC  008E               	movwf	14	;# 
  3387  0CED  3048               	movlw	72	;# 
  3388  0CEE  018E               	clrf	14	;# 
  3389  0CEF  1881               	btfsc	1,1	;# 
  3390  0CF0  3090               	movlw	144	;# 
  3391  0CF1  008E               	movwf	14	;# 
  3392  0CF2  3048               	movlw	72	;# 
  3393  0CF3  018E               	clrf	14	;# 
  3394  0CF4  1901               	btfsc	1,2	;# 
  3395  0CF5  3090               	movlw	144	;# 
  3396  0CF6  008E               	movwf	14	;# 
  3397  0CF7  3048               	movlw	72	;# 
  3398  0CF8  018E               	clrf	14	;# 
  3399  0CF9  1981               	btfsc	1,3	;# 
  3400  0CFA  3090               	movlw	144	;# 
  3401  0CFB  008E               	movwf	14	;# 
  3402  0CFC  3048               	movlw	72	;# 
  3403  0CFD  018E               	clrf	14	;# 
  3404  0CFE  1A01               	btfsc	1,4	;# 
  3405  0CFF  3090               	movlw	144	;# 
  3406  0D00  008E               	movwf	14	;# 
  3407  0D01  3048               	movlw	72	;# 
  3408  0D02  018E               	clrf	14	;# 
  3409  0D03  1A81               	btfsc	1,5	;# 
  3410  0D04  3090               	movlw	144	;# 
  3411  0D05  008E               	movwf	14	;# 
  3412  0D06  3048               	movlw	72	;# 
  3413  0D07  018E               	clrf	14	;# 
  3414  0D08  1B01               	btfsc	1,6	;# 
  3415  0D09  3090               	movlw	144	;# 
  3416  0D0A  008E               	movwf	14	;# 
  3417  0D0B  083D               	movf	_last_bit0& (0+127),w	;# 
  3418  0D0C  018E               	clrf	14	;# 
  3419  0D0D  1B81               	btfsc	1,7	;# 
  3420  0D0E  083E               	movf	_last_bit1& (0+127),w	;# 
  3421  0D0F  008E               	movwf	14	;# 
  3422  0D10  3141               	addfsr 1,1	;# 
  3423  0D11  0BC0               	decfsz	_send32_count& (0+127),f	;# 
  3424  0D12  2C6D               	goto	next_word	;# 
  3425  0D13  0008               	return
  3426  0D14                     __end_of_Send32:	
  3427  0D14                     __ptext7:	
  3428 ;; *************** function _AsicPreCalc *****************
  3429 ;; Defined at:
  3430 ;;		line 319 in file "asic.c"
  3431 ;; Parameters:    Size  Location     Type
  3432 ;;  work            2   22[BANK0 ] PTR struct _worktask
  3433 ;;		 -> WorkQue(180), 
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;  m              32   24[BANK1 ] unsigned long [8]
  3436 ;;  K              12    8[BANK1 ] unsigned long [3]
  3437 ;;  x               4   60[BANK1 ] unsigned long 
  3438 ;;  y               4   56[BANK1 ] unsigned long 
  3439 ;;  z               4   20[BANK1 ] unsigned long 
  3440 ;;  n               1   64[BANK1 ] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;		None               void
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 1F/0
  3447 ;;		On exit  : 1F/1
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3451 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  3452 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3453 ;;      Totals:         0       2      65       0       0       0       0       0       0       0       0       0       
      +0       0
  3454 ;;Total ram usage:       67 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    5
  3457 ;; This function calls:
  3458 ;;		_rotate
  3459 ;;		___bmul
  3460 ;; This function is called by:
  3461 ;;		_ProcessCmd
  3462 ;;		_AsicPushWork
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           
  3467                           ;psect for function _AsicPreCalc
  3468  0D14                     _AsicPreCalc:	
  3469  0D14                     l5828:	
  3470                           ;incstack = 0
  3471                           ; Regs used in _AsicPreCalc: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  3472                           
  3473                           
  3474                           ;asic.c: 320: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  3475  0D14  30D8               	movlw	low AsicPreCalc@F3348
  3476  0D15  0086               	movwf	6
  3477  0D16  3001               	movlw	high AsicPreCalc@F3348
  3478  0D17  0087               	movwf	7
  3479  0D18  30A8               	movlw	low AsicPreCalc@K
  3480  0D19  0084               	movwf	4
  3481  0D1A  3000               	movlw	high AsicPreCalc@K
  3482  0D1B  0085               	movwf	5
  3483  0D1C  300C               	movlw	12
  3484  0D1D  00FF               	movwf	127
  3485  0D1E                     u4550:	
  3486  0D1E  0016               	moviw fsr1++
  3487  0D1F  001A               	movwi fsr0++
  3488  0D20  0BFF               	decfsz	127,f
  3489  0D21  2D1E               	goto	u4550
  3490                           
  3491                           ;asic.c: 321: DWORD x, y, z;
  3492                           ;asic.c: 322: DWORD m[8];
  3493                           ;asic.c: 323: BYTE n;
  3494                           ;asic.c: 325: for(n = 0; n < 8; n++)
  3495  0D22  0021               	movlb	1	; select bank1
  3496  0D23  01E0               	clrf	AsicPreCalc@n^(0+128)
  3497  0D24                     l5836:	
  3498                           
  3499                           ;asic.c: 326: m[n] = work->MidState[n];
  3500  0D24  2773  318A         	fcall	PL18	;call to abstracted procedure
  3501  0D26  0086               	movwf	6
  3502  0D27  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3503  0D28  0087               	movwf	7
  3504  0D29  3141               	addfsr 1,1
  3505  0D2A  27AD  318A         	fcall	PL32	;call to abstracted procedure
  3506  0D2C  0860               	movf	AsicPreCalc@n^(0+128),w
  3507  0D2D  0709               	addwf	9,w
  3508  0D2E  0709               	addwf	9,w
  3509  0D2F  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3510  0D30  0086               	movwf	6
  3511  0D31  0187               	clrf	7
  3512  0D32  0824               	movf	(??_AsicPreCalc+4)^(0+128),w
  3513  0D33  3FC0               	movwi [0]fsr1
  3514  0D34  0825               	movf	(??_AsicPreCalc+5)^(0+128),w
  3515  0D35  3FC1               	movwi [1]fsr1
  3516  0D36  0826               	movf	(??_AsicPreCalc+6)^(0+128),w
  3517  0D37  3FC2               	movwi [2]fsr1
  3518  0D38  0827               	movf	(??_AsicPreCalc+7)^(0+128),w
  3519  0D39  3FC3               	movwi [3]fsr1
  3520  0D3A  3008               	movlw	8
  3521  0D3B  0AE0               	incf	AsicPreCalc@n^(0+128),f
  3522  0D3C  0260               	subwf	AsicPreCalc@n^(0+128),w
  3523  0D3D  1C03               	skipc
  3524  0D3E  2D24               	goto	l5836
  3525                           
  3526                           ;asic.c: 328: for(n = 0; n < 3; n++) {
  3527  0D3F  01E0               	clrf	AsicPreCalc@n^(0+128)
  3528  0D40                     l5848:	
  3529                           
  3530                           ;asic.c: 330: x = m[5-n] ^ m[6-n];
  3531  0D40  2745  318A         	fcall	PL8	;call to abstracted procedure
  3532  0D42  26B7  318A         	fcall	___bmul
  3533  0D44  3E18               	addlw	24
  3534  0D45  271E  318A         	fcall	PL2	;call to abstracted procedure
  3535  0D47  26B7  318A         	fcall	___bmul
  3536  0D49  3E14               	addlw	20
  3537  0D4A  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3538  0D4B  0086               	movwf	6
  3539  0D4C  0187               	clrf	7
  3540  0D4D  3F40               	moviw [0]fsr1
  3541  0D4E  0021               	movlb	1	; select bank1
  3542  0D4F  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  3543  0D50  3F41               	moviw [1]fsr1
  3544  0D51  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3545  0D52  3F42               	moviw [2]fsr1
  3546  0D53  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3547  0D54  3F43               	moviw [3]fsr1
  3548  0D55  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3549  0D56  0820               	movf	??_AsicPreCalc^(0+128),w
  3550  0D57  0624               	xorwf	(??_AsicPreCalc+4)^(0+128),w
  3551  0D58  00DC               	movwf	AsicPreCalc@x^(0+128)
  3552  0D59  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3553  0D5A  0625               	xorwf	(??_AsicPreCalc+5)^(0+128),w
  3554  0D5B  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3555  0D5C  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3556  0D5D  0626               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  3557  0D5E  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3558  0D5F  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3559  0D60  0627               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  3560  0D61  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3561                           
  3562                           ;asic.c: 331: x = x & m[4-n];
  3563  0D62  2745  318A         	fcall	PL8	;call to abstracted procedure
  3564  0D64  26B7  318A         	fcall	___bmul
  3565  0D66  3E10               	addlw	16
  3566  0D67  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3567  0D68  2730  318A         	fcall	PL4	;call to abstracted procedure
  3568  0D6A  27DC  318A         	fcall	PL56	;call to abstracted procedure
  3569                           
  3570                           ;asic.c: 332: x = m[6-n] ^ x;
  3571  0D6C  2745  318A         	fcall	PL8	;call to abstracted procedure
  3572  0D6E  26B7  318A         	fcall	___bmul
  3573  0D70  3E18               	addlw	24
  3574  0D71  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3575  0D72  2730  318A         	fcall	PL4	;call to abstracted procedure
  3576  0D74  06DC               	xorwf	AsicPreCalc@x^(0+128),f
  3577  0D75  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3578  0D76  06DD               	xorwf	(AsicPreCalc@x+1)^(0+128),f
  3579  0D77  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3580  0D78  06DE               	xorwf	(AsicPreCalc@x+2)^(0+128),f
  3581  0D79  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3582  0D7A  06DF               	xorwf	(AsicPreCalc@x+3)^(0+128),f
  3583                           
  3584                           ;asic.c: 333: x += K[n];
  3585  0D7B  0860               	movf	AsicPreCalc@n^(0+128),w
  3586  0D7C  0709               	addwf	9,w
  3587  0D7D  0709               	addwf	9,w
  3588  0D7E  3EA8               	addlw	AsicPreCalc@K& (0+255)
  3589  0D7F  0086               	movwf	6
  3590  0D80  3F40               	moviw [0]fsr1
  3591  0D81  27BB  318A         	fcall	PL36	;call to abstracted procedure
  3592                           
  3593                           ;asic.c: 334: x += work->Merkle[n];
  3594  0D83  2773  318A         	fcall	PL18	;call to abstracted procedure
  3595  0D85  3E21               	addlw	33
  3596  0D86  0086               	movwf	6
  3597  0D87  3000               	movlw	0
  3598  0D88  3D23               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3599  0D89  0087               	movwf	7
  3600  0D8A  3F40               	moviw [0]fsr1
  3601  0D8B  27BB  318A         	fcall	PL36	;call to abstracted procedure
  3602                           
  3603                           ;asic.c: 335: x += m[7-n];
  3604  0D8D  2745  318A         	fcall	PL8	;call to abstracted procedure
  3605  0D8F  26B7  318A         	fcall	___bmul
  3606  0D91  3E1C               	addlw	28
  3607  0D92  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3608  0D93  0086               	movwf	6
  3609  0D94  0187               	clrf	7
  3610  0D95  3F40               	moviw [0]fsr1
  3611  0D96  0021               	movlb	1	; select bank1
  3612  0D97  27BB  318A         	fcall	PL36	;call to abstracted procedure
  3613                           
  3614                           ;asic.c: 336: y = rotate(m[4-n], 26);
  3615  0D99  2745  318A         	fcall	PL8	;call to abstracted procedure
  3616  0D9B  26B7  318A         	fcall	___bmul
  3617  0D9D  2763  318A         	fcall	PL14	;call to abstracted procedure
  3618  0D9F  275B  318A         	fcall	PL12	;call to abstracted procedure
  3619  0DA1  301A               	movlw	26
  3620  0DA2  00DD               	movwf	?_rotate+4
  3621  0DA3  26C4  318A         	fcall	_rotate
  3622  0DA5  274B  318A         	fcall	PL10	;call to abstracted procedure
  3623                           
  3624                           ;asic.c: 337: z = rotate(m[4-n], 21);
  3625  0DA7  2745  318A         	fcall	PL8	;call to abstracted procedure
  3626  0DA9  26B7  318A         	fcall	___bmul
  3627  0DAB  2763  318A         	fcall	PL14	;call to abstracted procedure
  3628  0DAD  275B  318A         	fcall	PL12	;call to abstracted procedure
  3629  0DAF  3015               	movlw	21
  3630  0DB0  00DD               	movwf	?_rotate+4
  3631  0DB1  26C4  318A         	fcall	_rotate
  3632  0DB3  085C               	movf	?_rotate+3,w
  3633  0DB4  0021               	movlb	1	; select bank1
  3634  0DB5  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3635  0DB6  0020               	movlb	0	; select bank0
  3636  0DB7  085B               	movf	?_rotate+2,w
  3637  0DB8  0021               	movlb	1	; select bank1
  3638  0DB9  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3639  0DBA  0020               	movlb	0	; select bank0
  3640  0DBB  085A               	movf	?_rotate+1,w
  3641  0DBC  0021               	movlb	1	; select bank1
  3642  0DBD  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3643  0DBE  0020               	movlb	0	; select bank0
  3644  0DBF  0859               	movf	?_rotate,w
  3645  0DC0  0021               	movlb	1	; select bank1
  3646  0DC1  00B4               	movwf	AsicPreCalc@z^(0+128)
  3647                           
  3648                           ;asic.c: 338: z = y^z;
  3649  0DC2  0858               	movf	AsicPreCalc@y^(0+128),w
  3650  0DC3  27D4  318A         	fcall	PL52	;call to abstracted procedure
  3651                           
  3652                           ;asic.c: 339: y = rotate(m[4-n], 7);
  3653  0DC5  2745  318A         	fcall	PL8	;call to abstracted procedure
  3654  0DC7  26B7  318A         	fcall	___bmul
  3655  0DC9  2763  318A         	fcall	PL14	;call to abstracted procedure
  3656  0DCB  275B  318A         	fcall	PL12	;call to abstracted procedure
  3657  0DCD  3007               	movlw	7
  3658  0DCE  00DD               	movwf	?_rotate+4
  3659  0DCF  26C4  318A         	fcall	_rotate
  3660  0DD1  274B  318A         	fcall	PL10	;call to abstracted procedure
  3661                           
  3662                           ;asic.c: 340: z = y^z;
  3663  0DD3  27D4  318A         	fcall	PL52	;call to abstracted procedure
  3664                           
  3665                           ;asic.c: 341: m[7-n] = z+x;
  3666  0DD5  0834               	movf	AsicPreCalc@z^(0+128),w
  3667  0DD6  075C               	addwf	AsicPreCalc@x^(0+128),w
  3668  0DD7  00A0               	movwf	??_AsicPreCalc^(0+128)
  3669  0DD8  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3670  0DD9  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3671  0DDA  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3672  0DDB  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3673  0DDC  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3674  0DDD  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3675  0DDE  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3676  0DDF  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3677  0DE0  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3678  0DE1  2745  318A         	fcall	PL8	;call to abstracted procedure
  3679  0DE3  26B7  318A         	fcall	___bmul
  3680  0DE5  27F0  318A         	fcall	PL72	;call to abstracted procedure
  3681  0DE7  2769  318A         	fcall	PL16	;call to abstracted procedure
  3682                           
  3683                           ;asic.c: 342: m[3-n] = m[3-n] + m[7-n];
  3684  0DE9  2745  318A         	fcall	PL8	;call to abstracted procedure
  3685  0DEB  26B7  318A         	fcall	___bmul
  3686  0DED  3E1C               	addlw	28
  3687  0DEE  271E  318A         	fcall	PL2	;call to abstracted procedure
  3688  0DF0  26B7  318A         	fcall	___bmul
  3689  0DF2  3E0C               	addlw	12
  3690  0DF3  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3691  0DF4  0086               	movwf	6
  3692  0DF5  0187               	clrf	7
  3693  0DF6  3F40               	moviw [0]fsr1
  3694  0DF7  0021               	movlb	1	; select bank1
  3695  0DF8  07A0               	addwf	??_AsicPreCalc^(0+128),f
  3696  0DF9  3F41               	moviw [1]fsr1
  3697  0DFA  3DA1               	addwfc	(??_AsicPreCalc^(0+128)+1),f
  3698  0DFB  3F42               	moviw [2]fsr1
  3699  0DFC  3DA2               	addwfc	(??_AsicPreCalc^(0+128)+2),f
  3700  0DFD  3F43               	moviw [3]fsr1
  3701  0DFE  3DA3               	addwfc	(??_AsicPreCalc^(0+128)+3),f
  3702  0DFF  2745  318A         	fcall	PL8	;call to abstracted procedure
  3703  0E01  26B7  318A         	fcall	___bmul
  3704  0E03  3E0C               	addlw	12
  3705  0E04  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3706  0E05  0086               	movwf	6
  3707  0E06  0187               	clrf	7
  3708  0E07  2769  318A         	fcall	PL16	;call to abstracted procedure
  3709                           
  3710                           ;asic.c: 343: x = rotate(m[((0-n)&7)], 30);
  3711  0E09  2786  318A         	fcall	PL20	;call to abstracted procedure
  3712  0E0B  3F40               	moviw [0]fsr1
  3713  0E0C  0020               	movlb	0	; select bank0
  3714  0E0D  275B  318A         	fcall	PL12	;call to abstracted procedure
  3715  0E0F  301E               	movlw	30
  3716  0E10  00DD               	movwf	?_rotate+4
  3717  0E11  26C4  318A         	fcall	_rotate
  3718  0E13  2797  318A         	fcall	PL28	;call to abstracted procedure
  3719                           
  3720                           ;asic.c: 344: y = rotate(m[((0-n)&7)], 19);
  3721  0E15  2786  318A         	fcall	PL20	;call to abstracted procedure
  3722  0E17  0187               	clrf	7
  3723  0E18  3F40               	moviw [0]fsr1
  3724  0E19  0020               	movlb	0	; select bank0
  3725  0E1A  275B  318A         	fcall	PL12	;call to abstracted procedure
  3726  0E1C  3013               	movlw	19
  3727  0E1D  00DD               	movwf	?_rotate+4
  3728  0E1E  26C4  318A         	fcall	_rotate
  3729  0E20  274B  318A         	fcall	PL10	;call to abstracted procedure
  3730                           
  3731                           ;asic.c: 345: y = y^x;
  3732  0E22  085C               	movf	AsicPreCalc@x^(0+128),w
  3733  0E23  27C3  318A         	fcall	PL46	;call to abstracted procedure
  3734                           
  3735                           ;asic.c: 346: x = rotate(m[((0-n)&7)], 10);
  3736  0E25  2786  318A         	fcall	PL20	;call to abstracted procedure
  3737  0E27  0187               	clrf	7
  3738  0E28  3F40               	moviw [0]fsr1
  3739  0E29  0020               	movlb	0	; select bank0
  3740  0E2A  275B  318A         	fcall	PL12	;call to abstracted procedure
  3741  0E2C  300A               	movlw	10
  3742  0E2D  00DD               	movwf	?_rotate+4
  3743  0E2E  26C4  318A         	fcall	_rotate
  3744  0E30  2797  318A         	fcall	PL28	;call to abstracted procedure
  3745                           
  3746                           ;asic.c: 347: y = x^y;
  3747  0E32  27C3  318A         	fcall	PL46	;call to abstracted procedure
  3748                           
  3749                           ;asic.c: 348: x = m[((0-n)&7)] | m[((1-n)&7)];
  3750  0E34  0860               	movf	AsicPreCalc@n^(0+128),w
  3751  0E35  3C01               	sublw	1
  3752  0E36  27A7  318A         	fcall	PL30	;call to abstracted procedure
  3753  0E38  0187               	clrf	7
  3754  0E39  3F40               	moviw [0]fsr1
  3755  0E3A  273D  318A         	fcall	PL6	;call to abstracted procedure
  3756  0E3C  2786  318A         	fcall	PL20	;call to abstracted procedure
  3757  0E3E  27AD  318A         	fcall	PL32	;call to abstracted procedure
  3758  0E40  0820               	movf	??_AsicPreCalc^(0+128),w
  3759  0E41  0424               	iorwf	(??_AsicPreCalc+4)^(0+128),w
  3760  0E42  00DC               	movwf	AsicPreCalc@x^(0+128)
  3761  0E43  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3762  0E44  0425               	iorwf	(??_AsicPreCalc+5)^(0+128),w
  3763  0E45  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3764  0E46  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3765  0E47  0426               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  3766  0E48  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3767  0E49  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3768  0E4A  0427               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  3769  0E4B  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3770                           
  3771                           ;asic.c: 349: x = m[((2-n)&7)] & x;
  3772  0E4C  0860               	movf	AsicPreCalc@n^(0+128),w
  3773  0E4D  3C02               	sublw	2
  3774  0E4E  27A7  318A         	fcall	PL30	;call to abstracted procedure
  3775  0E50  3F40               	moviw [0]fsr1
  3776  0E51  273D  318A         	fcall	PL6	;call to abstracted procedure
  3777  0E53  0820               	movf	??_AsicPreCalc^(0+128),w
  3778  0E54  27DC  318A         	fcall	PL56	;call to abstracted procedure
  3779                           
  3780                           ;asic.c: 350: z = m[((0-n)&7)] & m[((1-n)&7)];
  3781  0E56  0860               	movf	AsicPreCalc@n^(0+128),w
  3782  0E57  3C01               	sublw	1
  3783  0E58  27A7  318A         	fcall	PL30	;call to abstracted procedure
  3784  0E5A  3F40               	moviw [0]fsr1
  3785  0E5B  273D  318A         	fcall	PL6	;call to abstracted procedure
  3786  0E5D  2786  318A         	fcall	PL20	;call to abstracted procedure
  3787  0E5F  27AD  318A         	fcall	PL32	;call to abstracted procedure
  3788  0E61  0820               	movf	??_AsicPreCalc^(0+128),w
  3789  0E62  0524               	andwf	(??_AsicPreCalc+4)^(0+128),w
  3790  0E63  00B4               	movwf	AsicPreCalc@z^(0+128)
  3791  0E64  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3792  0E65  0525               	andwf	(??_AsicPreCalc+5)^(0+128),w
  3793  0E66  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3794  0E67  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3795  0E68  0526               	andwf	(??_AsicPreCalc+6)^(0+128),w
  3796  0E69  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3797  0E6A  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3798  0E6B  0527               	andwf	(??_AsicPreCalc+7)^(0+128),w
  3799  0E6C  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3800                           
  3801                           ;asic.c: 351: x = x | z;
  3802  0E6D  0834               	movf	AsicPreCalc@z^(0+128),w
  3803  0E6E  04DC               	iorwf	AsicPreCalc@x^(0+128),f
  3804  0E6F  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3805  0E70  04DD               	iorwf	(AsicPreCalc@x+1)^(0+128),f
  3806  0E71  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3807  0E72  04DE               	iorwf	(AsicPreCalc@x+2)^(0+128),f
  3808  0E73  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3809  0E74  04DF               	iorwf	(AsicPreCalc@x+3)^(0+128),f
  3810                           
  3811                           ;asic.c: 352: m[7-n] += y + x;
  3812  0E75  0858               	movf	AsicPreCalc@y^(0+128),w
  3813  0E76  075C               	addwf	AsicPreCalc@x^(0+128),w
  3814  0E77  00A0               	movwf	??_AsicPreCalc^(0+128)
  3815  0E78  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  3816  0E79  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3817  0E7A  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3818  0E7B  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  3819  0E7C  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3820  0E7D  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3821  0E7E  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  3822  0E7F  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3823  0E80  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3824  0E81  2745  318A         	fcall	PL8	;call to abstracted procedure
  3825  0E83  26B7  318A         	fcall	___bmul
  3826  0E85  27F0  318A         	fcall	PL72	;call to abstracted procedure
  3827  0E87  0021               	movlb	1	; select bank1
  3828  0E88  0820               	movf	??_AsicPreCalc^(0+128),w
  3829  0E89  0781               	addwf	1,f
  3830  0E8A  3141               	addfsr 1,1
  3831  0E8B  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3832  0E8C  3D81               	addwfc	1,f
  3833  0E8D  3141               	addfsr 1,1
  3834  0E8E  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3835  0E8F  3D81               	addwfc	1,f
  3836  0E90  3141               	addfsr 1,1
  3837  0E91  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3838  0E92  3D81               	addwfc	1,f
  3839                           
  3840                           ;asic.c: 354: PrecalcHashes[2-n] = m[7-n];
  3841  0E93  2745  318A         	fcall	PL8	;call to abstracted procedure
  3842  0E95  26B7  318A         	fcall	___bmul
  3843  0E97  3E1C               	addlw	28
  3844  0E98  271E  318A         	fcall	PL2	;call to abstracted procedure
  3845  0E9A  26B7  318A         	fcall	___bmul
  3846  0E9C  3EC8               	addlw	(_PrecalcHashes+8)& (0+255)
  3847  0E9D  0086               	movwf	6
  3848  0E9E  3001               	movlw	1	; select bank3/4
  3849  0E9F  0087               	movwf	7
  3850  0EA0  2769  318A         	fcall	PL16	;call to abstracted procedure
  3851                           
  3852                           ;asic.c: 355: PrecalcHashes[5-n] = m[3-n];
  3853  0EA2  2745  318A         	fcall	PL8	;call to abstracted procedure
  3854  0EA4  26B7  318A         	fcall	___bmul
  3855  0EA6  3E0C               	addlw	12
  3856  0EA7  271E  318A         	fcall	PL2	;call to abstracted procedure
  3857  0EA9  26B7  318A         	fcall	___bmul
  3858  0EAB  3ED4               	addlw	(_PrecalcHashes+20)& (0+255)
  3859  0EAC  0086               	movwf	6
  3860  0EAD  3001               	movlw	1	; select bank3/4
  3861  0EAE  0087               	movwf	7
  3862  0EAF  2769  318A         	fcall	PL16	;call to abstracted procedure
  3863  0EB1  3003               	movlw	3
  3864  0EB2  0AE0               	incf	AsicPreCalc@n^(0+128),f
  3865  0EB3  0260               	subwf	AsicPreCalc@n^(0+128),w
  3866  0EB4  1803               	btfsc	3,0
  3867  0EB5  0008               	return
  3868  0EB6  2D40               	goto	l5848
  3869  0EB7                     __end_of_AsicPreCalc:	
  3870  0EB7                     __ptext8:	
  3871 ;; *************** function ___bmul *****************
  3872 ;; Defined at:
  3873 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\bmul.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  multiplier      1    wreg     unsigned char 
  3876 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  multiplier      1    8[BANK0 ] unsigned char 
  3879 ;;  product         1    7[BANK0 ] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      unsigned char 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0
  3884 ;; Tracked objects:
  3885 ;;		On entry : 1C/2
  3886 ;;		On exit  : 1F/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3893 ;;Total ram usage:        3 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    4
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_AsicPreCalc
  3900 ;;		_ProcessIO
  3901 ;;		_SendCmdReply
  3902 ;;		i1_SendCmdReply
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           
  3907                           ;psect for function ___bmul
  3908  0EB7                     ___bmul:	
  3909                           
  3910                           ;incstack = 0
  3911                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3912                           ;___bmul@multiplier stored from wreg
  3913  0EB7  0020               	movlb	0	; select bank0
  3914  0EB8  00D8               	movwf	___bmul@multiplier
  3915  0EB9  01D7               	clrf	___bmul@product
  3916  0EBA                     l6086:	
  3917  0EBA  0856               	movf	___bmul@multiplicand,w
  3918  0EBB  1858               	btfsc	___bmul@multiplier,0
  3919  0EBC  07D7               	addwf	___bmul@product,f
  3920  0EBD  35D6               	lslf	___bmul@multiplicand,f
  3921  0EBE  36D8               	lsrf	___bmul@multiplier,f
  3922  0EBF  08D8               	movf	___bmul@multiplier,f
  3923  0EC0  1D03               	skipz
  3924  0EC1  2EBA               	goto	l6086
  3925  0EC2  0857               	movf	___bmul@product,w
  3926  0EC3  0008               	return
  3927  0EC4                     __end_of___bmul:	
  3928  0EC4                     __ptext9:	
  3929 ;; *************** function _rotate *****************
  3930 ;; Defined at:
  3931 ;;		line 314 in file "asic.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  x               4    9[BANK0 ] unsigned long 
  3934 ;;  y               1   13[BANK0 ] unsigned char 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;		None
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  4    9[BANK0 ] unsigned long 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0
  3941 ;; Tracked objects:
  3942 ;;		On entry : 1F/0
  3943 ;;		On exit  : 1F/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3946 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3948 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3949 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3950 ;;Total ram usage:       13 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    4
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_AsicPreCalc
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _rotate
  3962  0EC4                     _rotate:	
  3963                           
  3964                           ;asic.c: 315: return ((x<<y) | (x>>(32-y)));
  3965                           
  3966                           ;incstack = 0
  3967                           ; Regs used in _rotate: [wreg+status,2+status,0]
  3968  0EC4  0859               	movf	rotate@x,w
  3969  0EC5  00DE               	movwf	??_rotate
  3970  0EC6  085A               	movf	rotate@x+1,w
  3971  0EC7  00DF               	movwf	??_rotate+1
  3972  0EC8  085B               	movf	rotate@x+2,w
  3973  0EC9  00E0               	movwf	??_rotate+2
  3974  0ECA  085C               	movf	rotate@x+3,w
  3975  0ECB  00E1               	movwf	??_rotate+3
  3976  0ECC  085D               	movf	rotate@y,w
  3977  0ECD  3C20               	sublw	32
  3978  0ECE  0A89               	incf	9,f
  3979  0ECF  2ED5               	goto	u4530
  3980  0ED0                     u4535:	
  3981  0ED0  1003               	clrc
  3982  0ED1  0CE1               	rrf	??_rotate+3,f
  3983  0ED2  0CE0               	rrf	??_rotate+2,f
  3984  0ED3  0CDF               	rrf	??_rotate+1,f
  3985  0ED4  0CDE               	rrf	??_rotate,f
  3986  0ED5                     u4530:	
  3987  0ED5  3EFF               	addlw	-1
  3988  0ED6  1D03               	skipz
  3989  0ED7  2ED0               	goto	u4535
  3990  0ED8  0859               	movf	rotate@x,w
  3991  0ED9  00E2               	movwf	??_rotate+4
  3992  0EDA  085A               	movf	rotate@x+1,w
  3993  0EDB  00E3               	movwf	??_rotate+5
  3994  0EDC  085B               	movf	rotate@x+2,w
  3995  0EDD  00E4               	movwf	??_rotate+6
  3996  0EDE  085C               	movf	rotate@x+3,w
  3997  0EDF  00E5               	movwf	??_rotate+7
  3998  0EE0  0A5D               	incf	rotate@y,w
  3999  0EE1  2EE6               	goto	u4540
  4000  0EE2                     u4545:	
  4001  0EE2  35E2               	lslf	??_rotate+4,f
  4002  0EE3  0DE3               	rlf	??_rotate+5,f
  4003  0EE4  0DE4               	rlf	??_rotate+6,f
  4004  0EE5  0DE5               	rlf	??_rotate+7,f
  4005  0EE6                     u4540:	
  4006  0EE6  0B89               	decfsz	9,f
  4007  0EE7  2EE2               	goto	u4545
  4008  0EE8  0862               	movf	??_rotate+4,w
  4009  0EE9  04DE               	iorwf	??_rotate,f
  4010  0EEA  0863               	movf	??_rotate+5,w
  4011  0EEB  04DF               	iorwf	??_rotate+1,f
  4012  0EEC  0864               	movf	??_rotate+6,w
  4013  0EED  04E0               	iorwf	??_rotate+2,f
  4014  0EEE  0865               	movf	??_rotate+7,w
  4015  0EEF  04E1               	iorwf	??_rotate+3,f
  4016  0EF0  0861               	movf	??_rotate+3,w
  4017  0EF1  00DC               	movwf	?_rotate+3
  4018  0EF2  0860               	movf	??_rotate+2,w
  4019  0EF3  00DB               	movwf	?_rotate+2
  4020  0EF4  085F               	movf	??_rotate+1,w
  4021  0EF5  00DA               	movwf	?_rotate+1
  4022  0EF6  085E               	movf	??_rotate,w
  4023  0EF7  00D9               	movwf	?_rotate
  4024  0EF8  0008               	return
  4025  0EF9                     __end_of_rotate:	
  4026  0EF9                     __ptext3:	
  4027 ;; *************** function ___lwdiv *****************
  4028 ;; Defined at:
  4029 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  divisor         2    6[BANK0 ] unsigned int 
  4032 ;;  dividend        2    8[BANK0 ] unsigned int 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  quotient        2   11[BANK0 ] unsigned int 
  4035 ;;  counter         1   10[BANK0 ] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  2    6[BANK0 ] unsigned int 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0
  4040 ;; Tracked objects:
  4041 ;;		On entry : 1F/0
  4042 ;;		On exit  : 1F/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4045 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4048 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4049 ;;Total ram usage:        7 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    4
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_ProcessCmd
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function ___lwdiv
  4061  0EF9                     ___lwdiv:	
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4065  0EF9  01DB               	clrf	___lwdiv@quotient
  4066  0EFA  01DC               	clrf	___lwdiv@quotient+1
  4067  0EFB  0857               	movf	___lwdiv@divisor+1,w
  4068  0EFC  0456               	iorwf	___lwdiv@divisor,w
  4069  0EFD  1903               	skipnz
  4070  0EFE  2F19               	goto	l6122
  4071  0EFF  01DA               	clrf	___lwdiv@counter
  4072  0F00                     L7:	
  4073  0F00  0ADA               	incf	___lwdiv@counter,f
  4074  0F01  1BD7               	btfsc	___lwdiv@divisor+1,7
  4075  0F02  2F06               	goto	l6110
  4076  0F03  35D6               	lslf	___lwdiv@divisor,f
  4077  0F04  0DD7               	rlf	___lwdiv@divisor+1,f
  4078  0F05  2F00               	goto	L7
  4079  0F06                     l6110:	
  4080  0F06  35DB               	lslf	___lwdiv@quotient,f
  4081  0F07  0DDC               	rlf	___lwdiv@quotient+1,f
  4082  0F08  0857               	movf	___lwdiv@divisor+1,w
  4083  0F09  0259               	subwf	___lwdiv@dividend+1,w
  4084  0F0A  1D03               	skipz
  4085  0F0B  2F0E               	goto	u4885
  4086  0F0C  0856               	movf	___lwdiv@divisor,w
  4087  0F0D  0258               	subwf	___lwdiv@dividend,w
  4088  0F0E                     u4885:	
  4089  0F0E  1C03               	skipc
  4090  0F0F  2F15               	goto	l6118
  4091  0F10  0856               	movf	___lwdiv@divisor,w
  4092  0F11  02D8               	subwf	___lwdiv@dividend,f
  4093  0F12  0857               	movf	___lwdiv@divisor+1,w
  4094  0F13  3BD9               	subwfb	___lwdiv@dividend+1,f
  4095  0F14  145B               	bsf	___lwdiv@quotient,0
  4096  0F15                     l6118:	
  4097  0F15  36D7               	lsrf	___lwdiv@divisor+1,f
  4098  0F16  0CD6               	rrf	___lwdiv@divisor,f
  4099  0F17  0BDA               	decfsz	___lwdiv@counter,f
  4100  0F18  2F06               	goto	l6110
  4101  0F19                     l6122:	
  4102  0F19  085C               	movf	___lwdiv@quotient+1,w
  4103  0F1A  00D7               	movwf	?___lwdiv+1
  4104  0F1B  085B               	movf	___lwdiv@quotient,w
  4105  0F1C  00D6               	movwf	?___lwdiv
  4106  0F1D  0008               	return
  4107  0F1E                     __end_of___lwdiv:	
  4108  0F1E                     PL2:	
  4109  0F1E  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4110  0F1F  0086               	movwf	6
  4111  0F20  0187               	clrf	7
  4112  0F21  3F40               	moviw [0]fsr1
  4113  0F22  0021               	movlb	1	; select bank1
  4114  0F23  00A0               	movwf	??_AsicPreCalc^(0+128)
  4115  0F24  3F41               	moviw [1]fsr1
  4116  0F25  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4117  0F26  3F42               	moviw [2]fsr1
  4118  0F27  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4119  0F28  3F43               	moviw [3]fsr1
  4120  0F29  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4121  0F2A  30FC               	movlw	-4
  4122  0F2B  0020               	movlb	0	; select bank0
  4123  0F2C  00D6               	movwf	?___bmul
  4124  0F2D  0021               	movlb	1	; select bank1
  4125  0F2E  0860               	movf	AsicPreCalc@n^(0+128),w
  4126  0F2F  0008               	return
  4127  0F30                     __end_ofPL2:	
  4128  0F30                     PL4:	
  4129  0F30  0086               	movwf	6
  4130  0F31  0187               	clrf	7
  4131  0F32  3F40               	moviw [0]fsr1
  4132  0F33  0021               	movlb	1	; select bank1
  4133  0F34  00A0               	movwf	??_AsicPreCalc^(0+128)
  4134  0F35  3F41               	moviw [1]fsr1
  4135  0F36  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4136  0F37  3F42               	moviw [2]fsr1
  4137  0F38  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4138  0F39  3F43               	moviw [3]fsr1
  4139  0F3A  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4140  0F3B  0820               	movf	??_AsicPreCalc^(0+128),w
  4141  0F3C  0008               	return
  4142  0F3D                     __end_ofPL4:	
  4143  0F3D                     PL6:	
  4144  0F3D  00A0               	movwf	??_AsicPreCalc^(0+128)
  4145  0F3E  3F41               	moviw [1]fsr1
  4146  0F3F  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4147  0F40  3F42               	moviw [2]fsr1
  4148  0F41  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4149  0F42  3F43               	moviw [3]fsr1
  4150  0F43  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4151  0F44  0008               	return
  4152  0F45                     __end_ofPL6:	
  4153  0F45                     PL8:	
  4154  0F45  30FC               	movlw	-4
  4155  0F46  0020               	movlb	0	; select bank0
  4156  0F47  00D6               	movwf	?___bmul
  4157  0F48  0021               	movlb	1	; select bank1
  4158  0F49  0860               	movf	AsicPreCalc@n^(0+128),w
  4159  0F4A  0008               	return
  4160  0F4B                     __end_ofPL8:	
  4161  0F4B                     PL10:	
  4162  0F4B  085C               	movf	?_rotate+3,w
  4163  0F4C  0021               	movlb	1	; select bank1
  4164  0F4D  00DB               	movwf	(AsicPreCalc@y+3)^(0+128)
  4165  0F4E  0020               	movlb	0	; select bank0
  4166  0F4F  085B               	movf	?_rotate+2,w
  4167  0F50  0021               	movlb	1	; select bank1
  4168  0F51  00DA               	movwf	(AsicPreCalc@y+2)^(0+128)
  4169  0F52  0020               	movlb	0	; select bank0
  4170  0F53  085A               	movf	?_rotate+1,w
  4171  0F54  0021               	movlb	1	; select bank1
  4172  0F55  00D9               	movwf	(AsicPreCalc@y+1)^(0+128)
  4173  0F56  0020               	movlb	0	; select bank0
  4174  0F57  0859               	movf	?_rotate,w
  4175  0F58  0021               	movlb	1	; select bank1
  4176  0F59  00D8               	movwf	AsicPreCalc@y^(0+128)
  4177  0F5A  0008               	return
  4178  0F5B                     __end_ofPL10:	
  4179  0F5B                     PL12:	
  4180  0F5B  00D9               	movwf	?_rotate
  4181  0F5C  3F41               	moviw [1]fsr1
  4182  0F5D  00DA               	movwf	?_rotate+1
  4183  0F5E  3F42               	moviw [2]fsr1
  4184  0F5F  00DB               	movwf	?_rotate+2
  4185  0F60  3F43               	moviw [3]fsr1
  4186  0F61  00DC               	movwf	?_rotate+3
  4187  0F62  0008               	return
  4188  0F63                     __end_ofPL12:	
  4189  0F63                     PL14:	
  4190  0F63  3E10               	addlw	16
  4191  0F64  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4192  0F65  0086               	movwf	6
  4193  0F66  0187               	clrf	7
  4194  0F67  3F40               	moviw [0]fsr1
  4195  0F68  0008               	return
  4196  0F69                     __end_ofPL14:	
  4197  0F69                     PL16:	
  4198  0F69  0021               	movlb	1	; select bank1
  4199  0F6A  0820               	movf	??_AsicPreCalc^(0+128),w
  4200  0F6B  3FC0               	movwi [0]fsr1
  4201  0F6C  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4202  0F6D  3FC1               	movwi [1]fsr1
  4203  0F6E  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4204  0F6F  3FC2               	movwi [2]fsr1
  4205  0F70  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4206  0F71  3FC3               	movwi [3]fsr1
  4207  0F72  0008               	return
  4208  0F73                     __end_ofPL16:	
  4209  0F73                     PL18:	
  4210  0F73  0860               	movf	AsicPreCalc@n^(0+128),w
  4211  0F74  00A0               	movwf	??_AsicPreCalc^(0+128)
  4212  0F75  01A1               	clrf	(??_AsicPreCalc^(0+128)+1)
  4213  0F76  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4214  0F77  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4215  0F78  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4216  0F79  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4217  0F7A  0820               	movf	??_AsicPreCalc^(0+128),w
  4218  0F7B  0020               	movlb	0	; select bank0
  4219  0F7C  0766               	addwf	AsicPreCalc@work,w
  4220  0F7D  0021               	movlb	1	; select bank1
  4221  0F7E  00A2               	movwf	(??_AsicPreCalc+2)^(0+128)
  4222  0F7F  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4223  0F80  0020               	movlb	0	; select bank0
  4224  0F81  3D67               	addwfc	AsicPreCalc@work+1,w
  4225  0F82  0021               	movlb	1	; select bank1
  4226  0F83  00A3               	movwf	(??_AsicPreCalc+3)^(0+128)
  4227  0F84  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4228  0F85  0008               	return
  4229  0F86                     __end_ofPL18:	
  4230  0F86                     PL20:	
  4231  0F86  0860               	movf	AsicPreCalc@n^(0+128),w
  4232  0F87  3C00               	sublw	0
  4233  0F88  3907               	andlw	7
  4234  0F89  0709               	addwf	9,w
  4235  0F8A  0709               	addwf	9,w
  4236  0F8B  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4237  0F8C  0086               	movwf	6
  4238  0F8D  0008               	return
  4239  0F8E                     __end_ofPL20:	
  4240  0F8E                     PL22:	
  4241  0F8E  0021               	movlb	1	; select bank1
  4242  0F8F  086B               	movf	_WorkNow^(0+128),w
  4243  0F90  0020               	movlb	0	; select bank0
  4244  0F91  00D6               	movwf	?___wmul
  4245  0F92  302D               	movlw	45
  4246  0F93  01D7               	clrf	?___wmul+1
  4247  0F94  00D8               	movwf	?___wmul+2
  4248  0F95  01D9               	clrf	?___wmul+3
  4249  0F96  0008               	return
  4250  0F97                     __end_ofPL22:	
  4251  0F97                     PL28:	
  4252  0F97  085C               	movf	?_rotate+3,w
  4253  0F98  0021               	movlb	1	; select bank1
  4254  0F99  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  4255  0F9A  0020               	movlb	0	; select bank0
  4256  0F9B  085B               	movf	?_rotate+2,w
  4257  0F9C  0021               	movlb	1	; select bank1
  4258  0F9D  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  4259  0F9E  0020               	movlb	0	; select bank0
  4260  0F9F  085A               	movf	?_rotate+1,w
  4261  0FA0  0021               	movlb	1	; select bank1
  4262  0FA1  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  4263  0FA2  0020               	movlb	0	; select bank0
  4264  0FA3  0859               	movf	?_rotate,w
  4265  0FA4  0021               	movlb	1	; select bank1
  4266  0FA5  00DC               	movwf	AsicPreCalc@x^(0+128)
  4267  0FA6  0008               	return
  4268  0FA7                     __end_ofPL28:	
  4269  0FA7                     PL30:	
  4270  0FA7  3907               	andlw	7
  4271  0FA8  0709               	addwf	9,w
  4272  0FA9  0709               	addwf	9,w
  4273  0FAA  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4274  0FAB  0086               	movwf	6
  4275  0FAC  0008               	return
  4276  0FAD                     __end_ofPL30:	
  4277  0FAD                     PL32:	
  4278  0FAD  3F40               	moviw [0]fsr1
  4279  0FAE  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  4280  0FAF  3F41               	moviw [1]fsr1
  4281  0FB0  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4282  0FB1  3F42               	moviw [2]fsr1
  4283  0FB2  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4284  0FB3  3F43               	moviw [3]fsr1
  4285  0FB4  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4286  0FB5  0008               	return
  4287  0FB6                     __end_ofPL32:	
  4288  0FB6                     PL34:	
  4289  0FB6  0020               	movlb	0	; select bank0
  4290  0FB7  00E6               	movwf	?_AsicPreCalc
  4291  0FB8  3023               	movlw	35
  4292  0FB9  00E7               	movwf	?_AsicPreCalc+1
  4293  0FBA  0008               	return
  4294  0FBB                     __end_ofPL34:	
  4295  0FBB                     PL36:	
  4296  0FBB  07DC               	addwf	AsicPreCalc@x^(0+128),f
  4297  0FBC  3F41               	moviw [1]fsr1
  4298  0FBD  3DDD               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4299  0FBE  3F42               	moviw [2]fsr1
  4300  0FBF  3DDE               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4301  0FC0  3F43               	moviw [3]fsr1
  4302  0FC1  3DDF               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4303  0FC2  0008               	return
  4304  0FC3                     __end_ofPL36:	
  4305  0FC3                     PL46:	
  4306  0FC3  06D8               	xorwf	AsicPreCalc@y^(0+128),f
  4307  0FC4  085D               	movf	(AsicPreCalc@x+1)^(0+128),w
  4308  0FC5  06D9               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  4309  0FC6  085E               	movf	(AsicPreCalc@x+2)^(0+128),w
  4310  0FC7  06DA               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  4311  0FC8  085F               	movf	(AsicPreCalc@x+3)^(0+128),w
  4312  0FC9  06DB               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  4313  0FCA  0008               	return
  4314  0FCB                     __end_ofPL46:	
  4315  0FCB                     PL48:	
  4316  0FCB  0020               	movlb	0	; select bank0
  4317  0FCC  085D               	movf	SendAsicData@work+1,w
  4318  0FCD  0022               	movlb	2	; select bank2
  4319  0FCE  00AD               	movwf	(_send32_data+1)^(0+256)
  4320  0FCF  0020               	movlb	0	; select bank0
  4321  0FD0  085C               	movf	SendAsicData@work,w
  4322  0FD1  0022               	movlb	2	; select bank2
  4323  0FD2  00AC               	movwf	_send32_data^(0+256)
  4324  0FD3  0008               	return
  4325  0FD4                     __end_ofPL48:	
  4326  0FD4                     PL52:	
  4327  0FD4  06B4               	xorwf	AsicPreCalc@z^(0+128),f
  4328  0FD5  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  4329  0FD6  06B5               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  4330  0FD7  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  4331  0FD8  06B6               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  4332  0FD9  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  4333  0FDA  06B7               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  4334  0FDB  0008               	return
  4335  0FDC                     __end_ofPL52:	
  4336  0FDC                     PL56:	
  4337  0FDC  05DC               	andwf	AsicPreCalc@x^(0+128),f
  4338  0FDD  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4339  0FDE  05DD               	andwf	(AsicPreCalc@x+1)^(0+128),f
  4340  0FDF  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4341  0FE0  05DE               	andwf	(AsicPreCalc@x+2)^(0+128),f
  4342  0FE1  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4343  0FE2  05DF               	andwf	(AsicPreCalc@x+3)^(0+128),f
  4344  0FE3  0008               	return
  4345  0FE4                     __end_ofPL56:	
  4346  0FE4                     PL58:	
  4347  0FE4  0865               	movf	ProcessCmd@cmd^(0+128),w
  4348  0FE5  0020               	movlb	0	; select bank0
  4349  0FE6  00DC               	movwf	?_SendCmdReply
  4350  0FE7  3002               	movlw	2
  4351  0FE8  00DD               	movwf	?_SendCmdReply+1
  4352  0FE9  0008               	return
  4353  0FEA                     __end_ofPL58:	
  4354  0FEA                     PL62:	
  4355  0FEA  0865               	movf	ProcessCmd@cmd^(0+128),w
  4356  0FEB  3E02               	addlw	2
  4357  0FEC  0086               	movwf	6
  4358  0FED  3002               	movlw	2	; select bank4/5
  4359  0FEE  0087               	movwf	7
  4360  0FEF  0008               	return
  4361  0FF0                     __end_ofPL62:	
  4362  0FF0                     PL72:	
  4363  0FF0  3E1C               	addlw	28
  4364  0FF1  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4365  0FF2  0086               	movwf	6
  4366  0FF3  0187               	clrf	7
  4367  0FF4  0008               	return
  4368  0FF5                     __end_ofPL72:	
  4369  0FF5                     PL80:	
  4370  0FF5  0856               	movf	?___wmul,w
  4371  0FF6  00E8               	movwf	??_AsicPushWork
  4372  0FF7  0857               	movf	?___wmul+1,w
  4373  0FF8  00E9               	movwf	??_AsicPushWork+1
  4374  0FF9  0868               	movf	??_AsicPushWork,w
  4375  0FFA  0008               	return
  4376  0FFB                     __end_ofPL80:	
  4377  0FFB                     PL88:	
  4378  0FFB  35DC               	lslf	_ClockCfg^(0+256),f
  4379  0FFC  0DDD               	rlf	(_ClockCfg+1)^(0+256),f
  4380  0FFD  0DDE               	rlf	(_ClockCfg+2)^(0+256),f
  4381  0FFE  0DDF               	rlf	(_ClockCfg+3)^(0+256),f
  4382  0FFF  0008               	return
  4383  1000                     __end_ofPL88:	
  4384                           
  4385                           	psect	text18
  4386  08BE                     __ptext18:	
  4387 ;; *************** function _DetectAsics *****************
  4388 ;; Defined at:
  4389 ;;		line 144 in file "klondike.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;		None
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  x               1   22[BANK0 ] unsigned char 
  4394 ;; Return value:  Size  Location     Type
  4395 ;;		None               void
  4396 ;; Registers used:
  4397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4398 ;; Tracked objects:
  4399 ;;		On entry : 1F/3
  4400 ;;		On exit  : 1F/2
  4401 ;;		Unchanged: 0/0
  4402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;Total ram usage:        9 bytes
  4408 ;; Hardware stack levels used:    1
  4409 ;; Hardware stack levels required when called:    5
  4410 ;; This function calls:
  4411 ;;		___awdiv
  4412 ;; This function is called by:
  4413 ;;		_UserInit
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _DetectAsics
  4419  08BE                     _DetectAsics:	
  4420  08BE                     l5994:	
  4421                           ;incstack = 0
  4422                           ; Regs used in _DetectAsics: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4423                           
  4424                           
  4425                           ;klondike.c: 159: Status.ChipCount = 16;
  4426  08BE  3010               	movlw	16
  4427  08BF  0022               	movlb	2	; select bank2
  4428  08C0  00D0               	movwf	(_Status^(0+256)+1)	;volatile
  4429                           
  4430                           ;klondike.c: 162: BankSize = (Status.ChipCount+1)/2;
  4431  08C1  3002               	movlw	2
  4432  08C2  0020               	movlb	0	; select bank0
  4433  08C3  00D6               	movwf	?___awdiv
  4434  08C4  01D7               	clrf	?___awdiv+1
  4435  08C5  0022               	movlb	2	; select bank2
  4436  08C6  0850               	movf	(_Status^(0+256)+1),w	;volatile
  4437  08C7  3E01               	addlw	1
  4438  08C8  0020               	movlb	0	; select bank0
  4439  08C9  00D8               	movwf	?___awdiv+2
  4440  08CA  3000               	movlw	0
  4441  08CB  1803               	skipnc
  4442  08CC  3001               	movlw	1
  4443  08CD  00D9               	movwf	?___awdiv+3
  4444  08CE  2132  3188         	fcall	___awdiv
  4445  08D0  0856               	movf	?___awdiv,w
  4446  08D1  0022               	movlb	2	; select bank2
  4447  08D2  00EA               	movwf	_BankSize^(0+256)
  4448                           
  4449                           ;klondike.c: 163: Status.MaxCount = 16384 / BankSize;
  4450  08D3  0020               	movlb	0	; select bank0
  4451  08D4  00D6               	movwf	?___awdiv
  4452  08D5  3040               	movlw	64
  4453  08D6  01D7               	clrf	?___awdiv+1
  4454  08D7  01D8               	clrf	?___awdiv+2
  4455  08D8  00D9               	movwf	?___awdiv+3
  4456  08D9  2132  3188         	fcall	___awdiv
  4457  08DB  0857               	movf	?___awdiv+1,w
  4458  08DC  0022               	movlb	2	; select bank2
  4459  08DD  00DA               	movwf	((_Status+1)^(0+256)+10)	;volatile
  4460  08DE  0020               	movlb	0	; select bank0
  4461  08DF  0856               	movf	?___awdiv,w
  4462  08E0  0022               	movlb	2	; select bank2
  4463  08E1  00D9               	movwf	(_Status^(0+256)+10)	;volatile
  4464                           
  4465                           ;klondike.c: 164: NonceRanges[0] = 0;
  4466  08E2  0023               	movlb	3	; select bank3
  4467  08E3  01A0               	clrf	_NonceRanges^(0+384)
  4468  08E4  01A1               	clrf	(_NonceRanges+1)^(0+384)
  4469  08E5  01A2               	clrf	(_NonceRanges+2)^(0+384)
  4470  08E6  01A3               	clrf	(_NonceRanges+3)^(0+384)
  4471                           
  4472                           ;klondike.c: 165: for(BYTE x = 1; x < BankSize; x++)
  4473  08E7  0020               	movlb	0	; select bank0
  4474  08E8  01E6               	clrf	DetectAsics@x
  4475  08E9                     l6006:	
  4476  08E9  0AE6               	incf	DetectAsics@x,f
  4477  08EA  0022               	movlb	2	; select bank2
  4478  08EB  086A               	movf	_BankSize^(0+256),w
  4479  08EC  0020               	movlb	0	; select bank0
  4480  08ED  0266               	subwf	DetectAsics@x,w
  4481  08EE  1803               	btfsc	3,0
  4482  08EF  292C               	goto	l6010
  4483                           
  4484                           ;klondike.c: 166: NonceRanges[x] = NonceRanges[x-1] + 2*BankRanges[BankSize-1];
  4485  08F0  0866               	movf	DetectAsics@x,w
  4486  08F1  0709               	addwf	9,w
  4487  08F2  0709               	addwf	9,w
  4488  08F3  3E9C               	addlw	(_NonceRanges+252)& (0+255)
  4489  08F4  0086               	movwf	6
  4490  08F5  3001               	movlw	1	; select bank3/4
  4491  08F6  0087               	movwf	7
  4492  08F7  3F40               	moviw [0]fsr1
  4493  08F8  00DE               	movwf	??_DetectAsics
  4494  08F9  3F41               	moviw [1]fsr1
  4495  08FA  00DF               	movwf	??_DetectAsics+1
  4496  08FB  3F42               	moviw [2]fsr1
  4497  08FC  00E0               	movwf	??_DetectAsics+2
  4498  08FD  3F43               	moviw [3]fsr1
  4499  08FE  00E1               	movwf	??_DetectAsics+3
  4500  08FF  0022               	movlb	2	; select bank2
  4501  0900  086A               	movf	_BankSize^(0+256),w
  4502  0901  0709               	addwf	9,w
  4503  0902  0709               	addwf	9,w
  4504  0903  3E1C               	addlw	(_BankRanges+252)& (0+255)
  4505  0904  0086               	movwf	6
  4506  0905  3003               	movlw	3	; select bank6/7
  4507  0906  0087               	movwf	7
  4508  0907  3F40               	moviw [0]fsr1
  4509  0908  0020               	movlb	0	; select bank0
  4510  0909  00E2               	movwf	??_DetectAsics+4
  4511  090A  3F41               	moviw [1]fsr1
  4512  090B  00E3               	movwf	??_DetectAsics+5
  4513  090C  3F42               	moviw [2]fsr1
  4514  090D  00E4               	movwf	??_DetectAsics+6
  4515  090E  3F43               	moviw [3]fsr1
  4516  090F  00E5               	movwf	??_DetectAsics+7
  4517  0910  35E2               	lslf	??_DetectAsics+4,f
  4518  0911  0DE3               	rlf	??_DetectAsics+5,f
  4519  0912  0DE4               	rlf	??_DetectAsics+6,f
  4520  0913  0DE5               	rlf	??_DetectAsics+7,f
  4521  0914  0862               	movf	??_DetectAsics+4,w
  4522  0915  07DE               	addwf	??_DetectAsics,f
  4523  0916  0863               	movf	??_DetectAsics+5,w
  4524  0917  3DDF               	addwfc	??_DetectAsics+1,f
  4525  0918  0864               	movf	??_DetectAsics+6,w
  4526  0919  3DE0               	addwfc	??_DetectAsics+2,f
  4527  091A  0865               	movf	??_DetectAsics+7,w
  4528  091B  3DE1               	addwfc	??_DetectAsics+3,f
  4529  091C  0866               	movf	DetectAsics@x,w
  4530  091D  0709               	addwf	9,w
  4531  091E  0709               	addwf	9,w
  4532  091F  3EA0               	addlw	_NonceRanges& (0+255)
  4533  0920  0086               	movwf	6
  4534  0921  3001               	movlw	1	; select bank3/4
  4535  0922  0087               	movwf	7
  4536  0923  085E               	movf	??_DetectAsics,w
  4537  0924  3FC0               	movwi [0]fsr1
  4538  0925  085F               	movf	??_DetectAsics+1,w
  4539  0926  3FC1               	movwi [1]fsr1
  4540  0927  0860               	movf	??_DetectAsics+2,w
  4541  0928  3FC2               	movwi [2]fsr1
  4542  0929  0861               	movf	??_DetectAsics+3,w
  4543  092A  3FC3               	movwi [3]fsr1
  4544  092B  28E9               	goto	l6006
  4545  092C                     l6010:	
  4546                           
  4547                           ;klondike.c: 167: Status.State ='R';
  4548  092C  3052               	movlw	82
  4549  092D  0022               	movlb	2	; select bank2
  4550  092E  00CF               	movwf	_Status^(0+256)	;volatile
  4551                           
  4552                           ;klondike.c: 168: Status.HashCount = 0;
  4553  092F  01D7               	clrf	(_Status^(0+256)+8)	;volatile
  4554  0930  01D8               	clrf	((_Status+1)^(0+256)+8)	;volatile
  4555  0931  0008               	return
  4556  0932                     __end_of_DetectAsics:	
  4557  0932                     __ptext19:	
  4558 ;; *************** function ___awdiv *****************
  4559 ;; Defined at:
  4560 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\awdiv.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  divisor         2    6[BANK0 ] int 
  4563 ;;  dividend        2    8[BANK0 ] int 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  quotient        2   12[BANK0 ] int 
  4566 ;;  sign            1   11[BANK0 ] unsigned char 
  4567 ;;  counter         1   10[BANK0 ] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  2    6[BANK0 ] int 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0
  4572 ;; Tracked objects:
  4573 ;;		On entry : 1F/0
  4574 ;;		On exit  : 1F/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;Total ram usage:        8 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    4
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_DetectAsics
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           
  4592                           ;psect for function ___awdiv
  4593  0932                     ___awdiv:	
  4594                           
  4595                           ;incstack = 0
  4596                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4597  0932  01DB               	clrf	___awdiv@sign
  4598  0933  1FD7               	btfss	___awdiv@divisor+1,7
  4599  0934  293C               	goto	l4652
  4600  0935  09D6               	comf	___awdiv@divisor,f
  4601  0936  09D7               	comf	___awdiv@divisor+1,f
  4602  0937  0AD6               	incf	___awdiv@divisor,f
  4603  0938  1903               	skipnz
  4604  0939  0AD7               	incf	___awdiv@divisor+1,f
  4605  093A  01DB               	clrf	___awdiv@sign
  4606  093B  0ADB               	incf	___awdiv@sign,f
  4607  093C                     l4652:	
  4608  093C  1FD9               	btfss	___awdiv@dividend+1,7
  4609  093D  2945               	goto	l4658
  4610  093E  09D8               	comf	___awdiv@dividend,f
  4611  093F  09D9               	comf	___awdiv@dividend+1,f
  4612  0940  0AD8               	incf	___awdiv@dividend,f
  4613  0941  1903               	skipnz
  4614  0942  0AD9               	incf	___awdiv@dividend+1,f
  4615  0943  3001               	movlw	1
  4616  0944  06DB               	xorwf	___awdiv@sign,f
  4617  0945                     l4658:	
  4618  0945  01DC               	clrf	___awdiv@quotient
  4619  0946  01DD               	clrf	___awdiv@quotient+1
  4620  0947  0857               	movf	___awdiv@divisor+1,w
  4621  0948  0456               	iorwf	___awdiv@divisor,w
  4622  0949  1903               	skipnz
  4623  094A  2965               	goto	l4680
  4624  094B  01DA               	clrf	___awdiv@counter
  4625  094C                     L8:	
  4626  094C  0ADA               	incf	___awdiv@counter,f
  4627  094D  1BD7               	btfsc	___awdiv@divisor+1,7
  4628  094E  2952               	goto	l4668
  4629  094F  35D6               	lslf	___awdiv@divisor,f
  4630  0950  0DD7               	rlf	___awdiv@divisor+1,f
  4631  0951  294C               	goto	L8
  4632  0952                     l4668:	
  4633  0952  35DC               	lslf	___awdiv@quotient,f
  4634  0953  0DDD               	rlf	___awdiv@quotient+1,f
  4635  0954  0857               	movf	___awdiv@divisor+1,w
  4636  0955  0259               	subwf	___awdiv@dividend+1,w
  4637  0956  1D03               	skipz
  4638  0957  295A               	goto	u3235
  4639  0958  0856               	movf	___awdiv@divisor,w
  4640  0959  0258               	subwf	___awdiv@dividend,w
  4641  095A                     u3235:	
  4642  095A  1C03               	skipc
  4643  095B  2961               	goto	l4676
  4644  095C  0856               	movf	___awdiv@divisor,w
  4645  095D  02D8               	subwf	___awdiv@dividend,f
  4646  095E  0857               	movf	___awdiv@divisor+1,w
  4647  095F  3BD9               	subwfb	___awdiv@dividend+1,f
  4648  0960  145C               	bsf	___awdiv@quotient,0
  4649  0961                     l4676:	
  4650  0961  36D7               	lsrf	___awdiv@divisor+1,f
  4651  0962  0CD6               	rrf	___awdiv@divisor,f
  4652  0963  0BDA               	decfsz	___awdiv@counter,f
  4653  0964  2952               	goto	l4668
  4654  0965                     l4680:	
  4655  0965  085B               	movf	___awdiv@sign,w
  4656  0966  1903               	btfsc	3,2
  4657  0967  296D               	goto	l4684
  4658  0968  09DC               	comf	___awdiv@quotient,f
  4659  0969  09DD               	comf	___awdiv@quotient+1,f
  4660  096A  0ADC               	incf	___awdiv@quotient,f
  4661  096B  1903               	skipnz
  4662  096C  0ADD               	incf	___awdiv@quotient+1,f
  4663  096D                     l4684:	
  4664  096D  085D               	movf	___awdiv@quotient+1,w
  4665  096E  00D7               	movwf	?___awdiv+1
  4666  096F  085C               	movf	___awdiv@quotient,w
  4667  0970  00D6               	movwf	?___awdiv
  4668  0971  0008               	return
  4669  0972                     __end_of___awdiv:	
  4670                           
  4671                           	psect	text25
  4672  1784                     __ptext25:	
  4673 ;; *************** function _USBCtrlTrfRxService *****************
  4674 ;; Defined at:
  4675 ;;		line 2019 in file "../USB/usb_device.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;		None
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;  byteToRead      1   11[BANK0 ] unsigned char 
  4680 ;;  i               1   10[BANK0 ] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;		None               void
  4683 ;; Registers used:
  4684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 1F/0
  4687 ;;		On exit  : 1D/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4691 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;Total ram usage:        4 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    5
  4697 ;; This function calls:
  4698 ;;		_USBCtrlEPAllowStatusStage
  4699 ;; This function is called by:
  4700 ;;		_USBCtrlTrfOutHandler
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           
  4705                           ;psect for function _USBCtrlTrfRxService
  4706  1784                     _USBCtrlTrfRxService:	
  4707  1784                     l5434:	
  4708                           ;incstack = 0
  4709                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4710                           
  4711                           
  4712                           ;usb_device.c: 2020: BYTE byteToRead;
  4713                           ;usb_device.c: 2021: BYTE i;
  4714                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  4715  1784  086E               	movf	_pBDTEntryEP0OutCurrent,w
  4716  1785  0086               	movwf	6
  4717  1786  0187               	clrf	7
  4718  1787  3F41               	moviw [1]fsr1
  4719  1788  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  4720                           
  4721                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  4722  1789  00D8               	movwf	??_USBCtrlTrfRxService
  4723  178A  01D9               	clrf	??_USBCtrlTrfRxService+1
  4724  178B  0859               	movf	??_USBCtrlTrfRxService+1,w
  4725  178C  0022               	movlb	2	; select bank2
  4726  178D  0224               	subwf	((_outPipes+1)^(0+256)+3),w
  4727  178E  1D03               	skipz
  4728  178F  2F94               	goto	u4085
  4729  1790  0020               	movlb	0	; select bank0
  4730  1791  0858               	movf	??_USBCtrlTrfRxService,w
  4731  1792  0022               	movlb	2	; select bank2
  4732  1793  0223               	subwf	(_outPipes^(0+256)+3),w
  4733  1794                     u4085:	
  4734  1794  1803               	skipnc
  4735  1795  2F99               	goto	l5440
  4736                           
  4737                           ;usb_device.c: 2032: {
  4738                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  4739  1796  0823               	movf	(_outPipes^(0+256)+3),w
  4740  1797  0020               	movlb	0	; select bank0
  4741  1798  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  4742  1799                     l5440:	
  4743                           
  4744                           ;usb_device.c: 2034: }
  4745                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  4746  1799  0020               	movlb	0	; select bank0
  4747  179A  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  4748  179B  00D8               	movwf	??_USBCtrlTrfRxService
  4749  179C  01D9               	clrf	??_USBCtrlTrfRxService+1
  4750  179D  0022               	movlb	2	; select bank2
  4751  179E  0223               	subwf	(_outPipes^(0+256)+3),w
  4752  179F  00A3               	movwf	(_outPipes^(0+256)+3)
  4753  17A0  0020               	movlb	0	; select bank0
  4754  17A1  0859               	movf	??_USBCtrlTrfRxService+1,w
  4755  17A2  0022               	movlb	2	; select bank2
  4756  17A3  3B24               	subwfb	((_outPipes+1)^(0+256)+3),w
  4757  17A4  00A4               	movwf	((_outPipes+1)^(0+256)+3)
  4758                           
  4759                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  4760  17A5  0020               	movlb	0	; select bank0
  4761  17A6  01DA               	clrf	USBCtrlTrfRxService@i
  4762  17A7                     l5450:	
  4763  17A7  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  4764  17A8  025A               	subwf	USBCtrlTrfRxService@i,w
  4765  17A9  1803               	btfsc	3,0
  4766  17AA  2FBB               	goto	l5452
  4767                           
  4768                           ;usb_device.c: 2041: {
  4769                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  4770  17AB  0022               	movlb	2	; select bank2
  4771  17AC  0820               	movf	_outPipes^(0+256),w
  4772  17AD  0086               	movwf	6
  4773  17AE  0187               	clrf	7
  4774  17AF  0020               	movlb	0	; select bank0
  4775  17B0  085A               	movf	USBCtrlTrfRxService@i,w
  4776  17B1  3E48               	addlw	72
  4777  17B2  0084               	movwf	4
  4778  17B3  0185               	clrf	5
  4779  17B4  0800               	movf	0,w
  4780  17B5  0081               	movwf	1
  4781  17B6  0022               	movlb	2	; select bank2
  4782  17B7  0AA0               	incf	_outPipes^(0+256),f
  4783  17B8  0020               	movlb	0	; select bank0
  4784  17B9  0ADA               	incf	USBCtrlTrfRxService@i,f
  4785  17BA  2FA7               	goto	l5450
  4786  17BB                     l5452:	
  4787                           
  4788                           ;usb_device.c: 2043: }
  4789                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  4790  17BB  3003               	movlw	3
  4791  17BC  3E20               	addlw	_outPipes& (0+255)
  4792  17BD  0086               	movwf	6
  4793  17BE  3001               	movlw	1	; select bank2/3
  4794  17BF  0087               	movwf	7
  4795  17C0  0016               	moviw fsr1++
  4796  17C1  0401               	iorwf	1,w
  4797  17C2  1903               	skipnz
  4798  17C3  2FDA               	goto	l5460
  4799                           
  4800                           ;usb_device.c: 2048: {
  4801                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  4802  17C4  0A6F               	incf	_pBDTEntryEP0OutNext,w
  4803  17C5  0086               	movwf	6
  4804  17C6  3008               	movlw	8
  4805  17C7  0187               	clrf	7
  4806  17C8  0081               	movwf	1
  4807                           
  4808                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  4809  17C9  3048               	movlw	72
  4810  17CA  27F6  3197         	fcall	PL42	;call to abstracted procedure
  4811                           
  4812                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  4813  17CC  086E               	movf	_pBDTEntryEP0OutCurrent,w
  4814  17CD  0086               	movwf	6
  4815                           
  4816                           ;usb_device.c: 2052: {
  4817                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  4818  17CE  086F               	movf	_pBDTEntryEP0OutNext,w
  4819  17CF  1B01               	btfsc	1,6
  4820  17D0  2FD5               	goto	L11
  4821  17D1  0086               	movwf	6
  4822  17D2  30C8               	movlw	200
  4823  17D3  0081               	movwf	1
  4824                           
  4825                           ;usb_device.c: 2054: }
  4826  17D4  0008               	return
  4827  17D5                     L11:	
  4828                           ;usb_device.c: 2055: else
  4829                           ;usb_device.c: 2056: {
  4830                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  4831                           
  4832  17D5  0086               	movwf	6
  4833  17D6  3088               	movlw	136
  4834  17D7  0187               	clrf	7
  4835  17D8  0081               	movwf	1
  4836  17D9  0008               	return
  4837  17DA                     l5460:	
  4838                           
  4839                           ;usb_device.c: 2060: else
  4840                           ;usb_device.c: 2061: {
  4841                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  4842  17DA  0A6F               	incf	_pBDTEntryEP0OutNext,w
  4843                           
  4844                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  4845  17DB  27F1  3197         	fcall	PL40	;call to abstracted procedure
  4846  17DD  27F6  3197         	fcall	PL42	;call to abstracted procedure
  4847                           
  4848                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  4849  17DF  086F               	movf	_pBDTEntryEP0OutNext,w
  4850  17E0  0086               	movwf	6
  4851  17E1  3084               	movlw	132
  4852  17E2  0081               	movwf	1
  4853                           
  4854                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  4855  17E3  0022               	movlb	2	; select bank2
  4856  17E4  0825               	movf	(_outPipes+5)^(0+256),w
  4857  17E5  1903               	btfsc	3,2
  4858  17E6  2FEA               	goto	l5466
  4859                           
  4860                           ;usb_device.c: 2078: {
  4861                           ;usb_device.c: 2084: outPipes[0].pFunc();
  4862  17E7  0825               	movf	(_outPipes+5)^(0+256),w
  4863  17E8  3197  2F84         	ljmp	$	;if you get stuck here, you called an invalid pointer
  4864  17EA                     l5466:	
  4865                           
  4866                           ;usb_device.c: 2089: }
  4867                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  4868  17EA  13A2               	bcf	(_outPipes^(0+256)+2),7
  4869                           
  4870                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  4871  17EB  0020               	movlb	0	; select bank0
  4872  17EC  08EC               	movf	_USBDeferStatusStagePacket,f	;volatile
  4873  17ED  1D03               	skipz
  4874  17EE  0008               	return
  4875                           
  4876                           ;usb_device.c: 2105: {
  4877                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  4878  17EF  3183  2BFD         	ljmp	l5196
  4879  17F1                     __end_of_USBCtrlTrfRxService:	
  4880  17F1                     PL40:	
  4881  17F1  0086               	movwf	6
  4882  17F2  3008               	movlw	8
  4883  17F3  0187               	clrf	7
  4884  17F4  0081               	movwf	1
  4885  17F5  3440               	retlw	64
  4886  17F6                     __end_ofPL40:	
  4887  17F6                     PL42:	
  4888  17F6  00D8               	movwf	??_USBCtrlTrfRxService
  4889  17F7  01D9               	clrf	??_USBCtrlTrfRxService+1
  4890  17F8  086F               	movf	_pBDTEntryEP0OutNext,w
  4891  17F9  3E02               	addlw	2
  4892  17FA  0086               	movwf	6
  4893  17FB  0858               	movf	??_USBCtrlTrfRxService,w
  4894  17FC  3FC0               	movwi [0]fsr1
  4895  17FD  0859               	movf	??_USBCtrlTrfRxService+1,w
  4896  17FE  3FC1               	movwi [1]fsr1
  4897  17FF  0008               	return
  4898  1800                     __end_ofPL42:	
  4899                           
  4900                           	psect	text26
  4901  0014                     __ptext26:	
  4902 ;; *************** function _USBCtrlTrfSetupHandler *****************
  4903 ;; Defined at:
  4904 ;;		line 2623 in file "../USB/usb_device.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;		None
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;		None
  4909 ;; Return value:  Size  Location     Type
  4910 ;;		None               void
  4911 ;; Registers used:
  4912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  4913 ;; Tracked objects:
  4914 ;;		On entry : 1F/1
  4915 ;;		On exit  : 1D/0
  4916 ;;		Unchanged: 0/0
  4917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;Total ram usage:        0 bytes
  4923 ;; Hardware stack levels used:    1
  4924 ;; Hardware stack levels required when called:   10
  4925 ;; This function calls:
  4926 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  4927 ;;		_USBCtrlEPServiceComplete
  4928 ;;		_USBCheckStdRequest
  4929 ;; This function is called by:
  4930 ;;		_USBCtrlEPService
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _USBCtrlTrfSetupHandler
  4936  0014                     _USBCtrlTrfSetupHandler:	
  4937  0014                     l5586:	
  4938                           ;incstack = 0
  4939                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  4940                           
  4941                           
  4942                           ;usb_device.c: 2627: shortPacketStatus = 0;
  4943  0014  01EC               	clrf	_shortPacketStatus^(0+128)
  4944                           
  4945                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  4946  0015  0020               	movlb	0	; select bank0
  4947  0016  01EC               	clrf	_USBDeferStatusStagePacket	;volatile
  4948                           
  4949                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  4950  0017  0022               	movlb	2	; select bank2
  4951  0018  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4952                           
  4953                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  4954  0019  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4955                           
  4956                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  4957  001A  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  4958                           
  4959                           ;usb_device.c: 2632: controlTransferState = 0;
  4960  001B  0020               	movlb	0	; select bank0
  4961  001C  01ED               	clrf	_controlTransferState
  4962                           
  4963                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  4964  001D  086A               	movf	_pBDTEntryIn,w
  4965  001E  0086               	movwf	6
  4966  001F  3004               	movlw	4
  4967  0020  0187               	clrf	7
  4968  0021  1381               	bcf	1,7
  4969                           
  4970                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  4971  0022  06EA               	xorwf	_pBDTEntryIn,f
  4972                           
  4973                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  4974  0023  086A               	movf	_pBDTEntryIn,w
  4975  0024  0086               	movwf	6
  4976  0025  3004               	movlw	4
  4977  0026  1381               	bcf	1,7
  4978                           
  4979                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  4980  0027  06EA               	xorwf	_pBDTEntryIn,f
  4981                           
  4982                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  4983  0028  086F               	movf	_pBDTEntryEP0OutNext,w
  4984  0029  0086               	movwf	6
  4985  002A  1381               	bcf	1,7
  4986                           
  4987                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  4988  002B  0022               	movlb	2	; select bank2
  4989  002C  01CB               	clrf	(_inPipes^(0+256)+2)
  4990                           
  4991                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  4992  002D  01CC               	clrf	(_inPipes^(0+256)+3)
  4993  002E  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  4994                           
  4995                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  4996  002F  01A2               	clrf	(_outPipes^(0+256)+2)
  4997                           
  4998                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  4999  0030  01A3               	clrf	(_outPipes^(0+256)+3)
  5000  0031  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  5001                           
  5002                           ;usb_device.c: 2656: USBCheckStdRequest();
  5003  0032  203A  3180         	fcall	_USBCheckStdRequest
  5004                           
  5005                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  5006  0034  3003               	movlw	3
  5007  0035  275C  3180         	fcall	PL44	;call to abstracted procedure
  5008  0037  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5009                           
  5010                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  5011  0039  2E5B               	ljmp	l5388
  5012  003A                     __end_of_USBCtrlTrfSetupHandler:	
  5013  003A                     __ptext27:	
  5014 ;; *************** function _USBCheckStdRequest *****************
  5015 ;; Defined at:
  5016 ;;		line 2839 in file "../USB/usb_device.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;		None
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;		None
  5021 ;; Return value:  Size  Location     Type
  5022 ;;		None               void
  5023 ;; Registers used:
  5024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5025 ;; Tracked objects:
  5026 ;;		On entry : 1F/2
  5027 ;;		On exit  : 1C/0
  5028 ;;		Unchanged: 0/0
  5029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;Total ram usage:        0 bytes
  5035 ;; Hardware stack levels used:    1
  5036 ;; Hardware stack levels required when called:    9
  5037 ;; This function calls:
  5038 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5039 ;;		_USBStdSetCfgHandler
  5040 ;;		_USBStdGetDscHandler
  5041 ;;		_USBStdGetStatusHandler
  5042 ;;		_USBStdFeatureReqHandler
  5043 ;; This function is called by:
  5044 ;;		_USBCtrlTrfSetupHandler
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _USBCheckStdRequest
  5050  003A                     _USBCheckStdRequest:	
  5051                           
  5052                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _USBCheckStdRequest: [allreg]
  5056  003A  0020               	movlb	0	; select bank0
  5057  003B  0E40               	swapf	64,w	;volatile
  5058  003C  0C89               	rrf	9,f
  5059  003D  3903               	andlw	3
  5060  003E  1D03               	btfss	3,2
  5061  003F  0008               	return
  5062                           
  5063                           ;usb_device.c: 2880: break;
  5064  0040  0841               	movf	65,w	;volatile
  5065                           
  5066                           ; Switch size 1, requested type "space"
  5067                           ; Number of cases is 11, Range of values is 0 to 12
  5068                           ; switch strategies available:
  5069                           ; Name         Instructions Cycles
  5070                           ; direct_byte           32     6 (fixed)
  5071                           ; simple_byte           34    18 (average)
  5072                           ; jumptable            260     6 (fixed)
  5073                           ;	Chosen strategy is direct_byte
  5074  0041  0084               	movwf	4
  5075  0042  300D               	movlw	13
  5076  0043  0204               	subwf	4,w
  5077  0044  1803               	skipnc
  5078  0045  0008               	return
  5079  0046  3190               	movlp	high S6282
  5080  0047  3504               	lslf	4,w
  5081  0048  3E00               	addlw	low S6282
  5082  0049  0082               	movwf	2
  5083  004A                     l330:	
  5084  004A  0008               	return
  5085  004B                     l332:	
  5086                           ;usb_device.c: 2843: {
  5087                           ;usb_device.c: 2844: case 5:
  5088                           
  5089                           
  5090                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  5091  004B  0022               	movlb	2	; select bank2
  5092  004C  3008               	movlw	8
  5093  004D  17CB               	bsf	(_inPipes^(0+256)+2),7
  5094                           
  5095                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  5096  004E  0021               	movlb	1	; select bank1
  5097  004F  00EA               	movwf	_USBDeviceState^(0+128)
  5098                           
  5099                           ;usb_device.c: 2848: break;
  5100  0050  0008               	return
  5101  0051                     l5664:	
  5102                           
  5103                           ;usb_device.c: 2850: USBStdGetDscHandler();
  5104  0051  28DD               	ljmp	l5532
  5105  0052                     l5666:	
  5106                           ;usb_device.c: 2851: break;
  5107                           
  5108                           
  5109                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  5110  0052  2877               	ljmp	l5472
  5111  0053                     l5668:	
  5112                           ;usb_device.c: 2854: break;
  5113                           
  5114                           
  5115                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  5116  0053  30ED               	movlw	low _USBActiveConfiguration
  5117  0054  0022               	movlb	2	; select bank2
  5118  0055  00C9               	movwf	_inPipes^(0+256)
  5119  0056  3000               	movlw	high _USBActiveConfiguration
  5120  0057  00CA               	movwf	(_inPipes+1)^(0+256)
  5121  0058                     l5670:	
  5122                           
  5123                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  5124  0058  144B               	bsf	(_inPipes^(0+256)+2),0
  5125                           
  5126                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  5127  0059  01CC               	clrf	(_inPipes^(0+256)+3)
  5128  005A  0ACC               	incf	(_inPipes^(0+256)+3),f
  5129                           
  5130                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  5131  005B  17CB               	bsf	(_inPipes^(0+256)+2),7
  5132                           
  5133                           ;usb_device.c: 2860: break;
  5134  005C  0008               	return
  5135  005D                     l5676:	
  5136                           
  5137                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  5138  005D  2921               	ljmp	l5558
  5139  005E                     l5678:	
  5140                           ;usb_device.c: 2863: break;
  5141                           
  5142                           
  5143                           ;usb_device.c: 2865: case 3:
  5144                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  5145  005E  295F               	ljmp	l5702
  5146  005F                     l5680:	
  5147                           ;usb_device.c: 2867: break;
  5148                           
  5149                           
  5150                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  5151  005F  0844               	movf	68,w	;volatile
  5152  0060  3EEE               	addlw	_USBAlternateInterface& (0+255)
  5153  0061  0022               	movlb	2	; select bank2
  5154  0062  00C9               	movwf	_inPipes^(0+256)
  5155  0063  3000               	movlw	0
  5156  0064  01CA               	clrf	(_inPipes+1)^(0+256)
  5157  0065  2858               	goto	l5670
  5158  0066                     l341:	
  5159                           ;usb_device.c: 2874: case 11:
  5160                           
  5161                           
  5162                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  5163  0066  0022               	movlb	2	; select bank2
  5164  0067  17CB               	bsf	(_inPipes^(0+256)+2),7
  5165                           
  5166                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  5167  0068  0020               	movlb	0	; select bank0
  5168  0069  0844               	movf	68,w	;volatile
  5169  006A  3EEE               	addlw	_USBAlternateInterface& (0+255)
  5170  006B  0086               	movwf	6
  5171  006C  0187               	clrf	7
  5172  006D  0842               	movf	66,w	;volatile
  5173  006E  0081               	movwf	1
  5174                           
  5175                           ;usb_device.c: 2877: break;
  5176  006F  0008               	return
  5177  0070                     l5690:	
  5178                           
  5179                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  5180  0070  3002               	movlw	2
  5181  0071  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5182  0072  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  5183  0073  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  5184  0074  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  5185  0075  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  5186  0076  2B36               	ljmp	l5168
  5187  0077                     __end_of_USBCheckStdRequest:	
  5188  0077                     __ptext31:	
  5189 ;; *************** function _USBStdSetCfgHandler *****************
  5190 ;; Defined at:
  5191 ;;		line 2132 in file "../USB/usb_device.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;  p               2   21[BANK0 ] PTR unsigned char 
  5196 ;;		 -> UEP1(1), 
  5197 ;;  i               1   23[BANK0 ] unsigned char 
  5198 ;;  i               1   24[BANK0 ] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 1D/0
  5205 ;;		On exit  : 1F/1
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        4 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    8
  5215 ;; This function calls:
  5216 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5217 ;;		_memset
  5218 ;; This function is called by:
  5219 ;;		_USBCheckStdRequest
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           
  5224                           ;psect for function _USBStdSetCfgHandler
  5225  0077                     _USBStdSetCfgHandler:	
  5226  0077                     l5472:	
  5227                           ;incstack = 0
  5228                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5229                           
  5230                           
  5231                           ;usb_device.c: 2133: BYTE i;
  5232                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
  5233  0077  0022               	movlb	2	; select bank2
  5234  0078  300E               	movlw	14
  5235  0079  17CB               	bsf	(_inPipes^(0+256)+2),7
  5236                           
  5237                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  5238  007A  0020               	movlb	0	; select bank0
  5239  007B  00E6               	movwf	USBStdSetCfgHandler@p+1
  5240  007C  3099               	movlw	153
  5241  007D  00E5               	movwf	USBStdSetCfgHandler@p
  5242  007E  01E7               	clrf	USBStdSetCfgHandler@i_1089
  5243  007F                     l5480:	
  5244  007F  0865               	movf	USBStdSetCfgHandler@p,w
  5245  0080  0086               	movwf	6
  5246  0081  0866               	movf	USBStdSetCfgHandler@p+1,w
  5247  0082  0087               	movwf	7
  5248  0083  0181               	clrf	1
  5249  0084  0AE5               	incf	USBStdSetCfgHandler@p,f
  5250  0085  1903               	skipnz
  5251  0086  0AE6               	incf	USBStdSetCfgHandler@p+1,f
  5252  0087  0AE7               	incf	USBStdSetCfgHandler@i_1089,f
  5253  0088  1903               	btfsc	3,2
  5254  0089  287F               	goto	l5480
  5255  008A  3020               	movlw	32
  5256                           
  5257                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
  5258  008B  01D6               	clrf	?_memset
  5259  008C  01D7               	clrf	?_memset+1
  5260  008D  00D8               	movwf	?_memset+2
  5261  008E  01D9               	clrf	?_memset+3
  5262  008F  20CB  3180         	fcall	_memset
  5263                           
  5264                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
  5265  0091  003D               	movlb	29	; select bank29
  5266  0092  170E               	bsf	14,6	;volatile
  5267                           
  5268                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
  5269  0093  0020               	movlb	0	; select bank0
  5270  0094  01E8               	clrf	USBStdSetCfgHandler@i
  5271  0095                     l5498:	
  5272                           
  5273                           ;usb_device.c: 2151: {
  5274                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
  5275  0095  0868               	movf	USBStdSetCfgHandler@i,w
  5276  0096  3E26               	addlw	_ep_data_in& (0+255)
  5277  0097  0086               	movwf	6
  5278  0098  3001               	movlw	1	; select bank2/3
  5279  0099  0087               	movwf	7
  5280  009A  0181               	clrf	1
  5281                           
  5282                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
  5283  009B  0868               	movf	USBStdSetCfgHandler@i,w
  5284  009C  3E28               	addlw	_ep_data_out& (0+255)
  5285  009D  0086               	movwf	6
  5286  009E  3002               	movlw	2
  5287  009F  0181               	clrf	1
  5288  00A0  0AE8               	incf	USBStdSetCfgHandler@i,f
  5289  00A1  0268               	subwf	USBStdSetCfgHandler@i,w
  5290  00A2  1C03               	skipc
  5291  00A3  2895               	goto	l5498
  5292  00A4  30EE               	movlw	_USBAlternateInterface& (0+255)
  5293                           
  5294                           ;usb_device.c: 2154: }
  5295                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
  5296  00A5  01D6               	clrf	?_memset
  5297  00A6  01D7               	clrf	?_memset+1
  5298  00A7  01D8               	clrf	?_memset+2
  5299  00A8  0AD8               	incf	?_memset+2,f
  5300  00A9  01D9               	clrf	?_memset+3
  5301  00AA  20CB  3180         	fcall	_memset
  5302                           
  5303                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
  5304  00AC  003D               	movlb	29	; select bank29
  5305  00AD  130E               	bcf	14,6	;volatile
  5306                           
  5307                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  5308  00AE  3028               	movlw	40
  5309  00AF  0020               	movlb	0	; select bank0
  5310  00B0  00EA               	movwf	_pBDTEntryIn
  5311                           
  5312                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
  5313  00B1  3020               	movlw	32
  5314  00B2  00EE               	movwf	_pBDTEntryEP0OutCurrent
  5315                           
  5316                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  5317  00B3  00EF               	movwf	_pBDTEntryEP0OutNext
  5318                           
  5319                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
  5320  00B4  0842               	movf	66,w	;volatile
  5321  00B5  0021               	movlb	1	; select bank1
  5322  00B6  00ED               	movwf	_USBActiveConfiguration^(0+128)
  5323                           
  5324                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
  5325  00B7  08ED               	movf	_USBActiveConfiguration^(0+128),f
  5326  00B8  1D03               	skipz
  5327  00B9  28BD               	goto	l5520
  5328                           
  5329                           ;usb_device.c: 2173: {
  5330                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
  5331  00BA  3010               	movlw	16
  5332  00BB  00EA               	movwf	_USBDeviceState^(0+128)
  5333                           
  5334                           ;usb_device.c: 2176: }
  5335  00BC  0008               	return
  5336  00BD                     l5520:	
  5337                           
  5338                           ;usb_device.c: 2177: else
  5339                           ;usb_device.c: 2178: {
  5340                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
  5341  00BD  0020               	movlb	0	; select bank0
  5342  00BE  30ED               	movlw	_USBActiveConfiguration& (0+255)
  5343  00BF  01E0               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5344  00C0  0AE0               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER,f
  5345  00C1  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  5346  00C2  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  5347  00C3  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  5348  00C4  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  5349  00C5  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  5350  00C6  2336               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5351                           
  5352                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
  5353  00C7  3020               	movlw	32
  5354  00C8  0021               	movlb	1	; select bank1
  5355  00C9  00EA               	movwf	_USBDeviceState^(0+128)
  5356  00CA  0008               	return
  5357  00CB                     __end_of_USBStdSetCfgHandler:	
  5358  00CB                     __ptext32:	
  5359 ;; *************** function _memset *****************
  5360 ;; Defined at:
  5361 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
  5362 ;; Parameters:    Size  Location     Type
  5363 ;;  p1              1    wreg     PTR void 
  5364 ;;		 -> USBAlternateInterface(1), BDT(32), 
  5365 ;;  c               2    6[BANK0 ] int 
  5366 ;;  n               2    8[BANK0 ] unsigned int 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  p1              1   10[BANK0 ] PTR void 
  5369 ;;		 -> USBAlternateInterface(1), BDT(32), 
  5370 ;;  p               1   11[BANK0 ] PTR unsigned char 
  5371 ;;		 -> USBAlternateInterface(1), BDT(32), 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  1    wreg      PTR void 
  5374 ;; Registers used:
  5375 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5376 ;; Tracked objects:
  5377 ;;		On entry : 1F/0
  5378 ;;		On exit  : 1F/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5381 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;Total ram usage:        6 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    4
  5388 ;; This function calls:
  5389 ;;		Nothing
  5390 ;; This function is called by:
  5391 ;;		_USBStdSetCfgHandler
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           
  5396                           ;psect for function _memset
  5397  00CB                     _memset:	
  5398                           
  5399                           ;incstack = 0
  5400                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5401                           ;memset@p1 stored from wreg
  5402  00CB  00DA               	movwf	memset@p1
  5403  00CC  00DB               	movwf	memset@p
  5404  00CD                     l5530:	
  5405  00CD  3001               	movlw	1
  5406  00CE  02D8               	subwf	memset@n,f
  5407  00CF  3000               	movlw	0
  5408  00D0  3BD9               	subwfb	memset@n+1,f
  5409  00D1  0A58               	incf	memset@n,w
  5410  00D2  1903               	skipnz
  5411  00D3  0A59               	incf	memset@n+1,w
  5412  00D4  1903               	btfsc	3,2
  5413  00D5  0008               	return
  5414  00D6  085B               	movf	memset@p,w
  5415  00D7  0086               	movwf	6
  5416  00D8  0187               	clrf	7
  5417  00D9  0856               	movf	memset@c,w
  5418  00DA  0081               	movwf	1
  5419  00DB  0ADB               	incf	memset@p,f
  5420  00DC  28CD               	goto	l5530
  5421  00DD                     __end_of_memset:	
  5422  00DD                     __ptext30:	
  5423 ;; *************** function _USBStdGetDscHandler *****************
  5424 ;; Defined at:
  5425 ;;		line 2207 in file "../USB/usb_device.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5434 ;; Tracked objects:
  5435 ;;		On entry : 1D/0
  5436 ;;		On exit  : 1D/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        2 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    4
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_USBCheckStdRequest
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           
  5454                           ;psect for function _USBStdGetDscHandler
  5455  00DD                     _USBStdGetDscHandler:	
  5456  00DD                     l5532:	
  5457                           ;incstack = 0
  5458                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
  5459                           
  5460                           
  5461                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
  5462  00DD  0020               	movlb	0	; select bank0
  5463  00DE  0840               	movf	64,w	;volatile
  5464  00DF  3A80               	xorlw	128
  5465  00E0  1D03               	skipz
  5466  00E1  0008               	return
  5467                           
  5468                           ;usb_device.c: 2209: {
  5469                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
  5470  00E2  30C0               	movlw	192
  5471  00E3  0022               	movlb	2	; select bank2
  5472  00E4  00CB               	movwf	(_inPipes^(0+256)+2)
  5473                           
  5474                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
  5475  00E5  2914               	goto	l5556
  5476  00E6                     l5536:	
  5477                           
  5478                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
  5479  00E6  308D               	movlw	low (_device_dsc| (0+32768))
  5480  00E7  0022               	movlb	2	; select bank2
  5481  00E8  00C9               	movwf	_inPipes^(0+256)
  5482  00E9  3088               	movlw	high (_device_dsc| (0+32768))
  5483  00EA  00CA               	movwf	(_inPipes+1)^(0+256)
  5484                           
  5485                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
  5486  00EB  3012               	movlw	18
  5487  00EC  00CC               	movwf	(_inPipes^(0+256)+3)
  5488  00ED  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  5489                           
  5490                           ;usb_device.c: 2221: break;
  5491  00EE  0008               	return
  5492  00EF                     l5538:	
  5493                           
  5494                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
  5495  00EF  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
  5496  00F0  0084               	movwf	4
  5497  00F1  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
  5498  00F2  2751  3180         	fcall	PL38	;call to abstracted procedure
  5499                           
  5500                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
  5501  00F4  2780  3180         	fcall	PL66	;call to abstracted procedure
  5502  00F6  3E02               	addlw	2
  5503  00F7  276C  3180         	fcall	PL54	;call to abstracted procedure
  5504  00F9  00CC               	movwf	(_inPipes^(0+256)+3)
  5505                           
  5506                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
  5507  00FA  084A               	movf	(_inPipes+1)^(0+256),w
  5508  00FB  2780  3180         	fcall	PL66	;call to abstracted procedure
  5509  00FD  3E03               	addlw	3
  5510  00FE  276C               	fcall	PL54	;call to abstracted procedure
  5511  00FF  00CD               	movwf	(_inPipes^(0+256)+4)
  5512                           
  5513                           ;usb_device.c: 2234: break;
  5514  0100  0008               	return
  5515  0101                     l5544:	
  5516                           
  5517                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
  5518  0101  3003               	movlw	3
  5519  0102  0242               	subwf	66,w	;volatile
  5520  0103  1803               	skipnc
  5521  0104  2911               	goto	l5550
  5522                           
  5523                           ;usb_device.c: 2240: {
  5524                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
  5525  0105  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
  5526  0106  0084               	movwf	4
  5527  0107  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
  5528  0108  2751               	fcall	PL38	;call to abstracted procedure
  5529                           
  5530                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
  5531  0109  0849               	movf	_inPipes^(0+256),w
  5532  010A  0084               	movwf	4
  5533  010B  084A               	movf	(_inPipes+1)^(0+256),w
  5534  010C  0085               	movwf	5
  5535  010D  0800               	movf	0,w	;code access
  5536  010E  00CC               	movwf	(_inPipes^(0+256)+3)
  5537  010F  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  5538                           
  5539                           ;usb_device.c: 2245: }
  5540  0110  0008               	return
  5541  0111                     l5550:	
  5542                           
  5543                           ;usb_device.c: 2255: else
  5544                           ;usb_device.c: 2256: {
  5545                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
  5546  0111  0022               	movlb	2	; select bank2
  5547  0112  01CB               	clrf	(_inPipes^(0+256)+2)
  5548  0113  0008               	return
  5549  0114                     l5556:	
  5550  0114  0020               	movlb	0	; select bank0
  5551  0115  0843               	movf	67,w	;volatile
  5552                           
  5553                           ; Switch size 1, requested type "space"
  5554                           ; Number of cases is 3, Range of values is 1 to 3
  5555                           ; switch strategies available:
  5556                           ; Name         Instructions Cycles
  5557                           ; simple_byte           10     6 (average)
  5558                           ; direct_byte           15     9 (fixed)
  5559                           ; jumptable            263     9 (fixed)
  5560                           ;	Chosen strategy is simple_byte
  5561  0116  3A01               	xorlw	1	; case 1
  5562  0117  1903               	skipnz
  5563  0118  28E6               	goto	l5536
  5564  0119  3A03               	xorlw	3	; case 2
  5565  011A  1903               	skipnz
  5566  011B  28EF               	goto	l5538
  5567  011C  3A01               	xorlw	1	; case 3
  5568  011D  1903               	skipnz
  5569  011E  2901               	goto	l5544
  5570  011F  2911               	goto	l5550
  5571  0120  0008               	return
  5572  0121                     __end_of_USBStdGetDscHandler:	
  5573  0121                     __ptext29:	
  5574 ;; *************** function _USBStdGetStatusHandler *****************
  5575 ;; Defined at:
  5576 ;;		line 2283 in file "../USB/usb_device.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;		None
  5579 ;; Auto vars:     Size  Location     Type
  5580 ;;  p               1    6[BANK0 ] PTR struct __BDT
  5581 ;;		 -> NULL(0), BDT(32), 
  5582 ;; Return value:  Size  Location     Type
  5583 ;;		None               void
  5584 ;; Registers used:
  5585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5586 ;; Tracked objects:
  5587 ;;		On entry : 1D/0
  5588 ;;		On exit  : 1F/2
  5589 ;;		Unchanged: 0/0
  5590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;Total ram usage:        1 bytes
  5596 ;; Hardware stack levels used:    1
  5597 ;; Hardware stack levels required when called:    4
  5598 ;; This function calls:
  5599 ;;		Nothing
  5600 ;; This function is called by:
  5601 ;;		_USBCheckStdRequest
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _USBStdGetStatusHandler
  5607  0121                     _USBStdGetStatusHandler:	
  5608  0121                     l5558:	
  5609                           ;incstack = 0
  5610                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
  5611                           
  5612                           
  5613                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
  5614  0121  0020               	movlb	0	; select bank0
  5615  0122  01C8               	clrf	72	;volatile
  5616                           
  5617                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
  5618  0123  01C9               	clrf	73	;volatile
  5619                           
  5620                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
  5621  0124  294A               	goto	l5578
  5622  0125                     l271:	
  5623                           ;usb_device.c: 2288: {
  5624                           ;usb_device.c: 2289: case (0x00):
  5625                           
  5626                           
  5627                           ;usb_device.c: 2295: if(1 == 1)
  5628  0125  0022               	movlb	2	; select bank2
  5629  0126  17CB               	bsf	(_inPipes^(0+256)+2),7
  5630                           
  5631                           ;usb_device.c: 2296: {
  5632                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
  5633  0127  0020               	movlb	0	; select bank0
  5634  0128  1448               	bsf	72,0	;volatile
  5635                           
  5636                           ;usb_device.c: 2298: }
  5637                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
  5638  0129  0022               	movlb	2	; select bank2
  5639  012A  0B2F               	decfsz	_RemoteWakeup^(0+256),w
  5640  012B  2955               	goto	l274
  5641                           
  5642                           ;usb_device.c: 2301: {
  5643                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
  5644  012C  0020               	movlb	0	; select bank0
  5645  012D  14C8               	bsf	72,1	;volatile
  5646  012E  2955               	goto	l274
  5647  012F                     l275:	
  5648                           ;usb_device.c: 2305: case (0x01):
  5649                           
  5650                           
  5651                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
  5652  012F  0022               	movlb	2	; select bank2
  5653  0130  17CB               	bsf	(_inPipes^(0+256)+2),7
  5654                           
  5655                           ;usb_device.c: 2307: break;
  5656  0131  2955               	goto	l274
  5657  0132                     l276:	
  5658                           ;usb_device.c: 2308: case (0x02):
  5659                           
  5660                           
  5661                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
  5662  0132  0022               	movlb	2	; select bank2
  5663  0133  17CB               	bsf	(_inPipes^(0+256)+2),7
  5664                           
  5665                           ;usb_device.c: 2313: {
  5666                           ;usb_device.c: 2314: BDT_ENTRY *p;
  5667                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
  5668  0134  0020               	movlb	0	; select bank0
  5669  0135  1BC4               	btfsc	68,7	;volatile
  5670  0136  293B               	goto	l5568
  5671                           
  5672                           ;usb_device.c: 2317: {
  5673                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  5674  0137  0844               	movf	68,w	;volatile
  5675  0138  2774  3180         	fcall	PL60	;call to abstracted procedure
  5676  013A  293D               	goto	L17
  5677  013B                     l5568:	
  5678                           ;usb_device.c: 2319: }
  5679                           
  5680                           
  5681                           ;usb_device.c: 2320: else
  5682                           ;usb_device.c: 2321: {
  5683                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  5684  013B  277A  3180         	fcall	PL64	;call to abstracted procedure
  5685  013D                     L17:	
  5686  013D  0801               	movf	1,w
  5687  013E  00D6               	movwf	USBStdGetStatusHandler@p
  5688                           
  5689                           ;usb_device.c: 2323: }
  5690                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
  5691  013F  0086               	movwf	6
  5692  0140  0187               	clrf	7
  5693  0141  1F81               	btfss	1,7
  5694  0142  2955               	goto	l274
  5695  0143  0856               	movf	USBStdGetStatusHandler@p,w
  5696  0144  0086               	movwf	6
  5697  0145  1D01               	btfss	1,2
  5698  0146  2955               	goto	l274
  5699                           
  5700                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
  5701  0147  3001               	movlw	1
  5702  0148  00C8               	movwf	72	;volatile
  5703  0149  2955               	goto	l274
  5704  014A                     l5578:	
  5705  014A  0840               	movf	64,w	;volatile
  5706  014B  391F               	andlw	31
  5707                           
  5708                           ; Switch size 1, requested type "space"
  5709                           ; Number of cases is 3, Range of values is 0 to 2
  5710                           ; switch strategies available:
  5711                           ; Name         Instructions Cycles
  5712                           ; simple_byte           10     6 (average)
  5713                           ; direct_byte           12     6 (fixed)
  5714                           ; jumptable            260     6 (fixed)
  5715                           ;	Chosen strategy is simple_byte
  5716  014C  1903               	skipnz
  5717  014D  2925               	goto	l271
  5718  014E  3A01               	xorlw	1	; case 1
  5719  014F  1903               	skipnz
  5720  0150  292F               	goto	l275
  5721  0151  3A03               	xorlw	3	; case 2
  5722  0152  1903               	skipnz
  5723  0153  2932               	goto	l276
  5724  0154  2955               	goto	l274
  5725  0155                     l274:	
  5726                           
  5727                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
  5728  0155  0022               	movlb	2	; select bank2
  5729  0156  1FCB               	btfss	(_inPipes^(0+256)+2),7
  5730  0157  0008               	return
  5731                           
  5732                           ;usb_device.c: 2332: {
  5733                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
  5734  0158  3048               	movlw	72
  5735  0159  00C9               	movwf	_inPipes^(0+256)
  5736  015A  3002               	movlw	2
  5737  015B  01CA               	clrf	(_inPipes+1)^(0+256)
  5738                           
  5739                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  5740  015C  144B               	bsf	(_inPipes^(0+256)+2),0
  5741                           
  5742                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
  5743  015D  00CC               	movwf	(_inPipes^(0+256)+3)
  5744  015E  0008               	return
  5745  015F                     __end_of_USBStdGetStatusHandler:	
  5746  015F                     __ptext28:	
  5747 ;; *************** function _USBStdFeatureReqHandler *****************
  5748 ;; Defined at:
  5749 ;;		line 2907 in file "../USB/usb_device.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;		None
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  pUEP            2    0[BANK1 ] PTR unsigned char 
  5754 ;;		 -> UEP0(1), 
  5755 ;;  p               1    3[BANK1 ] PTR struct __BDT
  5756 ;;		 -> NULL(0), BDT(32), 
  5757 ;;  current_ep_d    1    2[BANK1 ] struct .
  5758 ;; Return value:  Size  Location     Type
  5759 ;;		None               void
  5760 ;; Registers used:
  5761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 1D/0
  5764 ;;		On exit  : 1E/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        6 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    8
  5774 ;; This function calls:
  5775 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5776 ;; This function is called by:
  5777 ;;		_USBCheckStdRequest
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           
  5782                           ;psect for function _USBStdFeatureReqHandler
  5783  015F                     _USBStdFeatureReqHandler:	
  5784  015F                     l5702:	
  5785                           ;incstack = 0
  5786                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5787                           
  5788                           
  5789                           ;usb_device.c: 2908: BDT_ENTRY *p;
  5790                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  5791                           ;usb_device.c: 2913: unsigned char* pUEP;
  5792                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  5793                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  5794  015F  0020               	movlb	0	; select bank0
  5795  0160  0B42               	decfsz	66,w	;volatile
  5796  0161  2973               	goto	l5714
  5797  0162  0840               	movf	64,w	;volatile
  5798  0163  391F               	andlw	31
  5799  0164  1D03               	skipz
  5800  0165  2973               	goto	l5714
  5801                           
  5802                           ;usb_device.c: 2953: {
  5803                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  5804  0166  0022               	movlb	2	; select bank2
  5805  0167  17CB               	bsf	(_inPipes^(0+256)+2),7
  5806                           
  5807                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  5808  0168  0020               	movlb	0	; select bank0
  5809  0169  0841               	movf	65,w	;volatile
  5810  016A  3A03               	xorlw	3
  5811  016B  1D03               	skipz
  5812  016C  2971               	goto	l5712
  5813                           
  5814                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  5815  016D  0022               	movlb	2	; select bank2
  5816  016E  01AF               	clrf	_RemoteWakeup^(0+256)
  5817  016F  0AAF               	incf	_RemoteWakeup^(0+256),f
  5818  0170  2973               	goto	l5714
  5819  0171                     l5712:	
  5820                           
  5821                           ;usb_device.c: 2957: else
  5822                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  5823  0171  0022               	movlb	2	; select bank2
  5824  0172  01AF               	clrf	_RemoteWakeup^(0+256)
  5825  0173                     l5714:	
  5826                           
  5827                           ;usb_device.c: 2959: }
  5828                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  5829                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  5830                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
  5831                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  5832  0173  0020               	movlb	0	; select bank0
  5833  0174  0842               	movf	66,w	;volatile
  5834  0175  1D03               	skipz
  5835  0176  0008               	return
  5836  0177  0840               	movf	64,w	;volatile
  5837  0178  391F               	andlw	31
  5838  0179  3A02               	xorlw	2
  5839  017A  1D03               	skipz
  5840  017B  0008               	return
  5841  017C  0844               	movf	68,w	;volatile
  5842  017D  390F               	andlw	15
  5843  017E  1903               	skipnz
  5844  017F  0008               	return
  5845  0180  0844               	movf	68,w	;volatile
  5846  0181  390F               	andlw	15
  5847  0182  00E5               	movwf	??_USBStdFeatureReqHandler
  5848  0183  3002               	movlw	2
  5849  0184  0265               	subwf	??_USBStdFeatureReqHandler,w
  5850  0185  1803               	skipnc
  5851  0186  0008               	return
  5852  0187  0021               	movlb	1	; select bank1
  5853  0188  086A               	movf	_USBDeviceState^(0+128),w
  5854  0189  3A20               	xorlw	32
  5855  018A  1D03               	skipz
  5856  018B  0008               	return
  5857                           
  5858                           ;usb_device.c: 2966: {
  5859                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  5860  018C  0022               	movlb	2	; select bank2
  5861  018D  17CB               	bsf	(_inPipes^(0+256)+2),7
  5862                           
  5863                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  5864  018E  0020               	movlb	0	; select bank0
  5865  018F  1BC4               	btfsc	68,7	;volatile
  5866  0190  2999               	goto	l5728
  5867                           
  5868                           ;usb_device.c: 2973: {
  5869                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  5870  0191  0844               	movf	68,w	;volatile
  5871  0192  2774  3180         	fcall	PL60	;call to abstracted procedure
  5872                           
  5873                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  5874  0194  2795  3180         	fcall	PL74	;call to abstracted procedure
  5875  0196  3E28               	addlw	_ep_data_out& (0+255)
  5876  0197  0086               	movwf	6
  5877  0198  29A1               	goto	L12
  5878  0199                     l5728:	
  5879                           ;usb_device.c: 2976: }
  5880                           
  5881                           
  5882                           ;usb_device.c: 2977: else
  5883                           ;usb_device.c: 2978: {
  5884                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  5885  0199  277A  3180         	fcall	PL64	;call to abstracted procedure
  5886                           
  5887                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  5888  019B  2795  3180         	fcall	PL74	;call to abstracted procedure
  5889  019D  3E26               	addlw	_ep_data_in& (0+255)
  5890  019E  0086               	movwf	6
  5891  019F  3001               	movlw	1	; select bank2/3
  5892  01A0  0087               	movwf	7
  5893  01A1                     L12:	
  5894  01A1  0801               	movf	1,w
  5895  01A2  0021               	movlb	1	; select bank1
  5896  01A3  00A2               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
  5897                           
  5898                           ;usb_device.c: 2981: }
  5899                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  5900  01A4  1822               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
  5901  01A5  29A8               	goto	l353
  5902                           
  5903                           ;usb_device.c: 2988: {
  5904                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  5905  01A6  1123               	bcf	USBStdFeatureReqHandler@p^(0+128),2
  5906                           
  5907                           ;usb_device.c: 2990: }
  5908  01A7  29A9               	goto	l354
  5909  01A8                     l353:	
  5910                           
  5911                           ;usb_device.c: 2991: else
  5912                           ;usb_device.c: 2992: {
  5913                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  5914  01A8  1523               	bsf	USBStdFeatureReqHandler@p^(0+128),2
  5915  01A9                     l354:	
  5916                           
  5917                           ;usb_device.c: 2994: }
  5918                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  5919  01A9  0020               	movlb	0	; select bank0
  5920  01AA  1BC4               	btfsc	68,7	;volatile
  5921  01AB  29B0               	goto	l5736
  5922                           
  5923                           ;usb_device.c: 3000: {
  5924                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  5925  01AC  0844               	movf	68,w	;volatile
  5926  01AD  2774  3180         	fcall	PL60	;call to abstracted procedure
  5927  01AF  29B2               	goto	L13
  5928  01B0                     l5736:	
  5929                           ;usb_device.c: 3002: }
  5930                           
  5931                           
  5932                           ;usb_device.c: 3003: else
  5933                           ;usb_device.c: 3004: {
  5934                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  5935  01B0  277A  3180         	fcall	PL64	;call to abstracted procedure
  5936  01B2                     L13:	
  5937  01B2  0021               	movlb	1	; select bank1
  5938  01B3  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5939  01B4  0081               	movwf	1
  5940                           
  5941                           ;usb_device.c: 3006: }
  5942                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  5943  01B5  0020               	movlb	0	; select bank0
  5944  01B6  0841               	movf	65,w	;volatile
  5945  01B7  3A03               	xorlw	3
  5946  01B8  1D03               	skipz
  5947  01B9  29D5               	goto	l5748
  5948                           
  5949                           ;usb_device.c: 3010: {
  5950                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  5951  01BA  0021               	movlb	1	; select bank1
  5952  01BB  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5953  01BC  0086               	movwf	6
  5954  01BD  0187               	clrf	7
  5955  01BE  1F81               	btfss	1,7
  5956  01BF  29CE               	goto	l358
  5957                           
  5958                           ;usb_device.c: 3012: {
  5959                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  5960  01C0  0020               	movlb	0	; select bank0
  5961  01C1  1BC4               	btfsc	68,7	;volatile
  5962  01C2  29C7               	goto	l5746
  5963                           
  5964                           ;usb_device.c: 3016: {
  5965                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  5966  01C3  0844               	movf	68,w	;volatile
  5967  01C4  390F               	andlw	15
  5968  01C5  3E28               	addlw	_ep_data_out& (0+255)
  5969  01C6  29CA               	goto	L14
  5970  01C7                     l5746:	
  5971                           ;usb_device.c: 3018: }
  5972                           
  5973                           
  5974                           ;usb_device.c: 3019: else
  5975                           ;usb_device.c: 3020: {
  5976                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  5977  01C7  0844               	movf	68,w	;volatile
  5978  01C8  390F               	andlw	15
  5979  01C9  3E26               	addlw	_ep_data_in& (0+255)
  5980  01CA                     L14:	
  5981  01CA  0086               	movwf	6
  5982  01CB  3001               	movlw	1	; select bank2/3
  5983  01CC  0087               	movwf	7
  5984  01CD  1481               	bsf	1,1
  5985  01CE                     l358:	
  5986                           
  5987                           ;usb_device.c: 3022: }
  5988                           ;usb_device.c: 3023: }
  5989                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  5990  01CE  0021               	movlb	1	; select bank1
  5991  01CF  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5992  01D0  0086               	movwf	6
  5993  01D1  3084               	movlw	132
  5994  01D2  0187               	clrf	7
  5995  01D3  0481               	iorwf	1,f
  5996                           
  5997                           ;usb_device.c: 3027: }
  5998  01D4  0008               	return
  5999  01D5                     l5748:	
  6000                           
  6001                           ;usb_device.c: 3028: else
  6002                           ;usb_device.c: 3029: {
  6003                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  6004  01D5  3004               	movlw	4
  6005  01D6  0021               	movlb	1	; select bank1
  6006  01D7  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  6007                           
  6008                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  6009  01D8  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  6010  01D9  0086               	movwf	6
  6011  01DA  0187               	clrf	7
  6012                           
  6013                           ;usb_device.c: 3036: {
  6014                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  6015  01DB  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  6016  01DC  1F81               	btfss	1,7
  6017  01DD  29EA               	goto	L16
  6018  01DE  0086               	movwf	6
  6019  01DF  1381               	bcf	1,7
  6020                           
  6021                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  6022  01E0  0086               	movwf	6
  6023  01E1  3005               	movlw	5
  6024  01E2  1701               	bsf	1,6
  6025                           
  6026                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  6027  01E3  0020               	movlb	0	; select bank0
  6028  01E4  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6029  01E5  2763  3180         	fcall	PL50	;call to abstracted procedure
  6030  01E7  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6031                           
  6032                           ;usb_device.c: 3042: }
  6033  01E9  29ED               	goto	l5758
  6034  01EA                     L16:	
  6035                           ;usb_device.c: 3043: else
  6036                           ;usb_device.c: 3044: {
  6037                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  6038                           
  6039  01EA  0086               	movwf	6
  6040  01EB  0187               	clrf	7
  6041  01EC  1701               	bsf	1,6
  6042  01ED                     l5758:	
  6043                           
  6044                           ;usb_device.c: 3047: }
  6045                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  6046  01ED  3004               	movlw	4
  6047  01EE  0021               	movlb	1	; select bank1
  6048  01EF  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  6049                           
  6050                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  6051  01F0  18A2               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
  6052  01F1  29F7               	goto	l366
  6053  01F2  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  6054  01F3  0086               	movwf	6
  6055  01F4  0187               	clrf	7
  6056  01F5  1F81               	btfss	1,7
  6057  01F6  2A10               	goto	l5770
  6058  01F7                     l366:	
  6059                           
  6060                           ;usb_device.c: 3058: {
  6061                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  6062  01F7  0020               	movlb	0	; select bank0
  6063  01F8  1BC4               	btfsc	68,7	;volatile
  6064  01F9  29FE               	goto	l5766
  6065                           
  6066                           ;usb_device.c: 3060: {
  6067                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  6068  01FA  0844               	movf	68,w	;volatile
  6069  01FB  390F               	andlw	15
  6070  01FC  3E28               	addlw	_ep_data_out& (0+255)
  6071  01FD  2A01               	goto	L15
  6072  01FE                     l5766:	
  6073                           ;usb_device.c: 3062: }
  6074                           
  6075                           
  6076                           ;usb_device.c: 3063: else
  6077                           ;usb_device.c: 3064: {
  6078                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  6079  01FE  0844               	movf	68,w	;volatile
  6080  01FF  390F               	andlw	15
  6081  0200  3E26               	addlw	_ep_data_in& (0+255)
  6082  0201                     L15:	
  6083  0201  0086               	movwf	6
  6084  0202  3001               	movlw	1	; select bank2/3
  6085  0203  0087               	movwf	7
  6086  0204  1081               	bcf	1,1
  6087                           
  6088                           ;usb_device.c: 3066: }
  6089                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  6090  0205  0021               	movlb	1	; select bank1
  6091  0206  27AC  3180         	fcall	PL84	;call to abstracted procedure
  6092                           
  6093                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  6094  0208  3005               	movlw	5
  6095  0209  0020               	movlb	0	; select bank0
  6096  020A  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6097  020B  2763  3180         	fcall	PL50	;call to abstracted procedure
  6098  020D  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6099                           
  6100                           ;usb_device.c: 3072: }
  6101  020F  2A11               	goto	l5772
  6102  0210                     l5770:	
  6103                           
  6104                           ;usb_device.c: 3073: else
  6105                           ;usb_device.c: 3074: {
  6106                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  6107  0210  27AC               	fcall	PL84	;call to abstracted procedure
  6108  0211                     l5772:	
  6109                           
  6110                           ;usb_device.c: 3077: }
  6111                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  6112  0211  0020               	movlb	0	; select bank0
  6113  0212  0844               	movf	68,w	;volatile
  6114  0213  390F               	andlw	15
  6115  0214  3E98               	addlw	152
  6116  0215  00E5               	movwf	??_USBStdFeatureReqHandler
  6117  0216  300E               	movlw	14
  6118  0217  01E6               	clrf	??_USBStdFeatureReqHandler+1
  6119  0218  3DE6               	addwfc	??_USBStdFeatureReqHandler+1,f
  6120  0219  0865               	movf	??_USBStdFeatureReqHandler,w
  6121  021A  0021               	movlb	1	; select bank1
  6122  021B  00A0               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
  6123  021C  0020               	movlb	0	; select bank0
  6124  021D  0866               	movf	??_USBStdFeatureReqHandler+1,w
  6125  021E  0021               	movlb	1	; select bank1
  6126  021F  00A1               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
  6127                           
  6128                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  6129  0220  0820               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
  6130  0221  0086               	movwf	6
  6131  0222  0821               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
  6132  0223  0087               	movwf	7
  6133  0224  1001               	bcf	1,0
  6134  0225  0008               	return
  6135  0226                     __end_of_USBStdFeatureReqHandler:	
  6136  0226                     start_initialization:	
  6137  0226                     __initialization:		;BIGRAM
  6138                           
  6139                           ; Clear objects allocated to BIGRAM
  6140  0226  303C               	movlw	60
  6141  0227  0084               	movwf	4
  6142  0228  3023               	movlw	35
  6143  0229  0085               	movwf	5
  6144  022A  30B4               	movlw	180
  6145  022B  00FE               	movwf	126
  6146  022C  3000               	movlw	0
  6147  022D  01FF               	clrf	127
  6148  022E  3197  2778  3180   	fcall	clear_ram0
  6149                           
  6150                           ; Clear objects allocated to BANK0
  6151  0231  01EA               	clrf	__pbssBANK0& (0+127)
  6152  0232  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  6153  0233  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  6154  0234  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  6155  0235  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  6156  0236  01EF               	clrf	(__pbssBANK0+5)& (0+127)
  6157                           
  6158                           ; Clear objects allocated to BANK1
  6159  0237  0021               	movlb	1	; select bank1
  6160  0238  3020               	movlw	low __pbssBANK2
  6161  0239  01EA               	clrf	__pbssBANK1& (0+127)
  6162  023A  01EB               	clrf	(__pbssBANK1+1)& (0+127)
  6163  023B  01EC               	clrf	(__pbssBANK1+2)& (0+127)
  6164  023C  01ED               	clrf	(__pbssBANK1+3)& (0+127)
  6165  023D  01EE               	clrf	(__pbssBANK1+4)& (0+127)
  6166  023E  01EF               	clrf	(__pbssBANK1+5)& (0+127)
  6167                           
  6168                           ; Clear objects allocated to BANK2
  6169  023F  0084               	movwf	4
  6170  0240  3001               	movlw	high __pbssBANK2
  6171  0241  0085               	movwf	5
  6172  0242  302E               	movlw	46
  6173  0243  00FE               	movwf	126
  6174  0244  3000               	movlw	0
  6175  0245  00FF               	movwf	127
  6176  0246  3197  2778  3180   	fcall	clear_ram0
  6177                           
  6178                           ; Clear objects allocated to BANK3
  6179  0249  30A0               	movlw	low __pbssBANK3
  6180  024A  0084               	movwf	4
  6181  024B  3001               	movlw	high __pbssBANK3
  6182  024C  0085               	movwf	5
  6183  024D  3038               	movlw	56
  6184  024E  00FE               	movwf	126
  6185  024F  3000               	movlw	0
  6186  0250  00FF               	movwf	127
  6187  0251  3197  2778  3180   	fcall	clear_ram0
  6188                           
  6189                           ; Initialize objects allocated to BANK2
  6190  0254  30DD               	movlw	low __pidataBANK2
  6191  0255  0084               	movwf	4
  6192  0256  3087               	movlw	(high __pidataBANK2)| (0+128)
  6193  0257  0085               	movwf	5
  6194  0258  304E               	movlw	low __pdataBANK2
  6195  0259  0086               	movwf	6
  6196  025A  3001               	movlw	high __pdataBANK2
  6197  025B  0087               	movwf	7
  6198  025C  3000               	movlw	0
  6199  025D  00FF               	movwf	127
  6200  025E  301C               	movlw	28
  6201  025F  3197  276C  3180   	fcall	init_ram
  6202                           
  6203                           ; Initialize objects allocated to BANK3
  6204  0262  30B2               	movlw	low __pidataBANK3
  6205  0263  0084               	movwf	4
  6206  0264  3088               	movlw	(high __pidataBANK3)| (0+128)
  6207  0265  0085               	movwf	5
  6208  0266  30D8               	movlw	low __pdataBANK3
  6209  0267  0086               	movwf	6
  6210  0268  3001               	movlw	high __pdataBANK3
  6211  0269  0087               	movwf	7
  6212  026A  3000               	movlw	0
  6213  026B  00FF               	movwf	127
  6214  026C  300C               	movlw	12
  6215  026D  3197  276C  3180   	fcall	init_ram
  6216                           
  6217                           ; Initialize objects allocated to BANK6
  6218  0270  30BD               	movlw	low __pidataBANK6
  6219  0271  0084               	movwf	4
  6220  0272  3087               	movlw	(high __pidataBANK6)| (0+128)
  6221  0273  0085               	movwf	5
  6222  0274  3020               	movlw	low __pdataBANK6
  6223  0275  0086               	movwf	6
  6224  0276  3003               	movlw	high __pdataBANK6
  6225  0277  0087               	movwf	7
  6226  0278  3000               	movlw	0
  6227  0279  00FF               	movwf	127
  6228  027A  3020               	movlw	32
  6229  027B  3197  276C  3180   	fcall	init_ram
  6230  027E                     end_of_initialization:	
  6231                           ;End of C runtime variable initialization code
  6232                           
  6233  027E                     __end_of__initialization:	
  6234  027E  0020               	movlb	0
  6235  027F  2A80               	ljmp	_main	;jump to C main() function
  6236  0280                     __pmaintext:	
  6237                           ; 0 bytes @ 0x1A
  6238 ;;
  6239 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6240 ;;
  6241 ;; *************** function _main *****************
  6242 ;; Defined at:
  6243 ;;		line 98 in file "main.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  2  829[COMMON] int 
  6250 ;; Registers used:
  6251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 17F/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels required when called:   13
  6263 ;; This function calls:
  6264 ;;		_USBDeviceTasks
  6265 ;;		_AsicPushWork
  6266 ;;		_WorkTick
  6267 ;;		_InitializeSystem
  6268 ;;		_ProcessIO
  6269 ;; This function is called by:
  6270 ;;		Startup code after reset
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           
  6275                           ;psect for function _main
  6276  0280                     _main:	
  6277                           
  6278                           ;main.c: 99: InitializeSystem();
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _main: [allreg]
  6282  0280  24BB  3180         	fcall	_InitializeSystem
  6283  0282                     l830:	
  6284                           ;main.c: 101: while(1)
  6285                           
  6286                           
  6287                           ;main.c: 102: {
  6288                           ;main.c: 119: USBDeviceTasks();
  6289  0282  2293  3180         	fcall	_USBDeviceTasks
  6290                           
  6291                           ;main.c: 133: if(TMR0IF)
  6292  0284  1D0B               	btfss	11,2	;volatile
  6293  0285  2A88               	goto	l6020
  6294                           
  6295                           ;main.c: 134: WorkTick();
  6296  0286  2488  3180         	fcall	_WorkTick
  6297  0288                     l6020:	
  6298                           
  6299                           ;main.c: 136: if(Status.State == 'P'){
  6300  0288  0022               	movlb	2	; select bank2
  6301  0289  084F               	movf	_Status^(0+256),w	;volatile
  6302  028A  3A50               	xorlw	80
  6303  028B  1D03               	skipz
  6304  028C  2A90               	goto	l6024
  6305                           
  6306                           ;main.c: 137: AsicPushWork();
  6307  028D  318B  23DE  3180   	fcall	_AsicPushWork
  6308  0290                     l6024:	
  6309                           
  6310                           ;main.c: 138: }
  6311                           ;main.c: 140: ProcessIO();
  6312  0290  251B  3180         	fcall	_ProcessIO
  6313  0292  2A82               	goto	l830
  6314  0293                     __end_of_main:	
  6315  0293                     __ptext21:	
  6316 ;; *************** function _USBDeviceTasks *****************
  6317 ;; Defined at:
  6318 ;;		line 669 in file "../USB/usb_device.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;		None
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  i               1    7[BANK1 ] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/1
  6329 ;;		On exit  : 1F/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;Total ram usage:        2 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:   12
  6339 ;; This function calls:
  6340 ;;		_USBDeviceInit
  6341 ;;		_USBWakeFromSuspend
  6342 ;;		_USBSuspend
  6343 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6344 ;;		_USBCtrlEPAllowStatusStage
  6345 ;;		_USBStallHandler
  6346 ;;		_USBCtrlEPService
  6347 ;; This function is called by:
  6348 ;;		_main
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _USBDeviceTasks
  6354  0293                     _USBDeviceTasks:	
  6355                           
  6356                           ;usb_device.c: 735: }
  6357                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  6358                           
  6359                           ;usb_device.c: 670: BYTE i;
  6360                           ;usb_device.c: 696: if (1 != 1)
  6361                           
  6362                           ;incstack = 0
  6363                           ; Regs used in _USBDeviceTasks: [allreg]
  6364  0293  0021               	movlb	1	; select bank1
  6365  0294  08EA               	movf	_USBDeviceState^(0+128),f
  6366  0295  1D03               	skipz
  6367  0296  2AA4               	goto	l5056
  6368                           
  6369                           ;usb_device.c: 758: {
  6370                           ;usb_device.c: 760: UCON = 0;
  6371  0297  003D               	movlb	29	; select bank29
  6372  0298  018E               	clrf	14	;volatile
  6373                           
  6374                           ;usb_device.c: 763: UIE = 0;
  6375  0299  0192               	clrf	18	;volatile
  6376                           
  6377                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6378  029A  3016               	movlw	22
  6379  029B  27B2  3180         	fcall	PL86	;call to abstracted procedure
  6380  029D                     l140:	
  6381                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6382                           
  6383  029D  198E               	btfsc	14,3	;volatile
  6384  029E  2AA1               	goto	l142
  6385  029F  158E               	bsf	14,3	;volatile
  6386  02A0  2A9D               	goto	l140
  6387  02A1                     l142:	
  6388                           
  6389                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  6390  02A1  0021               	movlb	1	; select bank1
  6391  02A2  01EA               	clrf	_USBDeviceState^(0+128)
  6392  02A3  0AEA               	incf	_USBDeviceState^(0+128),f
  6393  02A4                     l5056:	
  6394                           
  6395                           ;usb_device.c: 778: }
  6396                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  6397  02A4  036A               	decf	_USBDeviceState^(0+128),w
  6398  02A5  1D03               	skipz
  6399  02A6  2AB1               	goto	l5068
  6400                           
  6401                           ;usb_device.c: 782: {
  6402                           ;usb_device.c: 792: if(!UCONbits.SE0)
  6403  02A7  003D               	movlb	29	; select bank29
  6404  02A8  1A8E               	btfsc	14,5	;volatile
  6405  02A9  2AB1               	goto	l5068
  6406                           
  6407                           ;usb_device.c: 793: {
  6408                           ;usb_device.c: 794: UIR = 0;;
  6409  02AA  0190               	clrf	16	;volatile
  6410                           
  6411                           ;usb_device.c: 796: UIE=0;
  6412  02AB  0192               	clrf	18	;volatile
  6413                           
  6414                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  6415  02AC  1412               	bsf	18,0	;volatile
  6416                           
  6417                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  6418  02AD  1612               	bsf	18,4	;volatile
  6419                           
  6420                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  6421  02AE  3002               	movlw	2
  6422  02AF  0021               	movlb	1	; select bank1
  6423  02B0  00EA               	movwf	_USBDeviceState^(0+128)
  6424  02B1                     l5068:	
  6425                           
  6426                           ;usb_device.c: 801: }
  6427                           ;usb_device.c: 802: }
  6428                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  6429  02B1  003D               	movlb	29	; select bank29
  6430  02B2  1910               	btfsc	16,2	;volatile
  6431  02B3  1D12               	btfss	18,2	;volatile
  6432  02B4  2AB8               	goto	l5076
  6433                           
  6434                           ;usb_device.c: 819: {
  6435                           ;usb_device.c: 820: (UIR &= 0xFB);
  6436  02B5  1110               	bcf	16,2	;volatile
  6437                           
  6438                           ;usb_device.c: 824: USBWakeFromSuspend();
  6439  02B6  23D5  3180         	fcall	_USBWakeFromSuspend
  6440  02B8                     l5076:	
  6441                           
  6442                           ;usb_device.c: 826: }
  6443                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  6444  02B8  1C8E               	btfss	14,1	;volatile
  6445  02B9  2ABD               	goto	l146
  6446  02BA                     l5078:	
  6447                           
  6448                           ;usb_device.c: 832: {
  6449                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  6450  02BA  0020               	movlb	0	; select bank0
  6451  02BB  1112               	bcf	18,2	;volatile
  6452                           
  6453                           ;usb_device.c: 834: return;
  6454  02BC  0008               	return
  6455  02BD                     l146:	
  6456                           
  6457                           ;usb_device.c: 835: }
  6458                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  6459  02BD  1810               	btfsc	16,0	;volatile
  6460  02BE  1C12               	btfss	18,0	;volatile
  6461  02BF  2AC6               	goto	l5088
  6462                           
  6463                           ;usb_device.c: 848: {
  6464                           ;usb_device.c: 849: USBDeviceInit();
  6465  02C0  2365  3180         	fcall	_USBDeviceInit
  6466                           
  6467                           ;usb_device.c: 853: ;
  6468                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  6469  02C2  3004               	movlw	4
  6470  02C3  00EA               	movwf	_USBDeviceState^(0+128)
  6471                           
  6472                           ;usb_device.c: 865: (UIR &= 0xFE);
  6473  02C4  003D               	movlb	29	; select bank29
  6474  02C5  1010               	bcf	16,0	;volatile
  6475  02C6                     l5088:	
  6476                           
  6477                           ;usb_device.c: 866: }
  6478                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  6479  02C6  1A10               	btfsc	16,4	;volatile
  6480  02C7  1E12               	btfss	18,4	;volatile
  6481  02C8  2ACD               	goto	l5096
  6482                           
  6483                           ;usb_device.c: 872: {
  6484                           ;usb_device.c: 877: USBSuspend();
  6485  02C9  23DE  3180         	fcall	_USBSuspend
  6486                           
  6487                           ;usb_device.c: 880: (UIR &= 0xEF);
  6488  02CB  003D               	movlb	29	; select bank29
  6489  02CC  1210               	bcf	16,4	;volatile
  6490  02CD                     l5096:	
  6491                           
  6492                           ;usb_device.c: 881: }
  6493                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  6494  02CD  1F10               	btfss	16,6	;volatile
  6495  02CE  2AE4               	goto	l5110
  6496                           
  6497                           ;usb_device.c: 884: {
  6498                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  6499  02CF  1F12               	btfss	18,6	;volatile
  6500  02D0  2AD9               	goto	l5102
  6501                           
  6502                           ;usb_device.c: 886: {
  6503                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  6504  02D1  3073               	movlw	115
  6505  02D2  0020               	movlb	0	; select bank0
  6506  02D3  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6507  02D4  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6508  02D5  27B8  3180         	fcall	PL90	;call to abstracted procedure
  6509  02D7  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6510  02D9                     l5102:	
  6511                           
  6512                           ;usb_device.c: 888: }
  6513                           ;usb_device.c: 889: (UIR &= 0xBF);
  6514  02D9  003D               	movlb	29	; select bank29
  6515  02DA  1310               	bcf	16,6	;volatile
  6516                           
  6517                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  6518  02DB  0022               	movlb	2	; select bank2
  6519  02DC  0839               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  6520  02DD  1D03               	skipz
  6521                           
  6522                           ;usb_device.c: 915: {
  6523                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  6524  02DE  03B9               	decf	_USBStatusStageTimeoutCounter^(0+256),f
  6525                           
  6526                           ;usb_device.c: 917: }
  6527                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  6528  02DF  08B9               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  6529  02E0  1D03               	skipz
  6530  02E1  2AE4               	goto	l5110
  6531                           
  6532                           ;usb_device.c: 924: {
  6533                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  6534  02E2  23FD  3180         	fcall	_USBCtrlEPAllowStatusStage
  6535  02E4                     l5110:	
  6536                           
  6537                           ;usb_device.c: 926: }
  6538                           ;usb_device.c: 928: }
  6539                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  6540  02E4  003D               	movlb	29	; select bank29
  6541  02E5  1A90               	btfsc	16,5	;volatile
  6542  02E6  1E92               	btfss	18,5	;volatile
  6543  02E7  2AEA               	goto	l5116
  6544                           
  6545                           ;usb_device.c: 931: {
  6546                           ;usb_device.c: 932: USBStallHandler();
  6547  02E8  23E5  3180         	fcall	_USBStallHandler
  6548  02EA                     l5116:	
  6549                           
  6550                           ;usb_device.c: 933: }
  6551                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  6552  02EA  1890               	btfsc	16,1	;volatile
  6553  02EB  1C92               	btfss	18,1	;volatile
  6554  02EC  2AF8               	goto	l5124
  6555                           
  6556                           ;usb_device.c: 936: {
  6557                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  6558  02ED  30FF               	movlw	255
  6559  02EE  0020               	movlb	0	; select bank0
  6560  02EF  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6561  02F0  307F               	movlw	127
  6562  02F1  00E1               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6563  02F2  27B8  3180         	fcall	PL90	;call to abstracted procedure
  6564  02F4  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6565                           
  6566                           ;usb_device.c: 938: UEIR = 0;;
  6567  02F6  003D               	movlb	29	; select bank29
  6568  02F7  0193               	clrf	19	;volatile
  6569  02F8                     l5124:	
  6570                           
  6571                           ;usb_device.c: 946: }
  6572                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  6573  02F8  3004               	movlw	4
  6574  02F9  0021               	movlb	1	; select bank1
  6575  02FA  026A               	subwf	_USBDeviceState^(0+128),w
  6576  02FB  1C03               	btfss	3,0
  6577  02FC  2ABA               	goto	l5078
  6578                           
  6579                           ;usb_device.c: 957: }
  6580                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  6581  02FD  003D               	movlb	29	; select bank29
  6582  02FE  1D92               	btfss	18,3	;volatile
  6583  02FF  2ABA               	goto	l5078
  6584                           
  6585                           ;usb_device.c: 963: {
  6586                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  6587  0300  0021               	movlb	1	; select bank1
  6588  0301  01A7               	clrf	USBDeviceTasks@i^(0+128)
  6589  0302                     l157:	
  6590                           
  6591                           ;usb_device.c: 965: {
  6592                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  6593  0302  003D               	movlb	29	; select bank29
  6594  0303  1D90               	btfss	16,3	;volatile
  6595  0304  2ABA               	goto	l5078
  6596                           
  6597                           ;usb_device.c: 967: {
  6598                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  6599  0305  080F               	movf	15,w	;volatile
  6600  0306  0021               	movlb	1	; select bank1
  6601  0307  00EF               	movwf	_USTATcopy^(0+128)
  6602                           
  6603                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  6604  0308  0C6F               	rrf	_USTATcopy^(0+128),w
  6605  0309  00A6               	movwf	??_USBDeviceTasks^(0+128)
  6606  030A  0CA6               	rrf	??_USBDeviceTasks^(0+128),f
  6607  030B  0C26               	rrf	??_USBDeviceTasks^(0+128),w
  6608  030C  390F               	andlw	15
  6609  030D  0022               	movlb	2	; select bank2
  6610  030E  00BC               	movwf	_endpoint_number^(0+256)
  6611                           
  6612                           ;usb_device.c: 972: (UIR &= 0xF7);
  6613  030F  003D               	movlb	29	; select bank29
  6614  0310  1190               	bcf	16,3	;volatile
  6615                           
  6616                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  6617  0311  0021               	movlb	1	; select bank1
  6618  0312  196F               	btfsc	_USTATcopy^(0+128),2
  6619  0313  2B18               	goto	l5144
  6620                           
  6621                           ;usb_device.c: 978: {
  6622                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  6623  0314  0022               	movlb	2	; select bank2
  6624  0315  083C               	movf	_endpoint_number^(0+256),w
  6625  0316  3E28               	addlw	_ep_data_out& (0+255)
  6626  0317  2B1B               	goto	L9
  6627  0318                     l5144:	
  6628                           ;usb_device.c: 980: }
  6629                           
  6630                           
  6631                           ;usb_device.c: 981: else
  6632                           ;usb_device.c: 982: {
  6633                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  6634  0318  0022               	movlb	2	; select bank2
  6635  0319  083C               	movf	_endpoint_number^(0+256),w
  6636  031A  3E26               	addlw	_ep_data_in& (0+255)
  6637  031B                     L9:	
  6638  031B  0086               	movwf	6
  6639  031C  3001               	movlw	1	; select bank2/3
  6640  031D  0087               	movwf	7
  6641  031E  0681               	xorwf	1,f
  6642                           
  6643                           ;usb_device.c: 984: }
  6644                           ;usb_device.c: 989: if(endpoint_number == 0)
  6645  031F  08BC               	movf	_endpoint_number^(0+256),f
  6646  0320  1D03               	skipz
  6647  0321  2B25               	goto	l5150
  6648                           
  6649                           ;usb_device.c: 990: {
  6650                           ;usb_device.c: 991: USBCtrlEPService();
  6651  0322  2435  3180         	fcall	_USBCtrlEPService
  6652                           
  6653                           ;usb_device.c: 992: }
  6654  0324  2B2F               	goto	l5152
  6655  0325                     l5150:	
  6656                           
  6657                           ;usb_device.c: 993: else
  6658                           ;usb_device.c: 994: {
  6659                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  6660  0325  3072               	movlw	114
  6661  0326  0020               	movlb	0	; select bank0
  6662  0327  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6663  0328  30EF               	movlw	_USTATcopy& (0+255)
  6664  0329  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6665  032A  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  6666  032B  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  6667  032C  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  6668  032D  2336  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6669  032F                     l5152:	
  6670  032F  0021               	movlb	1	; select bank1
  6671  0330  3004               	movlw	4
  6672  0331  0AA7               	incf	USBDeviceTasks@i^(0+128),f
  6673  0332  0227               	subwf	USBDeviceTasks@i^(0+128),w
  6674  0333  1803               	btfsc	3,0
  6675  0334  2ABA               	goto	l5078
  6676  0335  2B02               	goto	l157
  6677  0336                     __end_of_USBDeviceTasks:	
  6678  0336                     __ptext40:	
  6679 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  6680 ;; Defined at:
  6681 ;;		line 630 in file "main.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  event           2   16[BANK0 ] int 
  6684 ;;  pdata           1   18[BANK0 ] PTR void 
  6685 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
  6686 ;;  size            2   19[BANK0 ] unsigned short 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      enum E5
  6691 ;; Registers used:
  6692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 1F/0
  6695 ;;		On exit  : 1D/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6698 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;Total ram usage:        5 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    7
  6705 ;; This function calls:
  6706 ;;		_USBCBSuspend
  6707 ;;		_USBCBWakeFromSuspend
  6708 ;;		_USBCB_SOF_Handler
  6709 ;;		_USBCBErrorHandler
  6710 ;;		_USBCBCheckOtherReq
  6711 ;;		_USBCBStdSetDscHandler
  6712 ;;		_USBCBInitEP
  6713 ;; This function is called by:
  6714 ;;		_USBDeviceTasks
  6715 ;;		_USBStdSetCfgHandler
  6716 ;;		_USBSuspend
  6717 ;;		_USBWakeFromSuspend
  6718 ;;		_USBCtrlTrfSetupHandler
  6719 ;;		_USBCheckStdRequest
  6720 ;;		_USBStdFeatureReqHandler
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
  6726  0336                     _USER_USB_CALLBACK_EVENT_HANDLER:	
  6727  0336                     l5168:	
  6728                           ;incstack = 0
  6729                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6730                           
  6731                           
  6732                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6733                           ; Switch size 1, requested type "space"
  6734                           ; Number of cases is 2, Range of values is 0 to 127
  6735                           ; switch strategies available:
  6736                           ; Name         Instructions Cycles
  6737                           ; simple_byte            7     4 (average)
  6738                           ; direct_byte          262     6 (fixed)
  6739                           ; jumptable            260     6 (fixed)
  6740                           ;	Chosen strategy is simple_byte
  6741                           
  6742                           ;main.c: 656: break;
  6743                           
  6744                           ;main.c: 631: switch( event )
  6745  0336  0861               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
  6746  0337  3A00               	xorlw	0	; case 0
  6747  0338  1903               	skipnz
  6748  0339  2B45               	goto	l6284
  6749  033A  3A7F               	xorlw	127	; case 127
  6750  033B  1903               	skipnz
  6751  033C  2B5F               	goto	l6286
  6752  033D  2B64               	goto	l911
  6753  033E                     l5170:	
  6754                           
  6755                           ;main.c: 637: USBCB_SOF_Handler();
  6756  033E  2DA0               	ljmp	l873
  6757  033F                     l5172:	
  6758                           ;main.c: 638: break;
  6759                           
  6760                           
  6761                           ;main.c: 640: USBCBSuspend();
  6762  033F  2D9E               	ljmp	l867
  6763  0340                     l5174:	
  6764                           ;main.c: 641: break;
  6765                           
  6766                           
  6767                           ;main.c: 643: USBCBWakeFromSuspend();
  6768  0340  2D9F               	ljmp	l870
  6769  0341                     l5176:	
  6770                           ;main.c: 644: break;
  6771                           
  6772                           
  6773                           ;main.c: 646: USBCBInitEP();
  6774  0341  2DA5               	ljmp	l6082
  6775  0342                     l5178:	
  6776                           ;main.c: 647: break;
  6777                           
  6778                           
  6779                           ;main.c: 649: USBCBStdSetDscHandler();
  6780  0342  2DA4               	ljmp	l882
  6781  0343                     l5180:	
  6782                           ;main.c: 650: break;
  6783                           
  6784                           
  6785                           ;main.c: 652: USBCBCheckOtherReq();
  6786  0343  2DA3               	ljmp	l373
  6787  0344                     l5182:	
  6788                           ;main.c: 653: break;
  6789                           
  6790                           
  6791                           ;main.c: 655: USBCBErrorHandler();
  6792  0344  2DA1               	ljmp	l876
  6793  0345                     l6284:	
  6794                           
  6795                           ; Switch size 1, requested type "space"
  6796                           ; Number of cases is 8, Range of values is 1 to 117
  6797                           ; switch strategies available:
  6798                           ; Name         Instructions Cycles
  6799                           ; simple_byte           25    13 (average)
  6800                           ; direct_byte          243     9 (fixed)
  6801                           ; jumptable            263     9 (fixed)
  6802                           ;	Chosen strategy is simple_byte
  6803  0345  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  6804  0346  3A01               	xorlw	1	; case 1
  6805  0347  1903               	skipnz
  6806  0348  2B41               	goto	l5176
  6807  0349  3A03               	xorlw	3	; case 2
  6808  034A  1903               	skipnz
  6809  034B  2B42               	goto	l5178
  6810  034C  3A01               	xorlw	1	; case 3
  6811  034D  1903               	skipnz
  6812  034E  2B43               	goto	l5180
  6813  034F  3A06               	xorlw	6	; case 5
  6814  0350  1903               	skipnz
  6815  0351  2B64               	goto	l911
  6816  0352  3A77               	xorlw	119	; case 114
  6817  0353  1903               	skipnz
  6818  0354  2B64               	goto	l911
  6819  0355  3A01               	xorlw	1	; case 115
  6820  0356  1903               	skipnz
  6821  0357  2B3E               	goto	l5170
  6822  0358  3A07               	xorlw	7	; case 116
  6823  0359  1903               	skipnz
  6824  035A  2B40               	goto	l5174
  6825  035B  3A01               	xorlw	1	; case 117
  6826  035C  1903               	skipnz
  6827  035D  2B3F               	goto	l5172
  6828  035E  2B64               	goto	l911
  6829  035F                     l6286:	
  6830                           
  6831                           ; Switch size 1, requested type "space"
  6832                           ; Number of cases is 1, Range of values is 255 to 255
  6833                           ; switch strategies available:
  6834                           ; Name         Instructions Cycles
  6835                           ; simple_byte            4     3 (average)
  6836                           ; direct_byte            7     5 (fixed)
  6837                           ; jumptable            263     9 (fixed)
  6838                           ;	Chosen strategy is simple_byte
  6839  035F  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  6840  0360  3AFF               	xorlw	255	; case 255
  6841  0361  1903               	skipnz
  6842  0362  2B44               	goto	l5182
  6843  0363  2B64               	goto	l911
  6844  0364                     l911:	
  6845  0364  0008               	return
  6846  0365                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
  6847  0365                     __ptext52:	
  6848 ;; *************** function _USBDeviceInit *****************
  6849 ;; Defined at:
  6850 ;;		line 467 in file "../USB/usb_device.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;		None
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;  p               2    8[BANK0 ] PTR unsigned char 
  6855 ;;		 -> UEP1(1), 
  6856 ;;  i               1   10[BANK0 ] unsigned char 
  6857 ;;  i               1   11[BANK0 ] unsigned char 
  6858 ;; Return value:  Size  Location     Type
  6859 ;;		None               void
  6860 ;; Registers used:
  6861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/2
  6864 ;;		On exit  : 1F/1
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;Total ram usage:        6 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    4
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_USBDeviceTasks
  6878 ;;		_InitializeSystem
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _USBDeviceInit
  6884  0365                     _USBDeviceInit:	
  6885  0365                     l4970:	
  6886                           ;incstack = 0
  6887                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  6888                           
  6889                           
  6890                           ;usb_device.c: 468: BYTE i;
  6891                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  6892  0365  0021               	movlb	1	; select bank1
  6893  0366  1112               	bcf	18,2	;volatile
  6894                           
  6895                           ;usb_device.c: 473: UEIR = 0;;
  6896  0367  003D               	movlb	29	; select bank29
  6897  0368  0193               	clrf	19	;volatile
  6898                           
  6899                           ;usb_device.c: 476: UIR = 0;;
  6900  0369  0190               	clrf	16	;volatile
  6901                           
  6902                           ;usb_device.c: 479: UEP0 = 0;
  6903  036A  0198               	clrf	24	;volatile
  6904                           
  6905                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  6906  036B  300E               	movlw	14
  6907  036C  0020               	movlb	0	; select bank0
  6908  036D  00D9               	movwf	USBDeviceInit@p+1
  6909  036E  3099               	movlw	153
  6910  036F  00D8               	movwf	USBDeviceInit@p
  6911  0370  01DA               	clrf	USBDeviceInit@i_718
  6912  0371                     l4980:	
  6913  0371  0858               	movf	USBDeviceInit@p,w
  6914  0372  0086               	movwf	6
  6915  0373  0859               	movf	USBDeviceInit@p+1,w
  6916  0374  0087               	movwf	7
  6917  0375  0181               	clrf	1
  6918  0376  0AD8               	incf	USBDeviceInit@p,f
  6919  0377  1903               	skipnz
  6920  0378  0AD9               	incf	USBDeviceInit@p+1,f
  6921  0379  0ADA               	incf	USBDeviceInit@i_718,f
  6922  037A  1903               	btfsc	3,2
  6923  037B  2B71               	goto	l4980
  6924                           
  6925                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6926  037C  3016               	movlw	22
  6927  037D  003D               	movlb	29	; select bank29
  6928  037E  27B2  3180         	fcall	PL86	;call to abstracted procedure
  6929                           
  6930                           ;usb_device.c: 486: ;
  6931                           ;usb_device.c: 489: ;
  6932                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  6933  0380  0020               	movlb	0	; select bank0
  6934  0381  01DB               	clrf	USBDeviceInit@i
  6935  0382                     l4996:	
  6936                           
  6937                           ;usb_device.c: 493: {
  6938                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  6939  0382  085B               	movf	USBDeviceInit@i,w
  6940  0383  0709               	addwf	9,w
  6941  0384  0709               	addwf	9,w
  6942  0385  3E20               	addlw	32
  6943  0386  0086               	movwf	6
  6944  0387  3000               	movlw	0
  6945  0388  0187               	clrf	7
  6946  0389  3FC0               	movwi [0]fsr1
  6947  038A  3FC1               	movwi [1]fsr1
  6948  038B  3FC2               	movwi [2]fsr1
  6949  038C  3FC3               	movwi [3]fsr1
  6950  038D  3008               	movlw	8
  6951  038E  0ADB               	incf	USBDeviceInit@i,f
  6952  038F  025B               	subwf	USBDeviceInit@i,w
  6953  0390  1C03               	skipc
  6954  0391  2B82               	goto	l4996
  6955                           
  6956                           ;usb_device.c: 495: }
  6957                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  6958  0392  003D               	movlb	29	; select bank29
  6959  0393  170E               	bsf	14,6	;volatile
  6960                           
  6961                           ;usb_device.c: 501: UADDR = 0x00;
  6962  0394  0196               	clrf	22	;volatile
  6963                           
  6964                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  6965  0395  120E               	bcf	14,4	;volatile
  6966                           
  6967                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  6968  0396  130E               	bcf	14,6	;volatile
  6969  0397                     l5010:	
  6970                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  6971                           
  6972  0397  003D               	movlb	29	; select bank29
  6973  0398  1D90               	btfss	16,3	;volatile
  6974  0399  2BA1               	goto	l5012
  6975                           
  6976                           ;usb_device.c: 511: {
  6977                           ;usb_device.c: 512: (UIR &= 0xF7);
  6978  039A  1190               	bcf	16,3	;volatile
  6979                           
  6980                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  6981  039B  0022               	movlb	2	; select bank2
  6982  039C  01CB               	clrf	(_inPipes^(0+256)+2)
  6983                           
  6984                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  6985  039D  01A2               	clrf	(_outPipes^(0+256)+2)
  6986                           
  6987                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  6988  039E  01A3               	clrf	(_outPipes^(0+256)+3)
  6989  039F  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  6990  03A0  2B97               	goto	l5010
  6991  03A1                     l5012:	
  6992                           
  6993                           ;usb_device.c: 517: }
  6994                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  6995  03A1  3001               	movlw	1
  6996  03A2  0022               	movlb	2	; select bank2
  6997  03A3  00B7               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6998                           
  6999                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  7000  03A4  00B8               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  7001                           
  7002                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  7003  03A5  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  7004                           
  7005                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  7006  03A6  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  7007                           
  7008                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
  7009  03A7  0020               	movlb	0	; select bank0
  7010  03A8  01DB               	clrf	USBDeviceInit@i
  7011  03A9                     l5024:	
  7012                           
  7013                           ;usb_device.c: 531: {
  7014                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  7015  03A9  085B               	movf	USBDeviceInit@i,w
  7016  03AA  3E6A               	addlw	_pBDTEntryIn& (0+255)
  7017  03AB  0086               	movwf	6
  7018  03AC  0187               	clrf	7
  7019  03AD  0181               	clrf	1
  7020                           
  7021                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  7022  03AE  085B               	movf	USBDeviceInit@i,w
  7023  03AF  3E2A               	addlw	_pBDTEntryOut& (0+255)
  7024  03B0  0086               	movwf	6
  7025  03B1  3001               	movlw	1	; select bank2/3
  7026  03B2  0087               	movwf	7
  7027  03B3  0181               	clrf	1
  7028                           
  7029                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  7030  03B4  085B               	movf	USBDeviceInit@i,w
  7031  03B5  3E26               	addlw	_ep_data_in& (0+255)
  7032  03B6  0086               	movwf	6
  7033  03B7  0181               	clrf	1
  7034                           
  7035                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  7036  03B8  085B               	movf	USBDeviceInit@i,w
  7037  03B9  3E28               	addlw	_ep_data_out& (0+255)
  7038  03BA  0086               	movwf	6
  7039  03BB  3002               	movlw	2
  7040  03BC  0181               	clrf	1
  7041  03BD  0ADB               	incf	USBDeviceInit@i,f
  7042  03BE  025B               	subwf	USBDeviceInit@i,w
  7043  03BF  1C03               	skipc
  7044  03C0  2BA9               	goto	l5024
  7045                           
  7046                           ;usb_device.c: 536: }
  7047                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  7048  03C1  3028               	movlw	40
  7049  03C2  00EA               	movwf	_pBDTEntryIn
  7050                           
  7051                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  7052  03C3  3016               	movlw	22
  7053  03C4  003D               	movlb	29	; select bank29
  7054  03C5  0098               	movwf	24	;volatile
  7055                           
  7056                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7057  03C6  3040               	movlw	64
  7058  03C7  0020               	movlb	0	; select bank0
  7059  03C8  00D6               	movwf	??_USBDeviceInit
  7060  03C9  01D7               	clrf	??_USBDeviceInit+1
  7061  03CA  00A2               	movwf	34	;volatile
  7062  03CB  0857               	movf	??_USBDeviceInit+1,w
  7063  03CC  00A3               	movwf	35	;volatile
  7064                           
  7065                           ;usb_device.c: 544: BDT[0].CNT = 8;
  7066  03CD  3008               	movlw	8
  7067  03CE  00A1               	movwf	33	;volatile
  7068                           
  7069                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  7070  03CF  3084               	movlw	132
  7071  03D0  00A0               	movwf	32	;volatile
  7072                           
  7073                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  7074  03D1  0021               	movlb	1	; select bank1
  7075  03D2  01ED               	clrf	_USBActiveConfiguration^(0+128)
  7076                           
  7077                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  7078  03D3  01EA               	clrf	_USBDeviceState^(0+128)
  7079  03D4  0008               	return
  7080  03D5                     __end_of_USBDeviceInit:	
  7081  03D5                     __ptext39:	
  7082 ;; *************** function _USBWakeFromSuspend *****************
  7083 ;; Defined at:
  7084 ;;		line 2456 in file "../USB/usb_device.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;		None
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;		None               void
  7091 ;; Registers used:
  7092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 1F/1D
  7095 ;;		On exit  : 1F/1D
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;Total ram usage:        0 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    8
  7105 ;; This function calls:
  7106 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7107 ;; This function is called by:
  7108 ;;		_USBDeviceTasks
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _USBWakeFromSuspend
  7114  03D5                     _USBWakeFromSuspend:	
  7115                           
  7116                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  7117                           
  7118                           ;incstack = 0
  7119                           ; Regs used in _USBWakeFromSuspend: [allreg]
  7120  03D5  3074               	movlw	116
  7121  03D6  275C  3180         	fcall	PL44	;call to abstracted procedure
  7122  03D8  2336               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7123                           
  7124                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
  7125  03D9  003D               	movlb	29	; select bank29
  7126  03DA  108E               	bcf	14,1	;volatile
  7127                           
  7128                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
  7129  03DB  1112               	bcf	18,2	;volatile
  7130                           
  7131                           ;usb_device.c: 2495: {
  7132                           ;usb_device.c: 2496: (UIR &= 0xFB);
  7133  03DC  1110               	bcf	16,2	;volatile
  7134  03DD  0008               	return
  7135  03DE                     __end_of_USBWakeFromSuspend:	
  7136  03DE                     __ptext38:	
  7137 ;; *************** function _USBSuspend *****************
  7138 ;; Defined at:
  7139 ;;		line 2399 in file "../USB/usb_device.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;		None
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;		None
  7144 ;; Return value:  Size  Location     Type
  7145 ;;		None               void
  7146 ;; Registers used:
  7147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 1F/1D
  7150 ;;		On exit  : 1D/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;Total ram usage:        0 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    8
  7160 ;; This function calls:
  7161 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7162 ;; This function is called by:
  7163 ;;		_USBDeviceTasks
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function _USBSuspend
  7169  03DE                     _USBSuspend:	
  7170                           
  7171                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
  7172                           
  7173                           ;incstack = 0
  7174                           ; Regs used in _USBSuspend: [allreg]
  7175  03DE  1512               	bsf	18,2	;volatile
  7176                           
  7177                           ;usb_device.c: 2424: (UIR &= 0xEF);
  7178  03DF  1210               	bcf	16,4	;volatile
  7179                           
  7180                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
  7181  03E0  148E               	bsf	14,1	;volatile
  7182                           
  7183                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  7184  03E1  3075               	movlw	117
  7185  03E2  275C  3180         	fcall	PL44	;call to abstracted procedure
  7186  03E4  2B36               	ljmp	l5168
  7187  03E5                     __end_of_USBSuspend:	
  7188  03E5                     __ptext37:	
  7189 ;; *************** function _USBStallHandler *****************
  7190 ;; Defined at:
  7191 ;;		line 2356 in file "../USB/usb_device.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;		None               void
  7198 ;; Registers used:
  7199 ;;		wreg, fsr1l, fsr1h
  7200 ;; Tracked objects:
  7201 ;;		On entry : 1F/1D
  7202 ;;		On exit  : 1F/1D
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;Total ram usage:        0 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    4
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_USBDeviceTasks
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           
  7220                           ;psect for function _USBStallHandler
  7221  03E5                     _USBStallHandler:	
  7222                           
  7223                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
  7224                           
  7225                           ;incstack = 0
  7226                           ; Regs used in _USBStallHandler: [wregfsr1]
  7227  03E5  1C18               	btfss	24,0	;volatile
  7228  03E6  2BFB               	goto	l5236
  7229                           
  7230                           ;usb_device.c: 2369: {
  7231                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  7232  03E7  0020               	movlb	0	; select bank0
  7233  03E8  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7234  03E9  0086               	movwf	6
  7235  03EA  0187               	clrf	7
  7236  03EB  0801               	movf	1,w
  7237  03EC  3A80               	xorlw	128
  7238  03ED  1D03               	skipz
  7239  03EE  2BF9               	goto	l5234
  7240  03EF  086A               	movf	_pBDTEntryIn,w
  7241  03F0  0086               	movwf	6
  7242  03F1  0801               	movf	1,w
  7243  03F2  3A84               	xorlw	132
  7244  03F3  1D03               	skipz
  7245  03F4  2BF9               	goto	l5234
  7246                           
  7247                           ;usb_device.c: 2372: {
  7248                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  7249  03F5  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7250  03F6  0086               	movwf	6
  7251  03F7  308C               	movlw	140
  7252  03F8  0081               	movwf	1
  7253  03F9                     l5234:	
  7254                           
  7255                           ;usb_device.c: 2375: }
  7256                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
  7257  03F9  003D               	movlb	29	; select bank29
  7258  03FA  1018               	bcf	24,0	;volatile
  7259  03FB                     l5236:	
  7260                           
  7261                           ;usb_device.c: 2377: }
  7262                           ;usb_device.c: 2379: (UIR &= 0xDF);
  7263  03FB  1290               	bcf	16,5	;volatile
  7264  03FC  0008               	return
  7265  03FD                     __end_of_USBStallHandler:	
  7266  03FD                     __ptext36:	
  7267 ;; *************** function _USBCtrlEPAllowStatusStage *****************
  7268 ;; Defined at:
  7269 ;;		line 1590 in file "../USB/usb_device.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;		None
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;		None
  7274 ;; Return value:  Size  Location     Type
  7275 ;;		None               void
  7276 ;; Registers used:
  7277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7278 ;; Tracked objects:
  7279 ;;		On entry : 1D/2
  7280 ;;		On exit  : 1D/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;Total ram usage:        2 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; Hardware stack levels required when called:    4
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_USBDeviceTasks
  7294 ;;		_USBCtrlEPServiceComplete
  7295 ;;		_USBCtrlTrfRxService
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _USBCtrlEPAllowStatusStage
  7301  03FD                     _USBCtrlEPAllowStatusStage:	
  7302  03FD                     l5196:	
  7303                           ;incstack = 0
  7304                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
  7305                           
  7306                           
  7307                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
  7308  03FD  0022               	movlb	2	; select bank2
  7309  03FE  08B7               	movf	_USBStatusStageEnabledFlag1^(0+256),f	;volatile
  7310  03FF  1D03               	skipz
  7311  0400  0008               	return
  7312                           
  7313                           ;usb_device.c: 1597: {
  7314                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
  7315  0401  3001               	movlw	1
  7316  0402  00B7               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  7317                           
  7318                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
  7319  0403  08B8               	movf	_USBStatusStageEnabledFlag2^(0+256),f	;volatile
  7320  0404  1D03               	skipz
  7321  0405  0008               	return
  7322                           
  7323                           ;usb_device.c: 1600: {
  7324                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
  7325  0406  00B8               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  7326                           
  7327                           ;usb_device.c: 1605: if(controlTransferState == 2)
  7328  0407  0020               	movlb	0	; select bank0
  7329  0408  086D               	movf	_controlTransferState,w
  7330  0409  3A02               	xorlw	2
  7331  040A  1D03               	skipz
  7332  040B  2C11               	goto	l5208
  7333                           
  7334                           ;usb_device.c: 1606: {
  7335                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
  7336  040C  0A6A               	incf	_pBDTEntryIn,w
  7337  040D  0086               	movwf	6
  7338  040E  0187               	clrf	7
  7339  040F  0181               	clrf	1
  7340                           
  7341                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  7342                           
  7343                           ;usb_device.c: 1609: }
  7344  0410  2FA7               	ljmp	PL82	;call to abstracted procedure
  7345  0411                     l5208:	
  7346                           
  7347                           ;usb_device.c: 1610: else if(controlTransferState == 1)
  7348  0411  0B6D               	decfsz	_controlTransferState,w
  7349  0412  0008               	return
  7350                           
  7351                           ;usb_device.c: 1611: {
  7352                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
  7353  0413  0022               	movlb	2	; select bank2
  7354  0414  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  7355                           
  7356                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
  7357  0415  0020               	movlb	0	; select bank0
  7358  0416  0A6E               	incf	_pBDTEntryEP0OutCurrent,w
  7359                           
  7360                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7361  0417  3197  27F1  3180   	fcall	PL40	;call to abstracted procedure
  7362  041A  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  7363  041B  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  7364  041C  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7365  041D  278E  3180         	fcall	PL70	;call to abstracted procedure
  7366                           
  7367                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  7368  041F  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7369  0420  0086               	movwf	6
  7370  0421  3084               	movlw	132
  7371  0422  0081               	movwf	1
  7372                           
  7373                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
  7374  0423  0022               	movlb	2	; select bank2
  7375  0424  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  7376  0425  0AAE               	incf	_BothEP0OutUOWNsSet^(0+256),f
  7377                           
  7378                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
  7379  0426  0020               	movlb	0	; select bank0
  7380  0427  0A6F               	incf	_pBDTEntryEP0OutNext,w
  7381  0428  0086               	movwf	6
  7382  0429  3008               	movlw	8
  7383  042A  0081               	movwf	1
  7384                           
  7385                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7386  042B  3040               	movlw	64
  7387  042C  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  7388  042D  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  7389  042E  086F               	movf	_pBDTEntryEP0OutNext,w
  7390  042F  278E               	fcall	PL70	;call to abstracted procedure
  7391                           
  7392                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  7393  0430  086F               	movf	_pBDTEntryEP0OutNext,w
  7394  0431  0086               	movwf	6
  7395  0432  3080               	movlw	128
  7396  0433  0081               	movwf	1
  7397  0434  0008               	return
  7398  0435                     __end_of_USBCtrlEPAllowStatusStage:	
  7399  0435                     __ptext22:	
  7400 ;; *************** function _USBCtrlEPService *****************
  7401 ;; Defined at:
  7402 ;;		line 2523 in file "../USB/usb_device.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  setup_cnt       1   25[BANK0 ] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 1F/2
  7413 ;;		On exit  : 1C/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;Total ram usage:        3 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:   11
  7423 ;; This function calls:
  7424 ;;		_USBCtrlTrfSetupHandler
  7425 ;;		_USBCtrlTrfOutHandler
  7426 ;;		_USBCtrlTrfInHandler
  7427 ;; This function is called by:
  7428 ;;		_USBDeviceTasks
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           
  7433                           ;psect for function _USBCtrlEPService
  7434  0435                     _USBCtrlEPService:	
  7435                           
  7436                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)45;
  7437                           
  7438                           ;incstack = 0
  7439                           ; Regs used in _USBCtrlEPService: [allreg]
  7440  0435  302D               	movlw	45
  7441  0436  00B9               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  7442                           
  7443                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  7444  0437  0021               	movlb	1	; select bank1
  7445  0438  086F               	movf	_USTATcopy^(0+128),w
  7446  0439  39FD               	andlw	253
  7447  043A  1D03               	btfss	3,2
  7448  043B  2C81               	goto	l5270
  7449                           
  7450                           ;usb_device.c: 2533: {
  7451                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  7452  043C  366F               	lsrf	_USTATcopy^(0+128),w
  7453  043D  393F               	andlw	63
  7454  043E  0709               	addwf	9,w
  7455  043F  0709               	addwf	9,w
  7456  0440  3E20               	addlw	32
  7457  0441  0020               	movlb	0	; select bank0
  7458  0442  00EE               	movwf	_pBDTEntryEP0OutCurrent
  7459                           
  7460                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  7461  0443  00EF               	movwf	_pBDTEntryEP0OutNext
  7462                           
  7463                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  7464  0444  3004               	movlw	4
  7465  0445  06EF               	xorwf	_pBDTEntryEP0OutNext,f
  7466                           
  7467                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  7468  0446  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7469  0447  0086               	movwf	6
  7470  0448  0187               	clrf	7
  7471  0449  0C01               	rrf	1,w
  7472  044A  0C89               	rrf	9,f
  7473  044B  390F               	andlw	15
  7474  044C  3A0D               	xorlw	13
  7475  044D  1D03               	skipz
  7476  044E  2C80               	goto	l5268
  7477                           
  7478                           ;usb_device.c: 2550: {
  7479                           ;usb_device.c: 2551: unsigned char setup_cnt;
  7480                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  7481  044F  01E9               	clrf	USBCtrlEPService@setup_cnt
  7482  0450                     l5256:	
  7483                           
  7484                           ;usb_device.c: 2558: {
  7485                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  7486  0450  0869               	movf	USBCtrlEPService@setup_cnt,w
  7487  0451  3E40               	addlw	64
  7488  0452  0086               	movwf	6
  7489  0453  0187               	clrf	7
  7490  0454  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7491  0455  3E02               	addlw	2
  7492  0456  0084               	movwf	4
  7493  0457  0185               	clrf	5
  7494  0458  3F00               	moviw [0]fsr0
  7495  0459  0021               	movlb	1	; select bank1
  7496  045A  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7497  045B  3F01               	moviw [1]fsr0
  7498  045C  00A5               	movwf	(??_USBCtrlEPService^(0+128)+1)
  7499  045D  0824               	movf	??_USBCtrlEPService^(0+128),w
  7500  045E  0084               	movwf	4
  7501  045F  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7502  0460  0085               	movwf	5
  7503  0461  0800               	movf	0,w
  7504  0462  0081               	movwf	1
  7505                           
  7506                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  7507  0463  0020               	movlb	0	; select bank0
  7508  0464  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7509  0465  3E02               	addlw	2
  7510  0466  0086               	movwf	6
  7511  0467  3001               	movlw	1
  7512  0468  0781               	addwf	1,f
  7513  0469  3141               	addfsr 1,1
  7514  046A  1803               	skipnc
  7515  046B  0A81               	incf	1,f
  7516  046C  3008               	movlw	8
  7517  046D  0AE9               	incf	USBCtrlEPService@setup_cnt,f
  7518  046E  0269               	subwf	USBCtrlEPService@setup_cnt,w
  7519  046F  1C03               	skipc
  7520  0470  2C50               	goto	l5256
  7521                           
  7522                           ;usb_device.c: 2561: }
  7523                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7524  0471  3040               	movlw	64
  7525  0472  0021               	movlb	1	; select bank1
  7526  0473  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7527  0474  01A5               	clrf	(??_USBCtrlEPService^(0+128)+1)
  7528  0475  0020               	movlb	0	; select bank0
  7529  0476  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7530  0477  3E02               	addlw	2
  7531  0478  0086               	movwf	6
  7532  0479  0187               	clrf	7
  7533  047A  0021               	movlb	1	; select bank1
  7534  047B  0824               	movf	??_USBCtrlEPService^(0+128),w
  7535  047C  3FC0               	movwi [0]fsr1
  7536  047D  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  7537  047E  3FC1               	movwi [1]fsr1
  7538                           
  7539                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  7540  047F  2814               	ljmp	l5586
  7541  0480                     l5268:	
  7542                           ;usb_device.c: 2566: }
  7543                           
  7544                           
  7545                           ;usb_device.c: 2567: else
  7546                           ;usb_device.c: 2568: {
  7547                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  7548  0480  2F10               	ljmp	l5612
  7549  0481                     l5270:	
  7550                           
  7551                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  7552  0481  30FD               	movlw	253
  7553  0482  056F               	andwf	_USTATcopy^(0+128),w
  7554  0483  00A4               	movwf	??_USBCtrlEPService^(0+128)
  7555  0484  3A04               	xorlw	4
  7556  0485  1D03               	skipz
  7557  0486  0008               	return
  7558                           
  7559                           ;usb_device.c: 2574: {
  7560                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  7561  0487  2E07               	ljmp	l5624
  7562  0488                     __end_of_USBCtrlEPService:	
  7563  0488                     __ptext20:	
  7564 ;; *************** function _WorkTick *****************
  7565 ;; Defined at:
  7566 ;;		line 174 in file "klondike.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;		None
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;		None
  7571 ;; Return value:  Size  Location     Type
  7572 ;;		None               void
  7573 ;; Registers used:
  7574 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7575 ;; Tracked objects:
  7576 ;;		On entry : 1F/0
  7577 ;;		On exit  : 1C/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;Total ram usage:        0 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    4
  7587 ;; This function calls:
  7588 ;;		Nothing
  7589 ;; This function is called by:
  7590 ;;		_main
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function _WorkTick
  7596  0488                     _WorkTick:	
  7597                           
  7598                           ;klondike.c: 175: TMR0 += HashTime;
  7599                           
  7600                           ;incstack = 0
  7601                           ; Regs used in _WorkTick: [wreg+fsr1l+fsr1h+status,2+status,0]
  7602  0488  0022               	movlb	2	; select bank2
  7603  0489  084E               	movf	_HashTime^(0+256),w
  7604  048A  0020               	movlb	0	; select bank0
  7605  048B  0795               	addwf	21,f	;volatile
  7606                           
  7607                           ;klondike.c: 176: TMR0IF = 0;
  7608  048C  110B               	bcf	11,2	;volatile
  7609                           
  7610                           ;klondike.c: 177: if(RCSTAbits.SPEN == 0) {
  7611  048D  0023               	movlb	3	; select bank3
  7612  048E  1B9D               	btfsc	29,7	;volatile
  7613  048F  2C93               	goto	l4480
  7614                           
  7615                           ;klondike.c: 178: RCSTAbits.SPEN = 1;
  7616  0490  179D               	bsf	29,7	;volatile
  7617                           
  7618                           ;klondike.c: 179: ResultQC = 0;
  7619  0491  0022               	movlb	2	; select bank2
  7620  0492  01B0               	clrf	_ResultQC^(0+256)
  7621  0493                     l4480:	
  7622                           
  7623                           ;klondike.c: 180: }
  7624                           ;klondike.c: 181: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  7625  0493  0022               	movlb	2	; select bank2
  7626  0494  084F               	movf	_Status^(0+256),w	;volatile
  7627  0495  3A57               	xorlw	87
  7628  0496  1D03               	skipz
  7629  0497  2CB1               	goto	l4494
  7630  0498  3057               	movlw	(_Status& (0+255)+8)
  7631  0499  0086               	movwf	6
  7632  049A  3001               	movlw	1	; select bank2/3
  7633  049B  0087               	movwf	7
  7634  049C  0781               	addwf	1,f
  7635  049D  3141               	addfsr 1,1
  7636  049E  1803               	skipnc
  7637  049F  0A81               	incf	1,f
  7638  04A0  317F               	addfsr 1,-1
  7639  04A1  3F40               	moviw [0]fsr1
  7640  04A2  0659               	xorwf	(_Status^(0+256)+10),w	;volatile
  7641  04A3  1D03               	skipz
  7642  04A4  2CA7               	goto	u3075
  7643  04A5  3F41               	moviw [1]fsr1
  7644  04A6  065A               	xorwf	((_Status+1)^(0+256)+10),w	;volatile
  7645  04A7                     u3075:	
  7646  04A7  1D03               	skipz
  7647  04A8  2CB1               	goto	l4494
  7648                           
  7649                           ;klondike.c: 182: if(Status.WorkQC > 0) {
  7650  04A9  0852               	movf	(_Status^(0+256)+3),w	;volatile
  7651  04AA  1903               	btfsc	3,2
  7652  04AB  2CAF               	goto	l4492
  7653                           
  7654                           ;klondike.c: 183: Status.State = 'P';
  7655  04AC  3050               	movlw	80
  7656  04AD  00CF               	movwf	_Status^(0+256)	;volatile
  7657  04AE  0008               	return
  7658  04AF                     l4492:	
  7659                           
  7660                           ;klondike.c: 186: else
  7661                           ;klondike.c: 187: Status.State = 'R';
  7662  04AF  3052               	movlw	82
  7663  04B0  00CF               	movwf	_Status^(0+256)	;volatile
  7664  04B1                     l4494:	
  7665                           
  7666                           ;klondike.c: 188: }
  7667                           ;klondike.c: 190: if(++SlowTick == 0) {
  7668  04B1  0FB2               	incfsz	_SlowTick^(0+256),f
  7669  04B2  0008               	return
  7670                           
  7671                           ;klondike.c: 191: LATAbits.LATA5 = 0;;
  7672  04B3  128C               	bcf	12,5	;volatile
  7673                           
  7674                           ;klondike.c: 192: Status.Temp = ADRESH;
  7675  04B4  0021               	movlb	1	; select bank1
  7676  04B5  081C               	movf	28,w	;volatile
  7677  04B6  0022               	movlb	2	; select bank2
  7678  04B7  00D4               	movwf	(_Status^(0+256)+5)	;volatile
  7679                           
  7680                           ;klondike.c: 194: ADCON0bits.GO_nDONE = 1;
  7681  04B8  0021               	movlb	1	; select bank1
  7682  04B9  149D               	bsf	29,1	;volatile
  7683  04BA  0008               	return
  7684  04BB                     __end_of_WorkTick:	
  7685  04BB                     __ptext12:	
  7686 ;; *************** function _InitializeSystem *****************
  7687 ;; Defined at:
  7688 ;;		line 146 in file "main.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;		None               void
  7695 ;; Registers used:
  7696 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 17F/0
  7699 ;;		On exit  : 1F/1
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    7
  7709 ;; This function calls:
  7710 ;;		_USBDeviceInit
  7711 ;;		_UserInit
  7712 ;; This function is called by:
  7713 ;;		_main
  7714 ;; This function uses a non-reentrant model
  7715 ;;
  7716                           
  7717                           
  7718                           ;psect for function _InitializeSystem
  7719  04BB                     _InitializeSystem:	
  7720                           
  7721                           ;main.c: 148: ANSELA = 0x00;
  7722                           
  7723                           ;incstack = 0
  7724                           ; Regs used in _InitializeSystem: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7725  04BB  0023               	movlb	3	; select bank3
  7726  04BC  018C               	clrf	12	;volatile
  7727                           
  7728                           ;main.c: 149: ANSELB = 0x00;
  7729  04BD  018D               	clrf	13	;volatile
  7730                           
  7731                           ;main.c: 150: ANSELC = 0x04;
  7732  04BE  3004               	movlw	4
  7733  04BF  008E               	movwf	14	;volatile
  7734                           
  7735                           ;main.c: 153: OSCTUNE = 0;
  7736  04C0  0021               	movlb	1	; select bank1
  7737  04C1  0198               	clrf	24	;volatile
  7738                           
  7739                           ;main.c: 154: OSCCON = 0xFC;
  7740  04C2  30FC               	movlw	252
  7741  04C3  0099               	movwf	25	;volatile
  7742                           
  7743                           ;main.c: 155: ACTCON = 0x90;
  7744  04C4  3090               	movlw	144
  7745  04C5  0027               	movlb	7	; select bank7
  7746  04C6  009B               	movwf	27	;volatile
  7747                           
  7748                           ;main.c: 158: USBGenericOutHandle = 0;
  7749  04C7  0022               	movlb	2	; select bank2
  7750  04C8  01B6               	clrf	_USBGenericOutHandle^(0+256)
  7751                           
  7752                           ;main.c: 159: USBGenericInHandle = 0;
  7753  04C9  01B5               	clrf	_USBGenericInHandle^(0+256)
  7754                           
  7755                           ;main.c: 160: WQI = WQX = 0;
  7756  04CA  01BB               	clrf	_WQX^(0+256)
  7757  04CB  01BA               	clrf	_WQI^(0+256)
  7758                           
  7759                           ;main.c: 162: UserInit();
  7760  04CC  24CF  3180         	fcall	_UserInit
  7761                           
  7762                           ;main.c: 164: USBDeviceInit();
  7763  04CE  2B65               	ljmp	l4970
  7764  04CF                     __end_of_InitializeSystem:	
  7765  04CF                     __ptext13:	
  7766 ;; *************** function _UserInit *****************
  7767 ;; Defined at:
  7768 ;;		line 170 in file "main.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;		None               void
  7775 ;; Registers used:
  7776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 17F/2
  7779 ;;		On exit  : 1F/2
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    6
  7789 ;; This function calls:
  7790 ;;		_DetectAsics
  7791 ;;		_InitFAN
  7792 ;;		_InitTempSensor
  7793 ;;		_InitWorkTick
  7794 ;;		_InitResultRx
  7795 ;; This function is called by:
  7796 ;;		_InitializeSystem
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _UserInit
  7802  04CF                     _UserInit:	
  7803                           
  7804                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  7805                           
  7806                           ;incstack = 0
  7807                           ; Regs used in _UserInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7808  04CF  0021               	movlb	1	; select bank1
  7809  04D0  128C               	bcf	12,5	;volatile
  7810  04D1  0022               	movlb	2	; select bank2
  7811  04D2  168C               	bsf	12,5	;volatile
  7812                           
  7813                           ;main.c: 172: InitTempSensor();
  7814  04D3  24F4  3180         	fcall	_InitTempSensor
  7815                           
  7816                           ;main.c: 173: InitFAN();
  7817  04D5  24DC  3180         	fcall	_InitFAN
  7818                           
  7819                           ;main.c: 174: InitWorkTick();
  7820  04D7  2505  3180         	fcall	_InitWorkTick
  7821                           
  7822                           ;main.c: 176: InitResultRx();
  7823  04D9  25CF               	fcall	_InitResultRx
  7824                           
  7825                           ;main.c: 177: DetectAsics();
  7826  04DA  3188  28BE         	ljmp	l5994
  7827  04DC                     __end_of_UserInit:	
  7828  04DC                     __ptext17:	
  7829 ;; *************** function _InitFAN *****************
  7830 ;; Defined at:
  7831 ;;		line 247 in file "klondike.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;		None
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;		None
  7836 ;; Return value:  Size  Location     Type
  7837 ;;		None               void
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0
  7840 ;; Tracked objects:
  7841 ;;		On entry : 17F/1
  7842 ;;		On exit  : 17F/C
  7843 ;;		Unchanged: 160/0
  7844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7849 ;;Total ram usage:        0 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    4
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_UserInit
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _InitFAN
  7861  04DC                     _InitFAN:	
  7862                           
  7863                           ;klondike.c: 248: TRISCbits.TRISC5 = 1;
  7864                           
  7865                           ;incstack = 0
  7866                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  7867  04DC  168E               	bsf	14,5	;volatile
  7868                           
  7869                           ;klondike.c: 249: PWM1CON = 0;
  7870  04DD  002C               	movlb	12	; select bank12
  7871  04DE  0193               	clrf	19	;volatile
  7872                           
  7873                           ;klondike.c: 250: PR2 = 0xFF;
  7874  04DF  30FF               	movlw	255
  7875  04E0  0020               	movlb	0	; select bank0
  7876  04E1  009B               	movwf	27	;volatile
  7877                           
  7878                           ;klondike.c: 251: PWM1CON = 0xC0;
  7879  04E2  30C0               	movlw	192
  7880  04E3  002C               	movlb	12	; select bank12
  7881  04E4  0093               	movwf	19	;volatile
  7882                           
  7883                           ;klondike.c: 252: PWM1DCH = 230;
  7884  04E5  30E6               	movlw	230
  7885  04E6  0092               	movwf	18	;volatile
  7886                           
  7887                           ;klondike.c: 253: PWM1DCL = 0;
  7888  04E7  0191               	clrf	17	;volatile
  7889                           
  7890                           ;klondike.c: 254: TMR2IF = 0;
  7891  04E8  0020               	movlb	0	; select bank0
  7892  04E9  1091               	bcf	17,1	;volatile
  7893                           
  7894                           ;klondike.c: 255: T2CONbits.T2CKPS = 1;
  7895  04EA  081C               	movf	28,w	;volatile
  7896  04EB  39FC               	andlw	-4
  7897  04EC  3801               	iorlw	1
  7898  04ED  009C               	movwf	28	;volatile
  7899                           
  7900                           ;klondike.c: 256: TMR2ON = 1;
  7901  04EE  151C               	bsf	28,2	;volatile
  7902                           
  7903                           ;klondike.c: 257: TRISCbits.TRISC5 = 0;
  7904  04EF  0021               	movlb	1	; select bank1
  7905  04F0  128E               	bcf	14,5	;volatile
  7906                           
  7907                           ;klondike.c: 258: PWM1OE=1;
  7908  04F1  002C               	movlb	12	; select bank12
  7909  04F2  1713               	bsf	19,6	;volatile
  7910  04F3  0008               	return
  7911  04F4                     __end_of_InitFAN:	
  7912  04F4                     __ptext16:	
  7913 ;; *************** function _InitTempSensor *****************
  7914 ;; Defined at:
  7915 ;;		line 267 in file "klondike.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;		None
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;		None
  7920 ;; Return value:  Size  Location     Type
  7921 ;;		None               void
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0
  7924 ;; Tracked objects:
  7925 ;;		On entry : 17F/2
  7926 ;;		On exit  : 17F/1
  7927 ;;		Unchanged: 160/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;Total ram usage:        0 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    4
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_UserInit
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           
  7944                           ;psect for function _InitTempSensor
  7945  04F4                     _InitTempSensor:	
  7946                           
  7947                           ;klondike.c: 268: TRISCbits.TRISC2=1;
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  7951  04F4  0021               	movlb	1	; select bank1
  7952  04F5  150E               	bsf	14,2	;volatile
  7953                           
  7954                           ;klondike.c: 271: ADCON0bits.CHS = 6;
  7955  04F6  081D               	movf	29,w	;volatile
  7956  04F7  3983               	andlw	-125
  7957  04F8  3818               	iorlw	24
  7958  04F9  009D               	movwf	29	;volatile
  7959                           
  7960                           ;klondike.c: 272: ADCON0bits.ADON = 1;
  7961  04FA  141D               	bsf	29,0	;volatile
  7962                           
  7963                           ;klondike.c: 273: ADCON1bits.ADFM = 0;
  7964  04FB  139E               	bcf	30,7	;volatile
  7965                           
  7966                           ;klondike.c: 274: ADCON1bits.ADCS = 6;
  7967  04FC  081E               	movf	30,w	;volatile
  7968  04FD  398F               	andlw	-113
  7969  04FE  3860               	iorlw	96
  7970  04FF  009E               	movwf	30	;volatile
  7971                           
  7972                           ;klondike.c: 275: ADCON1bits.ADPREF = 0;
  7973  0500  30FC               	movlw	-4
  7974  0501  059E               	andwf	30,f	;volatile
  7975                           
  7976                           ;klondike.c: 276: ADCON2bits.TRIGSEL = 0;
  7977  0502  308F               	movlw	-113
  7978  0503  059F               	andwf	31,f	;volatile
  7979  0504  0008               	return
  7980  0505                     __end_of_InitTempSensor:	
  7981  0505                     __ptext15:	
  7982 ;; *************** function _InitWorkTick *****************
  7983 ;; Defined at:
  7984 ;;		line 280 in file "klondike.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;		None
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;		None
  7989 ;; Return value:  Size  Location     Type
  7990 ;;		None               void
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0
  7993 ;; Tracked objects:
  7994 ;;		On entry : 17F/C
  7995 ;;		On exit  : 17F/2
  7996 ;;		Unchanged: 160/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;Total ram usage:        0 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    4
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_UserInit
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           
  8013                           ;psect for function _InitWorkTick
  8014  0505                     _InitWorkTick:	
  8015                           
  8016                           ;klondike.c: 281: TMR0CS = 0;
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  8020  0505  0021               	movlb	1	; select bank1
  8021  0506  1295               	bcf	21,5	;volatile
  8022                           
  8023                           ;klondike.c: 282: OPTION_REGbits.PSA = 0;
  8024  0507  1195               	bcf	21,3	;volatile
  8025                           
  8026                           ;klondike.c: 283: OPTION_REGbits.PS = 7;
  8027  0508  3007               	movlw	7
  8028  0509  0495               	iorwf	21,f	;volatile
  8029                           
  8030                           ;klondike.c: 284: TMR0 = HashTime;
  8031  050A  0022               	movlb	2	; select bank2
  8032  050B  084E               	movf	_HashTime^(0+256),w
  8033  050C  0020               	movlb	0	; select bank0
  8034  050D  0095               	movwf	21	;volatile
  8035                           
  8036                           ;klondike.c: 287: TRISCbits.TRISC7 = 0;
  8037  050E  0021               	movlb	1	; select bank1
  8038  050F  138E               	bcf	14,7	;volatile
  8039                           
  8040                           ;klondike.c: 288: TRISCbits.TRISC6 = 0;
  8041  0510  130E               	bcf	14,6	;volatile
  8042                           
  8043                           ;klondike.c: 289: TRISCbits.TRISC4 = 0;
  8044  0511  120E               	bcf	14,4	;volatile
  8045                           
  8046                           ;klondike.c: 290: TRISCbits.TRISC3 = 0;
  8047  0512  118E               	bcf	14,3	;volatile
  8048                           
  8049                           ;klondike.c: 291: LATC = 0xD8;;
  8050  0513  30D8               	movlw	216
  8051  0514  0022               	movlb	2	; select bank2
  8052  0515  008E               	movwf	14	;volatile
  8053                           
  8054                           ;klondike.c: 292: TRISAbits.TRISA4 = 0;
  8055  0516  0021               	movlb	1	; select bank1
  8056  0517  120C               	bcf	12,4	;volatile
  8057                           
  8058                           ;klondike.c: 293: LATAbits.LATA4 = 1;
  8059  0518  0022               	movlb	2	; select bank2
  8060  0519  160C               	bsf	12,4	;volatile
  8061  051A  0008               	return
  8062  051B                     __end_of_InitWorkTick:	
  8063  051B                     __ptext1:	
  8064 ;; *************** function _ProcessIO *****************
  8065 ;; Defined at:
  8066 ;;		line 182 in file "main.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;		None               void
  8073 ;; Registers used:
  8074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : 1C/2
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;Total ram usage:        4 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:    8
  8087 ;; This function calls:
  8088 ;;		_USBTransferOnePacket
  8089 ;;		_ProcessCmd
  8090 ;;		___bmul
  8091 ;; This function is called by:
  8092 ;;		_main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _ProcessIO
  8098  051B                     _ProcessIO:	
  8099                           
  8100                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  8101                           
  8102                           ;incstack = 0
  8103                           ; Regs used in _ProcessIO: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  8104  051B  3020               	movlw	32
  8105  051C  0021               	movlb	1	; select bank1
  8106  051D  026A               	subwf	_USBDeviceState^(0+128),w
  8107  051E  1C03               	skipc
  8108  051F  0008               	return
  8109  0520  003D               	movlb	29	; select bank29
  8110  0521  188E               	btfsc	14,1	;volatile
  8111  0522  0008               	return
  8112                           
  8113                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  8114  0523  0022               	movlb	2	; select bank2
  8115  0524  0836               	movf	_USBGenericOutHandle^(0+256),w
  8116  0525  1903               	btfsc	3,2
  8117  0526  2D2C               	goto	l6050
  8118  0527  0836               	movf	_USBGenericOutHandle^(0+256),w
  8119  0528  2787  3180         	fcall	PL68	;call to abstracted procedure
  8120  052A  00E6               	movwf	_ProcessIO$2365^(0+128)
  8121  052B  2D2E               	goto	L1
  8122  052C                     l6050:	
  8123  052C  0021               	movlb	1	; select bank1
  8124  052D  01E6               	clrf	_ProcessIO$2365^(0+128)
  8125  052E                     L1:	
  8126  052E  01E7               	clrf	(_ProcessIO$2365+1)^(0+128)
  8127  052F  0867               	movf	(_ProcessIO$2365+1)^(0+128),w
  8128  0530  0466               	iorwf	_ProcessIO$2365^(0+128),w
  8129  0531  1D03               	skipz
  8130  0532  2D3E               	goto	l6058
  8131                           
  8132                           ;main.c: 197: ProcessCmd(OUTPacket);
  8133  0533  30A0               	movlw	160
  8134  0534  318A  223B  3180   	fcall	_ProcessCmd
  8135                           
  8136                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  8137  0537  0020               	movlb	0	; select bank0
  8138  0538  279C  3180         	fcall	PL76	;call to abstracted procedure
  8139  053A  2568  3180         	fcall	_USBTransferOnePacket
  8140  053C  0022               	movlb	2	; select bank2
  8141  053D  00B6               	movwf	_USBGenericOutHandle^(0+256)
  8142  053E                     l6058:	
  8143                           
  8144                           ;main.c: 199: }
  8145                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  8146  053E  0022               	movlb	2	; select bank2
  8147  053F  083A               	movf	_WQI^(0+256),w
  8148  0540  063B               	xorwf	_WQX^(0+256),w
  8149  0541  1903               	skipnz
  8150  0542  0008               	return
  8151  0543  0835               	movf	_USBGenericInHandle^(0+256),w
  8152  0544  1903               	btfsc	3,2
  8153  0545  2D4B               	goto	l6064
  8154  0546  0835               	movf	_USBGenericInHandle^(0+256),w
  8155  0547  2787  3180         	fcall	PL68	;call to abstracted procedure
  8156  0549  00E8               	movwf	_ProcessIO$2399^(0+128)
  8157  054A  2D4D               	goto	L2
  8158  054B                     l6064:	
  8159  054B  0021               	movlb	1	; select bank1
  8160  054C  01E8               	clrf	_ProcessIO$2399^(0+128)
  8161  054D                     L2:	
  8162  054D  01E9               	clrf	(_ProcessIO$2399+1)^(0+128)
  8163  054E  0869               	movf	(_ProcessIO$2399+1)^(0+128),w
  8164  054F  0468               	iorwf	_ProcessIO$2399^(0+128),w
  8165  0550  1D03               	skipz
  8166  0551  0008               	return
  8167                           
  8168                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  8169  0552  0020               	movlb	0	; select bank0
  8170  0553  300F               	movlw	15
  8171  0554  01D9               	clrf	?_USBTransferOnePacket
  8172  0555  0AD9               	incf	?_USBTransferOnePacket,f
  8173  0556  00D6               	movwf	?___bmul
  8174  0557  0022               	movlb	2	; select bank2
  8175  0558  083B               	movf	_WQX^(0+256),w
  8176  0559  318E  26B7  3180   	fcall	___bmul
  8177  055C  3E20               	addlw	32
  8178  055D  00DA               	movwf	?_USBTransferOnePacket+1
  8179  055E  300F               	movlw	15
  8180  055F  00DB               	movwf	?_USBTransferOnePacket+2
  8181  0560  3001               	movlw	1
  8182  0561  2568               	fcall	_USBTransferOnePacket
  8183  0562  0022               	movlb	2	; select bank2
  8184  0563  00B5               	movwf	_USBGenericInHandle^(0+256)
  8185  0564  3003               	movlw	3
  8186                           
  8187                           ;main.c: 203: WQX = (WQX+1) & 3;
  8188  0565  0ABB               	incf	_WQX^(0+256),f
  8189  0566  05BB               	andwf	_WQX^(0+256),f
  8190  0567  0008               	return
  8191  0568                     __end_of_ProcessIO:	
  8192  0568                     __ptext42:	
  8193 ;; *************** function _USBTransferOnePacket *****************
  8194 ;; Defined at:
  8195 ;;		line 1173 in file "../USB/usb_device.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  ep              1    wreg     unsigned char 
  8198 ;;  dir             1    9[BANK0 ] unsigned char 
  8199 ;;  data            1   10[BANK0 ] PTR unsigned char 
  8200 ;;		 -> INPacket(64), OUTPacket(64), 
  8201 ;;  len             1   11[BANK0 ] unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  ep              1   14[BANK0 ] unsigned char 
  8204 ;;  handle          1   15[BANK0 ] PTR volatile struct __BD
  8205 ;;		 -> NULL(0), BDT(32), 
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      PTR void 
  8208 ;; Registers used:
  8209 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8210 ;; Tracked objects:
  8211 ;;		On entry : 1F/0
  8212 ;;		On exit  : 1F/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8215 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;Total ram usage:        7 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; Hardware stack levels required when called:    4
  8222 ;; This function calls:
  8223 ;;		Nothing
  8224 ;; This function is called by:
  8225 ;;		_ProcessIO
  8226 ;;		_USBCBInitEP
  8227 ;; This function uses a non-reentrant model
  8228 ;;
  8229                           
  8230                           
  8231                           ;psect for function _USBTransferOnePacket
  8232  0568                     _USBTransferOnePacket:	
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  8236                           ;USBTransferOnePacket@ep stored from wreg
  8237  0568  00DE               	movwf	USBTransferOnePacket@ep
  8238                           
  8239                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  8240                           ;usb_device.c: 1177: if(dir != 0)
  8241  0569  0859               	movf	USBTransferOnePacket@dir,w
  8242  056A  1903               	btfsc	3,2
  8243  056B  2D71               	goto	l5306
  8244                           
  8245                           ;usb_device.c: 1178: {
  8246                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  8247  056C  085E               	movf	USBTransferOnePacket@ep,w
  8248  056D  3E6A               	addlw	_pBDTEntryIn& (0+255)
  8249  056E  0086               	movwf	6
  8250  056F  0187               	clrf	7
  8251  0570  2D74               	goto	L18
  8252  0571                     l5306:	
  8253                           ;usb_device.c: 1181: }
  8254                           
  8255                           
  8256                           ;usb_device.c: 1182: else
  8257                           ;usb_device.c: 1183: {
  8258                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  8259  0571  085E               	movf	USBTransferOnePacket@ep,w
  8260  0572  27A2  3180         	fcall	PL78	;call to abstracted procedure
  8261  0574                     L18:	
  8262  0574  0801               	movf	1,w
  8263  0575  00DF               	movwf	USBTransferOnePacket@handle
  8264                           
  8265                           ;usb_device.c: 1186: }
  8266                           ;usb_device.c: 1190: if(handle == 0)
  8267  0576  08DF               	movf	USBTransferOnePacket@handle,f
  8268  0577  1903               	btfsc	3,2
  8269                           
  8270                           ;usb_device.c: 1191: {
  8271                           ;usb_device.c: 1192: return 0;
  8272  0578  3400               	retlw	0
  8273                           
  8274                           ;usb_device.c: 1193: }
  8275                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  8276  0579  085A               	movf	USBTransferOnePacket@data,w
  8277  057A  00DC               	movwf	??_USBTransferOnePacket
  8278  057B  3002               	movlw	2
  8279  057C  00DD               	movwf	??_USBTransferOnePacket+1
  8280  057D  085F               	movf	USBTransferOnePacket@handle,w
  8281  057E  3E02               	addlw	2
  8282  057F  0086               	movwf	6
  8283  0580  0187               	clrf	7
  8284  0581  085C               	movf	??_USBTransferOnePacket,w
  8285  0582  3FC0               	movwi [0]fsr1
  8286  0583  085D               	movf	??_USBTransferOnePacket+1,w
  8287  0584  3FC1               	movwi [1]fsr1
  8288                           
  8289                           ;usb_device.c: 1207: handle->CNT = len;
  8290  0585  0A5F               	incf	USBTransferOnePacket@handle,w
  8291  0586  0086               	movwf	6
  8292  0587  085B               	movf	USBTransferOnePacket@len,w
  8293  0588  0081               	movwf	1
  8294                           
  8295                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  8296  0589  085F               	movf	USBTransferOnePacket@handle,w
  8297  058A  0086               	movwf	6
  8298  058B  3040               	movlw	64
  8299  058C  0581               	andwf	1,f
  8300                           
  8301                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  8302  058D  085F               	movf	USBTransferOnePacket@handle,w
  8303  058E  0086               	movwf	6
  8304  058F  3088               	movlw	136
  8305  0590  0481               	iorwf	1,f
  8306                           
  8307                           ;usb_device.c: 1212: if(dir != 0)
  8308  0591  0859               	movf	USBTransferOnePacket@dir,w
  8309  0592  1903               	btfsc	3,2
  8310  0593  2D98               	goto	l5324
  8311                           
  8312                           ;usb_device.c: 1213: {
  8313                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  8314  0594  085E               	movf	USBTransferOnePacket@ep,w
  8315  0595  3E6A               	addlw	_pBDTEntryIn& (0+255)
  8316  0596  0086               	movwf	6
  8317  0597  2D9A               	goto	L20
  8318  0598                     l5324:	
  8319                           ;usb_device.c: 1216: }
  8320                           
  8321                           
  8322                           ;usb_device.c: 1217: else
  8323                           ;usb_device.c: 1218: {
  8324                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  8325  0598  085E               	movf	USBTransferOnePacket@ep,w
  8326  0599  27A2               	fcall	PL78	;call to abstracted procedure
  8327  059A                     L20:	
  8328  059A  3004               	movlw	4
  8329  059B  0681               	xorwf	1,f
  8330                           
  8331                           ;usb_device.c: 1221: }
  8332                           ;usb_device.c: 1222: return (void*)handle;
  8333  059C  085F               	movf	USBTransferOnePacket@handle,w
  8334  059D  0008               	return
  8335  059E                     __end_of_USBTransferOnePacket:	
  8336  059E                     __ptext51:	
  8337 ;; *************** function _USBCBSuspend *****************
  8338 ;; Defined at:
  8339 ;;		line 264 in file "main.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;		None
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;		None
  8344 ;; Return value:  Size  Location     Type
  8345 ;;		None               void
  8346 ;; Registers used:
  8347 ;;		None
  8348 ;; Tracked objects:
  8349 ;;		On entry : 1F/0
  8350 ;;		On exit  : 1F/0
  8351 ;;		Unchanged: 1F/0
  8352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;Total ram usage:        0 bytes
  8358 ;; Hardware stack levels used:    1
  8359 ;; Hardware stack levels required when called:    4
  8360 ;; This function calls:
  8361 ;;		Nothing
  8362 ;; This function is called by:
  8363 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8364 ;; This function uses a non-reentrant model
  8365 ;;
  8366                           
  8367                           
  8368                           ;psect for function _USBCBSuspend
  8369  059E                     _USBCBSuspend:	
  8370  059E                     l867:	
  8371                           ;incstack = 0
  8372                           ; Regs used in _USBCBSuspend: []
  8373                           
  8374  059E  0008               	return
  8375  059F                     __end_of_USBCBSuspend:	
  8376  059F                     __ptext50:	
  8377 ;; *************** function _USBCBWakeFromSuspend *****************
  8378 ;; Defined at:
  8379 ;;		line 305 in file "main.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;		None
  8384 ;; Return value:  Size  Location     Type
  8385 ;;		None               void
  8386 ;; Registers used:
  8387 ;;		None
  8388 ;; Tracked objects:
  8389 ;;		On entry : 1F/0
  8390 ;;		On exit  : 1F/0
  8391 ;;		Unchanged: 1F/0
  8392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;Total ram usage:        0 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:    4
  8400 ;; This function calls:
  8401 ;;		Nothing
  8402 ;; This function is called by:
  8403 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function _USBCBWakeFromSuspend
  8409  059F                     _USBCBWakeFromSuspend:	
  8410  059F                     l870:	
  8411                           ;incstack = 0
  8412                           ; Regs used in _USBCBWakeFromSuspend: []
  8413                           
  8414  059F  0008               	return
  8415  05A0                     __end_of_USBCBWakeFromSuspend:	
  8416  05A0                     __ptext49:	
  8417 ;; *************** function _USBCB_SOF_Handler *****************
  8418 ;; Defined at:
  8419 ;;		line 335 in file "main.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;		None               void
  8426 ;; Registers used:
  8427 ;;		None
  8428 ;; Tracked objects:
  8429 ;;		On entry : 1F/0
  8430 ;;		On exit  : 1F/0
  8431 ;;		Unchanged: 1F/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;Total ram usage:        0 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    4
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           
  8448                           ;psect for function _USBCB_SOF_Handler
  8449  05A0                     _USBCB_SOF_Handler:	
  8450  05A0                     l873:	
  8451                           ;incstack = 0
  8452                           ; Regs used in _USBCB_SOF_Handler: []
  8453                           
  8454  05A0  0008               	return
  8455  05A1                     __end_of_USBCB_SOF_Handler:	
  8456  05A1                     __ptext48:	
  8457 ;; *************** function _USBCBErrorHandler *****************
  8458 ;; Defined at:
  8459 ;;		line 358 in file "main.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;		None
  8464 ;; Return value:  Size  Location     Type
  8465 ;;		None               void
  8466 ;; Registers used:
  8467 ;;		None
  8468 ;; Tracked objects:
  8469 ;;		On entry : 1F/0
  8470 ;;		On exit  : 1F/0
  8471 ;;		Unchanged: 1F/0
  8472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8477 ;;Total ram usage:        0 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    4
  8480 ;; This function calls:
  8481 ;;		Nothing
  8482 ;; This function is called by:
  8483 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _USBCBErrorHandler
  8489  05A1                     _USBCBErrorHandler:	
  8490  05A1                     l876:	
  8491                           ;incstack = 0
  8492                           ; Regs used in _USBCBErrorHandler: []
  8493                           
  8494  05A1  0008               	return
  8495  05A2                     __end_of_USBCBErrorHandler:	
  8496  05A2                     __ptext46:	
  8497 ;; *************** function _USBCBCheckOtherReq *****************
  8498 ;; Defined at:
  8499 ;;		line 409 in file "main.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;		None               void
  8506 ;; Registers used:
  8507 ;;		status,2, status,0, pclath, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 1F/0
  8510 ;;		On exit  : 1F/0
  8511 ;;		Unchanged: 1F/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    5
  8520 ;; This function calls:
  8521 ;;		_USBCheckVendorRequest
  8522 ;; This function is called by:
  8523 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _USBCBCheckOtherReq
  8529  05A2                     _USBCBCheckOtherReq:	
  8530                           
  8531                           ;main.c: 410: USBCheckVendorRequest();
  8532                           
  8533                           ;incstack = 0
  8534                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
  8535  05A2  2DA3               	ljmp	l373
  8536  05A3                     __end_of_USBCBCheckOtherReq:	
  8537  05A3                     __ptext47:	
  8538 ;; *************** function _USBCheckVendorRequest *****************
  8539 ;; Defined at:
  8540 ;;		line 248 in file "../USB/usb_function_generic.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;		None
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;		None
  8545 ;; Return value:  Size  Location     Type
  8546 ;;		None               void
  8547 ;; Registers used:
  8548 ;;		None
  8549 ;; Tracked objects:
  8550 ;;		On entry : 1F/0
  8551 ;;		On exit  : 1F/0
  8552 ;;		Unchanged: 1F/0
  8553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;Total ram usage:        0 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    4
  8561 ;; This function calls:
  8562 ;;		Nothing
  8563 ;; This function is called by:
  8564 ;;		_USBCBCheckOtherReq
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           
  8569                           ;psect for function _USBCheckVendorRequest
  8570  05A3                     _USBCheckVendorRequest:	
  8571  05A3                     l373:	
  8572                           ;incstack = 0
  8573                           ; Regs used in _USBCheckVendorRequest: []
  8574                           
  8575  05A3  0008               	return
  8576  05A4                     __end_of_USBCheckVendorRequest:	
  8577  05A4                     __ptext45:	
  8578 ;; *************** function _USBCBStdSetDscHandler *****************
  8579 ;; Defined at:
  8580 ;;		line 434 in file "main.c"
  8581 ;; Parameters:    Size  Location     Type
  8582 ;;		None
  8583 ;; Auto vars:     Size  Location     Type
  8584 ;;		None
  8585 ;; Return value:  Size  Location     Type
  8586 ;;		None               void
  8587 ;; Registers used:
  8588 ;;		None
  8589 ;; Tracked objects:
  8590 ;;		On entry : 1F/0
  8591 ;;		On exit  : 1F/0
  8592 ;;		Unchanged: 1F/0
  8593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;Total ram usage:        0 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    4
  8601 ;; This function calls:
  8602 ;;		Nothing
  8603 ;; This function is called by:
  8604 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           
  8609                           ;psect for function _USBCBStdSetDscHandler
  8610  05A4                     _USBCBStdSetDscHandler:	
  8611  05A4                     l882:	
  8612                           ;incstack = 0
  8613                           ; Regs used in _USBCBStdSetDscHandler: []
  8614                           
  8615  05A4  0008               	return
  8616  05A5                     __end_of_USBCBStdSetDscHandler:	
  8617  05A5                     __ptext41:	
  8618 ;; *************** function _USBCBInitEP *****************
  8619 ;; Defined at:
  8620 ;;		line 460 in file "main.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;		None
  8623 ;; Auto vars:     Size  Location     Type
  8624 ;;		None
  8625 ;; Return value:  Size  Location     Type
  8626 ;;		None               void
  8627 ;; Registers used:
  8628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8629 ;; Tracked objects:
  8630 ;;		On entry : 1F/0
  8631 ;;		On exit  : 1F/2
  8632 ;;		Unchanged: 0/0
  8633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;Total ram usage:        0 bytes
  8639 ;; Hardware stack levels used:    1
  8640 ;; Hardware stack levels required when called:    6
  8641 ;; This function calls:
  8642 ;;		_USBEnableEndpoint
  8643 ;;		_USBTransferOnePacket
  8644 ;; This function is called by:
  8645 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           
  8650                           ;psect for function _USBCBInitEP
  8651  05A5                     _USBCBInitEP:	
  8652  05A5                     l6082:	
  8653                           ;incstack = 0
  8654                           ; Regs used in _USBCBInitEP: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8655                           
  8656                           
  8657                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
  8658  05A5  301E               	movlw	30
  8659  05A6  00DA               	movwf	?_USBEnableEndpoint
  8660  05A7  3001               	movlw	1
  8661  05A8  25B0  3180         	fcall	_USBEnableEndpoint
  8662                           
  8663                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  8664  05AA  279C  3180         	fcall	PL76	;call to abstracted procedure
  8665  05AC  2568               	fcall	_USBTransferOnePacket
  8666  05AD  0022               	movlb	2	; select bank2
  8667  05AE  00B6               	movwf	_USBGenericOutHandle^(0+256)
  8668  05AF  0008               	return
  8669  05B0                     __end_of_USBCBInitEP:	
  8670  05B0                     __ptext43:	
  8671 ;; *************** function _USBEnableEndpoint *****************
  8672 ;; Defined at:
  8673 ;;		line 1056 in file "../USB/usb_device.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;  ep              1    wreg     unsigned char 
  8676 ;;  options         1   10[BANK0 ] unsigned char 
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  ep              1   15[BANK0 ] unsigned char 
  8679 ;;  p               2   13[BANK0 ] PTR unsigned char 
  8680 ;;		 -> UEP0(1), 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;		None               void
  8683 ;; Registers used:
  8684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 1F/0
  8687 ;;		On exit  : 1F/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8690 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;Total ram usage:        6 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    5
  8697 ;; This function calls:
  8698 ;;		_USBConfigureEndpoint
  8699 ;; This function is called by:
  8700 ;;		_USBCBInitEP
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           
  8705                           ;psect for function _USBEnableEndpoint
  8706  05B0                     _USBEnableEndpoint:	
  8707                           
  8708                           ;incstack = 0
  8709                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8710                           ;USBEnableEndpoint@ep stored from wreg
  8711  05B0  00DF               	movwf	USBEnableEndpoint@ep
  8712                           
  8713                           ;usb_device.c: 1057: unsigned char* p;
  8714                           ;usb_device.c: 1061: if(options & 0x04)
  8715  05B1  1D5A               	btfss	USBEnableEndpoint@options,2
  8716  05B2  2DB6               	goto	l5278
  8717                           
  8718                           ;usb_device.c: 1062: {
  8719                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
  8720  05B3  01D6               	clrf	?_USBConfigureEndpoint
  8721  05B4  25E0  3180         	fcall	_USBConfigureEndpoint
  8722  05B6                     l5278:	
  8723                           
  8724                           ;usb_device.c: 1064: }
  8725                           ;usb_device.c: 1065: if(options & 0x02)
  8726  05B6  1CDA               	btfss	USBEnableEndpoint@options,1
  8727  05B7  2DBC               	goto	l5282
  8728                           
  8729                           ;usb_device.c: 1066: {
  8730                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
  8731  05B8  01D6               	clrf	?_USBConfigureEndpoint
  8732  05B9  0AD6               	incf	?_USBConfigureEndpoint,f
  8733  05BA  085F               	movf	USBEnableEndpoint@ep,w
  8734  05BB  25E0               	fcall	_USBConfigureEndpoint
  8735  05BC                     l5282:	
  8736                           
  8737                           ;usb_device.c: 1068: }
  8738                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
  8739  05BC  085F               	movf	USBEnableEndpoint@ep,w
  8740  05BD  3E98               	addlw	152
  8741  05BE  00DB               	movwf	??_USBEnableEndpoint
  8742  05BF  300E               	movlw	14
  8743  05C0  01DC               	clrf	??_USBEnableEndpoint+1
  8744  05C1  3DDC               	addwfc	??_USBEnableEndpoint+1,f
  8745  05C2  085B               	movf	??_USBEnableEndpoint,w
  8746  05C3  00DD               	movwf	USBEnableEndpoint@p
  8747  05C4  085C               	movf	??_USBEnableEndpoint+1,w
  8748  05C5  00DE               	movwf	USBEnableEndpoint@p+1
  8749                           
  8750                           ;usb_device.c: 1078: *p = options;
  8751  05C6  085A               	movf	USBEnableEndpoint@options,w
  8752  05C7  00DB               	movwf	??_USBEnableEndpoint
  8753  05C8  085D               	movf	USBEnableEndpoint@p,w
  8754  05C9  0086               	movwf	6
  8755  05CA  085E               	movf	USBEnableEndpoint@p+1,w
  8756  05CB  0087               	movwf	7
  8757  05CC  085B               	movf	??_USBEnableEndpoint,w
  8758  05CD  0081               	movwf	1
  8759  05CE  0008               	return
  8760  05CF                     __end_of_USBEnableEndpoint:	
  8761  05CF                     __ptext14:	
  8762 ;; *************** function _InitResultRx *****************
  8763 ;; Defined at:
  8764 ;;		line 297 in file "klondike.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;		None
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;		None
  8769 ;; Return value:  Size  Location     Type
  8770 ;;		None               void
  8771 ;; Registers used:
  8772 ;;		wreg, status,2
  8773 ;; Tracked objects:
  8774 ;;		On entry : 17F/2
  8775 ;;		On exit  : 17F/3
  8776 ;;		Unchanged: 160/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:        0 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    4
  8785 ;; This function calls:
  8786 ;;		Nothing
  8787 ;; This function is called by:
  8788 ;;		_UserInit
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _InitResultRx
  8794  05CF                     _InitResultRx:	
  8795                           
  8796                           ;klondike.c: 298: ResultQC = 0;
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in _InitResultRx: [wreg+status,2]
  8800  05CF  01B0               	clrf	_ResultQC^(0+256)
  8801                           
  8802                           ;klondike.c: 299: TXSTAbits.SYNC = 1;
  8803  05D0  0023               	movlb	3	; select bank3
  8804  05D1  161E               	bsf	30,4	;volatile
  8805                           
  8806                           ;klondike.c: 300: RCSTAbits.SPEN = 1;
  8807  05D2  179D               	bsf	29,7	;volatile
  8808                           
  8809                           ;klondike.c: 301: TXSTAbits.CSRC = 0;
  8810  05D3  139E               	bcf	30,7	;volatile
  8811                           
  8812                           ;klondike.c: 302: BAUDCONbits.SCKP = 0;
  8813  05D4  121F               	bcf	31,4	;volatile
  8814                           
  8815                           ;klondike.c: 303: ANSELBbits.ANSB5 = 0;
  8816  05D5  128D               	bcf	13,5	;volatile
  8817                           
  8818                           ;klondike.c: 305: IOCBPbits.IOCBP7 = 1;
  8819  05D6  0027               	movlb	7	; select bank7
  8820  05D7  1794               	bsf	20,7	;volatile
  8821                           
  8822                           ;klondike.c: 306: INTCONbits.IOCIE = 1;
  8823  05D8  158B               	bsf	11,3	;volatile
  8824                           
  8825                           ;klondike.c: 307: IOCBF = 0;
  8826  05D9  0196               	clrf	22	;volatile
  8827                           
  8828                           ;klondike.c: 309: INTCONbits.GIE = 1;
  8829  05DA  178B               	bsf	11,7	;volatile
  8830                           
  8831                           ;klondike.c: 310: RCSTAbits.CREN = 1;
  8832  05DB  0023               	movlb	3	; select bank3
  8833  05DC  161D               	bsf	29,4	;volatile
  8834                           
  8835                           ;klondike.c: 311: RCREG = 0xFF;
  8836  05DD  30FF               	movlw	255
  8837  05DE  0099               	movwf	25	;volatile
  8838  05DF  0008               	return
  8839  05E0                     __end_of_InitResultRx:	
  8840  05E0                     __ptext44:	
  8841 ;; *************** function _USBConfigureEndpoint *****************
  8842 ;; Defined at:
  8843 ;;		line 1713 in file "../USB/usb_device.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  EPNum           1    wreg     unsigned char 
  8846 ;;  direction       1    6[BANK0 ] unsigned char 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  EPNum           1    8[BANK0 ] unsigned char 
  8849 ;;  handle          1    9[BANK0 ] PTR volatile struct __BD
  8850 ;;		 -> BDT(32), 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;		None               void
  8853 ;; Registers used:
  8854 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8855 ;; Tracked objects:
  8856 ;;		On entry : 1F/0
  8857 ;;		On exit  : 1F/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8860 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;Total ram usage:        4 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    4
  8867 ;; This function calls:
  8868 ;;		Nothing
  8869 ;; This function is called by:
  8870 ;;		_USBEnableEndpoint
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           
  8875                           ;psect for function _USBConfigureEndpoint
  8876  05E0                     _USBConfigureEndpoint:	
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
  8880                           ;USBConfigureEndpoint@EPNum stored from wreg
  8881  05E0  00D8               	movwf	USBConfigureEndpoint@EPNum
  8882                           
  8883                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
  8884                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
  8885  05E1  3020               	movlw	32
  8886  05E2  00D9               	movwf	USBConfigureEndpoint@handle
  8887                           
  8888                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
  8889  05E3  0856               	movf	USBConfigureEndpoint@direction,w
  8890  05E4  00D7               	movwf	??_USBConfigureEndpoint
  8891  05E5  35D7               	lslf	??_USBConfigureEndpoint,f
  8892  05E6  0858               	movf	USBConfigureEndpoint@EPNum,w
  8893  05E7  0709               	addwf	9,w
  8894  05E8  0709               	addwf	9,w
  8895  05E9  0757               	addwf	??_USBConfigureEndpoint,w
  8896  05EA  0709               	addwf	9,w
  8897  05EB  0709               	addwf	9,w
  8898  05EC  07D9               	addwf	USBConfigureEndpoint@handle,f
  8899                           
  8900                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
  8901  05ED  0859               	movf	USBConfigureEndpoint@handle,w
  8902  05EE  0086               	movwf	6
  8903  05EF  0187               	clrf	7
  8904  05F0  1381               	bcf	1,7
  8905                           
  8906                           ;usb_device.c: 1726: if(direction == 0)
  8907  05F1  08D6               	movf	USBConfigureEndpoint@direction,f
  8908  05F2  1D03               	skipz
  8909  05F3  2DF8               	goto	l5296
  8910                           
  8911                           ;usb_device.c: 1727: {
  8912                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
  8913  05F4  0858               	movf	USBConfigureEndpoint@EPNum,w
  8914  05F5  27A2  3180         	fcall	PL78	;call to abstracted procedure
  8915  05F7  2DFC               	goto	L21
  8916  05F8                     l5296:	
  8917                           ;usb_device.c: 1729: }
  8918                           
  8919                           
  8920                           ;usb_device.c: 1730: else
  8921                           ;usb_device.c: 1731: {
  8922                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
  8923  05F8  0858               	movf	USBConfigureEndpoint@EPNum,w
  8924  05F9  3E6A               	addlw	_pBDTEntryIn& (0+255)
  8925  05FA  0086               	movwf	6
  8926  05FB  0187               	clrf	7
  8927  05FC                     L21:	
  8928  05FC  0859               	movf	USBConfigureEndpoint@handle,w
  8929  05FD  0081               	movwf	1
  8930                           
  8931                           ;usb_device.c: 1733: }
  8932                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
  8933  05FE  0859               	movf	USBConfigureEndpoint@handle,w
  8934  05FF  0086               	movwf	6
  8935  0600  0187               	clrf	7
  8936  0601  1301               	bcf	1,6
  8937                           
  8938                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
  8939  0602  0859               	movf	USBConfigureEndpoint@handle,w
  8940  0603  3E04               	addlw	4
  8941  0604  0086               	movwf	6
  8942  0605  1701               	bsf	1,6
  8943  0606  0008               	return
  8944  0607                     __end_of_USBConfigureEndpoint:	
  8945  0607                     __ptext23:	
  8946 ;; *************** function _USBCtrlTrfInHandler *****************
  8947 ;; Defined at:
  8948 ;;		line 2748 in file "../USB/usb_device.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  lastDTS         1   11[BANK0 ] unsigned char 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;		None               void
  8955 ;; Registers used:
  8956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 1F/1
  8959 ;;		On exit  : 1F/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;Total ram usage:        3 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    5
  8969 ;; This function calls:
  8970 ;;		_USBCtrlTrfTxService
  8971 ;; This function is called by:
  8972 ;;		_USBCtrlEPService
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function _USBCtrlTrfInHandler
  8978  0607                     _USBCtrlTrfInHandler:	
  8979  0607                     l5624:	
  8980                           ;incstack = 0
  8981                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8982                           
  8983                           
  8984                           ;usb_device.c: 2749: BYTE lastDTS;
  8985                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  8986  0607  0020               	movlb	0	; select bank0
  8987  0608  086A               	movf	_pBDTEntryIn,w
  8988  0609  0086               	movwf	6
  8989  060A  3000               	movlw	0
  8990  060B  0187               	clrf	7
  8991  060C  1B01               	btfsc	1,6
  8992  060D  3001               	movlw	1
  8993  060E  00DB               	movwf	USBCtrlTrfInHandler@lastDTS
  8994                           
  8995                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  8996  060F  3004               	movlw	4
  8997  0610  06EA               	xorwf	_pBDTEntryIn,f
  8998                           
  8999                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  9000  0611  0021               	movlb	1	; select bank1
  9001  0612  086A               	movf	_USBDeviceState^(0+128),w
  9002  0613  3A08               	xorlw	8
  9003  0614  1D03               	skipz
  9004  0615  2E22               	goto	l315
  9005                           
  9006                           ;usb_device.c: 2760: {
  9007                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  9008  0616  0020               	movlb	0	; select bank0
  9009  0617  0842               	movf	66,w	;volatile
  9010  0618  003D               	movlb	29	; select bank29
  9011  0619  0096               	movwf	22	;volatile
  9012                           
  9013                           ;usb_device.c: 2762: if(UADDR != 0u)
  9014  061A  0816               	movf	22,w
  9015  061B  1903               	btfsc	3,2
  9016  061C  2E1F               	goto	l5634
  9017                           
  9018                           ;usb_device.c: 2763: {
  9019                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  9020  061D  3010               	movlw	16
  9021  061E  2E20               	goto	L10
  9022  061F                     l5634:	
  9023                           ;usb_device.c: 2765: }
  9024                           
  9025                           
  9026                           ;usb_device.c: 2766: else
  9027                           ;usb_device.c: 2767: {
  9028                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  9029  061F  3004               	movlw	4
  9030  0620                     L10:	
  9031  0620  0021               	movlb	1	; select bank1
  9032  0621  00EA               	movwf	_USBDeviceState^(0+128)
  9033  0622                     l315:	
  9034                           
  9035                           ;usb_device.c: 2769: }
  9036                           ;usb_device.c: 2770: }
  9037                           ;usb_device.c: 2773: if(controlTransferState == 1)
  9038  0622  0020               	movlb	0	; select bank0
  9039  0623  0B6D               	decfsz	_controlTransferState,w
  9040  0624  2E4E               	goto	l318
  9041                           
  9042                           ;usb_device.c: 2774: {
  9043                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  9044  0625  3048               	movlw	72
  9045  0626  00D9               	movwf	??_USBCtrlTrfInHandler
  9046  0627  01DA               	clrf	??_USBCtrlTrfInHandler+1
  9047  0628  086A               	movf	_pBDTEntryIn,w
  9048  0629  3E02               	addlw	2
  9049  062A  0086               	movwf	6
  9050  062B  0187               	clrf	7
  9051  062C  0859               	movf	??_USBCtrlTrfInHandler,w
  9052  062D  3FC0               	movwi [0]fsr1
  9053  062E  085A               	movf	??_USBCtrlTrfInHandler+1,w
  9054  062F  3FC1               	movwi [1]fsr1
  9055                           
  9056                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  9057  0630  26D1  3180         	fcall	_USBCtrlTrfTxService
  9058                           
  9059                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  9060  0632  0021               	movlb	1	; select bank1
  9061  0633  086C               	movf	_shortPacketStatus^(0+128),w
  9062  0634  3A02               	xorlw	2
  9063  0635  1D03               	skipz
  9064  0636  2E3E               	goto	l5644
  9065                           
  9066                           ;usb_device.c: 2783: {
  9067                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9068  0637  0020               	movlb	0	; select bank0
  9069  0638  086A               	movf	_pBDTEntryIn,w
  9070  0639  0086               	movwf	6
  9071  063A  3084               	movlw	132
  9072  063B  0187               	clrf	7
  9073  063C  0081               	movwf	1
  9074                           
  9075                           ;usb_device.c: 2787: }
  9076  063D  0008               	return
  9077  063E                     l5644:	
  9078                           
  9079                           ;usb_device.c: 2788: else
  9080                           ;usb_device.c: 2789: {
  9081                           ;usb_device.c: 2790: if(lastDTS == 0)
  9082  063E  0020               	movlb	0	; select bank0
  9083  063F  08DB               	movf	USBCtrlTrfInHandler@lastDTS,f
  9084  0640  1D03               	skipz
  9085  0641  2E48               	goto	l5648
  9086                           
  9087                           ;usb_device.c: 2791: {
  9088                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9089  0642  086A               	movf	_pBDTEntryIn,w
  9090  0643  0086               	movwf	6
  9091  0644  30C8               	movlw	200
  9092  0645  0187               	clrf	7
  9093  0646  0081               	movwf	1
  9094                           
  9095                           ;usb_device.c: 2793: }
  9096  0647  0008               	return
  9097  0648                     l5648:	
  9098                           
  9099                           ;usb_device.c: 2794: else
  9100                           ;usb_device.c: 2795: {
  9101                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  9102  0648  086A               	movf	_pBDTEntryIn,w
  9103  0649  0086               	movwf	6
  9104  064A  3088               	movlw	136
  9105  064B  0187               	clrf	7
  9106  064C  0081               	movwf	1
  9107  064D  0008               	return
  9108  064E                     l318:	
  9109                           
  9110                           ;usb_device.c: 2800: else
  9111                           ;usb_device.c: 2801: {
  9112                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  9113  064E  0022               	movlb	2	; select bank2
  9114  064F  1FA2               	btfss	(_outPipes^(0+256)+2),7
  9115  0650  2E58               	goto	l5656
  9116                           
  9117                           ;usb_device.c: 2806: {
  9118                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  9119  0651  0825               	movf	(_outPipes+5)^(0+256),w
  9120  0652  1903               	btfsc	3,2
  9121  0653  2E57               	goto	l5654
  9122                           
  9123                           ;usb_device.c: 2808: {
  9124                           ;usb_device.c: 2809: outPipes[0].pFunc();
  9125  0654  0825               	movf	(_outPipes+5)^(0+256),w
  9126  0655  3180  2814         	ljmp	$	;if you get stuck here, you called an invalid pointer
  9127  0657                     l5654:	
  9128                           
  9129                           ;usb_device.c: 2810: }
  9130                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  9131  0657  13A2               	bcf	(_outPipes^(0+256)+2),7
  9132  0658                     l5656:	
  9133                           
  9134                           ;usb_device.c: 2812: }
  9135                           ;usb_device.c: 2814: controlTransferState = 0;
  9136  0658  0020               	movlb	0	; select bank0
  9137  0659  01ED               	clrf	_controlTransferState
  9138  065A  0008               	return
  9139  065B                     __end_of_USBCtrlTrfInHandler:	
  9140  065B                     __ptext33:	
  9141 ;; *************** function _USBCtrlEPServiceComplete *****************
  9142 ;; Defined at:
  9143 ;;		line 1786 in file "../USB/usb_device.c"
  9144 ;; Parameters:    Size  Location     Type
  9145 ;;		None
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;		None
  9148 ;; Return value:  Size  Location     Type
  9149 ;;		None               void
  9150 ;; Registers used:
  9151 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9152 ;; Tracked objects:
  9153 ;;		On entry : 1D/2
  9154 ;;		On exit  : 1D/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;Total ram usage:        2 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    6
  9164 ;; This function calls:
  9165 ;;		_USBCtrlEPAllowStatusStage
  9166 ;;		_USBCtrlEPAllowDataStage
  9167 ;; This function is called by:
  9168 ;;		_USBCtrlTrfSetupHandler
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function _USBCtrlEPServiceComplete
  9174  065B                     _USBCtrlEPServiceComplete:	
  9175  065B                     l5388:	
  9176                           ;incstack = 0
  9177                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9178                           
  9179                           
  9180                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
  9181  065B  003D               	movlb	29	; select bank29
  9182  065C  120E               	bcf	14,4	;volatile
  9183                           
  9184                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
  9185  065D  0022               	movlb	2	; select bank2
  9186  065E  1BCB               	btfsc	(_inPipes^(0+256)+2),7
  9187  065F  2E79               	goto	l208
  9188                           
  9189                           ;usb_device.c: 1798: {
  9190                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
  9191  0660  1FA2               	btfss	(_outPipes^(0+256)+2),7
  9192  0661  2E6E               	goto	l5402
  9193                           
  9194                           ;usb_device.c: 1800: {
  9195                           ;usb_device.c: 1801: controlTransferState = 2;
  9196  0662  3002               	movlw	2
  9197  0663  0020               	movlb	0	; select bank0
  9198  0664  00ED               	movwf	_controlTransferState
  9199                           
  9200                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
  9201  0665  0022               	movlb	2	; select bank2
  9202  0666  08B4               	movf	_USBDeferOUTDataStagePackets^(0+256),f	;volatile
  9203  0667  1D03               	skipz
  9204  0668  2E6A               	goto	l5398
  9205                           
  9206                           ;usb_device.c: 1813: {
  9207                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
  9208  0669  2695               	fcall	_USBCtrlEPAllowDataStage
  9209  066A                     l5398:	
  9210                           
  9211                           ;usb_device.c: 1815: }
  9212                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
  9213  066A  0022               	movlb	2	; select bank2
  9214  066B  01B8               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  9215                           
  9216                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
  9217  066C  01B7               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  9218                           
  9219                           ;usb_device.c: 1821: }
  9220  066D  0008               	return
  9221  066E                     l5402:	
  9222                           
  9223                           ;usb_device.c: 1822: else
  9224                           ;usb_device.c: 1823: {
  9225                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
  9226  066E  0020               	movlb	0	; select bank0
  9227  066F  0A6F               	incf	_pBDTEntryEP0OutNext,w
  9228  0670  0086               	movwf	6
  9229                           
  9230                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9231                           
  9232                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9233  0671  2741               	fcall	PL26	;call to abstracted procedure
  9234  0672  308C               	movlw	140
  9235  0673  0081               	movwf	1
  9236                           
  9237                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  9238  0674  086A               	movf	_pBDTEntryIn,w
  9239  0675  0086               	movwf	6
  9240  0676  3084               	movlw	132
  9241  0677  0081               	movwf	1
  9242  0678  0008               	return
  9243  0679                     l208:	
  9244                           
  9245                           ;usb_device.c: 1834: else
  9246                           ;usb_device.c: 1835: {
  9247                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
  9248  0679  0020               	movlb	0	; select bank0
  9249  067A  1FC0               	btfss	64,7	;volatile
  9250  067B  2E8C               	goto	l5418
  9251                           
  9252                           ;usb_device.c: 1837: {
  9253                           ;usb_device.c: 1838: controlTransferState = 1;
  9254  067C  01ED               	clrf	_controlTransferState
  9255  067D  0AED               	incf	_controlTransferState,f
  9256                           
  9257                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
  9258  067E  0022               	movlb	2	; select bank2
  9259  067F  08B3               	movf	_USBDeferINDataStagePackets^(0+256),f	;volatile
  9260  0680  1D03               	skipz
  9261  0681  2E84               	goto	l5410
  9262                           
  9263                           ;usb_device.c: 1853: {
  9264                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
  9265  0682  2695  3180         	fcall	_USBCtrlEPAllowDataStage
  9266  0684                     l5410:	
  9267                           
  9268                           ;usb_device.c: 1855: }
  9269                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
  9270  0684  0022               	movlb	2	; select bank2
  9271  0685  01B8               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  9272                           
  9273                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
  9274  0686  01B7               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  9275                           
  9276                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
  9277  0687  0020               	movlb	0	; select bank0
  9278  0688  08EC               	movf	_USBDeferStatusStagePacket,f	;volatile
  9279  0689  1D03               	skipz
  9280  068A  0008               	return
  9281                           
  9282                           ;usb_device.c: 1880: {
  9283                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
  9284  068B  2BFD               	ljmp	l5196
  9285  068C                     l5418:	
  9286                           
  9287                           ;usb_device.c: 1884: else
  9288                           ;usb_device.c: 1885: {
  9289                           ;usb_device.c: 1896: controlTransferState = 2;
  9290  068C  3002               	movlw	2
  9291  068D  00ED               	movwf	_controlTransferState
  9292                           
  9293                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
  9294  068E  0A6F               	incf	_pBDTEntryEP0OutNext,w
  9295  068F  0086               	movwf	6
  9296                           
  9297                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9298                           
  9299                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  9300  0690  2741  3180         	fcall	PL26	;call to abstracted procedure
  9301  0692  3084               	movlw	132
  9302  0693  0081               	movwf	1
  9303  0694  2E84               	goto	l5410
  9304  0695                     __end_of_USBCtrlEPServiceComplete:	
  9305                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
  9306                           
  9307                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
  9308                           
  9309                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
  9310                           
  9311  0695                     __ptext34:	
  9312 ;; *************** function _USBCtrlEPAllowDataStage *****************
  9313 ;; Defined at:
  9314 ;;		line 1660 in file "../USB/usb_device.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;		None
  9317 ;; Auto vars:     Size  Location     Type
  9318 ;;		None
  9319 ;; Return value:  Size  Location     Type
  9320 ;;		None               void
  9321 ;; Registers used:
  9322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9323 ;; Tracked objects:
  9324 ;;		On entry : 1F/2
  9325 ;;		On exit  : 1F/0
  9326 ;;		Unchanged: 0/0
  9327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9331 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9332 ;;Total ram usage:        2 bytes
  9333 ;; Hardware stack levels used:    1
  9334 ;; Hardware stack levels required when called:    5
  9335 ;; This function calls:
  9336 ;;		_USBCtrlTrfTxService
  9337 ;; This function is called by:
  9338 ;;		_USBCtrlEPServiceComplete
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           
  9343                           ;psect for function _USBCtrlEPAllowDataStage
  9344  0695                     _USBCtrlEPAllowDataStage:	
  9345                           
  9346                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
  9347                           
  9348                           ;incstack = 0
  9349                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9350  0695  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9351                           
  9352                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
  9353  0696  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9354                           
  9355                           ;usb_device.c: 1664: if(controlTransferState == 2)
  9356  0697  0020               	movlb	0	; select bank0
  9357  0698  086D               	movf	_controlTransferState,w
  9358  0699  3A02               	xorlw	2
  9359  069A  1D03               	skipz
  9360  069B  2EB0               	goto	l5336
  9361                           
  9362                           ;usb_device.c: 1665: {
  9363                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
  9364  069C  0A6F               	incf	_pBDTEntryEP0OutNext,w
  9365  069D  0086               	movwf	6
  9366  069E  3008               	movlw	8
  9367  069F  0187               	clrf	7
  9368  06A0  0081               	movwf	1
  9369                           
  9370                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  9371  06A1  3048               	movlw	72
  9372  06A2  00D9               	movwf	??_USBCtrlEPAllowDataStage
  9373  06A3  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
  9374  06A4  086F               	movf	_pBDTEntryEP0OutNext,w
  9375  06A5  3E02               	addlw	2
  9376  06A6  0086               	movwf	6
  9377  06A7  0859               	movf	??_USBCtrlEPAllowDataStage,w
  9378  06A8  3FC0               	movwi [0]fsr1
  9379  06A9  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
  9380  06AA  3FC1               	movwi [1]fsr1
  9381                           
  9382                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9383  06AB  086F               	movf	_pBDTEntryEP0OutNext,w
  9384  06AC  0086               	movwf	6
  9385  06AD  30C8               	movlw	200
  9386  06AE  0081               	movwf	1
  9387                           
  9388                           ;usb_device.c: 1670: }
  9389  06AF  0008               	return
  9390  06B0                     l5336:	
  9391                           
  9392                           ;usb_device.c: 1671: else
  9393                           ;usb_device.c: 1672: {
  9394                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
  9395  06B0  0022               	movlb	2	; select bank2
  9396  06B1  084D               	movf	((_inPipes+1)^(0+256)+3),w
  9397  06B2  0020               	movlb	0	; select bank0
  9398  06B3  0247               	subwf	71,w	;volatile
  9399  06B4  1D03               	skipz
  9400  06B5  2EBA               	goto	u3945
  9401  06B6  0022               	movlb	2	; select bank2
  9402  06B7  084C               	movf	(_inPipes^(0+256)+3),w
  9403  06B8  0020               	movlb	0	; select bank0
  9404  06B9  0246               	subwf	70,w	;volatile
  9405  06BA                     u3945:	
  9406  06BA  1803               	skipnc
  9407  06BB  2EC3               	goto	l5340
  9408                           
  9409                           ;usb_device.c: 1676: {
  9410                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
  9411  06BC  0847               	movf	71,w	;volatile
  9412  06BD  0022               	movlb	2	; select bank2
  9413  06BE  00CD               	movwf	((_inPipes+1)^(0+256)+3)
  9414  06BF  0020               	movlb	0	; select bank0
  9415  06C0  0846               	movf	70,w	;volatile
  9416  06C1  0022               	movlb	2	; select bank2
  9417  06C2  00CC               	movwf	(_inPipes^(0+256)+3)
  9418  06C3                     l5340:	
  9419                           
  9420                           ;usb_device.c: 1678: }
  9421                           ;usb_device.c: 1679: USBCtrlTrfTxService();
  9422  06C3  26D1  3180         	fcall	_USBCtrlTrfTxService
  9423                           
  9424                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  9425  06C5  3048               	movlw	72
  9426  06C6  00D9               	movwf	??_USBCtrlEPAllowDataStage
  9427  06C7  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
  9428  06C8  086A               	movf	_pBDTEntryIn,w
  9429  06C9  3E02               	addlw	2
  9430  06CA  0086               	movwf	6
  9431  06CB  0187               	clrf	7
  9432  06CC  0859               	movf	??_USBCtrlEPAllowDataStage,w
  9433  06CD  3FC0               	movwi [0]fsr1
  9434  06CE  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
  9435  06CF  3FC1               	movwi [1]fsr1
  9436                           
  9437                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  9438  06D0  2FA7               	ljmp	PL82	;call to abstracted procedure
  9439  06D1                     __end_of_USBCtrlEPAllowDataStage:	
  9440  06D1                     __ptext35:	
  9441 ;; *************** function _USBCtrlTrfTxService *****************
  9442 ;; Defined at:
  9443 ;;		line 1938 in file "../USB/usb_device.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;		None
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  byteToSend      1    8[BANK0 ] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;		None               void
  9450 ;; Registers used:
  9451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9452 ;; Tracked objects:
  9453 ;;		On entry : 1D/0
  9454 ;;		On exit  : 1F/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        3 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    4
  9464 ;; This function calls:
  9465 ;;		Nothing
  9466 ;; This function is called by:
  9467 ;;		_USBCtrlEPAllowDataStage
  9468 ;;		_USBCtrlTrfInHandler
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           
  9473                           ;psect for function _USBCtrlTrfTxService
  9474  06D1                     _USBCtrlTrfTxService:	
  9475                           
  9476                           ;usb_device.c: 1939: BYTE byteToSend;
  9477                           ;usb_device.c: 1943: byteToSend = 8;
  9478                           
  9479                           ;incstack = 0
  9480                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
  9481  06D1  3008               	movlw	8
  9482  06D2  0020               	movlb	0	; select bank0
  9483  06D3  00D8               	movwf	USBCtrlTrfTxService@byteToSend
  9484                           
  9485                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
  9486  06D4  3000               	movlw	0
  9487  06D5  0022               	movlb	2	; select bank2
  9488  06D6  024D               	subwf	((_inPipes+1)^(0+256)+3),w
  9489  06D7  3008               	movlw	8
  9490  06D8  1903               	skipnz
  9491  06D9  024C               	subwf	(_inPipes^(0+256)+3),w
  9492  06DA  1803               	skipnc
  9493  06DB  2EEA               	goto	l5358
  9494                           
  9495                           ;usb_device.c: 1945: {
  9496                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
  9497  06DC  084C               	movf	(_inPipes^(0+256)+3),w
  9498  06DD  0020               	movlb	0	; select bank0
  9499  06DE  00D8               	movwf	USBCtrlTrfTxService@byteToSend
  9500                           
  9501                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
  9502  06DF  0021               	movlb	1	; select bank1
  9503  06E0  08EC               	movf	_shortPacketStatus^(0+128),f
  9504  06E1  1D03               	skipz
  9505  06E2  2EE6               	goto	l5354
  9506                           
  9507                           ;usb_device.c: 1954: {
  9508                           ;usb_device.c: 1955: shortPacketStatus = 1;
  9509  06E3  01EC               	clrf	_shortPacketStatus^(0+128)
  9510  06E4  0AEC               	incf	_shortPacketStatus^(0+128),f
  9511                           
  9512                           ;usb_device.c: 1956: }
  9513  06E5  2EEA               	goto	l5358
  9514  06E6                     l5354:	
  9515                           
  9516                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
  9517  06E6  0B6C               	decfsz	_shortPacketStatus^(0+128),w
  9518  06E7  2EEA               	goto	l5358
  9519                           
  9520                           ;usb_device.c: 1958: {
  9521                           ;usb_device.c: 1959: shortPacketStatus = 2;
  9522  06E8  3002               	movlw	2
  9523  06E9  00EC               	movwf	_shortPacketStatus^(0+128)
  9524  06EA                     l5358:	
  9525                           
  9526                           ;usb_device.c: 1960: }
  9527                           ;usb_device.c: 1961: }
  9528                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
  9529  06EA  0020               	movlb	0	; select bank0
  9530  06EB  0858               	movf	USBCtrlTrfTxService@byteToSend,w
  9531  06EC  00D6               	movwf	??_USBCtrlTrfTxService
  9532  06ED  01D7               	clrf	??_USBCtrlTrfTxService+1
  9533  06EE  0022               	movlb	2	; select bank2
  9534  06EF  024C               	subwf	(_inPipes^(0+256)+3),w
  9535  06F0  00CC               	movwf	(_inPipes^(0+256)+3)
  9536  06F1  0020               	movlb	0	; select bank0
  9537  06F2  0857               	movf	??_USBCtrlTrfTxService+1,w
  9538  06F3  0022               	movlb	2	; select bank2
  9539  06F4  3B4D               	subwfb	((_inPipes+1)^(0+256)+3),w
  9540  06F5  00CD               	movwf	((_inPipes+1)^(0+256)+3)
  9541                           
  9542                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
  9543  06F6  0020               	movlb	0	; select bank0
  9544  06F7  0A6A               	incf	_pBDTEntryIn,w
  9545  06F8  0086               	movwf	6
  9546  06F9  0187               	clrf	7
  9547  06FA  0858               	movf	USBCtrlTrfTxService@byteToSend,w
  9548  06FB  0081               	movwf	1
  9549                           
  9550                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
  9551  06FC  3048               	movlw	72
  9552  06FD  0022               	movlb	2	; select bank2
  9553  06FE  00BF               	movwf	_pDst^(0+256)
  9554                           
  9555                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
  9556  06FF  1C4B               	btfss	(_inPipes^(0+256)+2),0
  9557  0700  2F04               	goto	l5376
  9558  0701  2F0B               	goto	l5386
  9559  0702                     l5368:	
  9560                           
  9561                           ;usb_device.c: 1978: {
  9562                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
  9563                           
  9564                           ;usb_device.c: 1980: byteToSend--;
  9565  0702  2730  3180         	fcall	PL24	;call to abstracted procedure
  9566  0704                     l5376:	
  9567  0704  0020               	movlb	0	; select bank0
  9568  0705  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
  9569  0706  1903               	btfsc	3,2
  9570  0707  0008               	return
  9571  0708  2F02               	goto	l5368
  9572  0709                     l5378:	
  9573                           
  9574                           ;usb_device.c: 1986: {
  9575                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
  9576                           
  9577                           ;usb_device.c: 1988: byteToSend--;
  9578  0709  2730  3180         	fcall	PL24	;call to abstracted procedure
  9579  070B                     l5386:	
  9580  070B  0020               	movlb	0	; select bank0
  9581  070C  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
  9582  070D  1903               	btfsc	3,2
  9583  070E  0008               	return
  9584  070F  2F09               	goto	l5378
  9585  0710                     __end_of_USBCtrlTrfTxService:	
  9586  0710                     __ptext24:	
  9587 ;; *************** function _USBCtrlTrfOutHandler *****************
  9588 ;; Defined at:
  9589 ;;		line 2695 in file "../USB/usb_device.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;		None
  9592 ;; Auto vars:     Size  Location     Type
  9593 ;;		None
  9594 ;; Return value:  Size  Location     Type
  9595 ;;		None               void
  9596 ;; Registers used:
  9597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9598 ;; Tracked objects:
  9599 ;;		On entry : 1F/0
  9600 ;;		On exit  : 1D/0
  9601 ;;		Unchanged: 0/0
  9602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;Total ram usage:        2 bytes
  9608 ;; Hardware stack levels used:    1
  9609 ;; Hardware stack levels required when called:    6
  9610 ;; This function calls:
  9611 ;;		_USBCtrlTrfRxService
  9612 ;; This function is called by:
  9613 ;;		_USBCtrlEPService
  9614 ;; This function uses a non-reentrant model
  9615 ;;
  9616                           
  9617                           
  9618                           ;psect for function _USBCtrlTrfOutHandler
  9619  0710                     _USBCtrlTrfOutHandler:	
  9620  0710                     l5612:	
  9621                           ;incstack = 0
  9622                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9623                           
  9624                           
  9625                           ;usb_device.c: 2696: if(controlTransferState == 2)
  9626  0710  086D               	movf	_controlTransferState,w
  9627  0711  3A02               	xorlw	2
  9628  0712  1D03               	skipz
  9629  0713  2F16               	goto	l5616
  9630                           
  9631                           ;usb_device.c: 2697: {
  9632                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  9633  0714  3197  2F84         	ljmp	l5434
  9634  0716                     l5616:	
  9635                           ;usb_device.c: 2699: }
  9636                           
  9637                           
  9638                           ;usb_device.c: 2700: else
  9639                           ;usb_device.c: 2701: {
  9640                           ;usb_device.c: 2704: controlTransferState = 0;
  9641  0716  01ED               	clrf	_controlTransferState
  9642                           
  9643                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  9644  0717  0022               	movlb	2	; select bank2
  9645  0718  08AE               	movf	_BothEP0OutUOWNsSet^(0+256),f
  9646  0719  1D03               	skipz
  9647  071A  2F2E               	goto	l5622
  9648                           
  9649                           ;usb_device.c: 2712: {
  9650                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  9651  071B  0020               	movlb	0	; select bank0
  9652  071C  0A6F               	incf	_pBDTEntryEP0OutNext,w
  9653                           
  9654                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9655  071D  3197  27F1  3180   	fcall	PL40	;call to abstracted procedure
  9656  0720  00DC               	movwf	??_USBCtrlTrfOutHandler
  9657  0721  01DD               	clrf	??_USBCtrlTrfOutHandler+1
  9658  0722  086F               	movf	_pBDTEntryEP0OutNext,w
  9659  0723  3E02               	addlw	2
  9660  0724  0086               	movwf	6
  9661  0725  085C               	movf	??_USBCtrlTrfOutHandler,w
  9662  0726  3FC0               	movwi [0]fsr1
  9663  0727  085D               	movf	??_USBCtrlTrfOutHandler+1,w
  9664  0728  3FC1               	movwi [1]fsr1
  9665                           
  9666                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9667  0729  086F               	movf	_pBDTEntryEP0OutNext,w
  9668  072A  0086               	movwf	6
  9669  072B  308C               	movlw	140
  9670  072C  0081               	movwf	1
  9671                           
  9672                           ;usb_device.c: 2716: }
  9673  072D  0008               	return
  9674  072E                     l5622:	
  9675                           
  9676                           ;usb_device.c: 2717: else
  9677                           ;usb_device.c: 2718: {
  9678                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  9679  072E  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  9680  072F  0008               	return
  9681  0730                     __end_of_USBCtrlTrfOutHandler:	
  9682  0730                     PL24:	
  9683  0730  0022               	movlb	2	; select bank2
  9684  0731  083F               	movf	_pDst^(0+256),w
  9685  0732  0086               	movwf	6
  9686  0733  0187               	clrf	7
  9687  0734  0849               	movf	_inPipes^(0+256),w
  9688  0735  0084               	movwf	4
  9689  0736  084A               	movf	(_inPipes+1)^(0+256),w
  9690  0737  0085               	movwf	5
  9691  0738  0800               	movf	0,w	;code access
  9692  0739  0081               	movwf	1
  9693  073A  0AC9               	incf	_inPipes^(0+256),f
  9694  073B  1903               	skipnz
  9695  073C  0ACA               	incf	(_inPipes+1)^(0+256),f
  9696  073D  0ABF               	incf	_pDst^(0+256),f
  9697  073E  0020               	movlb	0	; select bank0
  9698  073F  03D8               	decf	USBCtrlTrfTxService@byteToSend,f
  9699  0740  0008               	return
  9700  0741                     __end_ofPL24:	
  9701  0741                     PL26:	
  9702  0741  3008               	movlw	8
  9703  0742  0187               	clrf	7
  9704  0743  0081               	movwf	1
  9705  0744  3040               	movlw	64
  9706  0745  00DB               	movwf	??_USBCtrlEPServiceComplete
  9707  0746  01DC               	clrf	??_USBCtrlEPServiceComplete+1
  9708  0747  086F               	movf	_pBDTEntryEP0OutNext,w
  9709  0748  3E02               	addlw	2
  9710  0749  0086               	movwf	6
  9711  074A  085B               	movf	??_USBCtrlEPServiceComplete,w
  9712  074B  3FC0               	movwi [0]fsr1
  9713  074C  085C               	movf	??_USBCtrlEPServiceComplete+1,w
  9714  074D  3FC1               	movwi [1]fsr1
  9715  074E  086F               	movf	_pBDTEntryEP0OutNext,w
  9716  074F  0086               	movwf	6
  9717  0750  0008               	return
  9718  0751                     __end_ofPL26:	
  9719  0751                     PL38:	
  9720  0751  0085               	movwf	5
  9721  0752  0842               	movf	66,w	;volatile
  9722  0753  0784               	addwf	4,f
  9723  0754  1803               	skipnc
  9724  0755  0A85               	incf	5,f
  9725  0756  3F00               	moviw [0]fsr0
  9726  0757  0022               	movlb	2	; select bank2
  9727  0758  00C9               	movwf	_inPipes^(0+256)
  9728  0759  3088               	movlw	(high __stringtab)| (0+128)
  9729  075A  00CA               	movwf	(_inPipes+1)^(0+256)
  9730  075B  0008               	return
  9731  075C                     __end_ofPL38:	
  9732  075C                     PL44:	
  9733  075C  0020               	movlb	0	; select bank0
  9734  075D  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9735  075E  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9736  075F  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9737  0760  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9738  0761  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9739  0762  0008               	return
  9740  0763                     __end_ofPL44:	
  9741  0763                     PL50:	
  9742  0763  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9743  0764  0021               	movlb	1	; select bank1
  9744  0765  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9745  0766  0020               	movlb	0	; select bank0
  9746  0767  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9747  0768  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9748  0769  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  9749  076A  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9750  076B  0008               	return
  9751  076C                     __end_ofPL50:	
  9752  076C                     PL54:	
  9753  076C  0084               	movwf	4
  9754  076D  0857               	movf	??_USBStdGetDscHandler+1,w
  9755  076E  1803               	skipnc
  9756  076F  0A57               	incf	??_USBStdGetDscHandler+1,w
  9757  0770  0085               	movwf	5
  9758  0771  0800               	movf	0,w	;code access
  9759  0772  0022               	movlb	2	; select bank2
  9760  0773  0008               	return
  9761  0774                     __end_ofPL54:	
  9762  0774                     PL60:	
  9763  0774  390F               	andlw	15
  9764  0775  3E2A               	addlw	_pBDTEntryOut& (0+255)
  9765  0776  0086               	movwf	6
  9766  0777  3001               	movlw	1	; select bank2/3
  9767  0778  0087               	movwf	7
  9768  0779  0008               	return
  9769  077A                     __end_ofPL60:	
  9770  077A                     PL64:	
  9771  077A  0844               	movf	68,w	;volatile
  9772  077B  390F               	andlw	15
  9773  077C  3E6A               	addlw	_pBDTEntryIn& (0+255)
  9774  077D  0086               	movwf	6
  9775  077E  0187               	clrf	7
  9776  077F  0008               	return
  9777  0780                     __end_ofPL64:	
  9778  0780                     PL66:	
  9779  0780  0020               	movlb	0	; select bank0
  9780  0781  00D7               	movwf	??_USBStdGetDscHandler+1
  9781  0782  0022               	movlb	2	; select bank2
  9782  0783  0849               	movf	_inPipes^(0+256),w
  9783  0784  0020               	movlb	0	; select bank0
  9784  0785  00D6               	movwf	??_USBStdGetDscHandler
  9785  0786  0008               	return
  9786  0787                     __end_ofPL66:	
  9787  0787                     PL68:	
  9788  0787  0086               	movwf	6
  9789  0788  0187               	clrf	7
  9790  0789  0D01               	rlf	1,w
  9791  078A  0D01               	rlf	1,w
  9792  078B  3901               	andlw	1
  9793  078C  0021               	movlb	1	; select bank1
  9794  078D  0008               	return
  9795  078E                     __end_ofPL68:	
  9796  078E                     PL70:	
  9797  078E  3E02               	addlw	2
  9798  078F  0086               	movwf	6
  9799  0790  0856               	movf	??_USBCtrlEPAllowStatusStage,w
  9800  0791  3FC0               	movwi [0]fsr1
  9801  0792  0857               	movf	??_USBCtrlEPAllowStatusStage+1,w
  9802  0793  3FC1               	movwi [1]fsr1
  9803  0794  0008               	return
  9804  0795                     __end_ofPL70:	
  9805  0795                     PL74:	
  9806  0795  0801               	movf	1,w
  9807  0796  0021               	movlb	1	; select bank1
  9808  0797  00A3               	movwf	USBStdFeatureReqHandler@p^(0+128)
  9809  0798  0020               	movlb	0	; select bank0
  9810  0799  0844               	movf	68,w	;volatile
  9811  079A  390F               	andlw	15
  9812  079B  0008               	return
  9813  079C                     __end_ofPL74:	
  9814  079C                     PL76:	
  9815  079C  30A0               	movlw	160
  9816  079D  01D9               	clrf	?_USBTransferOnePacket
  9817  079E  00DA               	movwf	?_USBTransferOnePacket+1
  9818  079F  3040               	movlw	64
  9819  07A0  00DB               	movwf	?_USBTransferOnePacket+2
  9820  07A1  3401               	retlw	1
  9821  07A2                     __end_ofPL76:	
  9822  07A2                     PL78:	
  9823  07A2  3E2A               	addlw	_pBDTEntryOut& (0+255)
  9824  07A3  0086               	movwf	6
  9825  07A4  3001               	movlw	1	; select bank2/3
  9826  07A5  0087               	movwf	7
  9827  07A6  0008               	return
  9828  07A7                     __end_ofPL78:	
  9829  07A7                     PL82:	
  9830  07A7  086A               	movf	_pBDTEntryIn,w
  9831  07A8  0086               	movwf	6
  9832  07A9  30C8               	movlw	200
  9833  07AA  0081               	movwf	1
  9834  07AB  0008               	return
  9835  07AC                     __end_ofPL82:	
  9836  07AC                     PL84:	
  9837  07AC  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  9838  07AD  0086               	movwf	6
  9839  07AE  303B               	movlw	59
  9840  07AF  0187               	clrf	7
  9841  07B0  0581               	andwf	1,f
  9842  07B1  0008               	return
  9843  07B2                     __end_ofPL84:	
  9844  07B2                     PL86:	
  9845  07B2  0091               	movwf	17	;volatile
  9846  07B3  309F               	movlw	159
  9847  07B4  0097               	movwf	23	;volatile
  9848  07B5  307B               	movlw	123
  9849  07B6  0092               	movwf	18	;volatile
  9850  07B7  0008               	return
  9851  07B8                     __end_ofPL86:	
  9852  07B8                     PL90:	
  9853  07B8  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9854  07B9  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9855  07BA  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  9856  07BB  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9857  07BC  0008               	return
  9858  07BD                     __end_ofPL90:	
  9859                           
  9860                           	psect	swtext1
  9861  1000                     __pswtext1:	
  9862  1000                     S6282:	
  9863  1000  3180  285D         	ljmp	l5676
  9864  1002  3180  285E         	ljmp	l5678
  9865  1004  3180  284A         	ljmp	l330
  9866  1006  3180  285E         	ljmp	l5678
  9867  1008  3180  284A         	ljmp	l330
  9868  100A  3180  284B         	ljmp	l332
  9869  100C  3180  2851         	ljmp	l5664
  9870  100E  3180  2870         	ljmp	l5690
  9871  1010  3180  2853         	ljmp	l5668
  9872  1012  3180  2852         	ljmp	l5666
  9873  1014  3180  285F         	ljmp	l5680
  9874  1016  3180  2866         	ljmp	l341
  9875  1018  3180  284A         	ljmp	l330
  9876                           
  9877                           	psect	intentry
  9878  0004                     __pintentry:	
  9879 ;; *************** function _ISRCode *****************
  9880 ;; Defined at:
  9881 ;;		line 70 in file "main.c"
  9882 ;; Parameters:    Size  Location     Type
  9883 ;;		None
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;		None
  9886 ;; Return value:  Size  Location     Type
  9887 ;;		None               void
  9888 ;; Registers used:
  9889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9890 ;; Tracked objects:
  9891 ;;		On entry : 0/0
  9892 ;;		On exit  : 1F/0
  9893 ;;		Unchanged: 0/0
  9894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;Total ram usage:        1 bytes
  9900 ;; Hardware stack levels used:    1
  9901 ;; Hardware stack levels required when called:    3
  9902 ;; This function calls:
  9903 ;;		_ResultRx
  9904 ;; This function is called by:
  9905 ;;		Interrupt level 1
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909  0004                     _ISRCode:	
  9910                           
  9911                           ;incstack = 0
  9912                           ; Regs used in _ISRCode: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  9913  0004  3180               	pagesel	$
  9914  0005  0020               	movlb	0	; select bank0
  9915  0006  087F               	movf	127,w
  9916  0007  00FD               	movwf	??_ISRCode
  9917                           
  9918                           ;main.c: 72: if(IOCBF)
  9919  0008  0027               	movlb	7	; select bank7
  9920  0009  0816               	movf	22,w	;volatile
  9921  000A  1903               	btfsc	3,2
  9922  000B  280E               	goto	i1l827
  9923                           
  9924                           ;main.c: 73: ResultRx();
  9925  000C  3189  2172         	fcall	_ResultRx
  9926  000E                     i1l827:	
  9927  000E  087D               	movf	??_ISRCode,w
  9928  000F  0020               	movlb	0	; select bank0
  9929  0010  00FF               	movwf	127
  9930  0011  0009               	retfie
  9931  0012                     __end_of_ISRCode:	
  9932                           
  9933                           	psect	text54
  9934  0972                     __ptext54:	
  9935 ;; *************** function _ResultRx *****************
  9936 ;; Defined at:
  9937 ;;		line 202 in file "klondike.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;		None
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  TimeOut         1   12[COMMON] unsigned char 
  9942 ;; Return value:  Size  Location     Type
  9943 ;;		None               void
  9944 ;; Registers used:
  9945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9946 ;; Tracked objects:
  9947 ;;		On entry : 1F/7
  9948 ;;		On exit  : 1F/7
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;Total ram usage:        1 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    2
  9958 ;; This function calls:
  9959 ;;		i1_SendCmdReply
  9960 ;; This function is called by:
  9961 ;;		_ISRCode
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           
  9966                           ;psect for function _ResultRx
  9967  0972                     _ResultRx:	
  9968                           
  9969                           ;klondike.c: 203: BYTE TimeOut = 0;
  9970                           
  9971                           ;incstack = 0
  9972                           ; Regs used in _ResultRx: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
  9973  0972  01FC               	clrf	ResultRx@TimeOut
  9974                           
  9975                           ;klondike.c: 204: ResultQC = 0;
  9976  0973  0022               	movlb	2	; select bank2
  9977  0974  01B0               	clrf	_ResultQC^(0+256)
  9978  0975                     i1l6194:	
  9979                           ;klondike.c: 205: while(ResultQC < 4) {
  9980                           
  9981  0975  3004               	movlw	4
  9982  0976  0022               	movlb	2	; select bank2
  9983  0977  0230               	subwf	_ResultQC^(0+256),w
  9984  0978  1803               	btfsc	3,0
  9985  0979  299C               	goto	i1l6196
  9986                           
  9987                           ;klondike.c: 207: if(RCIF) {
  9988  097A  0020               	movlb	0	; select bank0
  9989  097B  1E91               	btfss	17,5	;volatile
  9990  097C  2989               	goto	i1l6184
  9991                           
  9992                           ;klondike.c: 208: ResultQue[2+ResultQC++] = RCREG;
  9993  097D  0022               	movlb	2	; select bank2
  9994  097E  0830               	movf	_ResultQC^(0+256),w
  9995  097F  3E43               	addlw	(_ResultQue+2)& (0+255)
  9996  0980  0086               	movwf	6
  9997  0981  3001               	movlw	1	; select bank2/3
  9998  0982  0087               	movwf	7
  9999  0983  0023               	movlb	3	; select bank3
 10000  0984  0819               	movf	25,w	;volatile
 10001  0985  0081               	movwf	1
 10002  0986  0022               	movlb	2	; select bank2
 10003  0987  0AB0               	incf	_ResultQC^(0+256),f
 10004                           
 10005                           ;klondike.c: 209: TimeOut = 0;
 10006  0988  01FC               	clrf	ResultRx@TimeOut
 10007  0989                     i1l6184:	
 10008                           
 10009                           ;klondike.c: 210: }
 10010                           ;klondike.c: 211: if(TimeOut++ > 32 ) {
 10011  0989  3022               	movlw	34
 10012  098A  0AFC               	incf	ResultRx@TimeOut,f
 10013  098B  027C               	subwf	ResultRx@TimeOut,w
 10014  098C  1C03               	skipc
 10015  098D  2991               	goto	i1l724
 10016                           
 10017                           ;klondike.c: 212: Status.Noise++;
 10018  098E  0022               	movlb	2	; select bank2
 10019  098F  0ADB               	incf	(_Status^(0+256)+12),f	;volatile
 10020                           
 10021                           ;klondike.c: 213: goto outrx;
 10022  0990  29AF               	goto	i1l6202
 10023  0991                     i1l724:	
 10024                           
 10025                           ;klondike.c: 214: }
 10026                           ;klondike.c: 216: if(RCSTAbits.OERR) {
 10027  0991  0023               	movlb	3	; select bank3
 10028  0992  1C9D               	btfss	29,1	;volatile
 10029  0993  2975               	goto	i1l6194
 10030                           
 10031                           ;klondike.c: 217: if(Status.State == 'W')
 10032  0994  0022               	movlb	2	; select bank2
 10033  0995  084F               	movf	_Status^(0+256),w	;volatile
 10034  0996  3A57               	xorlw	87
 10035  0997  1903               	btfsc	3,2
 10036                           
 10037                           ;klondike.c: 218: Status.ErrorCount++;
 10038  0998  0AD6               	incf	(_Status^(0+256)+7),f	;volatile
 10039                           
 10040                           ;klondike.c: 219: RCSTAbits.SPEN = 0;
 10041  0999  0023               	movlb	3	; select bank3
 10042  099A  139D               	bcf	29,7	;volatile
 10043                           
 10044                           ;klondike.c: 220: goto outrx;
 10045  099B  29AF               	goto	i1l6202
 10046  099C                     i1l6196:	
 10047                           
 10048                           ;klondike.c: 221: }
 10049                           ;klondike.c: 222: }
 10050                           ;klondike.c: 224: if(Status.State == 'W') {
 10051  099C  084F               	movf	_Status^(0+256),w	;volatile
 10052  099D  3A57               	xorlw	87
 10053  099E  1D03               	skipz
 10054  099F  29AF               	goto	i1l6202
 10055                           
 10056                           ;klondike.c: 225: ResultQue[0] = '=';
 10057  09A0  303D               	movlw	61
 10058  09A1  00C1               	movwf	_ResultQue^(0+256)	;volatile
 10059                           
 10060                           ;klondike.c: 226: ResultQue[1] = Status.WorkID;
 10061  09A2  0853               	movf	(_Status^(0+256)+4),w	;volatile
 10062  09A3  00C2               	movwf	(_ResultQue^(0+256)+1)	;volatile
 10063                           
 10064                           ;klondike.c: 227: SendCmdReply(&ResultQue, &ResultQue+1, sizeof(ResultQue)-1);
 10065  09A4  3041               	movlw	low _ResultQue
 10066  09A5  00F6               	movwf	?i1_SendCmdReply
 10067  09A6  3001               	movlw	high _ResultQue
 10068  09A7  00F7               	movwf	?i1_SendCmdReply+1
 10069  09A8  3042               	movlw	low (_ResultQue+1)
 10070  09A9  00F8               	movwf	?i1_SendCmdReply+2
 10071  09AA  3001               	movlw	high (_ResultQue+1)
 10072  09AB  00F9               	movwf	?i1_SendCmdReply+3
 10073  09AC  3007               	movlw	7
 10074  09AD  00FA               	movwf	?i1_SendCmdReply+4
 10075  09AE  21B5               	fcall	i1_SendCmdReply
 10076  09AF                     i1l6202:	
 10077                           
 10078                           ;klondike.c: 230: RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1;
 10079  09AF  0023               	movlb	3	; select bank3
 10080  09B0  139D               	bcf	29,7	;volatile
 10081  09B1  179D               	bsf	29,7	;volatile
 10082                           
 10083                           ;klondike.c: 231: IOCBF = 0;
 10084  09B2  0027               	movlb	7	; select bank7
 10085  09B3  0196               	clrf	22	;volatile
 10086  09B4  0008               	return
 10087  09B5                     __end_of_ResultRx:	
 10088  09B5                     __ptext55:	
 10089 ;; *************** function i1_SendCmdReply *****************
 10090 ;; Defined at:
 10091 ;;		line 208 in file "main.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  cmd             2    6[COMMON] PTR unsigned char 
 10094 ;;		 -> ResultQue(8), OUTPacket(64), 
 10095 ;;  data            2    8[COMMON] PTR unsigned char 
 10096 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
 10097 ;;  count           1   10[COMMON] unsigned char 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;		None               void
 10102 ;; Registers used:
 10103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 1F/2
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10109 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;Total ram usage:       12 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    1
 10116 ;; This function calls:
 10117 ;;		i1___wmul
 10118 ;;		i1___bmul
 10119 ;; This function is called by:
 10120 ;;		_ResultRx
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function i1_SendCmdReply
 10126  09B5                     i1_SendCmdReply:	
 10127                           
 10128                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in i1_SendCmdReply: [wreg-fsr1h+status,2+status,0+btemp+1+pclath+cstack]
 10132  09B5  087A               	movf	i1SendCmdReply@count,w
 10133  09B6  0020               	movlb	0	; select bank0
 10134  09B7  00D0               	movwf	??i1_SendCmdReply
 10135  09B8  01D1               	clrf	??i1_SendCmdReply+1
 10136  09B9  0022               	movlb	2	; select bank2
 10137  09BA  083A               	movf	_WQI^(0+256),w
 10138  09BB  00F0               	movwf	?i1___wmul
 10139  09BC  300F               	movlw	15
 10140  09BD  01F1               	clrf	?i1___wmul+1
 10141  09BE  00F2               	movwf	?i1___wmul+2
 10142  09BF  01F3               	clrf	?i1___wmul+3
 10143  09C0  2226  3189         	fcall	i1___wmul
 10144  09C2  0020               	movlb	0	; select bank0
 10145  09C3  0850               	movf	??i1_SendCmdReply,w
 10146  09C4  0770               	addwf	?i1___wmul,w
 10147  09C5  00D2               	movwf	??i1_SendCmdReply+2
 10148  09C6  0851               	movf	??i1_SendCmdReply+1,w
 10149  09C7  3D71               	addwfc	?i1___wmul+1,w
 10150  09C8  00D3               	movwf	??i1_SendCmdReply+3
 10151  09C9  0852               	movf	??i1_SendCmdReply+2,w
 10152  09CA  3E02               	addlw	2
 10153  09CB  00D4               	movwf	??i1_SendCmdReply+4
 10154  09CC  3000               	movlw	0
 10155  09CD  3D53               	addwfc	??i1_SendCmdReply+3,w
 10156  09CE  00D5               	movwf	??i1_SendCmdReply+5
 10157  09CF  3A80               	xorlw	128
 10158  09D0  00FF               	movwf	127
 10159  09D1  3080               	movlw	128
 10160  09D2  027F               	subwf	127,w
 10161  09D3  1D03               	skipz
 10162  09D4  29D7               	goto	u494_25
 10163  09D5  3040               	movlw	64
 10164  09D6  0254               	subwf	??i1_SendCmdReply+4,w
 10165  09D7                     u494_25:	
 10166  09D7  1803               	skipnc
 10167  09D8  0008               	return
 10168                           
 10169                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 10170  09D9  300F               	movlw	15
 10171  09DA  00F0               	movwf	?i1___bmul
 10172  09DB  0022               	movlb	2	; select bank2
 10173  09DC  083A               	movf	_WQI^(0+256),w
 10174  09DD  221A  3189         	fcall	i1___bmul
 10175  09DF  3E20               	addlw	32
 10176  09E0  0086               	movwf	6
 10177  09E1  3002               	movlw	2	; select bank4/5
 10178  09E2  0087               	movwf	7
 10179  09E3  0876               	movf	i1SendCmdReply@cmd,w
 10180  09E4  0084               	movwf	4
 10181  09E5  0877               	movf	i1SendCmdReply@cmd+1,w
 10182  09E6  0085               	movwf	5
 10183  09E7  0800               	movf	0,w
 10184  09E8  0081               	movwf	1
 10185                           
 10186                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 10187  09E9  300F               	movlw	15
 10188  09EA  00F0               	movwf	?i1___bmul
 10189  09EB  083A               	movf	_WQI^(0+256),w
 10190  09EC  221A  3189         	fcall	i1___bmul
 10191  09EE  3E21               	addlw	33
 10192  09EF  0086               	movwf	6
 10193  09F0  3002               	movlw	2	; select bank4/5
 10194  09F1  0087               	movwf	7
 10195  09F2  0831               	movf	_SlaveAddress^(0+256),w
 10196  09F3  0081               	movwf	1
 10197                           
 10198                           ;main.c: 212: for(BYTE n=0; n < count; n++)
 10199  09F4  01FB               	clrf	i1SendCmdReply@n
 10200  09F5                     i1l6170:	
 10201  09F5  087A               	movf	i1SendCmdReply@count,w
 10202  09F6  027B               	subwf	i1SendCmdReply@n,w
 10203  09F7  1803               	btfsc	3,0
 10204  09F8  2A15               	goto	i1l6172
 10205                           
 10206                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 10207  09F9  300F               	movlw	15
 10208  09FA  00F0               	movwf	?i1___bmul
 10209  09FB  0022               	movlb	2	; select bank2
 10210  09FC  083A               	movf	_WQI^(0+256),w
 10211  09FD  221A  3189         	fcall	i1___bmul
 10212  09FF  3E22               	addlw	34
 10213  0A00  077B               	addwf	i1SendCmdReply@n,w
 10214  0A01  0020               	movlb	0	; select bank0
 10215  0A02  00D0               	movwf	??i1_SendCmdReply
 10216  0A03  0086               	movwf	6
 10217  0A04  3002               	movlw	2	; select bank4/5
 10218  0A05  0087               	movwf	7
 10219  0A06  0879               	movf	i1SendCmdReply@data+1,w
 10220  0A07  00D2               	movwf	??i1_SendCmdReply+2
 10221  0A08  0878               	movf	i1SendCmdReply@data,w
 10222  0A09  00D1               	movwf	??i1_SendCmdReply+1
 10223  0A0A  087B               	movf	i1SendCmdReply@n,w
 10224  0A0B  0751               	addwf	??i1_SendCmdReply+1,w
 10225  0A0C  0084               	movwf	4
 10226  0A0D  0852               	movf	??i1_SendCmdReply+2,w
 10227  0A0E  1803               	skipnc
 10228  0A0F  0A52               	incf	??i1_SendCmdReply+2,w
 10229  0A10  0085               	movwf	5
 10230  0A11  0800               	movf	0,w	;code access
 10231  0A12  0081               	movwf	1
 10232  0A13  0AFB               	incf	i1SendCmdReply@n,f
 10233  0A14  29F5               	goto	i1l6170
 10234  0A15                     i1l6172:	
 10235                           
 10236                           ;main.c: 214: WQI = (WQI+1) & 3;
 10237  0A15  0022               	movlb	2	; select bank2
 10238  0A16  3003               	movlw	3
 10239  0A17  0ABA               	incf	_WQI^(0+256),f
 10240  0A18  05BA               	andwf	_WQI^(0+256),f
 10241  0A19  0008               	return
 10242  0A1A                     __end_ofi1_SendCmdReply:	
 10243  0A1A                     __ptext56:	
 10244 ;; *************** function i1___bmul *****************
 10245 ;; Defined at:
 10246 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\bmul.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  multiplier      1    wreg     unsigned char 
 10249 ;;  multiplicand    1    0[COMMON] unsigned char 
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;  multiplier      1    1[COMMON] unsigned char 
 10252 ;;  __bmul          1    2[COMMON] unsigned char 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      unsigned char 
 10255 ;; Registers used:
 10256 ;;		wreg, status,2, status,0
 10257 ;; Tracked objects:
 10258 ;;		On entry : 1F/2
 10259 ;;		On exit  : 1F/2
 10260 ;;		Unchanged: 1F/0
 10261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10262 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;Total ram usage:        3 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; This function calls:
 10269 ;;		Nothing
 10270 ;; This function is called by:
 10271 ;;		i1_SendCmdReply
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           
 10276                           ;psect for function i1___bmul
 10277  0A1A                     i1___bmul:	
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 10281                           ;i1___bmul@multiplier stored from wreg
 10282  0A1A  00F1               	movwf	i1___bmul@multiplier
 10283  0A1B  01F2               	clrf	i1___bmul@product
 10284  0A1C                     i1l4764:	
 10285  0A1C  0870               	movf	i1___bmul@multiplicand,w
 10286  0A1D  1871               	btfsc	i1___bmul@multiplier,0
 10287  0A1E  07F2               	addwf	i1___bmul@product,f
 10288  0A1F  35F0               	lslf	i1___bmul@multiplicand,f
 10289  0A20  36F1               	lsrf	i1___bmul@multiplier,f
 10290  0A21  08F1               	movf	i1___bmul@multiplier,f
 10291  0A22  1D03               	skipz
 10292  0A23  2A1C               	goto	i1l4764
 10293  0A24  0872               	movf	i1___bmul@product,w
 10294  0A25  0008               	return
 10295  0A26                     __end_ofi1___bmul:	
 10296  0A26                     __ptext57:	
 10297 ;; *************** function i1___wmul *****************
 10298 ;; Defined at:
 10299 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\wmul.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  multiplier      2    0[COMMON] unsigned int 
 10302 ;;  multiplicand    2    2[COMMON] unsigned int 
 10303 ;; Auto vars:     Size  Location     Type
 10304 ;;  __wmul          2    4[COMMON] unsigned int 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  2    0[COMMON] unsigned int 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 1F/2
 10311 ;;		On exit  : 1F/2
 10312 ;;		Unchanged: 1F/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;Total ram usage:        6 bytes
 10319 ;; Hardware stack levels used:    1
 10320 ;; This function calls:
 10321 ;;		Nothing
 10322 ;; This function is called by:
 10323 ;;		i1_SendCmdReply
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           
 10328                           ;psect for function i1___wmul
 10329  0A26                     i1___wmul:	
 10330                           
 10331                           ;incstack = 0
 10332                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10333  0A26  01F4               	clrf	i1___wmul@product
 10334  0A27  01F5               	clrf	i1___wmul@product+1
 10335  0A28                     i1l6144:	
 10336  0A28  1C70               	btfss	i1___wmul@multiplier,0
 10337  0A29  2A2E               	goto	i1l6148
 10338  0A2A  0872               	movf	i1___wmul@multiplicand,w
 10339  0A2B  07F4               	addwf	i1___wmul@product,f
 10340  0A2C  0873               	movf	i1___wmul@multiplicand+1,w
 10341  0A2D  3DF5               	addwfc	i1___wmul@product+1,f
 10342  0A2E                     i1l6148:	
 10343  0A2E  35F2               	lslf	i1___wmul@multiplicand,f
 10344  0A2F  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10345  0A30  36F1               	lsrf	i1___wmul@multiplier+1,f
 10346  0A31  0CF0               	rrf	i1___wmul@multiplier,f
 10347  0A32  0871               	movf	i1___wmul@multiplier+1,w
 10348  0A33  0470               	iorwf	i1___wmul@multiplier,w
 10349  0A34  1D03               	skipz
 10350  0A35  2A28               	goto	i1l6144
 10351  0A36  0875               	movf	i1___wmul@product+1,w
 10352  0A37  00F1               	movwf	?i1___wmul+1
 10353  0A38  0874               	movf	i1___wmul@product,w
 10354  0A39  00F0               	movwf	?i1___wmul
 10355  0A3A  0008               	return
 10356  0A3B                     __end_ofi1___wmul:	
 10357  007E                     btemp	set	126	;btemp
 10358  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         114
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     26      32
    BANK1            80     74      80
    BANK2            80      0      75
    BANK3            80      0      68
    BANK4            16      0       0
    BANK5            16      0       0
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(1) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK1[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK2[8]), Cfg(BANK2[6]), ID(CODE[12]), Status(BANK2[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK2[8]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _main->_AsicPushWork
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->___wmul
    _AsicPushWork->_AsicPreCalc
    _AsicPreCalc->_rotate
    _rotate->___bmul
    _SendAsicData->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _USBDeviceTasks->_USBCtrlEPService
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCBInitEP->_USBEnableEndpoint
    _USBCBInitEP->_USBTransferOnePacket
    _USBTransferOnePacket->___bmul
    _USBEnableEndpoint->_USBConfigureEndpoint

Critical Paths under _ISRCode in BANK0

    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPreCalc
    _AsicPushWork->_AsicPreCalc
    _USBDeviceTasks->_USBCtrlEPService
    _USBCheckStdRequest->_USBStdFeatureReqHandler

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19915
                     _USBDeviceTasks
                       _AsicPushWork
                           _WorkTick
                   _InitializeSystem
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            4     4      0    7282
                                             70 BANK1      4     4      0
               _USBTransferOnePacket
                         _ProcessCmd
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           5     5      0    6632
                                             65 BANK1      5     5      0
                        _AsicPreCalc
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     241
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        12     7      5     495
                                             12 BANK0     12     7      5
                             ___bmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         2     2      0    2790
                                             24 BANK0      2     2      0
                       _SendAsicData
                        _AsicPreCalc
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     136
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         67    65      2    2561
                                             22 BANK0      2     0      2
                                              0 BANK1     65    65      0
                             _rotate
                             ___bmul
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     136
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              9 BANK0     13     8      5
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         3     0      3      93
                                             12 BANK0      3     0      3
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     795
                      _USBDeviceInit
                           _UserInit
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     399
                        _DetectAsics
                            _InitFAN
                     _InitTempSensor
                       _InitWorkTick
                       _InitResultRx
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                          9     9      0     399
                                             14 BANK0      9     9      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     300
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       2     2      0    9048
                                              6 BANK1      2     2      0
                      _USBDeviceInit
                 _USBWakeFromSuspend
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     3     3      0    5563
                                             25 BANK0      1     1      0
                                              4 BANK1      2     2      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     170
                                              9 BANK0      3     3      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     167
                                             12 BANK0      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     167
                                              8 BANK0      4     4      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               0     0      0    5127
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
                 _USBCheckStdRequest
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   0     0      0    3984
    _USER_USB_CALLBACK_EVENT_HANDLER
                _USBStdSetCfgHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1530
                                             21 BANK0      2     2      0
                                              0 BANK1      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               1     1      0      68
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  4     4      0    1379
                                             21 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                             _memset
 ---------------------------------------------------------------------------------
 (6) _memset                                               6     2      4     137
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0     136
                                             11 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
            _USBCtrlEPAllowDataStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0     136
                                              9 BANK0      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0     136
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _USER_USB_CALLBACK_EVENT_HANDLER                      5     0      5    1007
                                             16 BANK0      5     0      5
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                  _USBCB_SOF_Handler
                  _USBCBErrorHandler
                 _USBCBCheckOtherReq
              _USBCBStdSetDscHandler
                        _USBCBInitEP
 ---------------------------------------------------------------------------------
 (7) _USBCBInitEP                                          0     0      0     976
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     440
                                              9 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _USBEnableEndpoint                                    6     5      1     536
                                             10 BANK0      6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (9) _USBConfigureEndpoint                                 4     3      1     316
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (7) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     396
                                              6 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1247
                                             13 COMMON     1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            1     1      0    1247
                                             12 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     12     7      5    1210
                                              6 COMMON     6     1      5
                                              0 BANK0      6     6      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (13) i1___bmul                                            3     2      1     212
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     372
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USBDeviceTasks
     _USBDeviceInit
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCB_SOF_Handler
         _USBCBErrorHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBStdSetDscHandler
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCB_SOF_Handler
       _USBCBErrorHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBStdSetDscHandler
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCB_SOF_Handler
           _USBCBErrorHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBStdSetDscHandler
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowStatusStage
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
         _USBCheckStdRequest
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCB_SOF_Handler
             _USBCBErrorHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBStdSetDscHandler
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
             _memset
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCB_SOF_Handler
               _USBCBErrorHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBStdSetDscHandler
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _AsicPushWork
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       _rotate
         ___bmul (ARG)
       ___bmul
       ___wmul (ARG)
     ___wmul
   _WorkTick
   _InitializeSystem
     _USBDeviceInit
     _UserInit
       _DetectAsics
         ___awdiv
       _InitFAN
       _InitTempSensor
       _InitWorkTick
       _InitResultRx
   _ProcessIO
     _USBTransferOnePacket
       ___bmul (ARG)
     _ProcessCmd
       _AsicPreCalc
         _rotate
           ___bmul (ARG)
         ___bmul
         ___wmul (ARG)
       _AsicPushWork
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           _rotate
             ___bmul (ARG)
           ___bmul
           ___wmul (ARG)
         ___wmul
       _SendCmdReply
         ___bmul
         ___wmul
       ___lwdiv
       ___wmul
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     1A      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4A      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      20      17       40.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Nov 17 01:37:14 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 0057                                        PL2 0F1E  
                                      PL4 0F30                                        PL6 0F3D  
                                      PL8 0F45                                        _ID 089F  
                  ?_USBCheckVendorRequest 0070                              ___awdiv@sign 005B  
                           _USBDeviceInit 0365                       ___wmul@multiplicand 0058  
                        i1___wmul@product 0074                                       PL10 0F4B  
                                     PL20 0F86                                       PL12 0F5B  
                                     PL30 0FA7                                       PL22 0F8E  
                                     PL14 0F63                                       PL40 17F1  
                                     PL32 0FAD                                       PL24 0730  
                                     PL16 0F69                                       PL50 0763  
                                     PL42 17F6                                       PL34 0FB6  
                                     PL26 0741                                       PL18 0F73  
                     __end_of_AsicPreCalc 0EB7                                       PL60 0774  
                                     PL52 0FD4                                       PL44 075C  
                                     PL36 0FBB                                       PL28 0F97  
                                     PL70 078E                                       PL62 0FEA  
                                     PL54 076C                                       PL46 0FC3  
                                     PL38 0751                                       LATC 010E  
                                     PL80 0FF5                                       PL72 0FF0  
                                     PL64 077A                                       PL56 0FDC  
                                     PL48 0FCB                                       PL90 07B8  
                                     PL82 07A7                                       PL74 0795  
                                     PL66 0780                                       PL58 0FE4  
                                     PL84 07AC                                       PL76 079C  
                                     PL68 0787                                       PL86 07B2  
                                     PL78 07A2                                       PL88 0FFB  
                              _BankRanges 0320      USER_USB_CALLBACK_EVENT_HANDLER@event 0060  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 0062                       __end_of_DetectAsics 0932  
                                     l140 029D                                       l142 02A1  
                                     l208 0679                                       l330 004A  
                                     l146 02BD                                       l315 0622  
                                     l332 004B                                       l341 0066  
                                     l157 0302               __end_of_USBStdGetDscHandler 0121  
                                     l318 064E                                       l271 0125  
                                     l353 01A8                                       l274 0155  
                                     l354 01A9                                       l275 012F  
                                     l276 0132                                       l373 05A3  
                                     l366 01F7                                       l358 01CE  
                                     l830 0282                                       l911 0364  
                                     l683 0AC7                                       l675 0A8B  
                                     l684 0AD8                                       _BDT 0020  
                                     l685 0AE3                                       l677 0B5F  
                                     l870 059F                                       l873 05A0  
                                     l882 05A4                                       l867 059E  
                                     l876 05A1                                       _GIE 005F  
                                     _PR2 001B                                       _UIE 0E92  
                                     _UIR 0E90                                       _Cfg 0164  
                                     _WQI 013A                                       _WQX 013B  
                              _USBSuspend 03DE                      USBStdSetCfgHandler@i 0068  
                    USBStdSetCfgHandler@p 0065                                       wreg 0009  
                          _USBDeviceTasks 0293                            _USBDeviceState 00EA  
                  ??_USBCBWakeFromSuspend 0056                                      S6282 1000  
                   ??_USBCtrlTrfRxService 0058                  USBEnableEndpoint@options 005A  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR1H 0007                                      FSR1L 0006  
                                    l5010 0397                                      l5012 03A1  
              USBConfigureEndpoint@handle 0059                                      l5102 02D9  
                                    l5110 02E4                                      l5024 03A9  
                                    l6010 092C                                      l5124 02F8  
                                    l5116 02EA                                      l6020 0288  
                                    l5150 0325                                      l6006 08E9  
                                    l6110 0F06                                      l5208 0411  
                                    l5152 032F                                      l5144 0318  
                                    l5056 02A4                                      l6024 0290  
                                    l5306 0571                                      l5170 033E  
                                    l5234 03F9                                      l5410 0684  
                                    l5402 066E                                      l6122 0F19  
                                    l6050 052C                                      l5324 0598  
                                    l5180 0343                                      l5172 033F  
                                    l5236 03FB                                      l5340 06C3  
                                    l5076 02B8                                      l5068 02B1  
                                    l6132 0BD1                                      l5182 0344  
                                    l5174 0340                                      l5270 0481  
                                    l5078 02BA                                      l6118 0F15  
                                    l5176 0341                                      l5168 0336  
                                    l5336 06B0                                      l5520 00BD  
                                    l5440 1799                                      l5256 0450  
                                    l5096 02CD                                      l5088 02C6  
                                    l4480 0493                                      l6128 0BCB  
                                    l6064 054B                                      l5282 05BC  
                                    l6082 05A5                                      l5178 0342  
                                    l5354 06E6                                      l5418 068C  
                                    l5530 00CD                                      l5450 17A7  
                                    l5434 1784                                      l6058 053E  
                                    l5196 03FD                                      l5532 00DD  
                                    l5460 17DA                                      l5452 17BB  
                                    l5612 0710                                      l5268 0480  
                                    l4492 04AF                                      l4652 093C  
                                    l5278 05B6                                      l5358 06EA  
                                    l5550 0111                                      l5702 015F  
                                    l5622 072E                                      l4494 04B1  
                                    l6086 0EBA                                      l5296 05F8  
                                    l5368 0702                                      l5376 0704  
                                    l5480 007F                                      l5472 0077  
                                    l5544 0101                                      l5536 00E6  
                                    l5712 0171                                      l5616 0716  
                                    l5624 0607                                      l4680 0965  
                                    l5378 0709                                      l5386 070B  
                                    l5538 00EF                                      l5714 0173  
                                    l5466 17EA                                      l5634 061F  
                                    l4658 0945                                      l6284 0345  
                                    l5388 065B                                      l5556 0114  
                                    l5644 063E                                      l4684 096D  
                                    l4676 0961                                      l4668 0952  
                                    l5900 0A97                                      l6286 035F  
                                    l5398 066A                                      l5558 0121  
                                    l5670 0058                                      l5654 0657  
                                    l5910 0AA7                                      l5568 013B  
                                    l5736 01B0                                      l5728 0199  
                                    l5680 005F                                      l5664 0051  
                                    l5656 0658                                      l5648 0648  
                                    l4970 0365                                      l5498 0095  
                                    l5578 014A                                      l5770 0210  
                                    l5746 01C7                                      l5690 0070  
                                    l5666 0052                                      l5586 0014  
                                    l5906 0A9C                                      l4980 0371  
                                    l5772 0211                                      l5748 01D5  
                                    l5676 005D                                      l5668 0053  
                                    l5836 0D24                                      l5828 0D14  
                                    l5766 01FE                                      l5758 01ED  
                                    l5678 005E                                      l5950 0B41  
                                    l5942 0B1A                                      l5848 0D40  
                                    l5944 0B26                                      l5890 0A3D  
                                    l4996 0382                                      l5956 0B47  
                                    l5990 0BC4                                      l5994 08BE  
                                    l5988 0BA5                                      _LATC 010E  
                                    u3075 04A7                                      u3235 095A  
                                    u4085 1794                                      u4530 0ED5  
                                    u4540 0EE6                                      u4620 0AB8  
                                    u4550 0D1E                                      u4535 0ED0  
                                    u4545 0EE2                                      _RCIF 008D  
                                    u4725 0B83                                      u4590 0A68  
                                    u3945 06BA                                      u4685 0AF1  
                                    u4695 0AF8                     ??_USBCtrlTrfTxService 0056  
                                    u4885 0F0E                                      _UCFG 0E91  
                                    _UEP0 0E98                                      _UEP1 0E99  
                                    _UEIE 0E97                                      _UEIR 0E93  
                                    _UCON 0E8E                                      _TMR0 0015  
                         __end_of_ISRCode 0012    USBStdFeatureReqHandler@current_ep_data 00A2  
                                    _pDst 013F                                      _main 0280  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 0C1E  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 05A2                __end_of_USBCheckStdRequest 0077  
                  ??_USBCtrlTrfOutHandler 005C                         ___bmul@multiplier 0058  
               ??_USBStdFeatureReqHandler 0065                           __end_of_InitFAN 04F4  
                ??_USBStdGetStatusHandler 0056                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 0972                             __CFG_WDTE$OFF 0000  
       __size_of_USBCtrlEPServiceComplete 003A                           ___awdiv@divisor 0056  
                  __end_of_USBDeviceTasks 0336                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 0F1E  
                                   i1l724 0991                                     i1l827 000E  
                                   _UADDR 0E96                           ___awdiv@counter 005A  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 0038  
                           __CFG_PWRTE$ON 0000                            __CFG_FCMEN$OFF 0000  
         __end_of_USBCtrlEPAllowDataStage 06D1                                     _sd000 08AB  
                                   _sd001 0805                                     _sd002 0839  
                    ??_USBCBCheckOtherReq 0056                          __end_ofi1___bmul 0A26  
                        __end_ofi1___wmul 0A3B                          ??i1_SendCmdReply 0050  
                                   status 0003                       i1___wmul@multiplier 0070  
                                   wtemp0 007E              __size_of_USBStdSetCfgHandler 0054  
                          __CFG_MCLRE$OFF 0000                           __initialization 0226  
                             _AsicPreCalc 0D14                              __end_of_main 0293  
                             _DetectAsics 08BE                            ??_InitResultRx 0056  
               __size_of_USBCtrlEPService 0053                                    ??_main 006A  
                          ??_InitWorkTick 0056                 __size_of_InitializeSystem 0014  
                         ?_USBDeviceTasks 0070                               ?_USBSuspend 0070  
                        __end_of_ResultRx 09B5                                 ??_ISRCode 007D  
                          _InitTempSensor 04F4                          __end_of_UserInit 04DC  
                                  _ACTCON 039B                                    _ADRESH 009C  
                       SendAsicData@split 005E                          ___awdiv@dividend 0058  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of_WorkTick 04BB  
                                  i1l6202 09AF                                    i1l6144 0A28  
                                  i1l6170 09F5                                    i1l6148 0A2E  
                                  i1l6172 0A15                                    i1l6184 0989  
                                  i1l6194 0975                                    i1l4764 0A1C  
                                  i1l6196 099C                                    _OSCCON 0099  
                                  u494_25 09D7                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR2ON 00E2  
                               ??_InitFAN 0056                                    _Send32 0C68  
                       _shortPacketStatus 00EC                             ?_SendCmdReply 005C  
                         USBDeviceTasks@i 00A7                             ?_SendAsicData 005C  
             USBStdFeatureReqHandler@pUEP 00A0                  USBTransferOnePacket@data 005A  
              USBCtrlTrfInHandler@lastDTS 005B                                    _Status 014F  
                         ??_USBDeviceInit 0056                                    ___bmul 0EB7  
                                  ___wmul 0BC9                                 ??___awdiv 005A  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 005A  
                       _USBEnableEndpoint 05B0           __size_of_USBStdGetStatusHandler 003E  
                                  _memset 00CB                          ___awdiv@quotient 005C  
                              _ProcessCmd 0A3B                        ?_USBEnableEndpoint 005A  
                                  _rotate 0EC4                     _USBCBStdSetDscHandler 05A4  
           __size_of_USBTransferOnePacket 0036                        __size_of_ProcessIO 004D  
                  __end_of_InitTempSensor 0505                       ??_USBEnableEndpoint 005B  
                             _CtrlTrfData 0048                     __size_of_AsicPushWork 0040  
                    _controlTransferState 006D                   __end_of__initialization 027E  
                __size_of_USBStallHandler 0018                            ??_SendCmdReply 0061  
                     ___bmul@multiplicand 0056                            ??_SendAsicData 005F  
                     __size_of_USBSuspend 0007                   ??_USBCheckVendorRequest 0056  
                          __pcstackCOMMON 0070                 __end_of_USBEnableEndpoint 05CF  
                           __end_of_sd000 08AF                             __end_of_sd001 0839  
                           __end_of_sd002 086D                              __pidataBANK2 07DD  
                            __pidataBANK3 08B2                              __pidataBANK6 07BD  
                       _USBCB_SOF_Handler 05A0          __size_of_USBCtrlEPAllowDataStage 003C  
           __size_of_USBConfigureEndpoint 0027               __end_of_USBCtrlTrfInHandler 065B  
                              __end_ofPL2 0F30                        ?_USBCB_SOF_Handler 0070  
                              __end_ofPL4 0F3D                                __end_ofPL6 0F45  
                              __end_ofPL8 0F4B                                __end_of_ID 08AB  
                               ?i1___bmul 0070                                 ?i1___wmul 0070  
                          _OPTION_REGbits 0095                              _AsicPushWork 0BDE  
                         ?_InitTempSensor 0070                       i1SendCmdReply@count 007A  
                     ??_USBCB_SOF_Handler 0056                  ??_USBCtrlTrfSetupHandler 0069  
                        i1___bmul@product 0072                    _USBStdGetStatusHandler 0121  
                    __end_of_InitResultRx 05E0                                __pbssBANK0 006A  
                              __pbssBANK1 00EA                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                         i1SendCmdReply@cmd 0076  
                    __end_of_InitWorkTick 051B               __size_of_USBWakeFromSuspend 0009  
                             _pBDTEntryIn 006A                         __end_of_ProcessIO 0568  
        __end_of_USBCtrlEPServiceComplete 0695                                   ?_Send32 0070  
               __end_of_USBCB_SOF_Handler 05A1                                __pmaintext 0280  
                    USBCtrlTrfRxService@i 005A                                 ?_ResultRx 0070  
                                 ?___bmul 0056                                   ?___wmul 0056  
                              __pintentry 0004                                 ?_UserInit 0070  
                                 ?_memset 0056                    ?_USBCBStdSetDscHandler 0070  
                              _device_dsc 088D                          _USBCtrlEPService 0435  
                               ?_WorkTick 0070                               ?_ProcessCmd 0070  
                              ??i1___bmul 0071                                _ep_data_in 0126  
                                 ?_rotate 0059                                ??i1___wmul 0074  
                        _InitializeSystem 04BB                               _NonceRanges 01A0  
             __end_of_USBCtrlTrfRxService 17F1                        _USBCheckStdRequest 003A  
                       _configDescriptor1 086D               __end_of_USBCtrlTrfTxService 0710  
                     _USBStdSetCfgHandler 0077                                   _ISRCode 0004  
                                 _PWM1DCH 0612                                   _PWM1DCL 0611  
                                 _OSCTUNE 0098                                   _PWM1CON 0613  
                     ?_USBCheckStdRequest 0070              __size_of_USBStdGetDscHandler 0044  
                                 _UIEbits 0E92             __size_of_USBCBWakeFromSuspend 0001  
                              __stringtab 0800                                   _UIRbits 0E90  
                                 _InitFAN 04DC                      ?_USBStdSetCfgHandler 0070  
                         __size_of_Send32 00AC                                ??_ResultRx 007C  
              __size_of_USBEnableEndpoint 001F                              ?_AsicPreCalc 0066  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 0069  
                         __size_of___bmul 000D             __size_of_USBCtrlTrfOutHandler 0020  
                                 ___awdiv 0932                          ??_USBDeviceTasks 00A6  
                         __size_of___wmul 0015                                   _WorkNow 00EB  
                                 _WorkQue 233C                                   ___lwdiv 0EF9  
                       ??_USBStallHandler 0056                                ??_UserInit 0067  
                         __size_of_memset 0012                                ??_WorkTick 0056  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 000B  
                                 __ptext1 051B                                   __ptext2 0A3B  
                                 __ptext3 0EF9                                   __ptext4 0B62  
                                 __ptext5 0BDE                                   __ptext6 0BC9  
                                 __ptext7 0D14                                   __ptext8 0EB7  
                                 __ptext9 0EC4                                   _inPipes 0149  
             _USBDeferOUTDataStagePackets 0134                           __size_of_rotate 0035  
                         ResultRx@TimeOut 007C                              ??_USBSuspend 0065  
                               _T2CONbits 001C                         _USBCBErrorHandler 05A1  
                    __end_of_SendCmdReply 0BC9                       i1___bmul@multiplier 0071  
                               _IOCBPbits 0394                      __end_of_SendAsicData 0C68  
                      ?_USBCBErrorHandler 0070                             ?_USBCBSuspend 0070  
                      __end_of_USB_CD_Ptr 0805           __size_of_USBCtrlTrfSetupHandler 0026  
                                 clrloop0 1779                      end_of_initialization 027E  
                          _ProcessIO$2365 00E6                            _ProcessIO$2399 00E8  
             __size_of_USBCBCheckOtherReq 0001                        __end_of_USB_SD_Ptr 0804  
                     _pBDTEntryEP0OutNext 006F                                   init_ram 176C  
                     ??_USBCBErrorHandler 0056                                   memset@c 0056  
                                 memset@n 0058                                   memset@p 005B  
                                 initloop 176D                       __size_of_ProcessCmd 0127  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 0065  
                        SendCmdReply@data 005E                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 03E5                   _USBCtrlEPAllowDataStage 0695  
                               _RCSTAbits 019D                                   rotate@x 0059  
                                 rotate@y 005D                           AsicPreCalc@work 0066  
                _USBCtrlEPServiceComplete 065B                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 0137                _USBStatusStageEnabledFlag2 0138  
                      USBEnableEndpoint@p 005D                 __end_of_USBCBErrorHandler 05A2  
                        __CFG_FOSC$INTOSC 0000                     __size_of_InitResultRx 0011  
                               _TRISAbits 008C                                 _TRISCbits 008E  
                          ??_USBCBSuspend 0056                        _BothEP0OutUOWNsSet 012E  
               USBStdSetCfgHandler@i_1089 0067                                 _OUTPacket 02A0  
               USBConfigureEndpoint@EPNum 0058                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0016       USER_USB_CALLBACK_EVENT_HANDLER@size 0063  
                               _USTATcopy 00EF              __end_of_USBTransferOnePacket 059E  
                               _TXSTAbits 019E                             _PrecalcHashes 01C0  
                      USBDeviceInit@i_718 005A                            __end_of_Send32 0D14  
                  _USBCtrlTrfSetupHandler 0014            __size_of_USBCheckVendorRequest 0001  
           __end_of_USBCheckVendorRequest 05A4                   __size_ofi1_SendCmdReply 0065  
                          __end_of___bmul 0EC4                     __end_of_USBDeviceInit 03D5  
                            _InitResultRx 05CF                            __end_of___wmul 0BDE  
                        ??_InitTempSensor 0056                               _BAUDCONbits 019F  
                          __end_of_memset 00DD                            __end_of_rotate 0EF9  
                            _InitWorkTick 0505                         __size_ofi1___bmul 000C  
                             __end_ofPL10 0F5B                               __end_ofPL20 0F8E  
                             __end_ofPL12 0F63                               __end_ofPL30 0FAD  
                             __end_ofPL22 0F97                               __end_ofPL14 0F69  
                             __end_ofPL40 17F6                               __end_ofPL32 0FB6  
                             __end_ofPL24 0741                               __end_ofPL16 0F73  
                             __end_ofPL50 076C                               __end_ofPL42 1800  
                             __end_ofPL34 0FBB                               __end_ofPL26 0751  
                             __end_ofPL18 0F86                               __end_ofPL60 077A  
                             __end_ofPL52 0FDC                               __end_ofPL44 0763  
                             __end_ofPL36 0FC3                               __end_ofPL28 0FA7  
                             __end_ofPL70 0795                               __end_ofPL62 0FF0  
                             __end_ofPL54 0774                               __end_ofPL46 0FCB  
                             __end_ofPL38 075C                               __end_ofPL80 0FFB  
                             __end_ofPL72 0FF5                               __end_ofPL64 0780  
                             __end_ofPL56 0FE4                               __end_ofPL48 0FD4  
                             __end_ofPL90 07BD                               __end_ofPL82 07AC  
                             __end_ofPL74 079C                               __end_ofPL66 0787  
                             __end_ofPL58 0FEA                               __end_ofPL84 07B2  
                             __end_ofPL76 07A2                               __end_ofPL68 078E  
                             __end_ofPL86 07B8                               __end_ofPL78 07A7  
                             __end_ofPL88 1000                       start_initialization 0226  
                       __size_ofi1___wmul 0015                   ?_USBStdGetStatusHandler 0070  
           USBCtrlTrfRxService@byteToRead 005B              __end_of_USBConfigureEndpoint 0607  
         __end_of_USBStdFeatureReqHandler 0226         __end_of_USBCtrlEPAllowStatusStage 0435  
                __end_of_USBCtrlEPService 0488                          SendAsicData@work 005C  
                __end_of_InitializeSystem 04CF                 ??_USBCtrlEPAllowDataStage 0059  
                          USBDeviceInit@i 005B                                  ??_Send32 0056  
                          USBDeviceInit@p 0058                    _pBDTEntryEP0OutCurrent 006E  
                 USBTransferOnePacket@dir 0059                   USBTransferOnePacket@len 005B  
                 ??_USBCBStdSetDscHandler 0056                                  ??___bmul 0057  
                               _ResultQue 0141                                  ??___wmul 005A  
                     _USBStdGetDscHandler 00DD                                 _ProcessIO 051B  
                             __pdataBANK2 014E                               __pdataBANK3 01D8  
                             __pdataBANK6 0320                         __size_of_ResultRx 0043  
                    __size_of_AsicPreCalc 01A3                                  ??_memset 005A  
                    __size_of_DetectAsics 0074                              ??_ProcessCmd 00E1  
                   __size_of_SendCmdReply 0067                                  ??_rotate 005E  
              __size_of_USBCBErrorHandler 0001                     __size_of_SendAsicData 004A  
                       __size_of_UserInit 000D                    _USBActiveConfiguration 00ED  
          __end_of_USBStdGetStatusHandler 015F                               __pbssBIGRAM 233C  
                       __size_of_WorkTick 0033                             __pcstackBANK0 0050  
                           __pcstackBANK1 00A0              __size_of_USBCtrlTrfInHandler 0054  
                                ?_ISRCode 0070                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0078                __end_of_USBWakeFromSuspend 03DE  
                         _USBStallHandler 03E5                              _pBDTEntryOut 012A  
                                ?_InitFAN 0070                              _send32_count 0140  
                               __pnvBANK2 016A                        __end_of_ProcessCmd 0B62  
                        ___lwdiv@dividend 0058                              _SendCmdReply 0B62  
                            _SendAsicData 0C1E                      __end_of_USBCBSuspend 059F  
            __end_of_USBCBWakeFromSuspend 05A0                                  ?___awdiv 0056  
                              ?_ProcessIO 0070                                  ?___lwdiv 0056  
                            AsicPreCalc@K 00A8                              AsicPreCalc@m 00B8  
                            AsicPreCalc@n 00E0                              AsicPreCalc@x 00DC  
                            AsicPreCalc@y 00D8                              AsicPreCalc@z 00B4  
                               __pstrings 0800                                 __pswtext1 1000  
                    _USBTransferOnePacket 0568                              DetectAsics@x 0066  
                               _last_bit0 013D                                 _last_bit1 013E  
            __end_of_USBCtrlTrfOutHandler 0730                     ??_USBStdGetDscHandler 0056  
                             _ep_data_out 0128                          ___lwdiv@quotient 005B  
            __size_of_USBCtrlTrfRxService 006D             USBConfigureEndpoint@direction 0056  
            __size_of_USBCtrlTrfTxService 003F                            ___wmul@product 005A  
                                _LATAbits 010C                ??_USBCtrlEPServiceComplete 005B  
                               clear_ram0 1778                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 005C  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 0069                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 0133                            i1_SendCmdReply 09B5  
                           ??_USBCBInitEP 0060               __size_of_USBCheckStdRequest 003D  
                                _UCONbits 0E8E                      _USBConfigureEndpoint 05E0  
                           ProcessCmd@cmd 00E5          __size_of_USBStdFeatureReqHandler 00C7  
                                i1___bmul 0A1A                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 0056                     ?_USBTransferOnePacket 0059  
                                i1___wmul 0A26                                  _BankSize 016A  
                            _RemoteWakeup 012F                                  _ClockCfg 015C  
              __end_of_USBCBCheckOtherReq 05A3                                  _HashTime 014E  
                 __end_of_USBStallHandler 03FD                          __size_of_ISRCode 000E  
             ??_USBCtrlEPAllowStatusStage 0056               __end_of_USBStdSetCfgHandler 00CB  
                            _SlaveAddress 0131                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 0018  
                 USBStdGetStatusHandler@p 0056                    __end_ofi1_SendCmdReply 0A1A  
                  USBTransferOnePacket@ep 005E                                  _ResultQC 0130  
                                _ResultRx 0972                                  _SetupPkt 0040  
                                _SlowTick 0132                               ??_ProcessIO 006A  
                   ?_USBConfigureEndpoint 0056                                  _UserInit 04CF  
                        __size_of___awdiv 0040                          __size_of___lwdiv 0025  
                                _WorkTick 0488                        __end_of__stringtab 0801  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 05B0  
                           ?_AsicPushWork 0070                               _send32_data 012C  
                 __size_of_USBDeviceTasks 00A3                           ___lwdiv@divisor 0056  
                         ___lwdiv@counter 005A                                  __ptext10 0C1E  
                                __ptext11 0C68                                  __ptext20 0488  
                                __ptext12 04BB                                  __ptext21 0293  
                                __ptext13 04CF                                  __ptext30 00DD  
                                __ptext22 0435                                  __ptext14 05CF  
                                __ptext31 0077                                  __ptext23 0607  
                                __ptext15 0505                                  __ptext40 0336  
                                __ptext32 00CB                                  __ptext24 0710  
                                __ptext16 04F4                                  __ptext41 05A5  
                                __ptext33 065B                                  __ptext25 1784  
                                __ptext17 04DC                                  __ptext50 059F  
                                __ptext42 0568                                  __ptext34 0695  
                                __ptext26 0014                                  __ptext18 08BE  
                                __ptext51 059E                                  __ptext43 05B0  
                                __ptext35 06D1                                  __ptext27 003A  
                                __ptext19 0932                                  __ptext52 0365  
                                __ptext44 05E0                                  __ptext36 03FD  
                                __ptext28 015F                                  __ptext45 05A4  
                                __ptext37 03E5                                  __ptext29 0121  
                                __ptext54 0972                                  __ptext46 05A2  
                                __ptext38 03DE                                  __ptext55 09B5  
                                __ptext47 05A3                                  __ptext39 03D5  
                                __ptext56 0A1A                                  __ptext48 05A1  
                                __ptext57 0A26                                  __ptext49 05A0  
                    _USBCBWakeFromSuspend 059F            __end_of_USBCtrlTrfSetupHandler 003A  
                           __size_of_main 0013                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 00A4                       _USBGenericOutHandle 0136  
                     _USBCtrlTrfInHandler 0607                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0067                                  _outPipes 0120  
                    _USBCtrlTrfOutHandler 0710                 _USBCtrlEPAllowStatusStage 03FD  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 05A5  
                  ??_USBTransferOnePacket 005C                     _USBCheckVendorRequest 05A3  
                          ??_AsicPushWork 0068                 _USBDeferStatusStagePacket 006C  
                              _INTCONbits 000B                        _USBGenericInHandle 0135  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0058  
                                memset@p1 005A                              _USBCBSuspend 059E  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 00A3  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 0070   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 0365  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 002F         ??_USER_USB_CALLBACK_EVENT_HANDLER 0065  
        ?_USER_USB_CALLBACK_EVENT_HANDLER 0060           _USER_USB_CALLBACK_EVENT_HANDLER 0336  
                        AsicPreCalc@F3348 01D8                                  next_word 0C6D  
                       SendCmdReply@count 0060                             SendCmdReply@n 0067  
                           ??_AsicPreCalc 00A0                           _ProcessCmd$2047 00E3  
                           ??_DetectAsics 005E                    ??_USBConfigureEndpoint 0057  
                   ?_USBCtrlTrfOutHandler 0070                      __CFG_CPUDIV$NOCLKDIV 0000  
                     _USBCtrlTrfRxService 1784                               _USBCBInitEP 05A5  
                      _USBWakeFromSuspend 03D5                   _USBStdFeatureReqHandler 015F  
                     _USBCtrlTrfTxService 06D1                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 0059                     _USBAlternateInterface 00EE  
                     USBEnableEndpoint@ep 005F                           _endpoint_number 013C  
                 __size_of_InitTempSensor 0011                      ?_USBCtrlTrfRxService 0070  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 0139                      ??_USBWakeFromSuspend 0065  
              USBTransferOnePacket@handle 005F                                _USB_CD_Ptr 0804  
