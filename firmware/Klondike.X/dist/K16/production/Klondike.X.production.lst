

Microchip Technology PIC PRO Macro Assembler V1.12 build 49521 
                                                                                               Mon Jun 24 10:54:40 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    16                           	psect	bssBANK7,global,class=BANK7,space=1,delta=1
    17                           	psect	bssBANK8,global,class=BANK8,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	text2439,local,class=CODE,merge=1,delta=2
    25                           	psect	text2441,local,class=CODE,merge=1,delta=2
    26                           	psect	text2444,local,class=CODE,merge=1,delta=2
    27                           	psect	text2449,local,class=CODE,merge=1,delta=2
    28                           	psect	text2452,local,class=CODE,merge=1,delta=2
    29                           	psect	text2457,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text2470,local,class=CODE,merge=1,delta=2
    32                           	psect	text2476,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext1,local,class=CONST,delta=2
    34                           	psect	text2479,local,class=CODE,merge=1,delta=2
    35                           	psect	text2481,local,class=CODE,merge=1,delta=2
    36                           	psect	text2482,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext2,local,class=CONST,delta=2
    38                           	psect	text2486,local,class=CODE,merge=1,delta=2
    39                           	psect	text2487,local,class=CODE,merge=1,delta=2
    40                           	psect	swtext3,local,class=CONST,delta=2
    41                           	psect	text2488,local,class=CODE,merge=1,delta=2
    42                           	psect	text2491,local,class=CODE,merge=1,delta=2
    43                           	psect	text2492,local,class=CODE,merge=1,delta=2
    44                           	psect	text2498,local,class=CODE,merge=1,delta=2
    45                           	psect	text2509,local,class=CODE,merge=1,delta=2
    46                           	psect	pa_nodes,global,class=CODE,delta=2
    47                           	dabs	1,0x620,48
    48                           	dabs	1,0x5A0,80
    49                           	dabs	1,0x53C,52
    50                           	dabs	1,0x20,48
    51                           	dabs	1,0x58,8
    52                           	dabs	1,0x50,8
    53                           	dabs	1,0x127,10
    54                           	dabs	1,0x120,7
    55                           	dabs	1,0x220,64
    56                           	dabs	1,0x2A0,64
    57                           	dabs	1,0x7E,2
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  008C                     	;# 
    85  008D                     	;# 
    86  008E                     	;# 
    87  0091                     	;# 
    88  0092                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009B                     	;# 
    97  009C                     	;# 
    98  009D                     	;# 
    99  009E                     	;# 
   100  009F                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  0111                     	;# 
   105  0112                     	;# 
   106  0113                     	;# 
   107  0114                     	;# 
   108  0115                     	;# 
   109  0116                     	;# 
   110  0117                     	;# 
   111  0118                     	;# 
   112  0119                     	;# 
   113  011D                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  018E                     	;# 
   117  0191                     	;# 
   118  0191                     	;# 
   119  0192                     	;# 
   120  0193                     	;# 
   121  0193                     	;# 
   122  0194                     	;# 
   123  0195                     	;# 
   124  0196                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019C                     	;# 
   129  019D                     	;# 
   130  019E                     	;# 
   131  019F                     	;# 
   132  020C                     	;# 
   133  020D                     	;# 
   134  0211                     	;# 
   135  0211                     	;# 
   136  0212                     	;# 
   137  0212                     	;# 
   138  0213                     	;# 
   139  0213                     	;# 
   140  0214                     	;# 
   141  0214                     	;# 
   142  0215                     	;# 
   143  0215                     	;# 
   144  0215                     	;# 
   145  0216                     	;# 
   146  0216                     	;# 
   147  0217                     	;# 
   148  0217                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  0394                     	;# 
   153  0395                     	;# 
   154  0396                     	;# 
   155  039A                     	;# 
   156  039B                     	;# 
   157  0611                     	;# 
   158  0612                     	;# 
   159  0613                     	;# 
   160  0613                     	;# 
   161  0614                     	;# 
   162  0615                     	;# 
   163  0616                     	;# 
   164  0616                     	;# 
   165  0691                     	;# 
   166  0692                     	;# 
   167  0693                     	;# 
   168  0694                     	;# 
   169  0695                     	;# 
   170  0E8E                     	;# 
   171  0E8F                     	;# 
   172  0E90                     	;# 
   173  0E91                     	;# 
   174  0E92                     	;# 
   175  0E93                     	;# 
   176  0E94                     	;# 
   177  0E94                     	;# 
   178  0E95                     	;# 
   179  0E96                     	;# 
   180  0E97                     	;# 
   181  0E98                     	;# 
   182  0E99                     	;# 
   183  0E9A                     	;# 
   184  0E9B                     	;# 
   185  0E9C                     	;# 
   186  0E9D                     	;# 
   187  0E9E                     	;# 
   188  0E9F                     	;# 
   189  0FE4                     	;# 
   190  0FE5                     	;# 
   191  0FE6                     	;# 
   192  0FE7                     	;# 
   193  0FE8                     	;# 
   194  0FE9                     	;# 
   195  0FEA                     	;# 
   196  0FEB                     	;# 
   197  0FED                     	;# 
   198  0FEE                     	;# 
   199  0FEF                     	;# 
   200  0000                     	;# 
   201  0001                     	;# 
   202  0002                     	;# 
   203  0003                     	;# 
   204  0004                     	;# 
   205  0005                     	;# 
   206  0006                     	;# 
   207  0007                     	;# 
   208  0008                     	;# 
   209  0009                     	;# 
   210  000A                     	;# 
   211  000B                     	;# 
   212  000C                     	;# 
   213  000D                     	;# 
   214  000E                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0015                     	;# 
   218  0016                     	;# 
   219  0016                     	;# 
   220  0017                     	;# 
   221  0018                     	;# 
   222  0019                     	;# 
   223  001A                     	;# 
   224  001B                     	;# 
   225  001C                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0095                     	;# 
   232  0096                     	;# 
   233  0097                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009A                     	;# 
   237  009B                     	;# 
   238  009B                     	;# 
   239  009C                     	;# 
   240  009D                     	;# 
   241  009E                     	;# 
   242  009F                     	;# 
   243  010C                     	;# 
   244  010D                     	;# 
   245  010E                     	;# 
   246  0111                     	;# 
   247  0112                     	;# 
   248  0113                     	;# 
   249  0114                     	;# 
   250  0115                     	;# 
   251  0116                     	;# 
   252  0117                     	;# 
   253  0118                     	;# 
   254  0119                     	;# 
   255  011D                     	;# 
   256  018C                     	;# 
   257  018D                     	;# 
   258  018E                     	;# 
   259  0191                     	;# 
   260  0191                     	;# 
   261  0192                     	;# 
   262  0193                     	;# 
   263  0193                     	;# 
   264  0194                     	;# 
   265  0195                     	;# 
   266  0196                     	;# 
   267  0199                     	;# 
   268  019A                     	;# 
   269  019B                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020C                     	;# 
   275  020D                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0391                     	;# 
   292  0392                     	;# 
   293  0393                     	;# 
   294  0394                     	;# 
   295  0395                     	;# 
   296  0396                     	;# 
   297  039A                     	;# 
   298  039B                     	;# 
   299  0611                     	;# 
   300  0612                     	;# 
   301  0613                     	;# 
   302  0613                     	;# 
   303  0614                     	;# 
   304  0615                     	;# 
   305  0616                     	;# 
   306  0616                     	;# 
   307  0691                     	;# 
   308  0692                     	;# 
   309  0693                     	;# 
   310  0694                     	;# 
   311  0695                     	;# 
   312  0E8E                     	;# 
   313  0E8F                     	;# 
   314  0E90                     	;# 
   315  0E91                     	;# 
   316  0E92                     	;# 
   317  0E93                     	;# 
   318  0E94                     	;# 
   319  0E94                     	;# 
   320  0E95                     	;# 
   321  0E96                     	;# 
   322  0E97                     	;# 
   323  0E98                     	;# 
   324  0E99                     	;# 
   325  0E9A                     	;# 
   326  0E9B                     	;# 
   327  0E9C                     	;# 
   328  0E9D                     	;# 
   329  0E9E                     	;# 
   330  0E9F                     	;# 
   331  0FE4                     	;# 
   332  0FE5                     	;# 
   333  0FE6                     	;# 
   334  0FE7                     	;# 
   335  0FE8                     	;# 
   336  0FE9                     	;# 
   337  0FEA                     	;# 
   338  0FEB                     	;# 
   339  0FED                     	;# 
   340  0FEE                     	;# 
   341  0FEF                     	;# 
   342  0000                     	;# 
   343  0001                     	;# 
   344  0002                     	;# 
   345  0003                     	;# 
   346  0004                     	;# 
   347  0005                     	;# 
   348  0006                     	;# 
   349  0007                     	;# 
   350  0008                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  0091                     	;# 
   372  0092                     	;# 
   373  0095                     	;# 
   374  0096                     	;# 
   375  0097                     	;# 
   376  0098                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  009F                     	;# 
   385  010C                     	;# 
   386  010D                     	;# 
   387  010E                     	;# 
   388  0111                     	;# 
   389  0112                     	;# 
   390  0113                     	;# 
   391  0114                     	;# 
   392  0115                     	;# 
   393  0116                     	;# 
   394  0117                     	;# 
   395  0118                     	;# 
   396  0119                     	;# 
   397  011D                     	;# 
   398  018C                     	;# 
   399  018D                     	;# 
   400  018E                     	;# 
   401  0191                     	;# 
   402  0191                     	;# 
   403  0192                     	;# 
   404  0193                     	;# 
   405  0193                     	;# 
   406  0194                     	;# 
   407  0195                     	;# 
   408  0196                     	;# 
   409  0199                     	;# 
   410  019A                     	;# 
   411  019B                     	;# 
   412  019C                     	;# 
   413  019D                     	;# 
   414  019E                     	;# 
   415  019F                     	;# 
   416  020C                     	;# 
   417  020D                     	;# 
   418  0211                     	;# 
   419  0211                     	;# 
   420  0212                     	;# 
   421  0212                     	;# 
   422  0213                     	;# 
   423  0213                     	;# 
   424  0214                     	;# 
   425  0214                     	;# 
   426  0215                     	;# 
   427  0215                     	;# 
   428  0215                     	;# 
   429  0216                     	;# 
   430  0216                     	;# 
   431  0217                     	;# 
   432  0217                     	;# 
   433  0391                     	;# 
   434  0392                     	;# 
   435  0393                     	;# 
   436  0394                     	;# 
   437  0395                     	;# 
   438  0396                     	;# 
   439  039A                     	;# 
   440  039B                     	;# 
   441  0611                     	;# 
   442  0612                     	;# 
   443  0613                     	;# 
   444  0613                     	;# 
   445  0614                     	;# 
   446  0615                     	;# 
   447  0616                     	;# 
   448  0616                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  0695                     	;# 
   454  0E8E                     	;# 
   455  0E8F                     	;# 
   456  0E90                     	;# 
   457  0E91                     	;# 
   458  0E92                     	;# 
   459  0E93                     	;# 
   460  0E94                     	;# 
   461  0E94                     	;# 
   462  0E95                     	;# 
   463  0E96                     	;# 
   464  0E97                     	;# 
   465  0E98                     	;# 
   466  0E99                     	;# 
   467  0E9A                     	;# 
   468  0E9B                     	;# 
   469  0E9C                     	;# 
   470  0E9D                     	;# 
   471  0E9E                     	;# 
   472  0E9F                     	;# 
   473  0FE4                     	;# 
   474  0FE5                     	;# 
   475  0FE6                     	;# 
   476  0FE7                     	;# 
   477  0FE8                     	;# 
   478  0FE9                     	;# 
   479  0FEA                     	;# 
   480  0FEB                     	;# 
   481  0FED                     	;# 
   482  0FEE                     	;# 
   483  0FEF                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0008                     	;# 
   493  0009                     	;# 
   494  000A                     	;# 
   495  000B                     	;# 
   496  000C                     	;# 
   497  000D                     	;# 
   498  000E                     	;# 
   499  0011                     	;# 
   500  0012                     	;# 
   501  0015                     	;# 
   502  0016                     	;# 
   503  0016                     	;# 
   504  0017                     	;# 
   505  0018                     	;# 
   506  0019                     	;# 
   507  001A                     	;# 
   508  001B                     	;# 
   509  001C                     	;# 
   510  008C                     	;# 
   511  008D                     	;# 
   512  008E                     	;# 
   513  0091                     	;# 
   514  0092                     	;# 
   515  0095                     	;# 
   516  0096                     	;# 
   517  0097                     	;# 
   518  0098                     	;# 
   519  0099                     	;# 
   520  009A                     	;# 
   521  009B                     	;# 
   522  009B                     	;# 
   523  009C                     	;# 
   524  009D                     	;# 
   525  009E                     	;# 
   526  009F                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  0111                     	;# 
   531  0112                     	;# 
   532  0113                     	;# 
   533  0114                     	;# 
   534  0115                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  0118                     	;# 
   538  0119                     	;# 
   539  011D                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  018E                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0194                     	;# 
   549  0195                     	;# 
   550  0196                     	;# 
   551  0199                     	;# 
   552  019A                     	;# 
   553  019B                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020C                     	;# 
   559  020D                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0391                     	;# 
   576  0392                     	;# 
   577  0393                     	;# 
   578  0394                     	;# 
   579  0395                     	;# 
   580  0396                     	;# 
   581  039A                     	;# 
   582  039B                     	;# 
   583  0611                     	;# 
   584  0612                     	;# 
   585  0613                     	;# 
   586  0613                     	;# 
   587  0614                     	;# 
   588  0615                     	;# 
   589  0616                     	;# 
   590  0616                     	;# 
   591  0691                     	;# 
   592  0692                     	;# 
   593  0693                     	;# 
   594  0694                     	;# 
   595  0695                     	;# 
   596  0E8E                     	;# 
   597  0E8F                     	;# 
   598  0E90                     	;# 
   599  0E91                     	;# 
   600  0E92                     	;# 
   601  0E93                     	;# 
   602  0E94                     	;# 
   603  0E94                     	;# 
   604  0E95                     	;# 
   605  0E96                     	;# 
   606  0E97                     	;# 
   607  0E98                     	;# 
   608  0E99                     	;# 
   609  0E9A                     	;# 
   610  0E9B                     	;# 
   611  0E9C                     	;# 
   612  0E9D                     	;# 
   613  0E9E                     	;# 
   614  0E9F                     	;# 
   615  0FE4                     	;# 
   616  0FE5                     	;# 
   617  0FE6                     	;# 
   618  0FE7                     	;# 
   619  0FE8                     	;# 
   620  0FE9                     	;# 
   621  0FEA                     	;# 
   622  0FEB                     	;# 
   623  0FED                     	;# 
   624  0FEE                     	;# 
   625  0FEF                     	;# 
   626  0000                     	;# 
   627  0001                     	;# 
   628  0002                     	;# 
   629  0003                     	;# 
   630  0004                     	;# 
   631  0005                     	;# 
   632  0006                     	;# 
   633  0007                     	;# 
   634  0008                     	;# 
   635  0009                     	;# 
   636  000A                     	;# 
   637  000B                     	;# 
   638  000C                     	;# 
   639  000D                     	;# 
   640  000E                     	;# 
   641  0011                     	;# 
   642  0012                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  008C                     	;# 
   653  008D                     	;# 
   654  008E                     	;# 
   655  0091                     	;# 
   656  0092                     	;# 
   657  0095                     	;# 
   658  0096                     	;# 
   659  0097                     	;# 
   660  0098                     	;# 
   661  0099                     	;# 
   662  009A                     	;# 
   663  009B                     	;# 
   664  009B                     	;# 
   665  009C                     	;# 
   666  009D                     	;# 
   667  009E                     	;# 
   668  009F                     	;# 
   669  010C                     	;# 
   670  010D                     	;# 
   671  010E                     	;# 
   672  0111                     	;# 
   673  0112                     	;# 
   674  0113                     	;# 
   675  0114                     	;# 
   676  0115                     	;# 
   677  0116                     	;# 
   678  0117                     	;# 
   679  0118                     	;# 
   680  0119                     	;# 
   681  011D                     	;# 
   682  018C                     	;# 
   683  018D                     	;# 
   684  018E                     	;# 
   685  0191                     	;# 
   686  0191                     	;# 
   687  0192                     	;# 
   688  0193                     	;# 
   689  0193                     	;# 
   690  0194                     	;# 
   691  0195                     	;# 
   692  0196                     	;# 
   693  0199                     	;# 
   694  019A                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019F                     	;# 
   700  020C                     	;# 
   701  020D                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0216                     	;# 
   714  0216                     	;# 
   715  0217                     	;# 
   716  0217                     	;# 
   717  0391                     	;# 
   718  0392                     	;# 
   719  0393                     	;# 
   720  0394                     	;# 
   721  0395                     	;# 
   722  0396                     	;# 
   723  039A                     	;# 
   724  039B                     	;# 
   725  0611                     	;# 
   726  0612                     	;# 
   727  0613                     	;# 
   728  0613                     	;# 
   729  0614                     	;# 
   730  0615                     	;# 
   731  0616                     	;# 
   732  0616                     	;# 
   733  0691                     	;# 
   734  0692                     	;# 
   735  0693                     	;# 
   736  0694                     	;# 
   737  0695                     	;# 
   738  0E8E                     	;# 
   739  0E8F                     	;# 
   740  0E90                     	;# 
   741  0E91                     	;# 
   742  0E92                     	;# 
   743  0E93                     	;# 
   744  0E94                     	;# 
   745  0E94                     	;# 
   746  0E95                     	;# 
   747  0E96                     	;# 
   748  0E97                     	;# 
   749  0E98                     	;# 
   750  0E99                     	;# 
   751  0E9A                     	;# 
   752  0E9B                     	;# 
   753  0E9C                     	;# 
   754  0E9D                     	;# 
   755  0E9E                     	;# 
   756  0E9F                     	;# 
   757  0FE4                     	;# 
   758  0FE5                     	;# 
   759  0FE6                     	;# 
   760  0FE7                     	;# 
   761  0FE8                     	;# 
   762  0FE9                     	;# 
   763  0FEA                     	;# 
   764  0FEB                     	;# 
   765  0FED                     	;# 
   766  0FEE                     	;# 
   767  0FEF                     	;# 
   768  0000                     	;# 
   769  0001                     	;# 
   770  0002                     	;# 
   771  0003                     	;# 
   772  0004                     	;# 
   773  0005                     	;# 
   774  0006                     	;# 
   775  0007                     	;# 
   776  0008                     	;# 
   777  0009                     	;# 
   778  000A                     	;# 
   779  000B                     	;# 
   780  000C                     	;# 
   781  000D                     	;# 
   782  000E                     	;# 
   783  0011                     	;# 
   784  0012                     	;# 
   785  0015                     	;# 
   786  0016                     	;# 
   787  0016                     	;# 
   788  0017                     	;# 
   789  0018                     	;# 
   790  0019                     	;# 
   791  001A                     	;# 
   792  001B                     	;# 
   793  001C                     	;# 
   794  008C                     	;# 
   795  008D                     	;# 
   796  008E                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0095                     	;# 
   800  0096                     	;# 
   801  0097                     	;# 
   802  0098                     	;# 
   803  0099                     	;# 
   804  009A                     	;# 
   805  009B                     	;# 
   806  009B                     	;# 
   807  009C                     	;# 
   808  009D                     	;# 
   809  009E                     	;# 
   810  009F                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  0111                     	;# 
   815  0112                     	;# 
   816  0113                     	;# 
   817  0114                     	;# 
   818  0115                     	;# 
   819  0116                     	;# 
   820  0117                     	;# 
   821  0118                     	;# 
   822  0119                     	;# 
   823  011D                     	;# 
   824  018C                     	;# 
   825  018D                     	;# 
   826  018E                     	;# 
   827  0191                     	;# 
   828  0191                     	;# 
   829  0192                     	;# 
   830  0193                     	;# 
   831  0193                     	;# 
   832  0194                     	;# 
   833  0195                     	;# 
   834  0196                     	;# 
   835  0199                     	;# 
   836  019A                     	;# 
   837  019B                     	;# 
   838  019C                     	;# 
   839  019D                     	;# 
   840  019E                     	;# 
   841  019F                     	;# 
   842  020C                     	;# 
   843  020D                     	;# 
   844  0211                     	;# 
   845  0211                     	;# 
   846  0212                     	;# 
   847  0212                     	;# 
   848  0213                     	;# 
   849  0213                     	;# 
   850  0214                     	;# 
   851  0214                     	;# 
   852  0215                     	;# 
   853  0215                     	;# 
   854  0215                     	;# 
   855  0216                     	;# 
   856  0216                     	;# 
   857  0217                     	;# 
   858  0217                     	;# 
   859  0391                     	;# 
   860  0392                     	;# 
   861  0393                     	;# 
   862  0394                     	;# 
   863  0395                     	;# 
   864  0396                     	;# 
   865  039A                     	;# 
   866  039B                     	;# 
   867  0611                     	;# 
   868  0612                     	;# 
   869  0613                     	;# 
   870  0613                     	;# 
   871  0614                     	;# 
   872  0615                     	;# 
   873  0616                     	;# 
   874  0616                     	;# 
   875  0691                     	;# 
   876  0692                     	;# 
   877  0693                     	;# 
   878  0694                     	;# 
   879  0695                     	;# 
   880  0E8E                     	;# 
   881  0E8F                     	;# 
   882  0E90                     	;# 
   883  0E91                     	;# 
   884  0E92                     	;# 
   885  0E93                     	;# 
   886  0E94                     	;# 
   887  0E94                     	;# 
   888  0E95                     	;# 
   889  0E96                     	;# 
   890  0E97                     	;# 
   891  0E98                     	;# 
   892  0E99                     	;# 
   893  0E9A                     	;# 
   894  0E9B                     	;# 
   895  0E9C                     	;# 
   896  0E9D                     	;# 
   897  0E9E                     	;# 
   898  0E9F                     	;# 
   899  0FE4                     	;# 
   900  0FE5                     	;# 
   901  0FE6                     	;# 
   902  0FE7                     	;# 
   903  0FE8                     	;# 
   904  0FE9                     	;# 
   905  0FEA                     	;# 
   906  0FEB                     	;# 
   907  0FED                     	;# 
   908  0FEE                     	;# 
   909  0FEF                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0008                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0015                     	;# 
   928  0016                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001B                     	;# 
   935  001C                     	;# 
   936  008C                     	;# 
   937  008D                     	;# 
   938  008E                     	;# 
   939  0091                     	;# 
   940  0092                     	;# 
   941  0095                     	;# 
   942  0096                     	;# 
   943  0097                     	;# 
   944  0098                     	;# 
   945  0099                     	;# 
   946  009A                     	;# 
   947  009B                     	;# 
   948  009B                     	;# 
   949  009C                     	;# 
   950  009D                     	;# 
   951  009E                     	;# 
   952  009F                     	;# 
   953  010C                     	;# 
   954  010D                     	;# 
   955  010E                     	;# 
   956  0111                     	;# 
   957  0112                     	;# 
   958  0113                     	;# 
   959  0114                     	;# 
   960  0115                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  0118                     	;# 
   964  0119                     	;# 
   965  011D                     	;# 
   966  018C                     	;# 
   967  018D                     	;# 
   968  018E                     	;# 
   969  0191                     	;# 
   970  0191                     	;# 
   971  0192                     	;# 
   972  0193                     	;# 
   973  0193                     	;# 
   974  0194                     	;# 
   975  0195                     	;# 
   976  0196                     	;# 
   977  0199                     	;# 
   978  019A                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019D                     	;# 
   982  019E                     	;# 
   983  019F                     	;# 
   984  020C                     	;# 
   985  020D                     	;# 
   986  0211                     	;# 
   987  0211                     	;# 
   988  0212                     	;# 
   989  0212                     	;# 
   990  0213                     	;# 
   991  0213                     	;# 
   992  0214                     	;# 
   993  0214                     	;# 
   994  0215                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0216                     	;# 
   998  0216                     	;# 
   999  0217                     	;# 
  1000  0217                     	;# 
  1001  0391                     	;# 
  1002  0392                     	;# 
  1003  0393                     	;# 
  1004  0394                     	;# 
  1005  0395                     	;# 
  1006  0396                     	;# 
  1007  039A                     	;# 
  1008  039B                     	;# 
  1009  0611                     	;# 
  1010  0612                     	;# 
  1011  0613                     	;# 
  1012  0613                     	;# 
  1013  0614                     	;# 
  1014  0615                     	;# 
  1015  0616                     	;# 
  1016  0616                     	;# 
  1017  0691                     	;# 
  1018  0692                     	;# 
  1019  0693                     	;# 
  1020  0694                     	;# 
  1021  0695                     	;# 
  1022  0E8E                     	;# 
  1023  0E8F                     	;# 
  1024  0E90                     	;# 
  1025  0E91                     	;# 
  1026  0E92                     	;# 
  1027  0E93                     	;# 
  1028  0E94                     	;# 
  1029  0E94                     	;# 
  1030  0E95                     	;# 
  1031  0E96                     	;# 
  1032  0E97                     	;# 
  1033  0E98                     	;# 
  1034  0E99                     	;# 
  1035  0E9A                     	;# 
  1036  0E9B                     	;# 
  1037  0E9C                     	;# 
  1038  0E9D                     	;# 
  1039  0E9E                     	;# 
  1040  0E9F                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0098                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  009F                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0111                     	;# 
  1099  0112                     	;# 
  1100  0113                     	;# 
  1101  0114                     	;# 
  1102  0115                     	;# 
  1103  0116                     	;# 
  1104  0117                     	;# 
  1105  0118                     	;# 
  1106  0119                     	;# 
  1107  011D                     	;# 
  1108  018C                     	;# 
  1109  018D                     	;# 
  1110  018E                     	;# 
  1111  0191                     	;# 
  1112  0191                     	;# 
  1113  0192                     	;# 
  1114  0193                     	;# 
  1115  0193                     	;# 
  1116  0194                     	;# 
  1117  0195                     	;# 
  1118  0196                     	;# 
  1119  0199                     	;# 
  1120  019A                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020C                     	;# 
  1127  020D                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0391                     	;# 
  1144  0392                     	;# 
  1145  0393                     	;# 
  1146  0394                     	;# 
  1147  0395                     	;# 
  1148  0396                     	;# 
  1149  039A                     	;# 
  1150  039B                     	;# 
  1151  0611                     	;# 
  1152  0612                     	;# 
  1153  0613                     	;# 
  1154  0613                     	;# 
  1155  0614                     	;# 
  1156  0615                     	;# 
  1157  0616                     	;# 
  1158  0616                     	;# 
  1159  0691                     	;# 
  1160  0692                     	;# 
  1161  0693                     	;# 
  1162  0694                     	;# 
  1163  0695                     	;# 
  1164  0E8E                     	;# 
  1165  0E8F                     	;# 
  1166  0E90                     	;# 
  1167  0E91                     	;# 
  1168  0E92                     	;# 
  1169  0E93                     	;# 
  1170  0E94                     	;# 
  1171  0E94                     	;# 
  1172  0E95                     	;# 
  1173  0E96                     	;# 
  1174  0E97                     	;# 
  1175  0E98                     	;# 
  1176  0E99                     	;# 
  1177  0E9A                     	;# 
  1178  0E9B                     	;# 
  1179  0E9C                     	;# 
  1180  0E9D                     	;# 
  1181  0E9E                     	;# 
  1182  0E9F                     	;# 
  1183  0FE4                     	;# 
  1184  0FE5                     	;# 
  1185  0FE6                     	;# 
  1186  0FE7                     	;# 
  1187  0FE8                     	;# 
  1188  0FE9                     	;# 
  1189  0FEA                     	;# 
  1190  0FEB                     	;# 
  1191  0FED                     	;# 
  1192  0FEE                     	;# 
  1193  0FEF                     	;_WorkQue
  1194                           
  1195                           	psect	idataBANK2
  1196  0000                     __pidataBANK2:	
  1197                           
  1198                           	psect	idataBANK3
  1199  139D                     __pidataBANK3:	
  1200                           
  1201                           ;initializer for _WorkTicks
  1202  139D  3489               	retlw	137
  1203  139E  3441               	retlw	65
  1204                           
  1205                           ;initializer for _Status
  1206  139F  3449               	retlw	73
  1207  13A0  3400               	retlw	0
  1208  13A1  3400               	retlw	0
  1209  13A2  3400               	retlw	0
  1210  13A3  3400               	retlw	0
  1211  13A4  3400               	retlw	0
  1212  13A5  3400               	retlw	0
  1213  13A6  3400               	retlw	0
  1214  13A7  3400               	retlw	0
  1215  13A8  3400               	retlw	0
  1216  13A9  3400               	retlw	0
  1217                           
  1218                           ;initializer for _ClockCfg
  1219  13AA  3417               	retlw	23
  1220  13AB  3400               	retlw	0
  1221  13AC  3403               	retlw	3
  1222  13AD  3408               	retlw	8
  1223  13AE  3474               	retlw	116
  1224  13AF  3401               	retlw	1
  1225  13B0  3400               	retlw	0
  1226  13B1  3400               	retlw	0
  1227                           
  1228                           ;initializer for _Cfg
  1229  13B2  3400               	retlw	0
  1230  13B3  3402               	retlw	2
  1231  13B4  343C               	retlw	60
  1232  13B5  3450               	retlw	80
  1233  13B6  3480               	retlw	128
  1234                           
  1235                           	psect	stringtext
  1236  1000                     __pstringtext:	
  1237  1000                     __stringtab:	
  1238  1000  3400               	retlw	0
  1239  1001                     __end_of__stringtab:	
  1240  1001                     _BankRanges:	
  1241  1001  3400               	retlw	0
  1242  1002  3400               	retlw	0
  1243  1003  3400               	retlw	0
  1244  1004  3400               	retlw	0
  1245  1005  3400               	retlw	0
  1246  1006  3400               	retlw	0
  1247  1007  3400               	retlw	0
  1248  1008  3440               	retlw	64
  1249  1009  34AA               	retlw	170
  1250  100A  34AA               	retlw	170
  1251  100B  34AA               	retlw	170
  1252  100C  342A               	retlw	42
  1253  100D  3400               	retlw	0
  1254  100E  3400               	retlw	0
  1255  100F  3400               	retlw	0
  1256  1010  3420               	retlw	32
  1257  1011  3499               	retlw	153
  1258  1012  3499               	retlw	153
  1259  1013  3499               	retlw	153
  1260  1014  3419               	retlw	25
  1261  1015  3455               	retlw	85
  1262  1016  3455               	retlw	85
  1263  1017  3455               	retlw	85
  1264  1018  3415               	retlw	21
  1265  1019  3492               	retlw	146
  1266  101A  3424               	retlw	36
  1267  101B  3449               	retlw	73
  1268  101C  3412               	retlw	18
  1269  101D  3400               	retlw	0
  1270  101E  3400               	retlw	0
  1271  101F  3400               	retlw	0
  1272  1020  3410               	retlw	16
  1273  1021                     __end_of_BankRanges:	
  1274  1021                     AsicPreCalc@K:	
  1275  1021  3498               	retlw	152
  1276  1022  342F               	retlw	47
  1277  1023  348A               	retlw	138
  1278  1024  3442               	retlw	66
  1279  1025  3491               	retlw	145
  1280  1026  3444               	retlw	68
  1281  1027  3437               	retlw	55
  1282  1028  3471               	retlw	113
  1283  1029  34CF               	retlw	207
  1284  102A  34FB               	retlw	251
  1285  102B  34C0               	retlw	192
  1286  102C  34B5               	retlw	181
  1287  102D                     __end_ofAsicPreCalc@K:	
  1288  102D                     _USB_SD_Ptr:	
  1289  102D  3462               	retlw	low (_sd000| (0+32768))
  1290  102E  3491               	retlw	high (_sd000| (0+32768))
  1291  102F  347A               	retlw	low (_sd001| (0+32768))
  1292  1030  3490               	retlw	high (_sd001| (0+32768))
  1293  1031  34AE               	retlw	low (_sd002| (0+32768))
  1294  1032  3490               	retlw	high (_sd002| (0+32768))
  1295  1033  34E2               	retlw	low (_sd003| (0+32768))
  1296  1034  3490               	retlw	high (_sd003| (0+32768))
  1297  1035                     __end_of_USB_SD_Ptr:	
  1298  1035                     _USB_CD_Ptr:	
  1299  1035  3437               	retlw	low (_configDescriptor1| (0+32768))
  1300  1036  3490               	retlw	high (_configDescriptor1| (0+32768))
  1301  1037                     __end_of_USB_CD_Ptr:	
  1302  1037                     _configDescriptor1:	
  1303  1037  3409               	retlw	9
  1304  1038  3402               	retlw	2
  1305  1039  3443               	retlw	67
  1306  103A  3400               	retlw	0
  1307  103B  3402               	retlw	2
  1308  103C  3401               	retlw	1
  1309  103D  3400               	retlw	0
  1310  103E  34C0               	retlw	192
  1311  103F  3432               	retlw	50
  1312  1040  3409               	retlw	9
  1313  1041  3404               	retlw	4
  1314  1042  3400               	retlw	0
  1315  1043  3400               	retlw	0
  1316  1044  3401               	retlw	1
  1317  1045  3402               	retlw	2
  1318  1046  3402               	retlw	2
  1319  1047  3401               	retlw	1
  1320  1048  3400               	retlw	0
  1321  1049  3405               	retlw	5
  1322  104A  3424               	retlw	36
  1323  104B  3400               	retlw	0
  1324  104C  3410               	retlw	16
  1325  104D  3401               	retlw	1
  1326  104E  3404               	retlw	4
  1327  104F  3424               	retlw	36
  1328  1050  3402               	retlw	2
  1329  1051  3402               	retlw	2
  1330  1052  3405               	retlw	5
  1331  1053  3424               	retlw	36
  1332  1054  3406               	retlw	6
  1333  1055  3400               	retlw	0
  1334  1056  3401               	retlw	1
  1335  1057  3405               	retlw	5
  1336  1058  3424               	retlw	36
  1337  1059  3401               	retlw	1
  1338  105A  3400               	retlw	0
  1339  105B  3401               	retlw	1
  1340  105C  3407               	retlw	7
  1341  105D  3405               	retlw	5
  1342  105E  3481               	retlw	129
  1343  105F  3403               	retlw	3
  1344  1060  3408               	retlw	8
  1345  1061  3400               	retlw	0
  1346  1062  3402               	retlw	2
  1347  1063  3409               	retlw	9
  1348  1064  3404               	retlw	4
  1349  1065  3401               	retlw	1
  1350  1066  3400               	retlw	0
  1351  1067  3402               	retlw	2
  1352  1068  340A               	retlw	10
  1353  1069  3400               	retlw	0
  1354  106A  3400               	retlw	0
  1355  106B  3400               	retlw	0
  1356  106C  3407               	retlw	7
  1357  106D  3405               	retlw	5
  1358  106E  3402               	retlw	2
  1359  106F  3402               	retlw	2
  1360  1070  3440               	retlw	64
  1361  1071  3400               	retlw	0
  1362  1072  3400               	retlw	0
  1363  1073  3407               	retlw	7
  1364  1074  3405               	retlw	5
  1365  1075  3482               	retlw	130
  1366  1076  3402               	retlw	2
  1367  1077  3440               	retlw	64
  1368  1078  3400               	retlw	0
  1369  1079  3400               	retlw	0
  1370  107A                     __end_of_configDescriptor1:	
  1371  107A                     _sd001:	
  1372  107A  3434               	retlw	52
  1373  107B  3403               	retlw	3
  1374  107C  344B               	retlw	75
  1375  107D  3400               	retlw	0
  1376  107E  346C               	retlw	108
  1377  107F  3400               	retlw	0
  1378  1080  346F               	retlw	111
  1379  1081  3400               	retlw	0
  1380  1082  346E               	retlw	110
  1381  1083  3400               	retlw	0
  1382  1084  3464               	retlw	100
  1383  1085  3400               	retlw	0
  1384  1086  3469               	retlw	105
  1385  1087  3400               	retlw	0
  1386  1088  346B               	retlw	107
  1387  1089  3400               	retlw	0
  1388  108A  3465               	retlw	101
  1389  108B  3400               	retlw	0
  1390  108C  3420               	retlw	32
  1391  108D  3400               	retlw	0
  1392  108E  3450               	retlw	80
  1393  108F  3400               	retlw	0
  1394  1090  3472               	retlw	114
  1395  1091  3400               	retlw	0
  1396  1092  346F               	retlw	111
  1397  1093  3400               	retlw	0
  1398  1094  346A               	retlw	106
  1399  1095  3400               	retlw	0
  1400  1096  3465               	retlw	101
  1401  1097  3400               	retlw	0
  1402  1098  3463               	retlw	99
  1403  1099  3400               	retlw	0
  1404  109A  3474               	retlw	116
  1405  109B  3400               	retlw	0
  1406  109C  3400               	retlw	0
  1407  109D  3400               	retlw	0
  1408  109E  3400               	retlw	0
  1409  109F  3400               	retlw	0
  1410  10A0  3400               	retlw	0
  1411  10A1  3400               	retlw	0
  1412  10A2  3400               	retlw	0
  1413  10A3  3400               	retlw	0
  1414  10A4  3400               	retlw	0
  1415  10A5  3400               	retlw	0
  1416  10A6  3400               	retlw	0
  1417  10A7  3400               	retlw	0
  1418  10A8  3400               	retlw	0
  1419  10A9  3400               	retlw	0
  1420  10AA  3400               	retlw	0
  1421  10AB  3400               	retlw	0
  1422  10AC  3400               	retlw	0
  1423  10AD  3400               	retlw	0
  1424  10AE                     __end_of_sd001:	
  1425  10AE                     _sd002:	
  1426  10AE  3434               	retlw	52
  1427  10AF  3403               	retlw	3
  1428  10B0  344B               	retlw	75
  1429  10B1  3400               	retlw	0
  1430  10B2  3431               	retlw	49
  1431  10B3  3400               	retlw	0
  1432  10B4  3436               	retlw	54
  1433  10B5  3400               	retlw	0
  1434  10B6  3400               	retlw	0
  1435  10B7  3400               	retlw	0
  1436  10B8  3400               	retlw	0
  1437  10B9  3400               	retlw	0
  1438  10BA  3400               	retlw	0
  1439  10BB  3400               	retlw	0
  1440  10BC  3400               	retlw	0
  1441  10BD  3400               	retlw	0
  1442  10BE  3400               	retlw	0
  1443  10BF  3400               	retlw	0
  1444  10C0  3400               	retlw	0
  1445  10C1  3400               	retlw	0
  1446  10C2  3400               	retlw	0
  1447  10C3  3400               	retlw	0
  1448  10C4  3400               	retlw	0
  1449  10C5  3400               	retlw	0
  1450  10C6  3400               	retlw	0
  1451  10C7  3400               	retlw	0
  1452  10C8  3400               	retlw	0
  1453  10C9  3400               	retlw	0
  1454  10CA  3400               	retlw	0
  1455  10CB  3400               	retlw	0
  1456  10CC  3400               	retlw	0
  1457  10CD  3400               	retlw	0
  1458  10CE  3400               	retlw	0
  1459  10CF  3400               	retlw	0
  1460  10D0  3400               	retlw	0
  1461  10D1  3400               	retlw	0
  1462  10D2  3400               	retlw	0
  1463  10D3  3400               	retlw	0
  1464  10D4  3400               	retlw	0
  1465  10D5  3400               	retlw	0
  1466  10D6  3400               	retlw	0
  1467  10D7  3400               	retlw	0
  1468  10D8  3400               	retlw	0
  1469  10D9  3400               	retlw	0
  1470  10DA  3400               	retlw	0
  1471  10DB  3400               	retlw	0
  1472  10DC  3400               	retlw	0
  1473  10DD  3400               	retlw	0
  1474  10DE  3400               	retlw	0
  1475  10DF  3400               	retlw	0
  1476  10E0  3400               	retlw	0
  1477  10E1  3400               	retlw	0
  1478  10E2                     __end_of_sd002:	
  1479  10E2                     _sd003:	
  1480  10E2  3434               	retlw	52
  1481  10E3  3403               	retlw	3
  1482  10E4  3444               	retlw	68
  1483  10E5  3400               	retlw	0
  1484  10E6  3445               	retlw	69
  1485  10E7  3400               	retlw	0
  1486  10E8  3441               	retlw	65
  1487  10E9  3400               	retlw	0
  1488  10EA  3444               	retlw	68
  1489  10EB  3400               	retlw	0
  1490  10EC  3442               	retlw	66
  1491  10ED  3400               	retlw	0
  1492  10EE  3445               	retlw	69
  1493  10EF  3400               	retlw	0
  1494  10F0  3445               	retlw	69
  1495  10F1  3400               	retlw	0
  1496  10F2  3446               	retlw	70
  1497  10F3  3400               	retlw	0
  1498  10F4  3400               	retlw	0
  1499  10F5  3400               	retlw	0
  1500  10F6  3400               	retlw	0
  1501  10F7  3400               	retlw	0
  1502  10F8  3400               	retlw	0
  1503  10F9  3400               	retlw	0
  1504  10FA  3400               	retlw	0
  1505  10FB  3400               	retlw	0
  1506  10FC  3400               	retlw	0
  1507  10FD  3400               	retlw	0
  1508  10FE  3400               	retlw	0
  1509  10FF  3400               	retlw	0
  1510  1100  3400               	retlw	0
  1511  1101  3400               	retlw	0
  1512  1102  3400               	retlw	0
  1513  1103  3400               	retlw	0
  1514  1104  3400               	retlw	0
  1515  1105  3400               	retlw	0
  1516  1106  3400               	retlw	0
  1517  1107  3400               	retlw	0
  1518  1108  3400               	retlw	0
  1519  1109  3400               	retlw	0
  1520  110A  3400               	retlw	0
  1521  110B  3400               	retlw	0
  1522  110C  3400               	retlw	0
  1523  110D  3400               	retlw	0
  1524  110E  3400               	retlw	0
  1525  110F  3400               	retlw	0
  1526  1110  3400               	retlw	0
  1527  1111  3400               	retlw	0
  1528  1112  3400               	retlw	0
  1529  1113  3400               	retlw	0
  1530  1114  3400               	retlw	0
  1531  1115  3400               	retlw	0
  1532  1116                     __end_of_sd003:	
  1533  1116                     _TestWork:	
  1534  1116  34FF               	retlw	255
  1535  1117  34BC               	retlw	188
  1536  1118  34B5               	retlw	181
  1537  1119  34DD               	retlw	221
  1538  111A  345F               	retlw	95
  1539  111B  34D2               	retlw	210
  1540  111C  34AF               	retlw	175
  1541  111D  34BD               	retlw	189
  1542  111E  3400               	retlw	0
  1543  111F  34C7               	retlw	199
  1544  1120  3484               	retlw	132
  1545  1121  3446               	retlw	70
  1546  1122  3414               	retlw	20
  1547  1123  34A2               	retlw	162
  1548  1124  348F               	retlw	143
  1549  1125  34C6               	retlw	198
  1550  1126  3419               	retlw	25
  1551  1127  34E3               	retlw	227
  1552  1128  34A8               	retlw	168
  1553  1129  34D0               	retlw	208
  1554  112A  3427               	retlw	39
  1555  112B  34B2               	retlw	178
  1556  112C  3484               	retlw	132
  1557  112D  34AD               	retlw	173
  1558  112E  3434               	retlw	52
  1559  112F  34BE               	retlw	190
  1560  1130  3466               	retlw	102
  1561  1131  342C               	retlw	44
  1562  1132  34A9               	retlw	169
  1563  1133  34FD               	retlw	253
  1564  1134  34A4               	retlw	164
  1565  1135  3499               	retlw	153
  1566  1136  343E               	retlw	62
  1567  1137  34BB               	retlw	187
  1568  1138  3484               	retlw	132
  1569  1139  3446               	retlw	70
  1570  113A  34F6               	retlw	246
  1571  113B  3408               	retlw	8
  1572  113C  3415               	retlw	21
  1573  113D  34BC               	retlw	188
  1574  113E  3451               	retlw	81
  1575  113F  3437               	retlw	55
  1576  1140  3413               	retlw	19
  1577  1141  3401               	retlw	1
  1578  1142  341A               	retlw	26
  1579  1143                     __end_of_TestWork:	
  1580  1143                     _device_dsc:	
  1581  1143  3412               	retlw	18
  1582  1144  3401               	retlw	1
  1583  1145  3400               	retlw	0
  1584  1146  3402               	retlw	2
  1585  1147  3402               	retlw	2
  1586  1148  3400               	retlw	0
  1587  1149  3400               	retlw	0
  1588  114A  3408               	retlw	8
  1589  114B  34D8               	retlw	216
  1590  114C  3404               	retlw	4
  1591  114D  340A               	retlw	10
  1592  114E  34F6               	retlw	246
  1593  114F  3400               	retlw	0
  1594  1150  3401               	retlw	1
  1595  1151  3401               	retlw	1
  1596  1152  3402               	retlw	2
  1597  1153  3403               	retlw	3
  1598  1154  3401               	retlw	1
  1599  1155                     __end_of_device_dsc:	
  1600  1155                     _ID:	
  1601  1155  3410               	retlw	16
  1602  1156  34EF               	retlw	239
  1603  1157  34BE               	retlw	190
  1604  1158  34AD               	retlw	173
  1605  1159  34DE               	retlw	222
  1606  115A  344B               	retlw	75
  1607  115B  3431               	retlw	49
  1608  115C  3436               	retlw	54
  1609  115D  3400               	retlw	0
  1610  115E  3400               	retlw	0
  1611  115F  3400               	retlw	0
  1612  1160  3400               	retlw	0
  1613  1161  3400               	retlw	0
  1614  1162                     __end_of_ID:	
  1615  1162                     _sd000:	
  1616  1162  3404               	retlw	4
  1617  1163  3403               	retlw	3
  1618  1164  3409               	retlw	9
  1619  1165  3404               	retlw	4
  1620  1166                     __end_of_sd000:	
  1621  0020                     _BDT	set	32	;_BDT
  1622  0058                     _CtrlTrfData	set	88	;_CtrlTrfData
  1623  0050                     _SetupPkt	set	80	;_SetupPkt
  1624  0127                     _cdc_notice	set	295	;_cdc_notice
  1625  0120                     _line_coding	set	288	;_line_coding
  1626                           
  1627                           	psect	nvBANK3
  1628  01EB                     __pnvBANK3:	
  1629  01EB                     _BankSize:	
  1630  01EB                     	ds	1
  1631  0220                     _cdc_data_tx	set	544	;_cdc_data_tx
  1632  02A0                     _cdc_data_rx	set	672	;_cdc_data_rx
  1633  000B                     _INTCONbits	set	11
  1634  0012                     _PIR2bits	set	18
  1635  001B                     _PR2	set	27
  1636  0018                     _T1CONbits	set	24
  1637  0019                     _T1GCONbits	set	25
  1638  001C                     _T2CONbits	set	28
  1639  0015                     _TMR0	set	21
  1640  0017                     _TMR1H	set	23
  1641  0016                     _TMR1L	set	22
  1642  0093                     _BCL1IF	set	147
  1643  005F                     _GIE	set	95
  1644  008D                     _RCIF	set	141
  1645  008B                     _SSP1IF	set	139
  1646  00CC                     _T1GSPM	set	204
  1647  005A                     _TMR0IF	set	90
  1648  00CF                     _TMR1GE	set	207
  1649  008F                     _TMR1GIF	set	143
  1650  0088                     _TMR1IF	set	136
  1651  00C0                     _TMR1ON	set	192
  1652  0089                     _TMR2IF	set	137
  1653  00E2                     _TMR2ON	set	226
  1654  009D                     _ADCON0bits	set	157
  1655  009E                     _ADCON1bits	set	158
  1656  009F                     _ADCON2bits	set	159
  1657  009C                     _ADRESH	set	156
  1658  0095                     _OPTION_REGbits	set	149
  1659  0099                     _OSCCON	set	153
  1660  0098                     _OSCTUNE	set	152
  1661  0092                     _PIE2bits	set	146
  1662  008C                     _TRISAbits	set	140
  1663  008D                     _TRISBbits	set	141
  1664  008E                     _TRISCbits	set	142
  1665  04AD                     _TMR0CS	set	1197
  1666  048F                     _TMR1GIE	set	1167
  1667  0488                     _TMR1IE	set	1160
  1668  010C                     _LATAbits	set	268
  1669  010E                     _LATC	set	270
  1670  010E                     _LATCbits	set	270
  1671  08EB                     _T1GSEL	set	2283
  1672  018C                     _ANSELA	set	396
  1673  018D                     _ANSELB	set	397
  1674  018E                     _ANSELC	set	398
  1675  0199                     _RCREG	set	409
  1676  019D                     _RCSTAbits	set	413
  1677  0212                     _SSPADD	set	530
  1678  0211                     _SSPBUF	set	529
  1679  0215                     _SSPCON1bits	set	533
  1680  0216                     _SSPCON2bits	set	534
  1681  0217                     _SSPCON3bits	set	535
  1682  0214                     _SSPSTATbits	set	532
  1683  10AD                     _SSP1EN	set	4269
  1684  039B                     _ACTCON	set	923
  1685  1C9B                     _IOCAF3	set	7323
  1686  1C93                     _IOCAN3	set	7315
  1687  0613                     _PWM1CON	set	1555
  1688  0612                     _PWM1DCH	set	1554
  1689  0611                     _PWM1DCL	set	1553
  1690  309E                     _PWM1OE	set	12446
  1691  0E96                     _UADDR	set	3734
  1692  0E91                     _UCFG	set	3729
  1693  0E8E                     _UCON	set	3726
  1694  0E8E                     _UCONbits	set	3726
  1695  0E97                     _UEIE	set	3735
  1696  0E93                     _UEIR	set	3731
  1697  0E98                     _UEP0bits	set	3736
  1698  0E92                     _UIE	set	3730
  1699  0E92                     _UIEbits	set	3730
  1700  0E90                     _UIR	set	3728
  1701  0E90                     _UIRbits	set	3728
  1702  0E8F                     _USTAT	set	3727
  1703  0E98                     _UEP0	set	3736
  1704  0E99                     _UEP1	set	3737
  1705                           
  1706                           ; #config settings
  1707  0000                     
  1708                           	psect	cinit
  1709  0802                     start_initialization:	
  1710  0802                     __initialization:	
  1711  0802  303C               	movlw	60
  1712  233C                     	;BIGRAM
  1713                           
  1714                           ; Clear objects allocated to BIGRAM
  1715  0803  0084               	movwf	4
  1716  0804  3023               	movlw	35
  1717  0805  0085               	movwf	5
  1718  0806  30B4               	movlw	180
  1719  0807  00FE               	movwf	126
  1720  0808  3000               	movlw	0
  1721  0809  01FF               	clrf	127
  1722  080A  3193  237C  3188   	fcall	clear_ram
  1723                           
  1724                           ; Clear objects allocated to BANK1
  1725  080D  0021               	movlb	1	; select bank1
  1726  080E  3031               	movlw	low __pbssBANK2
  1727  080F  01EF               	clrf	__pbssBANK1& (0+127)
  1728                           
  1729                           ; Clear objects allocated to BANK2
  1730  0810  0084               	movwf	4
  1731  0811  3001               	movlw	high __pbssBANK2
  1732  0812  0085               	movwf	5
  1733  0813  303A               	movlw	58
  1734  0814  00FE               	movwf	126
  1735  0815  3000               	movlw	0
  1736  0816  00FF               	movwf	127
  1737  0817  3193  237C  3188   	fcall	clear_ram
  1738                           
  1739                           ; Clear objects allocated to BANK3
  1740  081A  30A0               	movlw	low __pbssBANK3
  1741  081B  0084               	movwf	4
  1742  081C  3001               	movlw	high __pbssBANK3
  1743  081D  0085               	movwf	5
  1744  081E  3031               	movlw	49
  1745  081F  00FE               	movwf	126
  1746  0820  3000               	movlw	0
  1747  0821  00FF               	movwf	127
  1748  0822  3193  237C  3188   	fcall	clear_ram
  1749                           
  1750                           ; Clear objects allocated to BANK4
  1751  0825  3060               	movlw	low __pbssBANK4
  1752  0826  0084               	movwf	4
  1753  0827  3002               	movlw	high __pbssBANK4
  1754  0828  0085               	movwf	5
  1755  0829  3010               	movlw	16
  1756  082A  00FE               	movwf	126
  1757  082B  3000               	movlw	0
  1758  082C  00FF               	movwf	127
  1759  082D  3193  237C  3188   	fcall	clear_ram
  1760                           
  1761                           ; Clear objects allocated to BANK6
  1762  0830  3020               	movlw	low __pbssBANK6
  1763  0831  0084               	movwf	4
  1764  0832  3003               	movlw	high __pbssBANK6
  1765  0833  0085               	movwf	5
  1766  0834  3020               	movlw	32
  1767  0835  00FE               	movwf	126
  1768  0836  3000               	movlw	0
  1769  0837  00FF               	movwf	127
  1770  0838  3193  237C  3188   	fcall	clear_ram
  1771                           
  1772                           ; Clear objects allocated to BANK7
  1773  083B  30A0               	movlw	low __pbssBANK7
  1774  083C  0084               	movwf	4
  1775  083D  3003               	movlw	high __pbssBANK7
  1776  083E  0085               	movwf	5
  1777  083F  3040               	movlw	64
  1778  0840  00FE               	movwf	126
  1779  0841  3000               	movlw	0
  1780  0842  00FF               	movwf	127
  1781  0843  3193  237C  3188   	fcall	clear_ram
  1782                           
  1783                           ; Clear objects allocated to BANK8
  1784  0846  3020               	movlw	low __pbssBANK8
  1785  0847  0084               	movwf	4
  1786  0848  3004               	movlw	high __pbssBANK8
  1787  0849  0085               	movwf	5
  1788  084A  3040               	movlw	64
  1789  084B  00FE               	movwf	126
  1790  084C  3000               	movlw	0
  1791  084D  00FF               	movwf	127
  1792  084E  3193  237C  3188   	fcall	clear_ram
  1793                           
  1794                           ; Initialize objects allocated to BANK2
  1795  0851  0022               	movlb	2	; select bank2
  1796                           
  1797                           ;initializer for _HashTime
  1798  0852  30D2               	movlw	210
  1799  0853  00EF               	movwf	__pdataBANK2& (0+127)
  1800                           
  1801                           ; Initialize objects allocated to BANK3
  1802  0854  309D               	movlw	low __pidataBANK3
  1803  0855  0084               	movwf	4
  1804  0856  3093               	movlw	(high __pidataBANK3)| (0+128)
  1805  0857  0085               	movwf	5
  1806  0858  30D1               	movlw	low __pdataBANK3
  1807  0859  0086               	movwf	6
  1808  085A  3001               	movlw	high __pdataBANK3
  1809  085B  0087               	movwf	7
  1810  085C  3000               	movlw	0
  1811  085D  00FF               	movwf	127
  1812  085E  301A               	movlw	26
  1813  085F  3193  2370  3188   	fcall	init_ram
  1814  0862                     end_of_initialization:	
  1815                           ;End of C runtime variable initialization code
  1816                           
  1817  0862                     __end_of__initialization:	
  1818  0862  0020               	movlb	0
  1819  0863  2864               	ljmp	_main	;jump to C main() function
  1820  0864                     __pmaintext:	
  1821 ;;
  1822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1823 ;;
  1824 ;; *************** function _main *****************
  1825 ;; Defined at:
  1826 ;;		line 86 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  2  1010[COMMON] int 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 17F/0
  1837 ;;		On exit  : 1F/1
  1838 ;;		Unchanged: FFE00/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels required when called:   16
  1846 ;; This function calls:
  1847 ;;		_InitializeSystem
  1848 ;;		_USBDeviceAttach
  1849 ;;		_InitI2CSlave
  1850 ;;		_InitI2CMaster
  1851 ;;		_AsicPushWork
  1852 ;;		_ProcessIO
  1853 ;; This function is called by:
  1854 ;;		Startup code after reset
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           
  1859                           ;psect for function _main
  1860  0864                     _main:	
  1861                           
  1862                           ;main.c: 87: InitializeSystem();
  1863                           
  1864                           ; Regs used in _main: [allreg]
  1865  0864  277F  3188         	fcall	_InitializeSystem
  1866  0866                     l7340:	
  1867  0866  0022               	movlb	2	; select bank2
  1868  0867  08D1               	movf	_USBDeviceState^(0+256),f
  1869  0868  1D03               	skipz
  1870  0869  286C               	goto	l7344
  1871                           
  1872                           ;main.c: 93: {
  1873                           ;main.c: 94: USBDeviceAttach();
  1874  086A  27B5  3188         	fcall	_USBDeviceAttach
  1875  086C                     l7344:	
  1876                           
  1877                           ;main.c: 95: }
  1878                           ;main.c: 98: if(USBDeviceState == DETACHED_STATE) {
  1879  086C  08D1               	movf	_USBDeviceState^(0+256),f
  1880  086D  1D03               	skipz
  1881  086E  2874               	goto	l1013
  1882                           
  1883                           ;main.c: 99: if(!I2CState.Slave)
  1884  086F  1AE8               	btfsc	_I2CState^(0+256),5
  1885  0870  2878               	goto	l7352
  1886                           
  1887                           ;main.c: 100: InitI2CSlave();
  1888  0871  27A1  3188         	fcall	_InitI2CSlave
  1889  0873  2878               	goto	l7352
  1890  0874                     l1013:	
  1891                           
  1892                           ;main.c: 102: else if(!I2CState.Master)
  1893  0874  1B68               	btfsc	_I2CState^(0+256),6
  1894  0875  2878               	goto	l7352
  1895                           
  1896                           ;main.c: 103: InitI2CMaster();
  1897  0876  278E  3188         	fcall	_InitI2CMaster
  1898  0878                     l7352:	
  1899                           
  1900                           ;main.c: 121: if(Status.State == 'P'){
  1901  0878  0023               	movlb	3	; select bank3
  1902  0879  0853               	movf	_Status^(0+384),w	;volatile
  1903  087A  3A50               	xorlw	80
  1904  087B  1D03               	skipz
  1905  087C  287F               	goto	l7356
  1906                           
  1907                           ;main.c: 122: AsicPushWork();
  1908  087D  2082  3188         	fcall	_AsicPushWork
  1909  087F                     l7356:	
  1910                           
  1911                           ;main.c: 123: }
  1912                           ;main.c: 125: ProcessIO();
  1913  087F  21EC  3188         	fcall	_ProcessIO
  1914  0881  2866               	goto	l7340
  1915  0882                     __end_of_main:	
  1916  0882                     __ptext2450:	
  1917 ;; *************** function _AsicPushWork *****************
  1918 ;; Defined at:
  1919 ;;		line 112 in file "klondike.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;		None
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;		None
  1924 ;; Return value:  Size  Location     Type
  1925 ;;		None               void
  1926 ;; Registers used:
  1927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 1D/3
  1930 ;;		On exit  : 1D/1
  1931 ;;		Unchanged: FFE00/0
  1932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1935 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1936 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1937 ;;Total ram usage:        2 bytes
  1938 ;; Hardware stack levels used:    1
  1939 ;; Hardware stack levels required when called:   13
  1940 ;; This function calls:
  1941 ;;		___wmul
  1942 ;;		_SendAsicData
  1943 ;;		_AsicPreCalc
  1944 ;; This function is called by:
  1945 ;;		_ProcessCmd
  1946 ;;		_main
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           
  1951                           ;psect for function _AsicPushWork
  1952  0882                     _AsicPushWork:	
  1953                           
  1954                           ;klondike.c: 113: Status.WorkID = WorkQue[WorkNow].WorkID;
  1955                           
  1956                           ; Regs used in _AsicPushWork: [wreg-status,0+pclath+cstack]
  1957  0882  0022               	movlb	2	; select bank2
  1958  0883  0855               	movf	_WorkNow^(0+256),w
  1959  0884  0021               	movlb	1	; select bank1
  1960  0885  00A0               	movwf	?___wmul^(0+128)
  1961  0886  302D               	movlw	45
  1962  0887  01A1               	clrf	(?___wmul+1)^(0+128)
  1963  0888  00A2               	movwf	(?___wmul^(0+128)+2)
  1964  0889  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  1965  088A  20D9  3188         	fcall	___wmul
  1966  088C  303C               	movlw	60
  1967  088D  00E7               	movwf	??_AsicPushWork^(0+128)
  1968  088E  3023               	movlw	35
  1969  088F  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  1970  0890  0820               	movf	?___wmul^(0+128),w
  1971  0891  0767               	addwf	??_AsicPushWork^(0+128),w
  1972  0892  0086               	movwf	6
  1973  0893  0821               	movf	(?___wmul+1)^(0+128),w
  1974  0894  3D68               	addwfc	(??_AsicPushWork+1)^(0+128),w
  1975  0895  0087               	movwf	7
  1976  0896  0801               	movf	1,w
  1977  0897  0023               	movlb	3	; select bank3
  1978  0898  00D7               	movwf	(_Status^(0+384)+4)	;volatile
  1979                           
  1980                           ;klondike.c: 114: SendAsicData(&WorkQue[WorkNow], 0x50);
  1981  0899  303C               	movlw	60
  1982  089A  0021               	movlb	1	; select bank1
  1983  089B  00A6               	movwf	?_SendAsicData^(0+128)
  1984  089C  3023               	movlw	35
  1985  089D  00A7               	movwf	(?_SendAsicData^(0+128)+1)
  1986  089E  0022               	movlb	2	; select bank2
  1987  089F  0855               	movf	_WorkNow^(0+256),w
  1988  08A0  0021               	movlb	1	; select bank1
  1989  08A1  00A0               	movwf	?___wmul^(0+128)
  1990  08A2  302D               	movlw	45
  1991  08A3  01A1               	clrf	(?___wmul+1)^(0+128)
  1992  08A4  00A2               	movwf	(?___wmul^(0+128)+2)
  1993  08A5  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  1994  08A6  20D9  3188         	fcall	___wmul
  1995  08A8  0820               	movf	?___wmul^(0+128),w
  1996  08A9  00E7               	movwf	??_AsicPushWork^(0+128)
  1997  08AA  0821               	movf	(?___wmul+1)^(0+128),w
  1998  08AB  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  1999  08AC  0867               	movf	??_AsicPushWork^(0+128),w
  2000  08AD  07A6               	addwf	?_SendAsicData^(0+128),f
  2001  08AE  0868               	movf	(??_AsicPushWork^(0+128)+1),w
  2002  08AF  3DA7               	addwfc	(?_SendAsicData+1)^(0+128),f
  2003  08B0  3050               	movlw	80
  2004  08B1  00A8               	movwf	(?_SendAsicData^(0+128)+2)
  2005  08B2  20EE  3188         	fcall	_SendAsicData
  2006                           
  2007                           ;klondike.c: 115: Status.HashCount = 0;
  2008  08B4  0023               	movlb	3	; select bank3
  2009  08B5  01DA               	clrf	(_Status^(0+384)+7)	;volatile
  2010  08B6  01DB               	clrf	((_Status+1)^(0+384)+7)	;volatile
  2011                           
  2012                           ;klondike.c: 116: Status.State ='W';
  2013  08B7  3057               	movlw	87
  2014  08B8  00D3               	movwf	_Status^(0+384)	;volatile
  2015                           
  2016                           ;klondike.c: 117: TMR0 = HashTime;
  2017  08B9  0022               	movlb	2	; select bank2
  2018  08BA  086F               	movf	_HashTime^(0+256),w
  2019  08BB  0020               	movlb	0	; select bank0
  2020  08BC  0095               	movwf	21	;volatile
  2021                           
  2022                           ;klondike.c: 118: if(Status.WorkQC > 0)
  2023  08BD  0023               	movlb	3	; select bank3
  2024  08BE  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2025  08BF  1903               	btfsc	3,2
  2026  08C0  0008               	return
  2027                           
  2028                           ;klondike.c: 119: AsicPreCalc(&WorkQue[WorkNow]);
  2029  08C1  303C               	movlw	60
  2030  08C2  0021               	movlb	1	; select bank1
  2031  08C3  00B0               	movwf	?_AsicPreCalc^(0+128)
  2032  08C4  3023               	movlw	35
  2033  08C5  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  2034  08C6  0022               	movlb	2	; select bank2
  2035  08C7  0855               	movf	_WorkNow^(0+256),w
  2036  08C8  0021               	movlb	1	; select bank1
  2037  08C9  00A0               	movwf	?___wmul^(0+128)
  2038  08CA  302D               	movlw	45
  2039  08CB  01A1               	clrf	(?___wmul+1)^(0+128)
  2040  08CC  00A2               	movwf	(?___wmul^(0+128)+2)
  2041  08CD  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2042  08CE  20D9  3188         	fcall	___wmul
  2043  08D0  0820               	movf	?___wmul^(0+128),w
  2044  08D1  00E7               	movwf	??_AsicPushWork^(0+128)
  2045  08D2  0821               	movf	(?___wmul+1)^(0+128),w
  2046  08D3  00E8               	movwf	(??_AsicPushWork^(0+128)+1)
  2047  08D4  0867               	movf	??_AsicPushWork^(0+128),w
  2048  08D5  07B0               	addwf	?_AsicPreCalc^(0+128),f
  2049  08D6  0868               	movf	(??_AsicPushWork^(0+128)+1),w
  2050  08D7  3DB1               	addwfc	(?_AsicPreCalc+1)^(0+128),f
  2051  08D8  2BEA               	ljmp	l6900
  2052  08D9                     __end_of_AsicPushWork:	
  2053  08D9                     __ptext2461:	
  2054 ;; *************** function ___wmul *****************
  2055 ;; Defined at:
  2056 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;  multiplier      2    0[BANK1 ] unsigned int 
  2059 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  2060 ;; Auto vars:     Size  Location     Type
  2061 ;;  product         2    4[BANK1 ] unsigned int 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  2    0[BANK1 ] unsigned int 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0
  2066 ;; Tracked objects:
  2067 ;;		On entry : 1F/1
  2068 ;;		On exit  : 1F/1
  2069 ;;		Unchanged: FFFE0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2071 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2074 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  2075 ;;Total ram usage:        6 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:   11
  2078 ;; This function calls:
  2079 ;;		Nothing
  2080 ;; This function is called by:
  2081 ;;		_ProcessCmd
  2082 ;;		_AsicPushWork
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086                           
  2087                           ;psect for function ___wmul
  2088  08D9                     ___wmul:	
  2089                           
  2090                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2091  08D9  01A4               	clrf	___wmul@product^(0+128)
  2092  08DA  01A5               	clrf	(___wmul@product+1)^(0+128)
  2093  08DB                     l7414:	
  2094  08DB  1C20               	btfss	___wmul@multiplier^(0+128),0
  2095  08DC  28E1               	goto	l7418
  2096  08DD  0822               	movf	___wmul@multiplicand^(0+128),w
  2097  08DE  07A4               	addwf	___wmul@product^(0+128),f
  2098  08DF  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  2099  08E0  3DA5               	addwfc	(___wmul@product+1)^(0+128),f
  2100  08E1                     l7418:	
  2101  08E1  35A2               	lslf	___wmul@multiplicand^(0+128),f
  2102  08E2  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  2103  08E3  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
  2104  08E4  0CA0               	rrf	___wmul@multiplier^(0+128),f
  2105  08E5  0821               	movf	(___wmul@multiplier+1)^(0+128),w
  2106  08E6  0420               	iorwf	___wmul@multiplier^(0+128),w
  2107  08E7  1D03               	skipz
  2108  08E8  28DB               	goto	l7414
  2109  08E9  0825               	movf	(___wmul@product+1)^(0+128),w
  2110  08EA  00A1               	movwf	(?___wmul+1)^(0+128)
  2111  08EB  0824               	movf	___wmul@product^(0+128),w
  2112  08EC  00A0               	movwf	?___wmul^(0+128)
  2113  08ED  0008               	return
  2114  08EE                     __end_of___wmul:	
  2115  08EE                     __ptext2453:	
  2116 ;; *************** function _SendAsicData *****************
  2117 ;; Defined at:
  2118 ;;		line 37 in file "asic.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  work            2    6[BANK1 ] PTR struct _worktask
  2121 ;;		 -> WorkQue(180), 
  2122 ;;  split           1    8[BANK1 ] unsigned char 
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;		None
  2125 ;; Return value:  Size  Location     Type
  2126 ;;		None               void
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, status,0, pclath, cstack
  2129 ;; Tracked objects:
  2130 ;;		On entry : 1F/1
  2131 ;;		On exit  : 1F/2
  2132 ;;		Unchanged: FFE00/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2134 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2137 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2138 ;;Total ram usage:        3 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:   12
  2141 ;; This function calls:
  2142 ;;		_Send32
  2143 ;; This function is called by:
  2144 ;;		_AsicPushWork
  2145 ;;		_DetectAsics
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           
  2150                           ;psect for function _SendAsicData
  2151  08EE                     _SendAsicData:	
  2152                           
  2153                           ;asic.c: 38: GIE = 0;
  2154                           
  2155                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  2156  08EE  138B               	bcf	11,7	;volatile
  2157                           
  2158                           ;asic.c: 39: last_bit0 = 0x48; last_bit1 = 0x90;
  2159  08EF  3048               	movlw	72
  2160  08F0  0022               	movlb	2	; select bank2
  2161  08F1  00DC               	movwf	_last_bit0^(0+256)
  2162  08F2  3090               	movlw	144
  2163  08F3  00DD               	movwf	_last_bit1^(0+256)
  2164                           
  2165                           ;asic.c: 40: send32_data = (WORD)&ClockCfg; send32_count = 2;
  2166  08F4  30DE               	movlw	_ClockCfg& (0+255)
  2167  08F5  00C3               	movwf	_send32_data^(0+256)
  2168  08F6  3001               	movlw	1
  2169  08F7  00C4               	movwf	(_send32_data+1)^(0+256)
  2170  08F8  3002               	movlw	2
  2171  08F9  00E1               	movwf	_send32_count^(0+256)
  2172                           
  2173                           ;asic.c: 41: Send32();
  2174  08FA  2140  3188         	fcall	_Send32
  2175                           
  2176                           ;asic.c: 42: send32_data = (WORD)&work->Merkle; send32_count = 3;
  2177  08FC  0021               	movlb	1	; select bank1
  2178  08FD  0827               	movf	(SendAsicData@work+1)^(0+128),w
  2179  08FE  0022               	movlb	2	; select bank2
  2180  08FF  00C4               	movwf	(_send32_data+1)^(0+256)
  2181  0900  0021               	movlb	1	; select bank1
  2182  0901  0826               	movf	SendAsicData@work^(0+128),w
  2183  0902  0022               	movlb	2	; select bank2
  2184  0903  00C3               	movwf	_send32_data^(0+256)
  2185  0904  3021               	movlw	33
  2186  0905  07C3               	addwf	_send32_data^(0+256),f
  2187  0906  1803               	skipnc
  2188  0907  0AC4               	incf	(_send32_data+1)^(0+256),f
  2189  0908  3003               	movlw	3
  2190  0909  00E1               	movwf	_send32_count^(0+256)
  2191                           
  2192                           ;asic.c: 43: Send32();
  2193  090A  2140  3188         	fcall	_Send32
  2194                           
  2195                           ;asic.c: 44: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  2196  090C  30B3               	movlw	(_PrecalcHashes+4)& (0+255)
  2197  090D  0022               	movlb	2	; select bank2
  2198  090E  00C3               	movwf	_send32_data^(0+256)
  2199  090F  3001               	movlw	1
  2200  0910  00C4               	movwf	(_send32_data+1)^(0+256)
  2201  0911  3005               	movlw	5
  2202  0912  00E1               	movwf	_send32_count^(0+256)
  2203                           
  2204                           ;asic.c: 45: Send32();
  2205  0913  2140  3188         	fcall	_Send32
  2206                           
  2207                           ;asic.c: 46: send32_data = (WORD)&work->MidState; send32_count = 8;
  2208  0915  0021               	movlb	1	; select bank1
  2209  0916  0827               	movf	(SendAsicData@work+1)^(0+128),w
  2210  0917  0022               	movlb	2	; select bank2
  2211  0918  00C4               	movwf	(_send32_data+1)^(0+256)
  2212  0919  0021               	movlb	1	; select bank1
  2213  091A  0826               	movf	SendAsicData@work^(0+128),w
  2214  091B  0022               	movlb	2	; select bank2
  2215  091C  00C3               	movwf	_send32_data^(0+256)
  2216  091D  0AC3               	incf	_send32_data^(0+256),f
  2217  091E  1903               	skipnz
  2218  091F  0AC4               	incf	(_send32_data+1)^(0+256),f
  2219  0920  3008               	movlw	8
  2220  0921  00E1               	movwf	_send32_count^(0+256)
  2221                           
  2222                           ;asic.c: 47: Send32();
  2223  0922  2140  3188         	fcall	_Send32
  2224                           
  2225                           ;asic.c: 48: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  2226  0924  30AF               	movlw	_PrecalcHashes& (0+255)
  2227  0925  0022               	movlb	2	; select bank2
  2228  0926  00C3               	movwf	_send32_data^(0+256)
  2229  0927  3001               	movlw	1
  2230  0928  00C4               	movwf	(_send32_data+1)^(0+256)
  2231  0929  01E1               	clrf	_send32_count^(0+256)
  2232  092A  0AE1               	incf	_send32_count^(0+256),f
  2233                           
  2234                           ;asic.c: 49: Send32();
  2235  092B  2140  3188         	fcall	_Send32
  2236                           
  2237                           ;asic.c: 50: last_bit0 = last_bit1 = split;
  2238  092D  0021               	movlb	1	; select bank1
  2239  092E  0828               	movf	SendAsicData@split^(0+128),w
  2240  092F  0022               	movlb	2	; select bank2
  2241  0930  00DD               	movwf	_last_bit1^(0+256)
  2242  0931  00DC               	movwf	_last_bit0^(0+256)
  2243                           
  2244                           ;asic.c: 51: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  2245  0932  3020               	movlw	_NonceRanges& (0+255)
  2246  0933  00C3               	movwf	_send32_data^(0+256)
  2247  0934  3003               	movlw	3
  2248  0935  00C4               	movwf	(_send32_data+1)^(0+256)
  2249  0936  0023               	movlb	3	; select bank3
  2250  0937  086B               	movf	_BankSize^(0+384),w
  2251  0938  0022               	movlb	2	; select bank2
  2252  0939  00E1               	movwf	_send32_count^(0+256)
  2253                           
  2254                           ;asic.c: 52: Send32();
  2255  093A  2140               	fcall	_Send32
  2256                           
  2257                           ;asic.c: 53: LATC = 0xD8;;
  2258  093B  30D8               	movlw	216
  2259  093C  0022               	movlb	2	; select bank2
  2260  093D  008E               	movwf	14	;volatile
  2261                           
  2262                           ;asic.c: 54: GIE = 1;
  2263  093E  178B               	bsf	11,7	;volatile
  2264  093F  0008               	return
  2265  0940                     __end_of_SendAsicData:	
  2266  0940                     __ptext2454:	
  2267 ;; *************** function _Send32 *****************
  2268 ;; Defined at:
  2269 ;;		line 58 in file "asic.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;		None
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;		None
  2274 ;; Return value:  Size  Location     Type
  2275 ;;		None               void
  2276 ;; Registers used:
  2277 ;;		None
  2278 ;; Tracked objects:
  2279 ;;		On entry : 1F/2
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: FFE00/0
  2282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2287 ;;Total ram usage:        0 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:   11
  2290 ;; This function calls:
  2291 ;;		Nothing
  2292 ;; This function is called by:
  2293 ;;		_SendAsicData
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           
  2298                           ;psect for function _Send32
  2299  0940                     _Send32:	
  2300                           
  2301                           ; Regs used in _Send32: []
  2302  0940  0022               	banksel	270	;# 
  2303  0941  0843               	movf	_send32_data& (0+127),w	;# 
  2304  0942  0086               	movwf	6	;# 
  2305  0943  0844               	movf	(_send32_data+1)& (0+127),w	;# 
  2306  0944  0087               	movwf	7	;# 
  2307  0945                     next_word:	
  2308                           
  2309                           ;# 
  2310  0945  3048               	movlw	72	;# 
  2311  0946  018E               	clrf	14	;# 
  2312  0947  1801               	btfsc	1,0	;# 
  2313  0948  3090               	movlw	144	;# 
  2314  0949  008E               	movwf	14	;# 
  2315  094A  3048               	movlw	72	;# 
  2316  094B  018E               	clrf	14	;# 
  2317  094C  1881               	btfsc	1,1	;# 
  2318  094D  3090               	movlw	144	;# 
  2319  094E  008E               	movwf	14	;# 
  2320  094F  3048               	movlw	72	;# 
  2321  0950  018E               	clrf	14	;# 
  2322  0951  1901               	btfsc	1,2	;# 
  2323  0952  3090               	movlw	144	;# 
  2324  0953  008E               	movwf	14	;# 
  2325  0954  3048               	movlw	72	;# 
  2326  0955  018E               	clrf	14	;# 
  2327  0956  1981               	btfsc	1,3	;# 
  2328  0957  3090               	movlw	144	;# 
  2329  0958  008E               	movwf	14	;# 
  2330  0959  3048               	movlw	72	;# 
  2331  095A  018E               	clrf	14	;# 
  2332  095B  1A01               	btfsc	1,4	;# 
  2333  095C  3090               	movlw	144	;# 
  2334  095D  008E               	movwf	14	;# 
  2335  095E  3048               	movlw	72	;# 
  2336  095F  018E               	clrf	14	;# 
  2337  0960  1A81               	btfsc	1,5	;# 
  2338  0961  3090               	movlw	144	;# 
  2339  0962  008E               	movwf	14	;# 
  2340  0963  3048               	movlw	72	;# 
  2341  0964  018E               	clrf	14	;# 
  2342  0965  1B01               	btfsc	1,6	;# 
  2343  0966  3090               	movlw	144	;# 
  2344  0967  008E               	movwf	14	;# 
  2345  0968  3048               	movlw	72	;# 
  2346  0969  018E               	clrf	14	;# 
  2347  096A  1B81               	btfsc	1,7	;# 
  2348  096B  3090               	movlw	144	;# 
  2349  096C  008E               	movwf	14	;# 
  2350  096D  3141               	addfsr 1,1	;# 
  2351  096E  3048               	movlw	72	;# 
  2352  096F  018E               	clrf	14	;# 
  2353  0970  1801               	btfsc	1,0	;# 
  2354  0971  3090               	movlw	144	;# 
  2355  0972  008E               	movwf	14	;# 
  2356  0973  3048               	movlw	72	;# 
  2357  0974  018E               	clrf	14	;# 
  2358  0975  1881               	btfsc	1,1	;# 
  2359  0976  3090               	movlw	144	;# 
  2360  0977  008E               	movwf	14	;# 
  2361  0978  3048               	movlw	72	;# 
  2362  0979  018E               	clrf	14	;# 
  2363  097A  1901               	btfsc	1,2	;# 
  2364  097B  3090               	movlw	144	;# 
  2365  097C  008E               	movwf	14	;# 
  2366  097D  3048               	movlw	72	;# 
  2367  097E  018E               	clrf	14	;# 
  2368  097F  1981               	btfsc	1,3	;# 
  2369  0980  3090               	movlw	144	;# 
  2370  0981  008E               	movwf	14	;# 
  2371  0982  3048               	movlw	72	;# 
  2372  0983  018E               	clrf	14	;# 
  2373  0984  1A01               	btfsc	1,4	;# 
  2374  0985  3090               	movlw	144	;# 
  2375  0986  008E               	movwf	14	;# 
  2376  0987  3048               	movlw	72	;# 
  2377  0988  018E               	clrf	14	;# 
  2378  0989  1A81               	btfsc	1,5	;# 
  2379  098A  3090               	movlw	144	;# 
  2380  098B  008E               	movwf	14	;# 
  2381  098C  3048               	movlw	72	;# 
  2382  098D  018E               	clrf	14	;# 
  2383  098E  1B01               	btfsc	1,6	;# 
  2384  098F  3090               	movlw	144	;# 
  2385  0990  008E               	movwf	14	;# 
  2386  0991  3048               	movlw	72	;# 
  2387  0992  018E               	clrf	14	;# 
  2388  0993  1B81               	btfsc	1,7	;# 
  2389  0994  3090               	movlw	144	;# 
  2390  0995  008E               	movwf	14	;# 
  2391  0996  3141               	addfsr 1,1	;# 
  2392  0997  3048               	movlw	72	;# 
  2393  0998  018E               	clrf	14	;# 
  2394  0999  1801               	btfsc	1,0	;# 
  2395  099A  3090               	movlw	144	;# 
  2396  099B  008E               	movwf	14	;# 
  2397  099C  3048               	movlw	72	;# 
  2398  099D  018E               	clrf	14	;# 
  2399  099E  1881               	btfsc	1,1	;# 
  2400  099F  3090               	movlw	144	;# 
  2401  09A0  008E               	movwf	14	;# 
  2402  09A1  3048               	movlw	72	;# 
  2403  09A2  018E               	clrf	14	;# 
  2404  09A3  1901               	btfsc	1,2	;# 
  2405  09A4  3090               	movlw	144	;# 
  2406  09A5  008E               	movwf	14	;# 
  2407  09A6  3048               	movlw	72	;# 
  2408  09A7  018E               	clrf	14	;# 
  2409  09A8  1981               	btfsc	1,3	;# 
  2410  09A9  3090               	movlw	144	;# 
  2411  09AA  008E               	movwf	14	;# 
  2412  09AB  3048               	movlw	72	;# 
  2413  09AC  018E               	clrf	14	;# 
  2414  09AD  1A01               	btfsc	1,4	;# 
  2415  09AE  3090               	movlw	144	;# 
  2416  09AF  008E               	movwf	14	;# 
  2417  09B0  3048               	movlw	72	;# 
  2418  09B1  018E               	clrf	14	;# 
  2419  09B2  1A81               	btfsc	1,5	;# 
  2420  09B3  3090               	movlw	144	;# 
  2421  09B4  008E               	movwf	14	;# 
  2422  09B5  3048               	movlw	72	;# 
  2423  09B6  018E               	clrf	14	;# 
  2424  09B7  1B01               	btfsc	1,6	;# 
  2425  09B8  3090               	movlw	144	;# 
  2426  09B9  008E               	movwf	14	;# 
  2427  09BA  3048               	movlw	72	;# 
  2428  09BB  018E               	clrf	14	;# 
  2429  09BC  1B81               	btfsc	1,7	;# 
  2430  09BD  3090               	movlw	144	;# 
  2431  09BE  008E               	movwf	14	;# 
  2432  09BF  3141               	addfsr 1,1	;# 
  2433  09C0  3048               	movlw	72	;# 
  2434  09C1  018E               	clrf	14	;# 
  2435  09C2  1801               	btfsc	1,0	;# 
  2436  09C3  3090               	movlw	144	;# 
  2437  09C4  008E               	movwf	14	;# 
  2438  09C5  3048               	movlw	72	;# 
  2439  09C6  018E               	clrf	14	;# 
  2440  09C7  1881               	btfsc	1,1	;# 
  2441  09C8  3090               	movlw	144	;# 
  2442  09C9  008E               	movwf	14	;# 
  2443  09CA  3048               	movlw	72	;# 
  2444  09CB  018E               	clrf	14	;# 
  2445  09CC  1901               	btfsc	1,2	;# 
  2446  09CD  3090               	movlw	144	;# 
  2447  09CE  008E               	movwf	14	;# 
  2448  09CF  3048               	movlw	72	;# 
  2449  09D0  018E               	clrf	14	;# 
  2450  09D1  1981               	btfsc	1,3	;# 
  2451  09D2  3090               	movlw	144	;# 
  2452  09D3  008E               	movwf	14	;# 
  2453  09D4  3048               	movlw	72	;# 
  2454  09D5  018E               	clrf	14	;# 
  2455  09D6  1A01               	btfsc	1,4	;# 
  2456  09D7  3090               	movlw	144	;# 
  2457  09D8  008E               	movwf	14	;# 
  2458  09D9  3048               	movlw	72	;# 
  2459  09DA  018E               	clrf	14	;# 
  2460  09DB  1A81               	btfsc	1,5	;# 
  2461  09DC  3090               	movlw	144	;# 
  2462  09DD  008E               	movwf	14	;# 
  2463  09DE  3048               	movlw	72	;# 
  2464  09DF  018E               	clrf	14	;# 
  2465  09E0  1B01               	btfsc	1,6	;# 
  2466  09E1  3090               	movlw	144	;# 
  2467  09E2  008E               	movwf	14	;# 
  2468  09E3  085C               	movf	_last_bit0& (0+127),w	;# 
  2469  09E4  018E               	clrf	14	;# 
  2470  09E5  1B81               	btfsc	1,7	;# 
  2471  09E6  085D               	movf	_last_bit1& (0+127),w	;# 
  2472  09E7  008E               	movwf	14	;# 
  2473  09E8  3141               	addfsr 1,1	;# 
  2474  09E9  0BE1               	decfsz	_send32_count& (0+127),f	;# 
  2475  09EA  2945               	goto	next_word	;# 
  2476  09EB  0008               	return
  2477  09EC                     __end_of_Send32:	
  2478  09EC                     __ptext2442:	
  2479 ;; *************** function _ProcessIO *****************
  2480 ;; Defined at:
  2481 ;;		line 163 in file "main.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;		None
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  numBytesRead    1   78[BANK1 ] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;		None               void
  2488 ;; Registers used:
  2489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : 1D/3
  2492 ;;		On exit  : 1F/1
  2493 ;;		Unchanged: FFE00/0
  2494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2496 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2498 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2499 ;;Total ram usage:        1 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:   15
  2502 ;; This function calls:
  2503 ;;		_ProcessCmd
  2504 ;;		_getsUSBUSART
  2505 ;;		_I2CRelay
  2506 ;;		_CDCTxService
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           
  2513                           ;psect for function _ProcessIO
  2514  09EC                     _ProcessIO:	
  2515                           
  2516                           ;main.c: 164: BYTE numBytesRead;
  2517                           ;main.c: 166: if(USBDeviceState == DETACHED_STATE) {
  2518                           
  2519                           ; Regs used in _ProcessIO: [allreg]
  2520  09EC  0022               	movlb	2	; select bank2
  2521  09ED  08D1               	movf	_USBDeviceState^(0+256),f
  2522  09EE  1D03               	skipz
  2523  09EF  29F8               	goto	l7376
  2524                           
  2525                           ;main.c: 167: if(I2CCount > 0) {
  2526  09F0  084A               	movf	_I2CCount^(0+256),w
  2527  09F1  1903               	btfsc	3,2
  2528  09F2  2A13               	goto	l7388
  2529                           
  2530                           ;main.c: 168: ProcessCmd(USB_Out_Buffer);
  2531  09F3  3020               	movlw	_USB_Out_Buffer& (0+255)
  2532  09F4  2215  3188         	fcall	_ProcessCmd
  2533                           
  2534                           ;main.c: 169: I2CCount = 0;
  2535  09F6  01CA               	clrf	_I2CCount^(0+256)
  2536  09F7  2A13               	goto	l7388
  2537  09F8                     l7376:	
  2538                           
  2539                           ;main.c: 172: else if((cdc_trf_state == 0)) {
  2540  09F8  08D8               	movf	_cdc_trf_state^(0+256),f
  2541  09F9  1D03               	skipz
  2542  09FA  2A13               	goto	l7388
  2543                           
  2544                           ;main.c: 173: numBytesRead = getsUSBUSART(USB_Out_Buffer, 64);
  2545  09FB  3040               	movlw	64
  2546  09FC  0021               	movlb	1	; select bank1
  2547  09FD  00A7               	movwf	?_getsUSBUSART^(0+128)
  2548  09FE  3020               	movlw	_USB_Out_Buffer& (0+255)
  2549  09FF  2733  3188         	fcall	_getsUSBUSART
  2550  0A01  0021               	movlb	1	; select bank1
  2551  0A02  00EE               	movwf	ProcessIO@numBytesRead^(0+128)
  2552                           
  2553                           ;main.c: 174: if(numBytesRead != 0) {
  2554  0A03  086E               	movf	ProcessIO@numBytesRead^(0+128),w
  2555  0A04  1903               	btfsc	3,2
  2556  0A05  2A13               	goto	l7388
  2557                           
  2558                           ;main.c: 175: if( USB_Out_Buffer[1] != 0x00 )
  2559  0A06  0028               	movlb	8	; select bank8
  2560  0A07  0821               	movf	(_USB_Out_Buffer^(0+1024)+1),w
  2561  0A08  1903               	btfsc	3,2
  2562  0A09  2A11               	goto	l7386
  2563                           
  2564                           ;main.c: 176: I2CRelay(USB_Out_Buffer, numBytesRead);
  2565  0A0A  0021               	movlb	1	; select bank1
  2566  0A0B  086E               	movf	ProcessIO@numBytesRead^(0+128),w
  2567  0A0C  00A0               	movwf	?_I2CRelay^(0+128)
  2568  0A0D  3020               	movlw	_USB_Out_Buffer& (0+255)
  2569  0A0E  271C  3188         	fcall	_I2CRelay
  2570  0A10  2A13               	goto	l7388
  2571  0A11                     l7386:	
  2572                           
  2573                           ;main.c: 177: else
  2574                           ;main.c: 178: ProcessCmd(USB_Out_Buffer);
  2575  0A11  3020               	movlw	_USB_Out_Buffer& (0+255)
  2576  0A12  2215               	fcall	_ProcessCmd
  2577  0A13                     l7388:	
  2578                           
  2579                           ;main.c: 179: }
  2580                           ;main.c: 180: }
  2581                           ;main.c: 182: CDCTxService();
  2582  0A13  3187  2F37         	ljmp	l6776
  2583  0A15                     __end_of_ProcessIO:	
  2584  0A15                     __ptext2447:	
  2585 ;; *************** function _ProcessCmd *****************
  2586 ;; Defined at:
  2587 ;;		line 48 in file "klondike.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  cmd             1    wreg     PTR unsigned char 
  2590 ;;		 -> USB_Out_Buffer(64), 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  cmd             1   77[BANK1 ] PTR unsigned char 
  2593 ;;		 -> USB_Out_Buffer(64), 
  2594 ;; Return value:  Size  Location     Type
  2595 ;;		None               void
  2596 ;; Registers used:
  2597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2598 ;; Tracked objects:
  2599 ;;		On entry : 15/2
  2600 ;;		On exit  : 1F/2
  2601 ;;		Unchanged: FFE00/0
  2602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2604 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  2605 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2606 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  2607 ;;Total ram usage:        5 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:   14
  2610 ;; This function calls:
  2611 ;;		___wmul
  2612 ;;		_AsicPreCalc
  2613 ;;		_SendCmdReply
  2614 ;;		_AsicPushWork
  2615 ;;		___lwdiv
  2616 ;; This function is called by:
  2617 ;;		_ProcessIO
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           
  2622                           ;psect for function _ProcessCmd
  2623  0A15                     _ProcessCmd:	
  2624                           
  2625                           ; Regs used in _ProcessCmd: [allreg]
  2626                           ;ProcessCmd@cmd stored from wreg
  2627  0A15  0021               	movlb	1	; select bank1
  2628  0A16  00ED               	movwf	ProcessCmd@cmd^(0+128)
  2629                           
  2630                           ;klondike.c: 51: switch(cmd[0]) {
  2631  0A17  2B93               	goto	l7206
  2632  0A18                     l7142:	
  2633                           
  2634                           ;klondike.c: 53: WorkQue[ (WorkNow + Status.WorkQC) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2635  0A18  086D               	movf	ProcessCmd@cmd^(0+128),w
  2636  0A19  3E02               	addlw	2
  2637  0A1A  0086               	movwf	6
  2638  0A1B  3004               	movlw	4	; select bank8/9
  2639  0A1C  0087               	movwf	7
  2640  0A1D  0022               	movlb	2	; select bank2
  2641  0A1E  0855               	movf	_WorkNow^(0+256),w
  2642  0A1F  0021               	movlb	1	; select bank1
  2643  0A20  00A0               	movwf	?___wmul^(0+128)
  2644  0A21  01A1               	clrf	(?___wmul+1)^(0+128)
  2645  0A22  0023               	movlb	3	; select bank3
  2646  0A23  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2647  0A24  0021               	movlb	1	; select bank1
  2648  0A25  07A0               	addwf	?___wmul^(0+128),f
  2649  0A26  1803               	skipnc
  2650  0A27  0AA1               	incf	(?___wmul+1)^(0+128),f
  2651  0A28  3003               	movlw	3
  2652  0A29  05A0               	andwf	?___wmul^(0+128),f
  2653  0A2A  302D               	movlw	45
  2654  0A2B  01A1               	clrf	(?___wmul+1)^(0+128)
  2655  0A2C  00A2               	movwf	(?___wmul^(0+128)+2)
  2656  0A2D  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2657  0A2E  20D9  3188         	fcall	___wmul
  2658  0A30  303C               	movlw	60
  2659  0A31  00E9               	movwf	??_ProcessCmd^(0+128)
  2660  0A32  3023               	movlw	35
  2661  0A33  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2662  0A34  0820               	movf	?___wmul^(0+128),w
  2663  0A35  0769               	addwf	??_ProcessCmd^(0+128),w
  2664  0A36  0084               	movwf	4
  2665  0A37  0821               	movf	(?___wmul+1)^(0+128),w
  2666  0A38  3D6A               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2667  0A39  0085               	movwf	5
  2668  0A3A  302D               	movlw	45
  2669  0A3B  00FF               	movwf	127
  2670  0A3C                     u5230:	
  2671  0A3C  0016               	moviw fsr1++
  2672  0A3D  001A               	movwi fsr0++
  2673  0A3E  0BFF               	decfsz	127,f
  2674  0A3F  2A3C               	goto	u5230
  2675                           
  2676                           ;klondike.c: 54: AsicPreCalc(&WorkQue[WorkNow]);
  2677  0A40  303C               	movlw	60
  2678  0A41  00B0               	movwf	?_AsicPreCalc^(0+128)
  2679  0A42  3023               	movlw	35
  2680  0A43  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  2681  0A44  0022               	movlb	2	; select bank2
  2682  0A45  0855               	movf	_WorkNow^(0+256),w
  2683  0A46  0021               	movlb	1	; select bank1
  2684  0A47  00A0               	movwf	?___wmul^(0+128)
  2685  0A48  302D               	movlw	45
  2686  0A49  01A1               	clrf	(?___wmul+1)^(0+128)
  2687  0A4A  00A2               	movwf	(?___wmul^(0+128)+2)
  2688  0A4B  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2689  0A4C  20D9  3188         	fcall	___wmul
  2690  0A4E  0820               	movf	?___wmul^(0+128),w
  2691  0A4F  00E9               	movwf	??_ProcessCmd^(0+128)
  2692  0A50  0821               	movf	(?___wmul+1)^(0+128),w
  2693  0A51  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2694  0A52  0869               	movf	??_ProcessCmd^(0+128),w
  2695  0A53  07B0               	addwf	?_AsicPreCalc^(0+128),f
  2696  0A54  086A               	movf	(??_ProcessCmd^(0+128)+1),w
  2697  0A55  3DB1               	addwfc	(?_AsicPreCalc+1)^(0+128),f
  2698  0A56  23EA  3188         	fcall	_AsicPreCalc
  2699                           
  2700                           ;klondike.c: 55: SendCmdReply(cmd, (char *)&PrecalcHashes, sizeof(PrecalcHashes));
  2701  0A58  086D               	movf	ProcessCmd@cmd^(0+128),w
  2702  0A59  00A2               	movwf	?_SendCmdReply^(0+128)
  2703  0A5A  3004               	movlw	4
  2704  0A5B  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2705  0A5C  30AF               	movlw	_PrecalcHashes& (0+255)
  2706  0A5D  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2707  0A5E  3001               	movlw	1
  2708  0A5F  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  2709  0A60  3018               	movlw	24
  2710  0A61  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2711  0A62  23B4  3188         	fcall	_SendCmdReply
  2712                           
  2713                           ;klondike.c: 56: break;
  2714  0A64  2BB1               	goto	l825
  2715  0A65                     l7148:	
  2716                           
  2717                           ;klondike.c: 58: if( Status.WorkQC < 4-1 ) {
  2718  0A65  3003               	movlw	3
  2719  0A66  0023               	movlb	3	; select bank3
  2720  0A67  0256               	subwf	(_Status^(0+384)+3),w	;volatile
  2721  0A68  1803               	skipnc
  2722  0A69  2AB2               	goto	l827
  2723                           
  2724                           ;klondike.c: 59: WorkQue[ (WorkNow + Status.WorkQC) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2725  0A6A  0021               	movlb	1	; select bank1
  2726  0A6B  086D               	movf	ProcessCmd@cmd^(0+128),w
  2727  0A6C  3E02               	addlw	2
  2728  0A6D  0086               	movwf	6
  2729  0A6E  3004               	movlw	4	; select bank8/9
  2730  0A6F  0087               	movwf	7
  2731  0A70  0022               	movlb	2	; select bank2
  2732  0A71  0855               	movf	_WorkNow^(0+256),w
  2733  0A72  0021               	movlb	1	; select bank1
  2734  0A73  00A0               	movwf	?___wmul^(0+128)
  2735  0A74  01A1               	clrf	(?___wmul+1)^(0+128)
  2736  0A75  0023               	movlb	3	; select bank3
  2737  0A76  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2738  0A77  0021               	movlb	1	; select bank1
  2739  0A78  07A0               	addwf	?___wmul^(0+128),f
  2740  0A79  1803               	skipnc
  2741  0A7A  0AA1               	incf	(?___wmul+1)^(0+128),f
  2742  0A7B  3003               	movlw	3
  2743  0A7C  05A0               	andwf	?___wmul^(0+128),f
  2744  0A7D  302D               	movlw	45
  2745  0A7E  01A1               	clrf	(?___wmul+1)^(0+128)
  2746  0A7F  00A2               	movwf	(?___wmul^(0+128)+2)
  2747  0A80  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2748  0A81  20D9  3188         	fcall	___wmul
  2749  0A83  303C               	movlw	60
  2750  0A84  00E9               	movwf	??_ProcessCmd^(0+128)
  2751  0A85  3023               	movlw	35
  2752  0A86  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2753  0A87  0820               	movf	?___wmul^(0+128),w
  2754  0A88  0769               	addwf	??_ProcessCmd^(0+128),w
  2755  0A89  0084               	movwf	4
  2756  0A8A  0821               	movf	(?___wmul+1)^(0+128),w
  2757  0A8B  3D6A               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2758  0A8C  0085               	movwf	5
  2759  0A8D  302D               	movlw	45
  2760  0A8E  00FF               	movwf	127
  2761  0A8F                     u5250:	
  2762  0A8F  0016               	moviw fsr1++
  2763  0A90  001A               	movwi fsr0++
  2764  0A91  0BFF               	decfsz	127,f
  2765  0A92  2A8F               	goto	u5250
  2766                           
  2767                           ;klondike.c: 60: if(Status.WorkQC++ == 0) {
  2768  0A93  0023               	movlb	3	; select bank3
  2769  0A94  0AD6               	incf	(_Status^(0+384)+3),f	;volatile
  2770  0A95  0B56               	decfsz	(_Status^(0+384)+3),w	;volatile
  2771  0A96  2AB2               	goto	l827
  2772  0A97                     L7:	
  2773                           
  2774                           ;klondike.c: 61: AsicPreCalc(&WorkQue[WorkNow]);
  2775  0A97  303C               	movlw	60
  2776  0A98  0021               	movlb	1	; select bank1
  2777  0A99  00B0               	movwf	?_AsicPreCalc^(0+128)
  2778  0A9A  3023               	movlw	35
  2779  0A9B  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  2780  0A9C  0022               	movlb	2	; select bank2
  2781  0A9D  0855               	movf	_WorkNow^(0+256),w
  2782  0A9E  0021               	movlb	1	; select bank1
  2783  0A9F  00A0               	movwf	?___wmul^(0+128)
  2784  0AA0  302D               	movlw	45
  2785  0AA1  01A1               	clrf	(?___wmul+1)^(0+128)
  2786  0AA2  00A2               	movwf	(?___wmul^(0+128)+2)
  2787  0AA3  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2788  0AA4  20D9  3188         	fcall	___wmul
  2789  0AA6  0820               	movf	?___wmul^(0+128),w
  2790  0AA7  00E9               	movwf	??_ProcessCmd^(0+128)
  2791  0AA8  0821               	movf	(?___wmul+1)^(0+128),w
  2792  0AA9  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2793  0AAA  0869               	movf	??_ProcessCmd^(0+128),w
  2794  0AAB  07B0               	addwf	?_AsicPreCalc^(0+128),f
  2795  0AAC  086A               	movf	(??_ProcessCmd^(0+128)+1),w
  2796  0AAD  3DB1               	addwfc	(?_AsicPreCalc+1)^(0+128),f
  2797  0AAE  23EA  3188         	fcall	_AsicPreCalc
  2798                           
  2799                           ;klondike.c: 62: AsicPushWork();
  2800  0AB0  2082  3188         	fcall	_AsicPushWork
  2801  0AB2                     l827:	
  2802                           
  2803                           ;klondike.c: 63: }
  2804                           ;klondike.c: 64: }
  2805                           ;klondike.c: 65: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  2806  0AB2  0021               	movlb	1	; select bank1
  2807  0AB3  086D               	movf	ProcessCmd@cmd^(0+128),w
  2808  0AB4  00A2               	movwf	?_SendCmdReply^(0+128)
  2809  0AB5  3004               	movlw	4
  2810  0AB6  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2811  0AB7  30D3               	movlw	_Status& (0+255)
  2812  0AB8  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2813  0AB9  3001               	movlw	1
  2814  0ABA  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  2815  0ABB  300B               	movlw	11
  2816  0ABC  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2817  0ABD  23B4  3188         	fcall	_SendCmdReply
  2818                           
  2819                           ;klondike.c: 66: break;
  2820  0ABF  2BB1               	goto	l825
  2821  0AC0                     l7156:	
  2822                           
  2823                           ;klondike.c: 68: Status.WorkQC = WorkNow = 0;
  2824  0AC0  0022               	movlb	2	; select bank2
  2825  0AC1  01D5               	clrf	_WorkNow^(0+256)
  2826  0AC2  0023               	movlb	3	; select bank3
  2827  0AC3  01D6               	clrf	(_Status^(0+384)+3)	;volatile
  2828                           
  2829                           ;klondike.c: 69: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  2830  0AC4  0021               	movlb	1	; select bank1
  2831  0AC5  086D               	movf	ProcessCmd@cmd^(0+128),w
  2832  0AC6  3E02               	addlw	2
  2833  0AC7  0086               	movwf	6
  2834  0AC8  3004               	movlw	4	; select bank8/9
  2835  0AC9  0087               	movwf	7
  2836  0ACA  0022               	movlb	2	; select bank2
  2837  0ACB  0855               	movf	_WorkNow^(0+256),w
  2838  0ACC  0021               	movlb	1	; select bank1
  2839  0ACD  00A0               	movwf	?___wmul^(0+128)
  2840  0ACE  01A1               	clrf	(?___wmul+1)^(0+128)
  2841  0ACF  0023               	movlb	3	; select bank3
  2842  0AD0  0856               	movf	(_Status^(0+384)+3),w	;volatile
  2843  0AD1  0021               	movlb	1	; select bank1
  2844  0AD2  07A0               	addwf	?___wmul^(0+128),f
  2845  0AD3  1803               	skipnc
  2846  0AD4  0AA1               	incf	(?___wmul+1)^(0+128),f
  2847  0AD5  3003               	movlw	3
  2848  0AD6  05A0               	andwf	?___wmul^(0+128),f
  2849  0AD7  302D               	movlw	45
  2850  0AD8  01A1               	clrf	(?___wmul+1)^(0+128)
  2851  0AD9  00A2               	movwf	(?___wmul^(0+128)+2)
  2852  0ADA  01A3               	clrf	((?___wmul+1)^(0+128)+2)
  2853  0ADB  20D9  3188         	fcall	___wmul
  2854  0ADD  303C               	movlw	60
  2855  0ADE  00E9               	movwf	??_ProcessCmd^(0+128)
  2856  0ADF  3023               	movlw	35
  2857  0AE0  00EA               	movwf	(??_ProcessCmd^(0+128)+1)
  2858  0AE1  0820               	movf	?___wmul^(0+128),w
  2859  0AE2  0769               	addwf	??_ProcessCmd^(0+128),w
  2860  0AE3  0084               	movwf	4
  2861  0AE4  0821               	movf	(?___wmul+1)^(0+128),w
  2862  0AE5  3D6A               	addwfc	(??_ProcessCmd+1)^(0+128),w
  2863  0AE6  0085               	movwf	5
  2864  0AE7  302D               	movlw	45
  2865  0AE8  00FF               	movwf	127
  2866  0AE9                     u5270:	
  2867  0AE9  0016               	moviw fsr1++
  2868  0AEA  001A               	movwi fsr0++
  2869  0AEB  0BFF               	decfsz	127,f
  2870  0AEC  2AE9               	goto	u5270
  2871  0AED  0023               	movlb	3	; select bank3
  2872  0AEE  0AD6               	incf	(_Status^(0+384)+3),f	;volatile
  2873  0AEF  2A97               	goto	L7
  2874  0AF0                     l7168:	
  2875                           ;klondike.c: 71: AsicPushWork();
  2876                           
  2877                           ;klondike.c: 70: AsicPreCalc(&WorkQue[WorkNow]);
  2878                           
  2879                           
  2880                           ;klondike.c: 75: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  2881  0AF0  086D               	movf	ProcessCmd@cmd^(0+128),w
  2882  0AF1  00A2               	movwf	?_SendCmdReply^(0+128)
  2883  0AF2  3004               	movlw	4
  2884  0AF3  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  2885  0AF4  3055               	movlw	low (_ID| (0+32768))
  2886  0AF5  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  2887  0AF6  3091               	movlw	high (_ID| (0+32768))
  2888  0AF7  00A5               	movwf	((?_SendCmdReply+2)^(0+128)+1)
  2889  0AF8  300D               	movlw	13
  2890  0AF9  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  2891  0AFA  23B4  3188         	fcall	_SendCmdReply
  2892                           
  2893                           ;klondike.c: 76: break;
  2894  0AFC  2BB1               	goto	l825
  2895  0AFD                     l7172:	
  2896                           
  2897                           ;klondike.c: 81: if( cmd[2] != 0 ) {
  2898  0AFD  086D               	movf	ProcessCmd@cmd^(0+128),w
  2899  0AFE  3E02               	addlw	2
  2900  0AFF  0086               	movwf	6
  2901  0B00  3004               	movlw	4	; select bank8/9
  2902  0B01  0087               	movwf	7
  2903  0B02  0801               	movf	1,w
  2904  0B03  3A00               	xorlw	0
  2905  0B04  1903               	skipnz
  2906  0B05  2B54               	goto	l7190
  2907                           
  2908                           ;klondike.c: 82: Cfg = *(WORKCFG *)(cmd+2);
  2909  0B06  086D               	movf	ProcessCmd@cmd^(0+128),w
  2910  0B07  3E02               	addlw	2
  2911  0B08  0086               	movwf	6
  2912  0B09  30E6               	movlw	low _Cfg
  2913  0B0A  0084               	movwf	4
  2914  0B0B  3001               	movlw	high _Cfg
  2915  0B0C  0085               	movwf	5
  2916  0B0D  3005               	movlw	5
  2917  0B0E  00FF               	movwf	127
  2918  0B0F                     u5290:	
  2919  0B0F  0016               	moviw fsr1++
  2920  0B10  001A               	movwi fsr0++
  2921  0B11  0BFF               	decfsz	127,f
  2922  0B12  2B0F               	goto	u5290
  2923                           
  2924                           ;klondike.c: 83: if(Cfg.HashClock < 500)
  2925  0B13  3001               	movlw	1
  2926  0B14  0023               	movlb	3	; select bank3
  2927  0B15  0267               	subwf	(_Cfg+1)^(0+384),w
  2928  0B16  30F4               	movlw	244
  2929  0B17  1903               	skipnz
  2930  0B18  0266               	subwf	_Cfg^(0+384),w
  2931  0B19  1803               	skipnc
  2932  0B1A  2B1F               	goto	l834
  2933                           
  2934                           ;klondike.c: 84: Cfg.HashClock = 500;
  2935  0B1B  30F4               	movlw	244
  2936  0B1C  00E6               	movwf	_Cfg^(0+384)
  2937  0B1D  3001               	movlw	1
  2938  0B1E  00E7               	movwf	(_Cfg^(0+384)+1)
  2939  0B1F                     l834:	
  2940                           
  2941                           ;klondike.c: 85: if(Cfg.HashClock > 900)
  2942  0B1F  3003               	movlw	3
  2943  0B20  0267               	subwf	(_Cfg+1)^(0+384),w
  2944  0B21  3085               	movlw	133
  2945  0B22  1903               	skipnz
  2946  0B23  0266               	subwf	_Cfg^(0+384),w
  2947  0B24  1C03               	skipc
  2948  0B25  2B2A               	goto	l835
  2949                           
  2950                           ;klondike.c: 86: Cfg.HashClock = 900;
  2951  0B26  3084               	movlw	132
  2952  0B27  00E6               	movwf	_Cfg^(0+384)
  2953  0B28  3003               	movlw	3
  2954  0B29  00E7               	movwf	(_Cfg^(0+384)+1)
  2955  0B2A                     l835:	
  2956                           
  2957                           ;klondike.c: 87: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030017;
  2958  0B2A  0866               	movf	_Cfg^(0+384),w
  2959  0B2B  00DE               	movwf	_ClockCfg^(0+384)
  2960  0B2C  0867               	movf	(_Cfg+1)^(0+384),w
  2961  0B2D  00DF               	movwf	(_ClockCfg^(0+384)+1)
  2962  0B2E  3012               	movlw	18
  2963  0B2F  01E0               	clrf	(_ClockCfg^(0+384)+2)
  2964  0B30  01E1               	clrf	(_ClockCfg^(0+384)+3)
  2965  0B31                     u5325:	
  2966  0B31  35DE               	lslf	_ClockCfg^(0+384),f
  2967  0B32  0DDF               	rlf	(_ClockCfg+1)^(0+384),f
  2968  0B33  0DE0               	rlf	(_ClockCfg+2)^(0+384),f
  2969  0B34  0DE1               	rlf	(_ClockCfg+3)^(0+384),f
  2970  0B35  0B89               	decfsz	9,f
  2971  0B36  2B31               	goto	u5325
  2972  0B37  3017               	movlw	23
  2973  0B38  04DE               	iorwf	_ClockCfg^(0+384),f
  2974  0B39  3000               	movlw	0
  2975  0B3A  04DF               	iorwf	(_ClockCfg+1)^(0+384),f
  2976  0B3B  3003               	movlw	3
  2977  0B3C  04E0               	iorwf	(_ClockCfg+2)^(0+384),f
  2978  0B3D  3000               	movlw	0
  2979  0B3E  04E1               	iorwf	(_ClockCfg+3)^(0+384),f
  2980                           
  2981                           ;klondike.c: 88: HashTime = 256-(24000/Cfg.HashClock);
  2982  0B3F  0867               	movf	(_Cfg+1)^(0+384),w
  2983  0B40  0021               	movlb	1	; select bank1
  2984  0B41  00A1               	movwf	(?___lwdiv+1)^(0+128)
  2985  0B42  0023               	movlb	3	; select bank3
  2986  0B43  0866               	movf	_Cfg^(0+384),w
  2987  0B44  0021               	movlb	1	; select bank1
  2988  0B45  00A0               	movwf	?___lwdiv^(0+128)
  2989  0B46  30C0               	movlw	192
  2990  0B47  00A2               	movwf	(?___lwdiv^(0+128)+2)
  2991  0B48  305D               	movlw	93
  2992  0B49  00A3               	movwf	(?___lwdiv^(0+128)+3)
  2993  0B4A  26F7  3188         	fcall	___lwdiv
  2994  0B4C  0820               	movf	?___lwdiv^(0+128),w
  2995  0B4D  3C00               	sublw	0
  2996  0B4E  0022               	movlb	2	; select bank2
  2997  0B4F  00EF               	movwf	_HashTime^(0+256)
  2998                           
  2999                           ;klondike.c: 89: PWM1DCH = Cfg.FanTarget;
  3000  0B50  0023               	movlb	3	; select bank3
  3001  0B51  086A               	movf	(_Cfg^(0+384)+4),w
  3002  0B52  002C               	movlb	12	; select bank12
  3003  0B53  0092               	movwf	18	;volatile
  3004  0B54                     l7190:	
  3005                           
  3006                           ;klondike.c: 90: }
  3007                           ;klondike.c: 91: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  3008  0B54  0021               	movlb	1	; select bank1
  3009  0B55  086D               	movf	ProcessCmd@cmd^(0+128),w
  3010  0B56  00A2               	movwf	?_SendCmdReply^(0+128)
  3011  0B57  3004               	movlw	4
  3012  0B58  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3013  0B59  30E6               	movlw	_Cfg& (0+255)
  3014  0B5A  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3015  0B5B  3001               	movlw	1
  3016  0B5C  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3017  0B5D  3005               	movlw	5
  3018  0B5E  00A6               	movwf	(?_SendCmdReply^(0+128)+4)
  3019  0B5F  23B4  3188         	fcall	_SendCmdReply
  3020                           
  3021                           ;klondike.c: 92: break;
  3022  0B61  2BB1               	goto	l825
  3023  0B62                     l7192:	
  3024                           
  3025                           ;klondike.c: 94: LATAbits.LATA4 = (cmd[2] == '1');
  3026  0B62  086D               	movf	ProcessCmd@cmd^(0+128),w
  3027  0B63  3E02               	addlw	2
  3028  0B64  0086               	movwf	6
  3029  0B65  3004               	movlw	4	; select bank8/9
  3030  0B66  0087               	movwf	7
  3031  0B67  0801               	movf	1,w
  3032  0B68  3A31               	xorlw	49
  3033  0B69  3000               	movlw	0
  3034  0B6A  1903               	skipnz
  3035  0B6B  3001               	movlw	1
  3036  0B6C  00E9               	movwf	??_ProcessCmd^(0+128)
  3037  0B6D  0EE9               	swapf	??_ProcessCmd^(0+128),f
  3038  0B6E  0022               	movlb	2	; select bank2
  3039  0B6F  080C               	movf	12,w	;volatile
  3040  0B70  0021               	movlb	1	; select bank1
  3041  0B71  0669               	xorwf	??_ProcessCmd^(0+128),w
  3042  0B72  39EF               	andlw	-17
  3043  0B73  0669               	xorwf	??_ProcessCmd^(0+128),w
  3044  0B74  0022               	movlb	2	; select bank2
  3045  0B75  008C               	movwf	12	;volatile
  3046                           
  3047                           ;klondike.c: 95: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  3048  0B76  0021               	movlb	1	; select bank1
  3049  0B77  086D               	movf	ProcessCmd@cmd^(0+128),w
  3050  0B78  3E02               	addlw	2
  3051  0B79  0086               	movwf	6
  3052  0B7A  0801               	movf	1,w
  3053  0B7B  3A31               	xorlw	49
  3054  0B7C  1903               	skipnz
  3055  0B7D  2B80               	goto	l7198
  3056  0B7E  3044               	movlw	68
  3057  0B7F  2B81               	goto	L8
  3058  0B80                     l7198:	
  3059  0B80  3052               	movlw	82
  3060  0B81                     L8:	
  3061  0B81  00EB               	movwf	_ProcessCmd$3040^(0+128)
  3062  0B82  01EC               	clrf	(_ProcessCmd$3040+1)^(0+128)
  3063  0B83  0023               	movlb	3	; select bank3
  3064  0B84  00D3               	movwf	_Status^(0+384)	;volatile
  3065  0B85  2AB2               	goto	l827
  3066  0B86                     l7202:	
  3067                           
  3068                           ;klondike.c: 100: SendCmdReply(cmd, (char *)&I2CState, sizeof(I2CState));
  3069  0B86  086D               	movf	ProcessCmd@cmd^(0+128),w
  3070  0B87  00A2               	movwf	?_SendCmdReply^(0+128)
  3071  0B88  3004               	movlw	4
  3072  0B89  00A3               	movwf	(?_SendCmdReply+1)^(0+128)
  3073  0B8A  3068               	movlw	_I2CState& (0+255)
  3074  0B8B  00A4               	movwf	(?_SendCmdReply+2)^(0+128)
  3075  0B8C  3001               	movlw	1
  3076  0B8D  00A5               	movwf	(?_SendCmdReply+3)^(0+128)
  3077  0B8E  01A6               	clrf	(?_SendCmdReply^(0+128)+4)
  3078  0B8F  0AA6               	incf	(?_SendCmdReply^(0+128)+4),f
  3079  0B90  23B4  3188         	fcall	_SendCmdReply
  3080                           
  3081                           ;klondike.c: 104: break;
  3082  0B92  2BB1               	goto	l825
  3083  0B93                     l7206:	
  3084  0B93  086D               	movf	ProcessCmd@cmd^(0+128),w
  3085  0B94  0086               	movwf	6
  3086  0B95  3004               	movlw	4	; select bank8/9
  3087  0B96  0087               	movwf	7
  3088  0B97  0801               	movf	1,w
  3089                           
  3090                           ; Switch size 1, requested type "space"
  3091                           ; Number of cases is 8, Range of values is 65 to 90
  3092                           ; switch strategies available:
  3093                           ; Name         Instructions Cycles
  3094                           ; simple_byte           25    13 (average)
  3095                           ; direct_byte           61     9 (fixed)
  3096                           ; jumptable            263     9 (fixed)
  3097                           ;	Chosen strategy is simple_byte
  3098  0B98  3A41               	xorlw	65	; case 65
  3099  0B99  1903               	skipnz
  3100  0B9A  2AC0               	goto	l7156
  3101  0B9B  3A02               	xorlw	2	; case 67
  3102  0B9C  1903               	skipnz
  3103  0B9D  2AFD               	goto	l7172
  3104  0B9E  3A06               	xorlw	6	; case 69
  3105  0B9F  1903               	skipnz
  3106  0BA0  2B62               	goto	l7192
  3107  0BA1  3A0C               	xorlw	12	; case 73
  3108  0BA2  1903               	skipnz
  3109  0BA3  2AF0               	goto	l7168
  3110  0BA4  3A19               	xorlw	25	; case 80
  3111  0BA5  1903               	skipnz
  3112  0BA6  2A18               	goto	l7142
  3113  0BA7  3A03               	xorlw	3	; case 83
  3114  0BA8  1903               	skipnz
  3115  0BA9  2AB2               	goto	l827
  3116  0BAA  3A04               	xorlw	4	; case 87
  3117  0BAB  1903               	skipnz
  3118  0BAC  2A65               	goto	l7148
  3119  0BAD  3A0D               	xorlw	13	; case 90
  3120  0BAE  1903               	skipnz
  3121  0BAF  2B86               	goto	l7202
  3122  0BB0  2BB1               	goto	l825
  3123  0BB1                     l825:	
  3124                           
  3125                           ;klondike.c: 108: LATAbits.LATA5 = 1;;
  3126  0BB1  0022               	movlb	2	; select bank2
  3127  0BB2  168C               	bsf	12,5	;volatile
  3128  0BB3  0008               	return
  3129  0BB4                     __end_of_ProcessCmd:	
  3130  0BB4                     __ptext2448:	
  3131 ;; *************** function _SendCmdReply *****************
  3132 ;; Defined at:
  3133 ;;		line 186 in file "main.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  cmd             2    2[BANK1 ] PTR unsigned char 
  3136 ;;		 -> ResultRx@buf(7), USB_Out_Buffer(64), buf(16), 
  3137 ;;  data            2    4[BANK1 ] PTR unsigned char 
  3138 ;;		 -> ResultRx@buf(7), Cfg(5), ID(13), Status(11), 
  3139 ;;		 -> buf(16), I2CState(1), PrecalcHashes(24), 
  3140 ;;  count           1    6[BANK1 ] unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  n               1    9[BANK1 ] unsigned char 
  3143 ;; Return value:  Size  Location     Type
  3144 ;;		None               void
  3145 ;; Registers used:
  3146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 1F/1
  3149 ;;		On exit  : 1C/0
  3150 ;;		Unchanged: FFFE0/0
  3151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3152 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3154 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3155 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;Total ram usage:        8 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:   12
  3159 ;; This function calls:
  3160 ;;		_putUSBUSART
  3161 ;; This function is called by:
  3162 ;;		_ProcessCmd
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _SendCmdReply
  3168  0BB4                     _SendCmdReply:	
  3169                           
  3170                           ;main.c: 187: USB_In_Buffer[0] = cmd[0];
  3171                           
  3172                           ; Regs used in _SendCmdReply: [wreg-status,0+pclath+cstack]
  3173  0BB4  0822               	movf	SendCmdReply@cmd^(0+128),w
  3174  0BB5  0086               	movwf	6
  3175  0BB6  0823               	movf	(SendCmdReply@cmd+1)^(0+128),w
  3176  0BB7  0087               	movwf	7
  3177  0BB8  0801               	movf	1,w
  3178  0BB9  0027               	movlb	7	; select bank7
  3179  0BBA  00A0               	movwf	_USB_In_Buffer^(0+896)
  3180                           
  3181                           ;main.c: 188: USB_In_Buffer[1] = SlaveAddress;
  3182  0BBB  0022               	movlb	2	; select bank2
  3183  0BBC  084D               	movf	_SlaveAddress^(0+256),w
  3184  0BBD  0027               	movlb	7	; select bank7
  3185  0BBE  00A1               	movwf	(_USB_In_Buffer^(0+896)+1)
  3186                           
  3187                           ;main.c: 189: for(BYTE n=0; n < count; n++)
  3188  0BBF  0021               	movlb	1	; select bank1
  3189  0BC0  01A9               	clrf	SendCmdReply@n^(0+128)
  3190  0BC1                     l6994:	
  3191  0BC1  0826               	movf	SendCmdReply@count^(0+128),w
  3192  0BC2  0229               	subwf	SendCmdReply@n^(0+128),w
  3193  0BC3  1803               	btfsc	3,0
  3194  0BC4  2BD9               	goto	l6996
  3195                           
  3196                           ;main.c: 190: USB_In_Buffer[n+2] = data[n];
  3197  0BC5  0829               	movf	SendCmdReply@n^(0+128),w
  3198  0BC6  3EA2               	addlw	(_USB_In_Buffer+2)& (0+255)
  3199  0BC7  0086               	movwf	6
  3200  0BC8  3003               	movlw	3	; select bank7/8
  3201  0BC9  0087               	movwf	7
  3202  0BCA  0825               	movf	(SendCmdReply@data+1)^(0+128),w
  3203  0BCB  00A8               	movwf	(??_SendCmdReply^(0+128)+1)
  3204  0BCC  0824               	movf	SendCmdReply@data^(0+128),w
  3205  0BCD  00A7               	movwf	??_SendCmdReply^(0+128)
  3206  0BCE  0829               	movf	SendCmdReply@n^(0+128),w
  3207  0BCF  0727               	addwf	??_SendCmdReply^(0+128),w
  3208  0BD0  0084               	movwf	4
  3209  0BD1  0828               	movf	(??_SendCmdReply^(0+128)+1),w
  3210  0BD2  1803               	skipnc
  3211  0BD3  0A28               	incf	(??_SendCmdReply^(0+128)+1),w
  3212  0BD4  0085               	movwf	5
  3213  0BD5  0800               	movf	0,w	;code access
  3214  0BD6  0081               	movwf	1
  3215  0BD7  0AA9               	incf	SendCmdReply@n^(0+128),f
  3216  0BD8  2BC1               	goto	l6994
  3217  0BD9                     l6996:	
  3218                           
  3219                           ;main.c: 192: if(USBDeviceState == DETACHED_STATE) {
  3220  0BD9  0022               	movlb	2	; select bank2
  3221  0BDA  08D1               	movf	_USBDeviceState^(0+256),f
  3222  0BDB  1D03               	skipz
  3223  0BDC  2BE3               	goto	l7000
  3224                           
  3225                           ;main.c: 193: I2CCount = count+2;
  3226  0BDD  0021               	movlb	1	; select bank1
  3227  0BDE  0826               	movf	SendCmdReply@count^(0+128),w
  3228  0BDF  3E02               	addlw	2
  3229  0BE0  0022               	movlb	2	; select bank2
  3230  0BE1  00CA               	movwf	_I2CCount^(0+256)
  3231                           
  3232                           ;main.c: 194: }
  3233  0BE2  0008               	return
  3234  0BE3                     l7000:	
  3235                           
  3236                           ;main.c: 195: else
  3237                           ;main.c: 196: putUSBUSART(USB_In_Buffer, count+2);
  3238  0BE3  0021               	movlb	1	; select bank1
  3239  0BE4  0826               	movf	SendCmdReply@count^(0+128),w
  3240  0BE5  3E02               	addlw	2
  3241  0BE6  00A0               	movwf	?_putUSBUSART^(0+128)
  3242  0BE7  30A0               	movlw	_USB_In_Buffer& (0+255)
  3243  0BE8  3193  2B88         	ljmp	_putUSBUSART
  3244  0BEA                     __end_of_SendCmdReply:	
  3245  0BEA                     __ptext2455:	
  3246 ;; *************** function _AsicPreCalc *****************
  3247 ;; Defined at:
  3248 ;;		line 318 in file "asic.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  work            2   16[BANK1 ] PTR struct _worktask
  3251 ;;		 -> WorkQue(180), TestWork(45), 
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  m              32   30[BANK1 ] unsigned long [8]
  3254 ;;  x               4   66[BANK1 ] unsigned long 
  3255 ;;  y               4   62[BANK1 ] unsigned long 
  3256 ;;  z               4   26[BANK1 ] unsigned long 
  3257 ;;  n               1   70[BANK1 ] unsigned char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;		None               void
  3260 ;; Registers used:
  3261 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3262 ;; Tracked objects:
  3263 ;;		On entry : 1F/1
  3264 ;;		On exit  : 1F/1
  3265 ;;		Unchanged: FFFE0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3267 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3268 ;;      Locals:         0       0      45       0       0       0       0       0       0       0       0       0       
      +0       0
  3269 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  3270 ;;      Totals:         0       0      55       0       0       0       0       0       0       0       0       0       
      +0       0
  3271 ;;Total ram usage:       55 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:   12
  3274 ;; This function calls:
  3275 ;;		___bmul
  3276 ;;		_rotate
  3277 ;; This function is called by:
  3278 ;;		_ProcessCmd
  3279 ;;		_AsicPushWork
  3280 ;;		_DetectAsics
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           
  3285                           ;psect for function _AsicPreCalc
  3286  0BEA                     _AsicPreCalc:	
  3287  0BEA                     l6900:	
  3288                           ; Regs used in _AsicPreCalc: [wreg-status,0+pclath+cstack]
  3289                           
  3290                           
  3291                           ;asic.c: 319: const DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  3292                           ;asic.c: 320: DWORD x, y, z;
  3293                           ;asic.c: 321: DWORD m[8];
  3294                           ;asic.c: 322: BYTE n;
  3295                           ;asic.c: 324: for(n = 0; n < 8; n++)
  3296  0BEA  01E6               	clrf	AsicPreCalc@n^(0+128)
  3297  0BEB                     l6906:	
  3298                           
  3299                           ;asic.c: 325: m[n] = work->MidState[n];
  3300  0BEB  0866               	movf	AsicPreCalc@n^(0+128),w
  3301  0BEC  00B2               	movwf	??_AsicPreCalc^(0+128)
  3302  0BED  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3303  0BEE  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3304  0BEF  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3305  0BF0  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3306  0BF1  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3307  0BF2  0832               	movf	??_AsicPreCalc^(0+128),w
  3308  0BF3  0730               	addwf	AsicPreCalc@work^(0+128),w
  3309  0BF4  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3310  0BF5  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3311  0BF6  3D31               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  3312  0BF7  00B5               	movwf	(??_AsicPreCalc+3)^(0+128)
  3313  0BF8  3001               	movlw	1
  3314  0BF9  0734               	addwf	(??_AsicPreCalc+2)^(0+128),w
  3315  0BFA  0084               	movwf	4
  3316  0BFB  0835               	movf	((??_AsicPreCalc+2)^(0+128)+1),w
  3317  0BFC  1803               	skipnc
  3318  0BFD  0A35               	incf	((??_AsicPreCalc+2)^(0+128)+1),w
  3319  0BFE  0085               	movwf	5
  3320  0BFF  3F00               	moviw [0]fsr0
  3321  0C00  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3322  0C01  3F01               	moviw [1]fsr0
  3323  0C02  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3324  0C03  3F02               	moviw [2]fsr0
  3325  0C04  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3326  0C05  3F03               	moviw [3]fsr0
  3327  0C06  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3328  0C07  0866               	movf	AsicPreCalc@n^(0+128),w
  3329  0C08  0709               	addwf	9,w
  3330  0C09  0709               	addwf	9,w
  3331  0C0A  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3332  0C0B  0086               	movwf	6
  3333  0C0C  0187               	clrf	7
  3334  0C0D  0836               	movf	(??_AsicPreCalc+4)^(0+128),w
  3335  0C0E  3FC0               	movwi [0]fsr1
  3336  0C0F  0837               	movf	(??_AsicPreCalc+5)^(0+128),w
  3337  0C10  3FC1               	movwi [1]fsr1
  3338  0C11  0838               	movf	(??_AsicPreCalc+6)^(0+128),w
  3339  0C12  3FC2               	movwi [2]fsr1
  3340  0C13  0839               	movf	(??_AsicPreCalc+7)^(0+128),w
  3341  0C14  3FC3               	movwi [3]fsr1
  3342  0C15  3008               	movlw	8
  3343  0C16  0AE6               	incf	AsicPreCalc@n^(0+128),f
  3344  0C17  0266               	subwf	AsicPreCalc@n^(0+128),w
  3345  0C18  1C03               	skipc
  3346  0C19  2BEB               	goto	l6906
  3347                           
  3348                           ;asic.c: 327: for(n = 0; n < 3; n++) {
  3349  0C1A  01E6               	clrf	AsicPreCalc@n^(0+128)
  3350  0C1B                     l6918:	
  3351                           
  3352                           ;asic.c: 329: x = m[5-n] ^ m[6-n];
  3353  0C1B  30FC               	movlw	-4
  3354  0C1C  00A0               	movwf	?___bmul^(0+128)
  3355  0C1D  0866               	movf	AsicPreCalc@n^(0+128),w
  3356  0C1E  26B6  3188         	fcall	___bmul
  3357  0C20  3E18               	addlw	24
  3358  0C21  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3359  0C22  0086               	movwf	6
  3360  0C23  0187               	clrf	7
  3361  0C24  3F40               	moviw [0]fsr1
  3362  0C25  00B2               	movwf	??_AsicPreCalc^(0+128)
  3363  0C26  3F41               	moviw [1]fsr1
  3364  0C27  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3365  0C28  3F42               	moviw [2]fsr1
  3366  0C29  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3367  0C2A  3F43               	moviw [3]fsr1
  3368  0C2B  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3369  0C2C  30FC               	movlw	-4
  3370  0C2D  00A0               	movwf	?___bmul^(0+128)
  3371  0C2E  0866               	movf	AsicPreCalc@n^(0+128),w
  3372  0C2F  26B6  3188         	fcall	___bmul
  3373  0C31  3E14               	addlw	20
  3374  0C32  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3375  0C33  0086               	movwf	6
  3376  0C34  0187               	clrf	7
  3377  0C35  3F40               	moviw [0]fsr1
  3378  0C36  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3379  0C37  3F41               	moviw [1]fsr1
  3380  0C38  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3381  0C39  3F42               	moviw [2]fsr1
  3382  0C3A  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3383  0C3B  3F43               	moviw [3]fsr1
  3384  0C3C  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3385  0C3D  0832               	movf	??_AsicPreCalc^(0+128),w
  3386  0C3E  0636               	xorwf	(??_AsicPreCalc+4)^(0+128),w
  3387  0C3F  00E2               	movwf	AsicPreCalc@x^(0+128)
  3388  0C40  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3389  0C41  0637               	xorwf	(??_AsicPreCalc+5)^(0+128),w
  3390  0C42  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3391  0C43  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3392  0C44  0638               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  3393  0C45  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3394  0C46  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3395  0C47  0639               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  3396  0C48  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3397                           
  3398                           ;asic.c: 330: x = x & m[4-n];
  3399  0C49  30FC               	movlw	-4
  3400  0C4A  00A0               	movwf	?___bmul^(0+128)
  3401  0C4B  0866               	movf	AsicPreCalc@n^(0+128),w
  3402  0C4C  26B6  3188         	fcall	___bmul
  3403  0C4E  3E10               	addlw	16
  3404  0C4F  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3405  0C50  0086               	movwf	6
  3406  0C51  0187               	clrf	7
  3407  0C52  3F40               	moviw [0]fsr1
  3408  0C53  00B2               	movwf	??_AsicPreCalc^(0+128)
  3409  0C54  3F41               	moviw [1]fsr1
  3410  0C55  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3411  0C56  3F42               	moviw [2]fsr1
  3412  0C57  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3413  0C58  3F43               	moviw [3]fsr1
  3414  0C59  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3415  0C5A  0832               	movf	??_AsicPreCalc^(0+128),w
  3416  0C5B  05E2               	andwf	AsicPreCalc@x^(0+128),f
  3417  0C5C  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3418  0C5D  05E3               	andwf	(AsicPreCalc@x+1)^(0+128),f
  3419  0C5E  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3420  0C5F  05E4               	andwf	(AsicPreCalc@x+2)^(0+128),f
  3421  0C60  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3422  0C61  05E5               	andwf	(AsicPreCalc@x+3)^(0+128),f
  3423                           
  3424                           ;asic.c: 331: x = m[6-n] ^ x;
  3425  0C62  30FC               	movlw	-4
  3426  0C63  00A0               	movwf	?___bmul^(0+128)
  3427  0C64  0866               	movf	AsicPreCalc@n^(0+128),w
  3428  0C65  26B6  3188         	fcall	___bmul
  3429  0C67  3E18               	addlw	24
  3430  0C68  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3431  0C69  0086               	movwf	6
  3432  0C6A  0187               	clrf	7
  3433  0C6B  3F40               	moviw [0]fsr1
  3434  0C6C  00B2               	movwf	??_AsicPreCalc^(0+128)
  3435  0C6D  3F41               	moviw [1]fsr1
  3436  0C6E  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3437  0C6F  3F42               	moviw [2]fsr1
  3438  0C70  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3439  0C71  3F43               	moviw [3]fsr1
  3440  0C72  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3441  0C73  0832               	movf	??_AsicPreCalc^(0+128),w
  3442  0C74  06E2               	xorwf	AsicPreCalc@x^(0+128),f
  3443  0C75  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3444  0C76  06E3               	xorwf	(AsicPreCalc@x+1)^(0+128),f
  3445  0C77  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3446  0C78  06E4               	xorwf	(AsicPreCalc@x+2)^(0+128),f
  3447  0C79  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3448  0C7A  06E5               	xorwf	(AsicPreCalc@x+3)^(0+128),f
  3449                           
  3450                           ;asic.c: 332: x += K[n];
  3451  0C7B  0866               	movf	AsicPreCalc@n^(0+128),w
  3452  0C7C  00B2               	movwf	??_AsicPreCalc^(0+128)
  3453  0C7D  3021               	movlw	low (AsicPreCalc@K| (0+32768))
  3454  0C7E  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3455  0C7F  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3456  0C80  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3457  0C81  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3458  0C82  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3459  0C83  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3460  0C84  3090               	movlw	high (AsicPreCalc@K| (0+32768))
  3461  0C85  00B5               	movwf	((??_AsicPreCalc+2)^(0+128)+1)
  3462  0C86  0832               	movf	??_AsicPreCalc^(0+128),w
  3463  0C87  0734               	addwf	(??_AsicPreCalc+2)^(0+128),w
  3464  0C88  0086               	movwf	6
  3465  0C89  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3466  0C8A  3D35               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3467  0C8B  0087               	movwf	7
  3468  0C8C  3F40               	moviw [0]fsr1
  3469  0C8D  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3470  0C8E  3F41               	moviw [1]fsr1
  3471  0C8F  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3472  0C90  3F42               	moviw [2]fsr1
  3473  0C91  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3474  0C92  3F43               	moviw [3]fsr1
  3475  0C93  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3476                           
  3477                           ;asic.c: 333: x += work->Merkle[n];
  3478  0C94  0866               	movf	AsicPreCalc@n^(0+128),w
  3479  0C95  00B2               	movwf	??_AsicPreCalc^(0+128)
  3480  0C96  01B3               	clrf	(??_AsicPreCalc^(0+128)+1)
  3481  0C97  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3482  0C98  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3483  0C99  35B2               	lslf	??_AsicPreCalc^(0+128),f
  3484  0C9A  0DB3               	rlf	(??_AsicPreCalc^(0+128)+1),f
  3485  0C9B  0832               	movf	??_AsicPreCalc^(0+128),w
  3486  0C9C  0730               	addwf	AsicPreCalc@work^(0+128),w
  3487  0C9D  00B4               	movwf	(??_AsicPreCalc+2)^(0+128)
  3488  0C9E  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3489  0C9F  3D31               	addwfc	(AsicPreCalc@work+1)^(0+128),w
  3490  0CA0  00B5               	movwf	(??_AsicPreCalc+3)^(0+128)
  3491  0CA1  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3492  0CA2  3E21               	addlw	33
  3493  0CA3  0086               	movwf	6
  3494  0CA4  3000               	movlw	0
  3495  0CA5  3D35               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3496  0CA6  0087               	movwf	7
  3497  0CA7  3F40               	moviw [0]fsr1
  3498  0CA8  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3499  0CA9  3F41               	moviw [1]fsr1
  3500  0CAA  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3501  0CAB  3F42               	moviw [2]fsr1
  3502  0CAC  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3503  0CAD  3F43               	moviw [3]fsr1
  3504  0CAE  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3505                           
  3506                           ;asic.c: 334: x += m[7-n];
  3507  0CAF  30FC               	movlw	-4
  3508  0CB0  00A0               	movwf	?___bmul^(0+128)
  3509  0CB1  0866               	movf	AsicPreCalc@n^(0+128),w
  3510  0CB2  26B6  3188         	fcall	___bmul
  3511  0CB4  3E1C               	addlw	28
  3512  0CB5  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3513  0CB6  0086               	movwf	6
  3514  0CB7  0187               	clrf	7
  3515  0CB8  3F40               	moviw [0]fsr1
  3516  0CB9  07E2               	addwf	AsicPreCalc@x^(0+128),f
  3517  0CBA  3F41               	moviw [1]fsr1
  3518  0CBB  3DE3               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  3519  0CBC  3F42               	moviw [2]fsr1
  3520  0CBD  3DE4               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  3521  0CBE  3F43               	moviw [3]fsr1
  3522  0CBF  3DE5               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  3523                           
  3524                           ;asic.c: 335: y = rotate(m[4-n], 26);
  3525  0CC0  30FC               	movlw	-4
  3526  0CC1  00A0               	movwf	?___bmul^(0+128)
  3527  0CC2  0866               	movf	AsicPreCalc@n^(0+128),w
  3528  0CC3  26B6  3188         	fcall	___bmul
  3529  0CC5  3E10               	addlw	16
  3530  0CC6  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3531  0CC7  0086               	movwf	6
  3532  0CC8  0187               	clrf	7
  3533  0CC9  3F40               	moviw [0]fsr1
  3534  0CCA  00A3               	movwf	?_rotate^(0+128)
  3535  0CCB  3F41               	moviw [1]fsr1
  3536  0CCC  00A4               	movwf	(?_rotate+1)^(0+128)
  3537  0CCD  3F42               	moviw [2]fsr1
  3538  0CCE  00A5               	movwf	(?_rotate+2)^(0+128)
  3539  0CCF  3F43               	moviw [3]fsr1
  3540  0CD0  00A6               	movwf	(?_rotate+3)^(0+128)
  3541  0CD1  301A               	movlw	26
  3542  0CD2  00A7               	movwf	(?_rotate^(0+128)+4)
  3543  0CD3  26C2  3188         	fcall	_rotate
  3544  0CD5  0826               	movf	(?_rotate+3)^(0+128),w
  3545  0CD6  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3546  0CD7  0825               	movf	(?_rotate+2)^(0+128),w
  3547  0CD8  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3548  0CD9  0824               	movf	(?_rotate+1)^(0+128),w
  3549  0CDA  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3550  0CDB  0823               	movf	?_rotate^(0+128),w
  3551  0CDC  00DE               	movwf	AsicPreCalc@y^(0+128)
  3552                           
  3553                           ;asic.c: 336: z = rotate(m[4-n], 21);
  3554  0CDD  30FC               	movlw	-4
  3555  0CDE  00A0               	movwf	?___bmul^(0+128)
  3556  0CDF  0866               	movf	AsicPreCalc@n^(0+128),w
  3557  0CE0  26B6  3188         	fcall	___bmul
  3558  0CE2  3E10               	addlw	16
  3559  0CE3  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3560  0CE4  0086               	movwf	6
  3561  0CE5  0187               	clrf	7
  3562  0CE6  3F40               	moviw [0]fsr1
  3563  0CE7  00A3               	movwf	?_rotate^(0+128)
  3564  0CE8  3F41               	moviw [1]fsr1
  3565  0CE9  00A4               	movwf	(?_rotate+1)^(0+128)
  3566  0CEA  3F42               	moviw [2]fsr1
  3567  0CEB  00A5               	movwf	(?_rotate+2)^(0+128)
  3568  0CEC  3F43               	moviw [3]fsr1
  3569  0CED  00A6               	movwf	(?_rotate+3)^(0+128)
  3570  0CEE  3015               	movlw	21
  3571  0CEF  00A7               	movwf	(?_rotate^(0+128)+4)
  3572  0CF0  26C2  3188         	fcall	_rotate
  3573  0CF2  0826               	movf	(?_rotate+3)^(0+128),w
  3574  0CF3  00BD               	movwf	(AsicPreCalc@z+3)^(0+128)
  3575  0CF4  0825               	movf	(?_rotate+2)^(0+128),w
  3576  0CF5  00BC               	movwf	(AsicPreCalc@z+2)^(0+128)
  3577  0CF6  0824               	movf	(?_rotate+1)^(0+128),w
  3578  0CF7  00BB               	movwf	(AsicPreCalc@z+1)^(0+128)
  3579  0CF8  0823               	movf	?_rotate^(0+128),w
  3580  0CF9  00BA               	movwf	AsicPreCalc@z^(0+128)
  3581                           
  3582                           ;asic.c: 337: z = y^z;
  3583  0CFA  085E               	movf	AsicPreCalc@y^(0+128),w
  3584  0CFB  06BA               	xorwf	AsicPreCalc@z^(0+128),f
  3585  0CFC  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3586  0CFD  06BB               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  3587  0CFE  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3588  0CFF  06BC               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  3589  0D00  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3590  0D01  06BD               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  3591                           
  3592                           ;asic.c: 338: y = rotate(m[4-n], 7);
  3593  0D02  30FC               	movlw	-4
  3594  0D03  00A0               	movwf	?___bmul^(0+128)
  3595  0D04  0866               	movf	AsicPreCalc@n^(0+128),w
  3596  0D05  26B6  3188         	fcall	___bmul
  3597  0D07  3E10               	addlw	16
  3598  0D08  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3599  0D09  0086               	movwf	6
  3600  0D0A  0187               	clrf	7
  3601  0D0B  3F40               	moviw [0]fsr1
  3602  0D0C  00A3               	movwf	?_rotate^(0+128)
  3603  0D0D  3F41               	moviw [1]fsr1
  3604  0D0E  00A4               	movwf	(?_rotate+1)^(0+128)
  3605  0D0F  3F42               	moviw [2]fsr1
  3606  0D10  00A5               	movwf	(?_rotate+2)^(0+128)
  3607  0D11  3F43               	moviw [3]fsr1
  3608  0D12  00A6               	movwf	(?_rotate+3)^(0+128)
  3609  0D13  3007               	movlw	7
  3610  0D14  00A7               	movwf	(?_rotate^(0+128)+4)
  3611  0D15  26C2  3188         	fcall	_rotate
  3612  0D17  0826               	movf	(?_rotate+3)^(0+128),w
  3613  0D18  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3614  0D19  0825               	movf	(?_rotate+2)^(0+128),w
  3615  0D1A  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3616  0D1B  0824               	movf	(?_rotate+1)^(0+128),w
  3617  0D1C  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3618  0D1D  0823               	movf	?_rotate^(0+128),w
  3619  0D1E  00DE               	movwf	AsicPreCalc@y^(0+128)
  3620                           
  3621                           ;asic.c: 339: z = y^z;
  3622  0D1F  06BA               	xorwf	AsicPreCalc@z^(0+128),f
  3623  0D20  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3624  0D21  06BB               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  3625  0D22  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3626  0D23  06BC               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  3627  0D24  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3628  0D25  06BD               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  3629                           
  3630                           ;asic.c: 340: m[7-n] = z+x;
  3631  0D26  083A               	movf	AsicPreCalc@z^(0+128),w
  3632  0D27  0762               	addwf	AsicPreCalc@x^(0+128),w
  3633  0D28  00B2               	movwf	??_AsicPreCalc^(0+128)
  3634  0D29  083B               	movf	(AsicPreCalc@z+1)^(0+128),w
  3635  0D2A  3D63               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3636  0D2B  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3637  0D2C  083C               	movf	(AsicPreCalc@z+2)^(0+128),w
  3638  0D2D  3D64               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3639  0D2E  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3640  0D2F  083D               	movf	(AsicPreCalc@z+3)^(0+128),w
  3641  0D30  3D65               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3642  0D31  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3643  0D32  30FC               	movlw	-4
  3644  0D33  00A0               	movwf	?___bmul^(0+128)
  3645  0D34  0866               	movf	AsicPreCalc@n^(0+128),w
  3646  0D35  26B6  3188         	fcall	___bmul
  3647  0D37  3E1C               	addlw	28
  3648  0D38  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3649  0D39  0086               	movwf	6
  3650  0D3A  0187               	clrf	7
  3651  0D3B  0832               	movf	??_AsicPreCalc^(0+128),w
  3652  0D3C  3FC0               	movwi [0]fsr1
  3653  0D3D  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3654  0D3E  3FC1               	movwi [1]fsr1
  3655  0D3F  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3656  0D40  3FC2               	movwi [2]fsr1
  3657  0D41  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3658  0D42  3FC3               	movwi [3]fsr1
  3659                           
  3660                           ;asic.c: 341: m[3-n] = m[3-n] + m[7-n];
  3661  0D43  30FC               	movlw	-4
  3662  0D44  00A0               	movwf	?___bmul^(0+128)
  3663  0D45  0866               	movf	AsicPreCalc@n^(0+128),w
  3664  0D46  26B6  3188         	fcall	___bmul
  3665  0D48  3E1C               	addlw	28
  3666  0D49  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3667  0D4A  0086               	movwf	6
  3668  0D4B  0187               	clrf	7
  3669  0D4C  3F40               	moviw [0]fsr1
  3670  0D4D  00B2               	movwf	??_AsicPreCalc^(0+128)
  3671  0D4E  3F41               	moviw [1]fsr1
  3672  0D4F  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3673  0D50  3F42               	moviw [2]fsr1
  3674  0D51  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3675  0D52  3F43               	moviw [3]fsr1
  3676  0D53  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3677  0D54  30FC               	movlw	-4
  3678  0D55  00A0               	movwf	?___bmul^(0+128)
  3679  0D56  0866               	movf	AsicPreCalc@n^(0+128),w
  3680  0D57  26B6  3188         	fcall	___bmul
  3681  0D59  3E0C               	addlw	12
  3682  0D5A  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3683  0D5B  0086               	movwf	6
  3684  0D5C  0187               	clrf	7
  3685  0D5D  3F40               	moviw [0]fsr1
  3686  0D5E  07B2               	addwf	??_AsicPreCalc^(0+128),f
  3687  0D5F  3F41               	moviw [1]fsr1
  3688  0D60  3DB3               	addwfc	(??_AsicPreCalc^(0+128)+1),f
  3689  0D61  3F42               	moviw [2]fsr1
  3690  0D62  3DB4               	addwfc	(??_AsicPreCalc^(0+128)+2),f
  3691  0D63  3F43               	moviw [3]fsr1
  3692  0D64  3DB5               	addwfc	(??_AsicPreCalc^(0+128)+3),f
  3693  0D65  30FC               	movlw	-4
  3694  0D66  00A0               	movwf	?___bmul^(0+128)
  3695  0D67  0866               	movf	AsicPreCalc@n^(0+128),w
  3696  0D68  26B6  3188         	fcall	___bmul
  3697  0D6A  3E0C               	addlw	12
  3698  0D6B  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3699  0D6C  0086               	movwf	6
  3700  0D6D  0187               	clrf	7
  3701  0D6E  0832               	movf	??_AsicPreCalc^(0+128),w
  3702  0D6F  3FC0               	movwi [0]fsr1
  3703  0D70  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3704  0D71  3FC1               	movwi [1]fsr1
  3705  0D72  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3706  0D73  3FC2               	movwi [2]fsr1
  3707  0D74  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3708  0D75  3FC3               	movwi [3]fsr1
  3709                           
  3710                           ;asic.c: 342: x = rotate(m[((0-n)&7)], 30);
  3711  0D76  0866               	movf	AsicPreCalc@n^(0+128),w
  3712  0D77  3C00               	sublw	0
  3713  0D78  3907               	andlw	7
  3714  0D79  0709               	addwf	9,w
  3715  0D7A  0709               	addwf	9,w
  3716  0D7B  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3717  0D7C  0086               	movwf	6
  3718  0D7D  3F40               	moviw [0]fsr1
  3719  0D7E  00A3               	movwf	?_rotate^(0+128)
  3720  0D7F  3F41               	moviw [1]fsr1
  3721  0D80  00A4               	movwf	(?_rotate+1)^(0+128)
  3722  0D81  3F42               	moviw [2]fsr1
  3723  0D82  00A5               	movwf	(?_rotate+2)^(0+128)
  3724  0D83  3F43               	moviw [3]fsr1
  3725  0D84  00A6               	movwf	(?_rotate+3)^(0+128)
  3726  0D85  301E               	movlw	30
  3727  0D86  00A7               	movwf	(?_rotate^(0+128)+4)
  3728  0D87  26C2  3188         	fcall	_rotate
  3729  0D89  0826               	movf	(?_rotate+3)^(0+128),w
  3730  0D8A  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3731  0D8B  0825               	movf	(?_rotate+2)^(0+128),w
  3732  0D8C  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3733  0D8D  0824               	movf	(?_rotate+1)^(0+128),w
  3734  0D8E  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3735  0D8F  0823               	movf	?_rotate^(0+128),w
  3736  0D90  00E2               	movwf	AsicPreCalc@x^(0+128)
  3737                           
  3738                           ;asic.c: 343: y = rotate(m[((0-n)&7)], 19);
  3739  0D91  0866               	movf	AsicPreCalc@n^(0+128),w
  3740  0D92  3C00               	sublw	0
  3741  0D93  3907               	andlw	7
  3742  0D94  0709               	addwf	9,w
  3743  0D95  0709               	addwf	9,w
  3744  0D96  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3745  0D97  0086               	movwf	6
  3746  0D98  0187               	clrf	7
  3747  0D99  3F40               	moviw [0]fsr1
  3748  0D9A  00A3               	movwf	?_rotate^(0+128)
  3749  0D9B  3F41               	moviw [1]fsr1
  3750  0D9C  00A4               	movwf	(?_rotate+1)^(0+128)
  3751  0D9D  3F42               	moviw [2]fsr1
  3752  0D9E  00A5               	movwf	(?_rotate+2)^(0+128)
  3753  0D9F  3F43               	moviw [3]fsr1
  3754  0DA0  00A6               	movwf	(?_rotate+3)^(0+128)
  3755  0DA1  3013               	movlw	19
  3756  0DA2  00A7               	movwf	(?_rotate^(0+128)+4)
  3757  0DA3  26C2  3188         	fcall	_rotate
  3758  0DA5  0826               	movf	(?_rotate+3)^(0+128),w
  3759  0DA6  00E1               	movwf	(AsicPreCalc@y+3)^(0+128)
  3760  0DA7  0825               	movf	(?_rotate+2)^(0+128),w
  3761  0DA8  00E0               	movwf	(AsicPreCalc@y+2)^(0+128)
  3762  0DA9  0824               	movf	(?_rotate+1)^(0+128),w
  3763  0DAA  00DF               	movwf	(AsicPreCalc@y+1)^(0+128)
  3764  0DAB  0823               	movf	?_rotate^(0+128),w
  3765  0DAC  00DE               	movwf	AsicPreCalc@y^(0+128)
  3766                           
  3767                           ;asic.c: 344: y = y^x;
  3768  0DAD  0862               	movf	AsicPreCalc@x^(0+128),w
  3769  0DAE  06DE               	xorwf	AsicPreCalc@y^(0+128),f
  3770  0DAF  0863               	movf	(AsicPreCalc@x+1)^(0+128),w
  3771  0DB0  06DF               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  3772  0DB1  0864               	movf	(AsicPreCalc@x+2)^(0+128),w
  3773  0DB2  06E0               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  3774  0DB3  0865               	movf	(AsicPreCalc@x+3)^(0+128),w
  3775  0DB4  06E1               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  3776                           
  3777                           ;asic.c: 345: x = rotate(m[((0-n)&7)], 10);
  3778  0DB5  0866               	movf	AsicPreCalc@n^(0+128),w
  3779  0DB6  3C00               	sublw	0
  3780  0DB7  3907               	andlw	7
  3781  0DB8  0709               	addwf	9,w
  3782  0DB9  0709               	addwf	9,w
  3783  0DBA  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3784  0DBB  0086               	movwf	6
  3785  0DBC  0187               	clrf	7
  3786  0DBD  3F40               	moviw [0]fsr1
  3787  0DBE  00A3               	movwf	?_rotate^(0+128)
  3788  0DBF  3F41               	moviw [1]fsr1
  3789  0DC0  00A4               	movwf	(?_rotate+1)^(0+128)
  3790  0DC1  3F42               	moviw [2]fsr1
  3791  0DC2  00A5               	movwf	(?_rotate+2)^(0+128)
  3792  0DC3  3F43               	moviw [3]fsr1
  3793  0DC4  00A6               	movwf	(?_rotate+3)^(0+128)
  3794  0DC5  300A               	movlw	10
  3795  0DC6  00A7               	movwf	(?_rotate^(0+128)+4)
  3796  0DC7  26C2  3188         	fcall	_rotate
  3797  0DC9  0826               	movf	(?_rotate+3)^(0+128),w
  3798  0DCA  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3799  0DCB  0825               	movf	(?_rotate+2)^(0+128),w
  3800  0DCC  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3801  0DCD  0824               	movf	(?_rotate+1)^(0+128),w
  3802  0DCE  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3803  0DCF  0823               	movf	?_rotate^(0+128),w
  3804  0DD0  00E2               	movwf	AsicPreCalc@x^(0+128)
  3805                           
  3806                           ;asic.c: 346: y = x^y;
  3807  0DD1  06DE               	xorwf	AsicPreCalc@y^(0+128),f
  3808  0DD2  0863               	movf	(AsicPreCalc@x+1)^(0+128),w
  3809  0DD3  06DF               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  3810  0DD4  0864               	movf	(AsicPreCalc@x+2)^(0+128),w
  3811  0DD5  06E0               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  3812  0DD6  0865               	movf	(AsicPreCalc@x+3)^(0+128),w
  3813  0DD7  06E1               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  3814                           
  3815                           ;asic.c: 347: x = m[((0-n)&7)] | m[((1-n)&7)];
  3816  0DD8  0866               	movf	AsicPreCalc@n^(0+128),w
  3817  0DD9  3C01               	sublw	1
  3818  0DDA  3907               	andlw	7
  3819  0DDB  0709               	addwf	9,w
  3820  0DDC  0709               	addwf	9,w
  3821  0DDD  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3822  0DDE  0086               	movwf	6
  3823  0DDF  0187               	clrf	7
  3824  0DE0  3F40               	moviw [0]fsr1
  3825  0DE1  00B2               	movwf	??_AsicPreCalc^(0+128)
  3826  0DE2  3F41               	moviw [1]fsr1
  3827  0DE3  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3828  0DE4  3F42               	moviw [2]fsr1
  3829  0DE5  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3830  0DE6  3F43               	moviw [3]fsr1
  3831  0DE7  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3832  0DE8  0866               	movf	AsicPreCalc@n^(0+128),w
  3833  0DE9  3C00               	sublw	0
  3834  0DEA  3907               	andlw	7
  3835  0DEB  0709               	addwf	9,w
  3836  0DEC  0709               	addwf	9,w
  3837  0DED  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3838  0DEE  0086               	movwf	6
  3839  0DEF  3F40               	moviw [0]fsr1
  3840  0DF0  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3841  0DF1  3F41               	moviw [1]fsr1
  3842  0DF2  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3843  0DF3  3F42               	moviw [2]fsr1
  3844  0DF4  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3845  0DF5  3F43               	moviw [3]fsr1
  3846  0DF6  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3847  0DF7  0832               	movf	??_AsicPreCalc^(0+128),w
  3848  0DF8  0436               	iorwf	(??_AsicPreCalc+4)^(0+128),w
  3849  0DF9  00E2               	movwf	AsicPreCalc@x^(0+128)
  3850  0DFA  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3851  0DFB  0437               	iorwf	(??_AsicPreCalc+5)^(0+128),w
  3852  0DFC  00E3               	movwf	(AsicPreCalc@x+1)^(0+128)
  3853  0DFD  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3854  0DFE  0438               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  3855  0DFF  00E4               	movwf	(AsicPreCalc@x+2)^(0+128)
  3856  0E00  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3857  0E01  0439               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  3858  0E02  00E5               	movwf	(AsicPreCalc@x+3)^(0+128)
  3859                           
  3860                           ;asic.c: 348: x = m[((2-n)&7)] & x;
  3861  0E03  0866               	movf	AsicPreCalc@n^(0+128),w
  3862  0E04  3C02               	sublw	2
  3863  0E05  3907               	andlw	7
  3864  0E06  0709               	addwf	9,w
  3865  0E07  0709               	addwf	9,w
  3866  0E08  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3867  0E09  0086               	movwf	6
  3868  0E0A  3F40               	moviw [0]fsr1
  3869  0E0B  00B2               	movwf	??_AsicPreCalc^(0+128)
  3870  0E0C  3F41               	moviw [1]fsr1
  3871  0E0D  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3872  0E0E  3F42               	moviw [2]fsr1
  3873  0E0F  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3874  0E10  3F43               	moviw [3]fsr1
  3875  0E11  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3876  0E12  0832               	movf	??_AsicPreCalc^(0+128),w
  3877  0E13  05E2               	andwf	AsicPreCalc@x^(0+128),f
  3878  0E14  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3879  0E15  05E3               	andwf	(AsicPreCalc@x+1)^(0+128),f
  3880  0E16  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3881  0E17  05E4               	andwf	(AsicPreCalc@x+2)^(0+128),f
  3882  0E18  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3883  0E19  05E5               	andwf	(AsicPreCalc@x+3)^(0+128),f
  3884                           
  3885                           ;asic.c: 349: z = m[((0-n)&7)] & m[((1-n)&7)];
  3886  0E1A  0866               	movf	AsicPreCalc@n^(0+128),w
  3887  0E1B  3C01               	sublw	1
  3888  0E1C  3907               	andlw	7
  3889  0E1D  0709               	addwf	9,w
  3890  0E1E  0709               	addwf	9,w
  3891  0E1F  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3892  0E20  0086               	movwf	6
  3893  0E21  3F40               	moviw [0]fsr1
  3894  0E22  00B2               	movwf	??_AsicPreCalc^(0+128)
  3895  0E23  3F41               	moviw [1]fsr1
  3896  0E24  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3897  0E25  3F42               	moviw [2]fsr1
  3898  0E26  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3899  0E27  3F43               	moviw [3]fsr1
  3900  0E28  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3901  0E29  0866               	movf	AsicPreCalc@n^(0+128),w
  3902  0E2A  3C00               	sublw	0
  3903  0E2B  3907               	andlw	7
  3904  0E2C  0709               	addwf	9,w
  3905  0E2D  0709               	addwf	9,w
  3906  0E2E  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3907  0E2F  0086               	movwf	6
  3908  0E30  3F40               	moviw [0]fsr1
  3909  0E31  00B6               	movwf	(??_AsicPreCalc+4)^(0+128)
  3910  0E32  3F41               	moviw [1]fsr1
  3911  0E33  00B7               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  3912  0E34  3F42               	moviw [2]fsr1
  3913  0E35  00B8               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  3914  0E36  3F43               	moviw [3]fsr1
  3915  0E37  00B9               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  3916  0E38  0832               	movf	??_AsicPreCalc^(0+128),w
  3917  0E39  0536               	andwf	(??_AsicPreCalc+4)^(0+128),w
  3918  0E3A  00BA               	movwf	AsicPreCalc@z^(0+128)
  3919  0E3B  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3920  0E3C  0537               	andwf	(??_AsicPreCalc+5)^(0+128),w
  3921  0E3D  00BB               	movwf	(AsicPreCalc@z+1)^(0+128)
  3922  0E3E  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3923  0E3F  0538               	andwf	(??_AsicPreCalc+6)^(0+128),w
  3924  0E40  00BC               	movwf	(AsicPreCalc@z+2)^(0+128)
  3925  0E41  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3926  0E42  0539               	andwf	(??_AsicPreCalc+7)^(0+128),w
  3927  0E43  00BD               	movwf	(AsicPreCalc@z+3)^(0+128)
  3928                           
  3929                           ;asic.c: 350: x = x | z;
  3930  0E44  083A               	movf	AsicPreCalc@z^(0+128),w
  3931  0E45  04E2               	iorwf	AsicPreCalc@x^(0+128),f
  3932  0E46  083B               	movf	(AsicPreCalc@z+1)^(0+128),w
  3933  0E47  04E3               	iorwf	(AsicPreCalc@x+1)^(0+128),f
  3934  0E48  083C               	movf	(AsicPreCalc@z+2)^(0+128),w
  3935  0E49  04E4               	iorwf	(AsicPreCalc@x+2)^(0+128),f
  3936  0E4A  083D               	movf	(AsicPreCalc@z+3)^(0+128),w
  3937  0E4B  04E5               	iorwf	(AsicPreCalc@x+3)^(0+128),f
  3938                           
  3939                           ;asic.c: 351: m[7-n] += y + x;
  3940  0E4C  085E               	movf	AsicPreCalc@y^(0+128),w
  3941  0E4D  0762               	addwf	AsicPreCalc@x^(0+128),w
  3942  0E4E  00B2               	movwf	??_AsicPreCalc^(0+128)
  3943  0E4F  085F               	movf	(AsicPreCalc@y+1)^(0+128),w
  3944  0E50  3D63               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3945  0E51  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3946  0E52  0860               	movf	(AsicPreCalc@y+2)^(0+128),w
  3947  0E53  3D64               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3948  0E54  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3949  0E55  0861               	movf	(AsicPreCalc@y+3)^(0+128),w
  3950  0E56  3D65               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3951  0E57  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3952  0E58  30FC               	movlw	-4
  3953  0E59  00A0               	movwf	?___bmul^(0+128)
  3954  0E5A  0866               	movf	AsicPreCalc@n^(0+128),w
  3955  0E5B  26B6  3188         	fcall	___bmul
  3956  0E5D  3E1C               	addlw	28
  3957  0E5E  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3958  0E5F  0086               	movwf	6
  3959  0E60  0187               	clrf	7
  3960  0E61  0832               	movf	??_AsicPreCalc^(0+128),w
  3961  0E62  0781               	addwf	1,f
  3962  0E63  3141               	addfsr 1,1
  3963  0E64  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  3964  0E65  3D81               	addwfc	1,f
  3965  0E66  3141               	addfsr 1,1
  3966  0E67  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  3967  0E68  3D81               	addwfc	1,f
  3968  0E69  3141               	addfsr 1,1
  3969  0E6A  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  3970  0E6B  3D81               	addwfc	1,f
  3971                           
  3972                           ;asic.c: 353: PrecalcHashes[2-n] = m[7-n];
  3973  0E6C  30FC               	movlw	-4
  3974  0E6D  00A0               	movwf	?___bmul^(0+128)
  3975  0E6E  0866               	movf	AsicPreCalc@n^(0+128),w
  3976  0E6F  26B6  3188         	fcall	___bmul
  3977  0E71  3E1C               	addlw	28
  3978  0E72  3EBE               	addlw	AsicPreCalc@m& (0+255)
  3979  0E73  0086               	movwf	6
  3980  0E74  0187               	clrf	7
  3981  0E75  3F40               	moviw [0]fsr1
  3982  0E76  00B2               	movwf	??_AsicPreCalc^(0+128)
  3983  0E77  3F41               	moviw [1]fsr1
  3984  0E78  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  3985  0E79  3F42               	moviw [2]fsr1
  3986  0E7A  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  3987  0E7B  3F43               	moviw [3]fsr1
  3988  0E7C  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  3989  0E7D  30FC               	movlw	-4
  3990  0E7E  00A0               	movwf	?___bmul^(0+128)
  3991  0E7F  0866               	movf	AsicPreCalc@n^(0+128),w
  3992  0E80  26B6  3188         	fcall	___bmul
  3993  0E82  3EB7               	addlw	(_PrecalcHashes+8)& (0+255)
  3994  0E83  0086               	movwf	6
  3995  0E84  3001               	movlw	1	; select bank3/4
  3996  0E85  0087               	movwf	7
  3997  0E86  0832               	movf	??_AsicPreCalc^(0+128),w
  3998  0E87  3FC0               	movwi [0]fsr1
  3999  0E88  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  4000  0E89  3FC1               	movwi [1]fsr1
  4001  0E8A  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  4002  0E8B  3FC2               	movwi [2]fsr1
  4003  0E8C  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  4004  0E8D  3FC3               	movwi [3]fsr1
  4005                           
  4006                           ;asic.c: 354: PrecalcHashes[5-n] = m[3-n];
  4007  0E8E  30FC               	movlw	-4
  4008  0E8F  00A0               	movwf	?___bmul^(0+128)
  4009  0E90  0866               	movf	AsicPreCalc@n^(0+128),w
  4010  0E91  26B6  3188         	fcall	___bmul
  4011  0E93  3E0C               	addlw	12
  4012  0E94  3EBE               	addlw	AsicPreCalc@m& (0+255)
  4013  0E95  0086               	movwf	6
  4014  0E96  0187               	clrf	7
  4015  0E97  3F40               	moviw [0]fsr1
  4016  0E98  00B2               	movwf	??_AsicPreCalc^(0+128)
  4017  0E99  3F41               	moviw [1]fsr1
  4018  0E9A  00B3               	movwf	(??_AsicPreCalc^(0+128)+1)
  4019  0E9B  3F42               	moviw [2]fsr1
  4020  0E9C  00B4               	movwf	(??_AsicPreCalc^(0+128)+2)
  4021  0E9D  3F43               	moviw [3]fsr1
  4022  0E9E  00B5               	movwf	(??_AsicPreCalc^(0+128)+3)
  4023  0E9F  30FC               	movlw	-4
  4024  0EA0  00A0               	movwf	?___bmul^(0+128)
  4025  0EA1  0866               	movf	AsicPreCalc@n^(0+128),w
  4026  0EA2  26B6  3188         	fcall	___bmul
  4027  0EA4  3EC3               	addlw	(_PrecalcHashes+20)& (0+255)
  4028  0EA5  0086               	movwf	6
  4029  0EA6  3001               	movlw	1	; select bank3/4
  4030  0EA7  0087               	movwf	7
  4031  0EA8  0832               	movf	??_AsicPreCalc^(0+128),w
  4032  0EA9  3FC0               	movwi [0]fsr1
  4033  0EAA  0833               	movf	(??_AsicPreCalc+1)^(0+128),w
  4034  0EAB  3FC1               	movwi [1]fsr1
  4035  0EAC  0834               	movf	(??_AsicPreCalc+2)^(0+128),w
  4036  0EAD  3FC2               	movwi [2]fsr1
  4037  0EAE  0835               	movf	(??_AsicPreCalc+3)^(0+128),w
  4038  0EAF  3FC3               	movwi [3]fsr1
  4039  0EB0  3003               	movlw	3
  4040  0EB1  0AE6               	incf	AsicPreCalc@n^(0+128),f
  4041  0EB2  0266               	subwf	AsicPreCalc@n^(0+128),w
  4042  0EB3  1803               	btfsc	3,0
  4043  0EB4  0008               	return
  4044  0EB5  2C1B               	goto	l6918
  4045  0EB6                     __end_of_AsicPreCalc:	
  4046  0EB6                     __ptext2460:	
  4047 ;; *************** function ___bmul *****************
  4048 ;; Defined at:
  4049 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  multiplier      1    wreg     unsigned char 
  4052 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  multiplier      1    2[BANK1 ] unsigned char 
  4055 ;;  product         1    1[BANK1 ] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      unsigned char 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 1F/1
  4062 ;;		On exit  : 1F/1
  4063 ;;		Unchanged: FFFE0/0
  4064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4065 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;Total ram usage:        3 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:   11
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_AsicPreCalc
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           
  4080                           ;psect for function ___bmul
  4081  0EB6                     ___bmul:	
  4082                           
  4083                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4084                           ;___bmul@multiplier stored from wreg
  4085  0EB6  00A2               	movwf	___bmul@multiplier^(0+128)
  4086  0EB7  01A1               	clrf	___bmul@product^(0+128)
  4087  0EB8                     l7398:	
  4088  0EB8  0820               	movf	___bmul@multiplicand^(0+128),w
  4089  0EB9  1822               	btfsc	___bmul@multiplier^(0+128),0
  4090  0EBA  07A1               	addwf	___bmul@product^(0+128),f
  4091  0EBB  35A0               	lslf	___bmul@multiplicand^(0+128),f
  4092  0EBC  36A2               	lsrf	___bmul@multiplier^(0+128),f
  4093  0EBD  08A2               	movf	___bmul@multiplier^(0+128),f
  4094  0EBE  1D03               	skipz
  4095  0EBF  2EB8               	goto	l7398
  4096  0EC0  0821               	movf	___bmul@product^(0+128),w
  4097  0EC1  0008               	return
  4098  0EC2                     __end_of___bmul:	
  4099  0EC2                     __ptext2456:	
  4100 ;; *************** function _rotate *****************
  4101 ;; Defined at:
  4102 ;;		line 313 in file "asic.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  x               4    3[BANK1 ] unsigned long 
  4105 ;;  y               1    7[BANK1 ] unsigned char 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;		None
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  4    3[BANK1 ] unsigned long 
  4110 ;; Registers used:
  4111 ;;		wreg, status,2, status,0
  4112 ;; Tracked objects:
  4113 ;;		On entry : 1F/1
  4114 ;;		On exit  : 1F/1
  4115 ;;		Unchanged: FFFE0/0
  4116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4117 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4119 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;Total ram usage:       13 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:   11
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_AsicPreCalc
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           
  4132                           ;psect for function _rotate
  4133  0EC2                     _rotate:	
  4134                           
  4135                           ;asic.c: 314: return ((x<<y) | (x>>(32-y)));
  4136                           
  4137                           ; Regs used in _rotate: [wreg+status,2+status,0]
  4138  0EC2  0823               	movf	rotate@x^(0+128),w
  4139  0EC3  00A8               	movwf	??_rotate^(0+128)
  4140  0EC4  0824               	movf	(rotate@x+1)^(0+128),w
  4141  0EC5  00A9               	movwf	(??_rotate^(0+128)+1)
  4142  0EC6  0825               	movf	(rotate@x+2)^(0+128),w
  4143  0EC7  00AA               	movwf	(??_rotate^(0+128)+2)
  4144  0EC8  0826               	movf	(rotate@x+3)^(0+128),w
  4145  0EC9  00AB               	movwf	(??_rotate^(0+128)+3)
  4146  0ECA  0827               	movf	rotate@y^(0+128),w
  4147  0ECB  3C20               	sublw	32
  4148  0ECC  0A89               	incf	9,f
  4149  0ECD  2ED3               	goto	u5070
  4150  0ECE                     u5075:	
  4151  0ECE  1003               	clrc
  4152  0ECF  0CAB               	rrf	(??_rotate^(0+128)+3),f
  4153  0ED0  0CAA               	rrf	(??_rotate^(0+128)+2),f
  4154  0ED1  0CA9               	rrf	(??_rotate^(0+128)+1),f
  4155  0ED2  0CA8               	rrf	??_rotate^(0+128),f
  4156  0ED3                     u5070:	
  4157  0ED3  3EFF               	addlw	-1
  4158  0ED4  1D03               	skipz
  4159  0ED5  2ECE               	goto	u5075
  4160  0ED6  0823               	movf	rotate@x^(0+128),w
  4161  0ED7  00AC               	movwf	(??_rotate+4)^(0+128)
  4162  0ED8  0824               	movf	(rotate@x+1)^(0+128),w
  4163  0ED9  00AD               	movwf	((??_rotate+4)^(0+128)+1)
  4164  0EDA  0825               	movf	(rotate@x+2)^(0+128),w
  4165  0EDB  00AE               	movwf	((??_rotate+4)^(0+128)+2)
  4166  0EDC  0826               	movf	(rotate@x+3)^(0+128),w
  4167  0EDD  00AF               	movwf	((??_rotate+4)^(0+128)+3)
  4168  0EDE  0A27               	incf	rotate@y^(0+128),w
  4169  0EDF  2EE4               	goto	u5080
  4170  0EE0                     u5085:	
  4171  0EE0  35AC               	lslf	(??_rotate+4)^(0+128),f
  4172  0EE1  0DAD               	rlf	((??_rotate+4)^(0+128)+1),f
  4173  0EE2  0DAE               	rlf	((??_rotate+4)^(0+128)+2),f
  4174  0EE3  0DAF               	rlf	((??_rotate+4)^(0+128)+3),f
  4175  0EE4                     u5080:	
  4176  0EE4  0B89               	decfsz	9,f
  4177  0EE5  2EE0               	goto	u5085
  4178  0EE6  082C               	movf	(??_rotate+4)^(0+128),w
  4179  0EE7  04A8               	iorwf	??_rotate^(0+128),f
  4180  0EE8  082D               	movf	(??_rotate+5)^(0+128),w
  4181  0EE9  04A9               	iorwf	(??_rotate^(0+128)+1),f
  4182  0EEA  082E               	movf	(??_rotate+6)^(0+128),w
  4183  0EEB  04AA               	iorwf	(??_rotate^(0+128)+2),f
  4184  0EEC  082F               	movf	(??_rotate+7)^(0+128),w
  4185  0EED  04AB               	iorwf	(??_rotate^(0+128)+3),f
  4186  0EEE  082B               	movf	(??_rotate+3)^(0+128),w
  4187  0EEF  00A6               	movwf	(?_rotate+3)^(0+128)
  4188  0EF0  082A               	movf	(??_rotate+2)^(0+128),w
  4189  0EF1  00A5               	movwf	(?_rotate+2)^(0+128)
  4190  0EF2  0829               	movf	(??_rotate+1)^(0+128),w
  4191  0EF3  00A4               	movwf	(?_rotate+1)^(0+128)
  4192  0EF4  0828               	movf	??_rotate^(0+128),w
  4193  0EF5  00A3               	movwf	?_rotate^(0+128)
  4194  0EF6  0008               	return
  4195  0EF7                     __end_of_rotate:	
  4196  0EF7                     __ptext2462:	
  4197 ;; *************** function ___lwdiv *****************
  4198 ;; Defined at:
  4199 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/lwdiv.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;  divisor         2    0[BANK1 ] unsigned int 
  4202 ;;  dividend        2    2[BANK1 ] unsigned int 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  quotient        2    5[BANK1 ] unsigned int 
  4205 ;;  counter         1    4[BANK1 ] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;                  2    0[BANK1 ] unsigned int 
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0
  4210 ;; Tracked objects:
  4211 ;;		On entry : 1F/1
  4212 ;;		On exit  : 1F/1
  4213 ;;		Unchanged: FFFE0/0
  4214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4215 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4216 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;Total ram usage:        7 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:   11
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_ProcessCmd
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           
  4230                           ;psect for function ___lwdiv
  4231  0EF7                     ___lwdiv:	
  4232                           
  4233                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  4234  0EF7  01A5               	clrf	___lwdiv@quotient^(0+128)
  4235  0EF8  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  4236  0EF9  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4237  0EFA  0420               	iorwf	___lwdiv@divisor^(0+128),w
  4238  0EFB  1903               	skipnz
  4239  0EFC  2F17               	goto	l7450
  4240  0EFD  01A4               	clrf	___lwdiv@counter^(0+128)
  4241  0EFE                     L10:	
  4242  0EFE  0AA4               	incf	___lwdiv@counter^(0+128),f
  4243  0EFF  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  4244  0F00  2F04               	goto	l7438
  4245  0F01  35A0               	lslf	___lwdiv@divisor^(0+128),f
  4246  0F02  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  4247  0F03  2EFE               	goto	L10
  4248  0F04                     l7438:	
  4249  0F04  35A5               	lslf	___lwdiv@quotient^(0+128),f
  4250  0F05  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  4251  0F06  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4252  0F07  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  4253  0F08  1D03               	skipz
  4254  0F09  2F0C               	goto	u5585
  4255  0F0A  0820               	movf	___lwdiv@divisor^(0+128),w
  4256  0F0B  0222               	subwf	___lwdiv@dividend^(0+128),w
  4257  0F0C                     u5585:	
  4258  0F0C  1C03               	skipc
  4259  0F0D  2F13               	goto	l7446
  4260  0F0E  0820               	movf	___lwdiv@divisor^(0+128),w
  4261  0F0F  02A2               	subwf	___lwdiv@dividend^(0+128),f
  4262  0F10  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  4263  0F11  3BA3               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  4264  0F12  1425               	bsf	___lwdiv@quotient^(0+128),0
  4265  0F13                     l7446:	
  4266  0F13  36A1               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  4267  0F14  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  4268  0F15  0BA4               	decfsz	___lwdiv@counter^(0+128),f
  4269  0F16  2F04               	goto	l7438
  4270  0F17                     l7450:	
  4271  0F17  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  4272  0F18  00A1               	movwf	(?___lwdiv+1)^(0+128)
  4273  0F19  0825               	movf	___lwdiv@quotient^(0+128),w
  4274  0F1A  00A0               	movwf	?___lwdiv^(0+128)
  4275  0F1B  0008               	return
  4276  0F1C                     __end_of___lwdiv:	
  4277  0F1C                     __ptext2446:	
  4278 ;; *************** function _I2CRelay *****************
  4279 ;; Defined at:
  4280 ;;		line 38 in file "i2c.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  data            1    wreg     PTR unsigned char 
  4283 ;;		 -> USB_Out_Buffer(64), 
  4284 ;;  count           1    0[BANK1 ] unsigned char 
  4285 ;; Auto vars:     Size  Location     Type
  4286 ;;  data            1    1[BANK1 ] PTR unsigned char 
  4287 ;;		 -> USB_Out_Buffer(64), 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;		None               void
  4290 ;; Registers used:
  4291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4292 ;; Tracked objects:
  4293 ;;		On entry : 1F/1
  4294 ;;		On exit  : 1F/4
  4295 ;;		Unchanged: FFFE0/0
  4296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4297 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4298 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;Total ram usage:        2 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:   11
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_ProcessIO
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           
  4312                           ;psect for function _I2CRelay
  4313  0F1C                     _I2CRelay:	
  4314                           
  4315                           ; Regs used in _I2CRelay: [wreg+fsr1l-status,0]
  4316                           ;I2CRelay@data stored from wreg
  4317  0F1C  00A1               	movwf	I2CRelay@data^(0+128)
  4318                           
  4319                           ;i2c.c: 40: I2CAddr = data[2];
  4320  0F1D  0821               	movf	I2CRelay@data^(0+128),w
  4321  0F1E  0086               	movwf	6
  4322  0F1F  3004               	movlw	4	; select bank8/9
  4323  0F20  0087               	movwf	7
  4324  0F21  3F42               	moviw [2]fsr1
  4325  0F22  0022               	movlb	2	; select bank2
  4326  0F23  00C8               	movwf	_I2CAddr^(0+256)
  4327                           
  4328                           ;i2c.c: 41: I2CInBuf = data;
  4329  0F24  0021               	movlb	1	; select bank1
  4330  0F25  0821               	movf	I2CRelay@data^(0+128),w
  4331  0F26  0023               	movlb	3	; select bank3
  4332  0F27  00AC               	movwf	_I2CInBuf^(0+384)
  4333                           
  4334                           ;i2c.c: 42: I2CCount = count;
  4335  0F28  0021               	movlb	1	; select bank1
  4336  0F29  0820               	movf	I2CRelay@count^(0+128),w
  4337  0F2A  0022               	movlb	2	; select bank2
  4338  0F2B  00CA               	movwf	_I2CCount^(0+256)
  4339                           
  4340                           ;i2c.c: 43: I2CState.Next = 10;
  4341  0F2C  0868               	movf	_I2CState^(0+256),w
  4342  0F2D  39E0               	andlw	-32
  4343  0F2E  380A               	iorlw	10
  4344  0F2F  00E8               	movwf	_I2CState^(0+256)
  4345                           
  4346                           ;i2c.c: 44: SSPCON2bits.SEN = 1;
  4347  0F30  0024               	movlb	4	; select bank4
  4348  0F31  1416               	bsf	22,0	;volatile
  4349  0F32  0008               	return
  4350  0F33                     __end_of_I2CRelay:	
  4351  0F33                     __ptext2443:	
  4352 ;; *************** function _getsUSBUSART *****************
  4353 ;; Defined at:
  4354 ;;		line 605 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  buffer          1    wreg     PTR unsigned char 
  4357 ;;		 -> USB_Out_Buffer(64), 
  4358 ;;  len             1    7[BANK1 ] unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  buffer          1    9[BANK1 ] PTR unsigned char 
  4361 ;;		 -> USB_Out_Buffer(64), 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      unsigned char 
  4364 ;; Registers used:
  4365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 1F/1
  4368 ;;		On exit  : 1F/2
  4369 ;;		Unchanged: FFFE0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        5 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:   12
  4378 ;; This function calls:
  4379 ;;		_USBTransferOnePacket
  4380 ;; This function is called by:
  4381 ;;		_ProcessIO
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _getsUSBUSART
  4387  0F33                     _getsUSBUSART:	
  4388                           
  4389                           ; Regs used in _getsUSBUSART: [wreg-status,0+pclath+cstack]
  4390                           ;getsUSBUSART@buffer stored from wreg
  4391  0F33  00A9               	movwf	getsUSBUSART@buffer^(0+128)
  4392                           
  4393                           ;usb_function_cdc.c: 606: cdc_rx_len = 0;
  4394  0F34  0022               	movlb	2	; select bank2
  4395  0F35  01D7               	clrf	_cdc_rx_len^(0+256)
  4396                           
  4397                           ;usb_function_cdc.c: 608: if(!(CDCDataOutHandle==0?0:((volatile BDT_ENTRY*)CDCDataOutHan
      +                          dle)->STAT.UOWN))
  4398  0F36  0847               	movf	_CDCDataOutHandle^(0+256),w
  4399  0F37  1903               	btfsc	3,2
  4400  0F38  2F42               	goto	l6742
  4401  0F39  0847               	movf	_CDCDataOutHandle^(0+256),w
  4402  0F3A  0086               	movwf	6
  4403  0F3B  0187               	clrf	7
  4404  0F3C  0D01               	rlf	1,w
  4405  0F3D  0D01               	rlf	1,w
  4406  0F3E  3901               	andlw	1
  4407  0F3F  0021               	movlb	1	; select bank1
  4408  0F40  00AA               	movwf	_getsUSBUSART$2193^(0+128)
  4409  0F41  2F44               	goto	L1
  4410  0F42                     l6742:	
  4411  0F42  0021               	movlb	1	; select bank1
  4412  0F43  01AA               	clrf	_getsUSBUSART$2193^(0+128)
  4413  0F44                     L1:	
  4414  0F44  01AB               	clrf	(_getsUSBUSART$2193+1)^(0+128)
  4415  0F45  082B               	movf	(_getsUSBUSART$2193+1)^(0+128),w
  4416  0F46  042A               	iorwf	_getsUSBUSART$2193^(0+128),w
  4417  0F47  1D03               	skipz
  4418  0F48  2F7C               	goto	l6760
  4419                           
  4420                           ;usb_function_cdc.c: 609: {
  4421                           ;usb_function_cdc.c: 614: if(len > (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT))
  4422  0F49  0022               	movlb	2	; select bank2
  4423  0F4A  0A47               	incf	_CDCDataOutHandle^(0+256),w
  4424  0F4B  0086               	movwf	6
  4425  0F4C  0187               	clrf	7
  4426  0F4D  0021               	movlb	1	; select bank1
  4427  0F4E  0827               	movf	getsUSBUSART@len^(0+128),w
  4428  0F4F  0201               	subwf	1,w
  4429  0F50  1803               	skipnc
  4430  0F51  2F58               	goto	l6750
  4431                           
  4432                           ;usb_function_cdc.c: 615: len = (((volatile BDT_ENTRY*)CDCDataOutHandle)->CNT);
  4433  0F52  0022               	movlb	2	; select bank2
  4434  0F53  0847               	movf	_CDCDataOutHandle^(0+256),w
  4435  0F54  0086               	movwf	6
  4436  0F55  3F41               	moviw [1]fsr1
  4437  0F56  0021               	movlb	1	; select bank1
  4438  0F57  00A7               	movwf	getsUSBUSART@len^(0+128)
  4439  0F58                     l6750:	
  4440                           
  4441                           ;usb_function_cdc.c: 620: for(cdc_rx_len = 0; cdc_rx_len < len; cdc_rx_len++)
  4442  0F58  0022               	movlb	2	; select bank2
  4443  0F59  01D7               	clrf	_cdc_rx_len^(0+256)
  4444  0F5A                     l6756:	
  4445  0F5A  0021               	movlb	1	; select bank1
  4446  0F5B  0827               	movf	getsUSBUSART@len^(0+128),w
  4447  0F5C  0022               	movlb	2	; select bank2
  4448  0F5D  0257               	subwf	_cdc_rx_len^(0+256),w
  4449  0F5E  1803               	btfsc	3,0
  4450  0F5F  2F71               	goto	l6758
  4451                           
  4452                           ;usb_function_cdc.c: 621: buffer[cdc_rx_len] = cdc_data_rx[cdc_rx_len];
  4453  0F60  0857               	movf	_cdc_rx_len^(0+256),w
  4454  0F61  0021               	movlb	1	; select bank1
  4455  0F62  0729               	addwf	getsUSBUSART@buffer^(0+128),w
  4456  0F63  00A8               	movwf	??_getsUSBUSART^(0+128)
  4457  0F64  0086               	movwf	6
  4458  0F65  3004               	movlw	4	; select bank8/9
  4459  0F66  0087               	movwf	7
  4460  0F67  0022               	movlb	2	; select bank2
  4461  0F68  0857               	movf	_cdc_rx_len^(0+256),w
  4462  0F69  3EA0               	addlw	160
  4463  0F6A  0084               	movwf	4
  4464  0F6B  3002               	movlw	2	; select bank5/6
  4465  0F6C  0085               	movwf	5
  4466  0F6D  0800               	movf	0,w
  4467  0F6E  0081               	movwf	1
  4468  0F6F  0AD7               	incf	_cdc_rx_len^(0+256),f
  4469  0F70  2F5A               	goto	l6756
  4470  0F71                     l6758:	
  4471                           
  4472                           ;usb_function_cdc.c: 627: CDCDataOutHandle = USBTransferOnePacket(2,0,(BYTE*)&cdc_data_r
      +                          x,sizeof(cdc_data_rx));
  4473  0F71  0021               	movlb	1	; select bank1
  4474  0F72  30A0               	movlw	160
  4475  0F73  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  4476  0F74  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  4477  0F75  3040               	movlw	64
  4478  0F76  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  4479  0F77  3002               	movlw	2
  4480  0F78  3187  27A9         	fcall	_USBTransferOnePacket
  4481  0F7A  0022               	movlb	2	; select bank2
  4482  0F7B  00C7               	movwf	_CDCDataOutHandle^(0+256)
  4483  0F7C                     l6760:	
  4484                           
  4485                           ;usb_function_cdc.c: 629: }
  4486                           ;usb_function_cdc.c: 631: return cdc_rx_len;
  4487  0F7C  0022               	movlb	2	; select bank2
  4488  0F7D  0857               	movf	_cdc_rx_len^(0+256),w
  4489  0F7E  0008               	return
  4490  0F7F                     __end_of_getsUSBUSART:	
  4491  0F7F                     __ptext2440:	
  4492 ;; *************** function _InitializeSystem *****************
  4493 ;; Defined at:
  4494 ;;		line 131 in file "main.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;		None               void
  4501 ;; Registers used:
  4502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 17F/0
  4505 ;;		On exit  : 1F/2
  4506 ;;		Unchanged: FFE00/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;Total ram usage:        0 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:   15
  4515 ;; This function calls:
  4516 ;;		_UserInit
  4517 ;;		_USBDeviceInit
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _InitializeSystem
  4525  0F7F                     _InitializeSystem:	
  4526                           
  4527                           ;main.c: 133: ANSELA = 0x00;
  4528                           
  4529                           ; Regs used in _InitializeSystem: [wreg-status,0+pclath+cstack]
  4530  0F7F  0023               	movlb	3	; select bank3
  4531  0F80  018C               	clrf	12	;volatile
  4532                           
  4533                           ;main.c: 134: ANSELB = 0x00;
  4534  0F81  018D               	clrf	13	;volatile
  4535                           
  4536                           ;main.c: 135: ANSELC = 0x04;
  4537  0F82  3004               	movlw	4
  4538  0F83  008E               	movwf	14	;volatile
  4539                           
  4540                           ;main.c: 138: OSCTUNE = 0;
  4541  0F84  0021               	movlb	1	; select bank1
  4542  0F85  0198               	clrf	24	;volatile
  4543                           
  4544                           ;main.c: 139: OSCCON = 0xFC;
  4545  0F86  30FC               	movlw	252
  4546  0F87  0099               	movwf	25	;volatile
  4547                           
  4548                           ;main.c: 140: ACTCON = 0x90;
  4549  0F88  3090               	movlw	144
  4550  0F89  0027               	movlb	7	; select bank7
  4551  0F8A  009B               	movwf	27	;volatile
  4552                           
  4553                           ;main.c: 143: UserInit();
  4554  0F8B  27CE               	fcall	_UserInit
  4555                           
  4556                           ;main.c: 145: USBDeviceInit();
  4557  0F8C  3195  2D6E         	ljmp	l6416
  4558  0F8E                     __end_of_InitializeSystem:	
  4559  0F8E                     __ptext2438:	
  4560 ;; *************** function _InitI2CMaster *****************
  4561 ;; Defined at:
  4562 ;;		line 176 in file "i2c.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;		None               void
  4569 ;; Registers used:
  4570 ;;		wreg, status,2, status,0, pclath, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 1F/2
  4573 ;;		On exit  : 1F/4
  4574 ;;		Unchanged: FFFE0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;Total ram usage:        0 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:   12
  4583 ;; This function calls:
  4584 ;;		_I2CDetect
  4585 ;; This function is called by:
  4586 ;;		_main
  4587 ;; This function uses a non-reentrant model
  4588 ;;
  4589                           
  4590                           
  4591                           ;psect for function _InitI2CMaster
  4592  0F8E                     _InitI2CMaster:	
  4593                           
  4594                           ;i2c.c: 177: I2CState.Master = 1; I2CState.Slave = 0;
  4595                           
  4596                           ; Regs used in _InitI2CMaster: [wreg+status,2+status,0+pclath+cstack]
  4597  0F8E  1768               	bsf	_I2CState^(0+256),6
  4598  0F8F  12E8               	bcf	_I2CState^(0+256),5
  4599                           
  4600                           ;i2c.c: 178: SlaveAddress = 0;
  4601  0F90  01CD               	clrf	_SlaveAddress^(0+256)
  4602                           
  4603                           ;i2c.c: 179: TRISBbits.TRISB4 = 1;
  4604  0F91  0021               	movlb	1	; select bank1
  4605  0F92  160D               	bsf	13,4	;volatile
  4606                           
  4607                           ;i2c.c: 180: TRISBbits.TRISB6 = 1;
  4608  0F93  170D               	bsf	13,6	;volatile
  4609                           
  4610                           ;i2c.c: 181: SSPADD = 0x77;
  4611  0F94  3077               	movlw	119
  4612  0F95  0024               	movlb	4	; select bank4
  4613  0F96  0092               	movwf	18	;volatile
  4614                           
  4615                           ;i2c.c: 182: SSPCON1bits.SSPM = 8;
  4616  0F97  0815               	movf	21,w	;volatile
  4617  0F98  39F0               	andlw	-16
  4618  0F99  3808               	iorlw	8
  4619  0F9A  0095               	movwf	21	;volatile
  4620                           
  4621                           ;i2c.c: 183: SSPSTATbits.SMP = 1;
  4622  0F9B  1794               	bsf	20,7	;volatile
  4623                           
  4624                           ;i2c.c: 184: SSP1EN = 1;
  4625  0F9C  1695               	bsf	21,5	;volatile
  4626                           
  4627                           ;i2c.c: 185: SSP1IF = 1;
  4628  0F9D  0020               	movlb	0	; select bank0
  4629  0F9E  1591               	bsf	17,3	;volatile
  4630                           
  4631                           ;i2c.c: 186: I2CDetect();
  4632  0F9F  3193  2B64         	ljmp	l6978
  4633  0FA1                     __end_of_InitI2CMaster:	
  4634  0FA1                     __ptext2437:	
  4635 ;; *************** function _InitI2CSlave *****************
  4636 ;; Defined at:
  4637 ;;		line 162 in file "i2c.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 1F/2
  4648 ;;		On exit  : 1F/0
  4649 ;;		Unchanged: FFFE0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:   11
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_main
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _InitI2CSlave
  4667  0FA1                     _InitI2CSlave:	
  4668                           
  4669                           ;i2c.c: 163: I2CState.Slave = 1; I2CState.Master = 0;
  4670                           
  4671                           ; Regs used in _InitI2CSlave: [wreg+status,2+status,0]
  4672  0FA1  16E8               	bsf	_I2CState^(0+256),5
  4673  0FA2  1368               	bcf	_I2CState^(0+256),6
  4674                           
  4675                           ;i2c.c: 164: SSPADD = SlaveAddress;
  4676  0FA3  084D               	movf	_SlaveAddress^(0+256),w
  4677  0FA4  0024               	movlb	4	; select bank4
  4678  0FA5  0092               	movwf	18	;volatile
  4679                           
  4680                           ;i2c.c: 165: TRISBbits.TRISB4 = 1;
  4681  0FA6  0021               	movlb	1	; select bank1
  4682  0FA7  160D               	bsf	13,4	;volatile
  4683                           
  4684                           ;i2c.c: 166: TRISBbits.TRISB6 = 1;
  4685  0FA8  170D               	bsf	13,6	;volatile
  4686                           
  4687                           ;i2c.c: 167: SSPCON1bits.SSPM = 6;
  4688  0FA9  0024               	movlb	4	; select bank4
  4689  0FAA  0815               	movf	21,w	;volatile
  4690  0FAB  39F0               	andlw	-16
  4691  0FAC  3806               	iorlw	6
  4692  0FAD  0095               	movwf	21	;volatile
  4693                           
  4694                           ;i2c.c: 168: SSPCON2bits.GCEN = 1;
  4695  0FAE  1796               	bsf	22,7	;volatile
  4696                           
  4697                           ;i2c.c: 169: SSPCON3bits.SBCDE = 1;
  4698  0FAF  1517               	bsf	23,2	;volatile
  4699                           
  4700                           ;i2c.c: 170: SSPSTATbits.SMP = 1;
  4701  0FB0  1794               	bsf	20,7	;volatile
  4702                           
  4703                           ;i2c.c: 171: SSP1EN = 1;
  4704  0FB1  1695               	bsf	21,5	;volatile
  4705                           
  4706                           ;i2c.c: 172: SSP1IF = 1;
  4707  0FB2  0020               	movlb	0	; select bank0
  4708  0FB3  1591               	bsf	17,3	;volatile
  4709  0FB4  0008               	return
  4710  0FB5                     __end_of_InitI2CSlave:	
  4711  0FB5                     __ptext2436:	
  4712 ;; *************** function _USBDeviceAttach *****************
  4713 ;; Defined at:
  4714 ;;		line 1526 in file "../USB/usb_device.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		wreg, status,2, status,0
  4723 ;; Tracked objects:
  4724 ;;		On entry : 1F/2
  4725 ;;		On exit  : 1F/2
  4726 ;;		Unchanged: FFFE0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:   11
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _USBDeviceAttach
  4744  0FB5                     _USBDeviceAttach:	
  4745                           
  4746                           ;usb_device.c: 1529: {
  4747                           ;usb_device.c: 1530: if(1 == 1)
  4748                           
  4749                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4750  0FB5  08D1               	movf	_USBDeviceState^(0+256),f
  4751  0FB6  1D03               	skipz
  4752  0FB7  0008               	return
  4753                           
  4754                           ;usb_device.c: 1531: {
  4755                           ;usb_device.c: 1533: UCON = 0;
  4756  0FB8  003D               	movlb	29	; select bank29
  4757  0FB9  018E               	clrf	14	;volatile
  4758                           
  4759                           ;usb_device.c: 1536: UIE = 0;
  4760  0FBA  0192               	clrf	18	;volatile
  4761                           
  4762                           ;usb_device.c: 1540: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 
      +                          | 0x02; };
  4763  0FBB  3016               	movlw	22
  4764  0FBC  0091               	movwf	17	;volatile
  4765  0FBD  309F               	movlw	159
  4766  0FBE  0097               	movwf	23	;volatile
  4767  0FBF  307B               	movlw	123
  4768  0FC0  0092               	movwf	18	;volatile
  4769                           
  4770                           ;usb_device.c: 1542: {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits.GIE = 1;};
  4771  0FC1  0021               	movlb	1	; select bank1
  4772  0FC2  1512               	bsf	18,2	;volatile
  4773  0FC3  170B               	bsf	11,6	;volatile
  4774  0FC4  178B               	bsf	11,7	;volatile
  4775  0FC5                     l191:	
  4776                           ;usb_device.c: 1545: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4777                           
  4778  0FC5  003D               	movlb	29	; select bank29
  4779  0FC6  198E               	btfsc	14,3	;volatile
  4780  0FC7  2FCA               	goto	l6584
  4781  0FC8  158E               	bsf	14,3	;volatile
  4782  0FC9  2FC5               	goto	l191
  4783  0FCA                     l6584:	
  4784                           
  4785                           ;usb_device.c: 1548: USBDeviceState = ATTACHED_STATE;
  4786  0FCA  3001               	movlw	1
  4787  0FCB  0022               	movlb	2	; select bank2
  4788  0FCC  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  4789  0FCD  0008               	return
  4790  0FCE                     __end_of_USBDeviceAttach:	
  4791  0FCE                     __ptext2451:	
  4792 ;; *************** function _UserInit *****************
  4793 ;; Defined at:
  4794 ;;		line 151 in file "main.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;		None
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;		None
  4799 ;; Return value:  Size  Location     Type
  4800 ;;		None               void
  4801 ;; Registers used:
  4802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 17F/7
  4805 ;;		On exit  : 1F/3
  4806 ;;		Unchanged: FFE00/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;Total ram usage:        0 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:   14
  4815 ;; This function calls:
  4816 ;;		_InitTempSensor
  4817 ;;		_InitFAN
  4818 ;;		_InitWorkTick
  4819 ;;		_DetectAsics
  4820 ;; This function is called by:
  4821 ;;		_InitializeSystem
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _UserInit
  4827  0FCE                     _UserInit:	
  4828                           
  4829                           ;main.c: 152: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  4830                           
  4831                           ; Regs used in _UserInit: [wreg-status,0+pclath+cstack]
  4832  0FCE  0021               	movlb	1	; select bank1
  4833  0FCF  128C               	bcf	12,5	;volatile
  4834  0FD0  0022               	movlb	2	; select bank2
  4835  0FD1  168C               	bsf	12,5	;volatile
  4836                           
  4837                           ;main.c: 153: InitTempSensor();
  4838  0FD2  27D9               	fcall	_InitTempSensor
  4839                           
  4840                           ;main.c: 154: InitFAN();
  4841  0FD3  3193  23B7  3188   	fcall	_InitFAN
  4842                           
  4843                           ;main.c: 155: InitWorkTick();
  4844  0FD6  27EA               	fcall	_InitWorkTick
  4845                           
  4846                           ;main.c: 158: DetectAsics();
  4847  0FD7  3197  2F12         	ljmp	l7244
  4848  0FD9                     __end_of_UserInit:	
  4849  0FD9                     __ptext2458:	
  4850 ;; *************** function _InitTempSensor *****************
  4851 ;; Defined at:
  4852 ;;		line 261 in file "klondike.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;		None
  4857 ;; Return value:  Size  Location     Type
  4858 ;;		None               void
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, status,0
  4861 ;; Tracked objects:
  4862 ;;		On entry : 17F/2
  4863 ;;		On exit  : 17F/1
  4864 ;;		Unchanged: FFE80/0
  4865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;Total ram usage:        0 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:   11
  4873 ;; This function calls:
  4874 ;;		Nothing
  4875 ;; This function is called by:
  4876 ;;		_UserInit
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           
  4881                           ;psect for function _InitTempSensor
  4882  0FD9                     _InitTempSensor:	
  4883                           
  4884                           ;klondike.c: 262: TRISCbits.TRISC2=1;
  4885                           
  4886                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  4887  0FD9  0021               	movlb	1	; select bank1
  4888  0FDA  150E               	bsf	14,2	;volatile
  4889                           
  4890                           ;klondike.c: 265: ADCON0bits.CHS = 6;
  4891  0FDB  081D               	movf	29,w	;volatile
  4892  0FDC  3983               	andlw	-125
  4893  0FDD  3818               	iorlw	24
  4894  0FDE  009D               	movwf	29	;volatile
  4895                           
  4896                           ;klondike.c: 266: ADCON0bits.ADON = 1;
  4897  0FDF  141D               	bsf	29,0	;volatile
  4898                           
  4899                           ;klondike.c: 267: ADCON1bits.ADFM = 0;
  4900  0FE0  139E               	bcf	30,7	;volatile
  4901                           
  4902                           ;klondike.c: 268: ADCON1bits.ADCS = 6;
  4903  0FE1  081E               	movf	30,w	;volatile
  4904  0FE2  398F               	andlw	-113
  4905  0FE3  3860               	iorlw	96
  4906  0FE4  009E               	movwf	30	;volatile
  4907                           
  4908                           ;klondike.c: 269: ADCON1bits.ADPREF = 0;
  4909  0FE5  30FC               	movlw	-4
  4910  0FE6  059E               	andwf	30,f	;volatile
  4911                           
  4912                           ;klondike.c: 270: ADCON2bits.TRIGSEL = 0;
  4913  0FE7  308F               	movlw	-113
  4914  0FE8  059F               	andwf	31,f	;volatile
  4915  0FE9  0008               	return
  4916  0FEA                     __end_of_InitTempSensor:	
  4917  0FEA                     __ptext2459:	
  4918 ;; *************** function _InitWorkTick *****************
  4919 ;; Defined at:
  4920 ;;		line 274 in file "klondike.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;		None
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;		None
  4925 ;; Return value:  Size  Location     Type
  4926 ;;		None               void
  4927 ;; Registers used:
  4928 ;;		wreg, status,2, status,0
  4929 ;; Tracked objects:
  4930 ;;		On entry : 17F/7
  4931 ;;		On exit  : 17F/2
  4932 ;;		Unchanged: FFE80/0
  4933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;Total ram usage:        0 bytes
  4939 ;; Hardware stack levels used:    1
  4940 ;; Hardware stack levels required when called:   11
  4941 ;; This function calls:
  4942 ;;		Nothing
  4943 ;; This function is called by:
  4944 ;;		_UserInit
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           
  4949                           ;psect for function _InitWorkTick
  4950  0FEA                     _InitWorkTick:	
  4951                           
  4952                           ;klondike.c: 275: TMR0CS = 0;
  4953                           
  4954                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  4955  0FEA  0021               	movlb	1	; select bank1
  4956  0FEB  1295               	bcf	21,5	;volatile
  4957                           
  4958                           ;klondike.c: 276: OPTION_REGbits.PSA = 0;
  4959  0FEC  1195               	bcf	21,3	;volatile
  4960                           
  4961                           ;klondike.c: 277: OPTION_REGbits.PS = 7;
  4962  0FED  3007               	movlw	7
  4963  0FEE  0495               	iorwf	21,f	;volatile
  4964                           
  4965                           ;klondike.c: 278: TMR0 = HashTime;
  4966  0FEF  0022               	movlb	2	; select bank2
  4967  0FF0  086F               	movf	_HashTime^(0+256),w
  4968  0FF1  0020               	movlb	0	; select bank0
  4969  0FF2  0095               	movwf	21	;volatile
  4970                           
  4971                           ;klondike.c: 280: TRISCbits.TRISC7 = 0;
  4972  0FF3  0021               	movlb	1	; select bank1
  4973  0FF4  138E               	bcf	14,7	;volatile
  4974                           
  4975                           ;klondike.c: 281: TRISCbits.TRISC6 = 0;
  4976  0FF5  130E               	bcf	14,6	;volatile
  4977                           
  4978                           ;klondike.c: 282: TRISCbits.TRISC4 = 0;
  4979  0FF6  120E               	bcf	14,4	;volatile
  4980                           
  4981                           ;klondike.c: 283: TRISCbits.TRISC3 = 0;
  4982  0FF7  118E               	bcf	14,3	;volatile
  4983                           
  4984                           ;klondike.c: 284: LATC = 0xD8;;
  4985  0FF8  30D8               	movlw	216
  4986  0FF9  0022               	movlb	2	; select bank2
  4987  0FFA  008E               	movwf	14	;volatile
  4988                           
  4989                           ;klondike.c: 285: TRISAbits.TRISA4 = 0;
  4990  0FFB  0021               	movlb	1	; select bank1
  4991  0FFC  120C               	bcf	12,4	;volatile
  4992                           
  4993                           ;klondike.c: 286: LATAbits.LATA4 = 1;
  4994  0FFD  0022               	movlb	2	; select bank2
  4995  0FFE  160C               	bsf	12,4	;volatile
  4996  0FFF  0008               	return
  4997  1000                     __end_of_InitWorkTick:	
  4998                           
  4999                           	psect	bssBANK1
  5000  00EF                     __pbssBANK1:	
  5001  00EF                     _pBDTEntryEP0OutNext:	
  5002  00EF                     	ds	1
  5003                           
  5004                           	psect	bssBANK2
  5005  0131                     __pbssBANK2:	
  5006  0131                     _outPipes:	
  5007  0131                     	ds	6
  5008  0137                     _ep_data_in:	
  5009  0137                     	ds	3
  5010  013A                     _ep_data_out:	
  5011  013A                     	ds	3
  5012  013D                     _pBDTEntryIn:	
  5013  013D                     	ds	3
  5014  0140                     _pBDTEntryOut:	
  5015  0140                     	ds	3
  5016  0143                     _send32_data:	
  5017  0143                     	ds	2
  5018  0145                     _BothEP0OutUOWNsSet:	
  5019  0145                     	ds	1
  5020  0146                     _CDCDataInHandle:	
  5021  0146                     	ds	1
  5022  0147                     _CDCDataOutHandle:	
  5023  0147                     	ds	1
  5024  0148                     _I2CAddr:	
  5025  0148                     	ds	1
  5026  0149                     _I2CCmd:	
  5027  0149                     	ds	1
  5028  014A                     _I2CCount:	
  5029  014A                     	ds	1
  5030  014B                     _RemoteWakeup:	
  5031  014B                     	ds	1
  5032  014C                     _ResultQC:	
  5033  014C                     	ds	1
  5034  014D                     _SlaveAddress:	
  5035  014D                     	ds	1
  5036  014E                     _USBDeferINDataStagePackets:	
  5037  014E                     	ds	1
  5038  014F                     _USBDeferOUTDataStagePackets:	
  5039  014F                     	ds	1
  5040  0150                     _USBDeferStatusStagePacket:	
  5041  0150                     	ds	1
  5042  0151                     _USBDeviceState:	
  5043  0151                     	ds	1
  5044  0152                     _USBStatusStageEnabledFlag1:	
  5045  0152                     	ds	1
  5046  0153                     _USBStatusStageEnabledFlag2:	
  5047  0153                     	ds	1
  5048  0154                     _USBStatusStageTimeoutCounter:	
  5049  0154                     	ds	1
  5050  0155                     _WorkNow:	
  5051  0155                     	ds	1
  5052  0156                     _cdc_mem_type:	
  5053  0156                     	ds	1
  5054  0157                     _cdc_rx_len:	
  5055  0157                     	ds	1
  5056  0158                     _cdc_trf_state:	
  5057  0158                     	ds	1
  5058  0159                     _cdc_tx_len:	
  5059  0159                     	ds	1
  5060  015A                     _controlTransferState:	
  5061  015A                     	ds	1
  5062  015B                     _endpoint_number:	
  5063  015B                     	ds	1
  5064  015C                     _last_bit0:	
  5065  015C                     	ds	1
  5066  015D                     _last_bit1:	
  5067  015D                     	ds	1
  5068  015E                     _pBDTEntryEP0OutCurrent:	
  5069  015E                     	ds	1
  5070  015F                     _pDst:	
  5071  015F                     	ds	1
  5072  0160                     _ptr:	
  5073  0160                     	ds	1
  5074  0161                     _send32_count:	
  5075  0161                     	ds	1
  5076  0162                     _shortPacketStatus:	
  5077  0162                     	ds	1
  5078  0163                     _inPipes:	
  5079  0163                     	ds	5
  5080  0168                     _I2CState:	
  5081  0168                     	ds	1
  5082  0169                     _USBActiveConfiguration:	
  5083  0169                     	ds	1
  5084  016A                     _USTATcopy:	
  5085  016A                     	ds	1
  5086                           
  5087                           	psect	dataBANK2
  5088  016F                     __pdataBANK2:	
  5089  016F                     _HashTime:	
  5090  016F                     	ds	1
  5091                           
  5092                           	psect	bssBANK3
  5093  01A0                     __pbssBANK3:	
  5094  01A0                     _ResultQue:	
  5095  01A0                     	ds	8
  5096  01A8                     _pCDCDst:	
  5097  01A8                     	ds	2
  5098  01AA                     _pCDCSrc:	
  5099  01AA                     	ds	2
  5100  01AC                     _I2CInBuf:	
  5101  01AC                     	ds	1
  5102  01AD                     _SlowTick:	
  5103  01AD                     	ds	1
  5104  01AE                     _USBBusIsSuspended:	
  5105  01AE                     	ds	1
  5106  01AF                     _PrecalcHashes:	
  5107  01AF                     	ds	24
  5108  01C7                     _dummy_encapsulated_cmd_response:	
  5109  01C7                     	ds	8
  5110  01CF                     _USBAlternateInterface:	
  5111  01CF                     	ds	2
  5112                           
  5113                           	psect	dataBANK3
  5114  01D1                     __pdataBANK3:	
  5115  01D1                     _WorkTicks:	
  5116  01D1                     	ds	2
  5117  01D3                     _Status:	
  5118  01D3                     	ds	11
  5119  01DE                     _ClockCfg:	
  5120  01DE                     	ds	8
  5121  01E6                     _Cfg:	
  5122  01E6                     	ds	5
  5123                           
  5124                           	psect	bssBANK4
  5125  0260                     __pbssBANK4:	
  5126  0260                     _buf:	
  5127  0260                     	ds	16
  5128                           
  5129                           	psect	bssBANK6
  5130  0320                     __pbssBANK6:	
  5131  0320                     _NonceRanges:	
  5132  0320                     	ds	32
  5133                           
  5134                           	psect	bssBANK7
  5135  03A0                     __pbssBANK7:	
  5136  03A0                     _USB_In_Buffer:	
  5137  03A0                     	ds	64
  5138                           
  5139                           	psect	bssBANK8
  5140  0420                     __pbssBANK8:	
  5141  0420                     _USB_Out_Buffer:	
  5142  0420                     	ds	64
  5143                           
  5144                           	psect	clrtext
  5145  137C                     clear_ram:	
  5146                           ;	Called with FSR0 containing the base address, and
  5147                           ;	btemp/btemp+1 has the size to clear
  5148                           
  5149  137C  0064               	clrwdt	;clear the watchdog before getting into this loop
  5150  137D                     clrloop:	
  5151  137D  0180               	clrf	0	;clear RAM location pointed to by FSR
  5152  137E  3101               	addfsr 0,1
  5153  137F  3001               	movlw	1
  5154  1380  02FE               	subwf	126,f
  5155  1381  3000               	movlw	0
  5156  1382  3BFF               	subwfb	127,f
  5157  1383  087F               	movf	127,w
  5158  1384  047E               	iorwf	126,w
  5159  1385  1903               	btfsc	3,2
  5160  1386  3400               	retlw	0	;all done for this memory range, return
  5161  1387  2B7D               	goto	clrloop	;have we reached the end yet?
  5162                           
  5163                           	psect	inittext
  5164  1370                     init_ram:	
  5165  1370  00FE               	movwf	126
  5166  1371                     initloop:	
  5167  1371  0012               	moviw fsr0++
  5168  1372  001E               	movwi fsr1++
  5169  1373  3001               	movlw	1
  5170  1374  02FE               	subwf	126,f
  5171  1375  3000               	movlw	0
  5172  1376  3BFF               	subwfb	127,f
  5173  1377  087F               	movf	127,w
  5174  1378  047E               	iorwf	126,w
  5175  1379  1903               	btfsc	3,2
  5176  137A  3400               	retlw	0
  5177  137B  2B71               	goto	initloop
  5178                           
  5179                           	psect	cstackBANK2
  5180  016B                     __pcstackBANK2:	
  5181  016B                     	ds	2
  5182  016D                     DetectAsics@x:	
  5183                           
  5184                           ; 1 bytes @ 0x2
  5185  016D                     	ds	1
  5186  016E                     DetectAsics@x_3070:	
  5187                           
  5188                           ; 1 bytes @ 0x3
  5189  016E                     	ds	1
  5190                           
  5191                           	psect	cstackBANK1
  5192  00A0                     __pcstackBANK1:	
  5193  00A0                     ??_Send32:	
  5194  00A0                     ??_USBDeviceInit:	
  5195                           ; 0 bytes @ 0x0
  5196                           
  5197  00A0                     ??_USBDeviceAttach:	
  5198                           ; 0 bytes @ 0x0
  5199                           
  5200  00A0                     ?_putUSBUSART:	
  5201                           ; 0 bytes @ 0x0
  5202                           
  5203  00A0                     ?_I2CRelay:	
  5204                           ; 0 bytes @ 0x0
  5205                           
  5206  00A0                     ??_I2CDetect:	
  5207                           ; 0 bytes @ 0x0
  5208                           
  5209  00A0                     ??_InitI2CSlave:	
  5210                           ; 0 bytes @ 0x0
  5211                           
  5212  00A0                     ??_InitI2CMaster:	
  5213                           ; 0 bytes @ 0x0
  5214                           
  5215  00A0                     ??_InitFAN:	
  5216                           ; 0 bytes @ 0x0
  5217                           
  5218  00A0                     ??_InitTempSensor:	
  5219                           ; 0 bytes @ 0x0
  5220                           
  5221  00A0                     ??_InitWorkTick:	
  5222                           ; 0 bytes @ 0x0
  5223                           
  5224  00A0                     ?_USBTransferOnePacket:	
  5225                           ; 0 bytes @ 0x0
  5226                           
  5227  00A0                     ?___bmul:	
  5228                           ; 1 bytes @ 0x0
  5229                           
  5230  00A0                     ?___wmul:	
  5231                           ; 1 bytes @ 0x0
  5232                           
  5233  00A0                     ?___lwdiv:	
  5234                           ; 2 bytes @ 0x0
  5235                           
  5236  00A0                     ?___awdiv:	
  5237                           ; 2 bytes @ 0x0
  5238                           
  5239  00A0                     USBTransferOnePacket@dir:	
  5240                           ; 2 bytes @ 0x0
  5241                           
  5242  00A0                     putUSBUSART@length:	
  5243                           ; 1 bytes @ 0x0
  5244                           
  5245  00A0                     I2CRelay@count:	
  5246                           ; 1 bytes @ 0x0
  5247                           
  5248  00A0                     ___bmul@multiplicand:	
  5249                           ; 1 bytes @ 0x0
  5250                           
  5251  00A0                     ___wmul@multiplier:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  00A0                     ___lwdiv@divisor:	
  5255                           ; 2 bytes @ 0x0
  5256                           
  5257  00A0                     ___awdiv@divisor:	
  5258                           ; 2 bytes @ 0x0
  5259                           
  5260                           
  5261                           ; 2 bytes @ 0x0
  5262  00A0                     	ds	1
  5263  00A1                     ??_putUSBUSART:	
  5264  00A1                     ??_I2CRelay:	
  5265                           ; 0 bytes @ 0x1
  5266                           
  5267  00A1                     ??___bmul:	
  5268                           ; 0 bytes @ 0x1
  5269                           
  5270  00A1                     USBTransferOnePacket@data:	
  5271                           ; 0 bytes @ 0x1
  5272                           
  5273  00A1                     putUSBUSART@data:	
  5274                           ; 1 bytes @ 0x1
  5275                           
  5276  00A1                     I2CRelay@data:	
  5277                           ; 1 bytes @ 0x1
  5278                           
  5279  00A1                     ___bmul@product:	
  5280                           ; 1 bytes @ 0x1
  5281                           
  5282                           
  5283                           ; 1 bytes @ 0x1
  5284  00A1                     	ds	1
  5285  00A2                     ?_SendCmdReply:	
  5286  00A2                     USBTransferOnePacket@len:	
  5287                           ; 0 bytes @ 0x2
  5288                           
  5289  00A2                     ___bmul@multiplier:	
  5290                           ; 1 bytes @ 0x2
  5291                           
  5292  00A2                     USBDeviceInit@p:	
  5293                           ; 1 bytes @ 0x2
  5294                           
  5295  00A2                     SendCmdReply@cmd:	
  5296                           ; 2 bytes @ 0x2
  5297                           
  5298  00A2                     ___wmul@multiplicand:	
  5299                           ; 2 bytes @ 0x2
  5300                           
  5301  00A2                     ___lwdiv@dividend:	
  5302                           ; 2 bytes @ 0x2
  5303                           
  5304  00A2                     ___awdiv@dividend:	
  5305                           ; 2 bytes @ 0x2
  5306                           
  5307                           
  5308                           ; 2 bytes @ 0x2
  5309  00A2                     	ds	1
  5310  00A3                     ??_USBTransferOnePacket:	
  5311  00A3                     ?_rotate:	
  5312                           ; 0 bytes @ 0x3
  5313                           
  5314  00A3                     rotate@x:	
  5315                           ; 4 bytes @ 0x3
  5316                           
  5317                           
  5318                           ; 4 bytes @ 0x3
  5319  00A3                     	ds	1
  5320  00A4                     ??___wmul:	
  5321  00A4                     ??___lwdiv:	
  5322                           ; 0 bytes @ 0x4
  5323                           
  5324  00A4                     ??___awdiv:	
  5325                           ; 0 bytes @ 0x4
  5326                           
  5327  00A4                     USBDeviceInit@i_750:	
  5328                           ; 0 bytes @ 0x4
  5329                           
  5330  00A4                     ___lwdiv@counter:	
  5331                           ; 1 bytes @ 0x4
  5332                           
  5333  00A4                     ___awdiv@counter:	
  5334                           ; 1 bytes @ 0x4
  5335                           
  5336  00A4                     SendCmdReply@data:	
  5337                           ; 1 bytes @ 0x4
  5338                           
  5339  00A4                     ___wmul@product:	
  5340                           ; 2 bytes @ 0x4
  5341                           
  5342                           
  5343                           ; 2 bytes @ 0x4
  5344  00A4                     	ds	1
  5345  00A5                     USBDeviceInit@i:	
  5346  00A5                     USBTransferOnePacket@ep:	
  5347                           ; 1 bytes @ 0x5
  5348                           
  5349  00A5                     ___awdiv@sign:	
  5350                           ; 1 bytes @ 0x5
  5351                           
  5352  00A5                     ___lwdiv@quotient:	
  5353                           ; 1 bytes @ 0x5
  5354                           
  5355                           
  5356                           ; 2 bytes @ 0x5
  5357  00A5                     	ds	1
  5358  00A6                     ?_SendAsicData:	
  5359  00A6                     USBTransferOnePacket@handle:	
  5360                           ; 0 bytes @ 0x6
  5361                           
  5362  00A6                     SendCmdReply@count:	
  5363                           ; 1 bytes @ 0x6
  5364                           
  5365  00A6                     SendAsicData@work:	
  5366                           ; 1 bytes @ 0x6
  5367                           
  5368  00A6                     ___awdiv@quotient:	
  5369                           ; 2 bytes @ 0x6
  5370                           
  5371                           
  5372                           ; 2 bytes @ 0x6
  5373  00A6                     	ds	1
  5374  00A7                     ??_SendCmdReply:	
  5375  00A7                     ??_CDCTxService:	
  5376                           ; 0 bytes @ 0x7
  5377                           
  5378  00A7                     ?_getsUSBUSART:	
  5379                           ; 0 bytes @ 0x7
  5380                           
  5381  00A7                     getsUSBUSART@len:	
  5382                           ; 1 bytes @ 0x7
  5383                           
  5384  00A7                     rotate@y:	
  5385                           ; 1 bytes @ 0x7
  5386                           
  5387  00A7                     _CDCTxService$2241:	
  5388                           ; 1 bytes @ 0x7
  5389                           
  5390                           
  5391                           ; 2 bytes @ 0x7
  5392  00A7                     	ds	1
  5393  00A8                     ??_getsUSBUSART:	
  5394  00A8                     ??_rotate:	
  5395                           ; 0 bytes @ 0x8
  5396                           
  5397  00A8                     SendAsicData@split:	
  5398                           ; 0 bytes @ 0x8
  5399                           
  5400                           
  5401                           ; 1 bytes @ 0x8
  5402  00A8                     	ds	1
  5403  00A9                     ??_SendAsicData:	
  5404  00A9                     getsUSBUSART@buffer:	
  5405                           ; 0 bytes @ 0x9
  5406                           
  5407  00A9                     CDCTxService@i:	
  5408                           ; 1 bytes @ 0x9
  5409                           
  5410  00A9                     SendCmdReply@n:	
  5411                           ; 1 bytes @ 0x9
  5412                           
  5413                           
  5414                           ; 1 bytes @ 0x9
  5415  00A9                     	ds	1
  5416  00AA                     CDCTxService@byte_to_send:	
  5417  00AA                     _getsUSBUSART$2193:	
  5418                           ; 1 bytes @ 0xA
  5419                           
  5420                           
  5421                           ; 2 bytes @ 0xA
  5422  00AA                     	ds	6
  5423  00B0                     ?_AsicPreCalc:	
  5424  00B0                     AsicPreCalc@work:	
  5425                           ; 0 bytes @ 0x10
  5426                           
  5427                           
  5428                           ; 2 bytes @ 0x10
  5429  00B0                     	ds	2
  5430  00B2                     ??_AsicPreCalc:	
  5431                           
  5432                           ; 0 bytes @ 0x12
  5433  00B2                     	ds	8
  5434  00BA                     AsicPreCalc@z:	
  5435                           
  5436                           ; 4 bytes @ 0x1A
  5437  00BA                     	ds	4
  5438  00BE                     AsicPreCalc@m:	
  5439                           
  5440                           ; 32 bytes @ 0x1E
  5441  00BE                     	ds	32
  5442  00DE                     AsicPreCalc@y:	
  5443                           
  5444                           ; 4 bytes @ 0x3E
  5445  00DE                     	ds	4
  5446  00E2                     AsicPreCalc@x:	
  5447                           
  5448                           ; 4 bytes @ 0x42
  5449  00E2                     	ds	4
  5450  00E6                     AsicPreCalc@n:	
  5451                           
  5452                           ; 1 bytes @ 0x46
  5453  00E6                     	ds	1
  5454  00E7                     ??_AsicPushWork:	
  5455  00E7                     ??_DetectAsics:	
  5456                           ; 0 bytes @ 0x47
  5457                           
  5458                           
  5459                           ; 0 bytes @ 0x47
  5460  00E7                     	ds	2
  5461  00E9                     ??_ProcessCmd:	
  5462                           
  5463                           ; 0 bytes @ 0x49
  5464  00E9                     	ds	2
  5465  00EB                     _ProcessCmd$3040:	
  5466                           
  5467                           ; 2 bytes @ 0x4B
  5468  00EB                     	ds	2
  5469  00ED                     ??_InitializeSystem:	
  5470  00ED                     ??_UserInit:	
  5471                           ; 0 bytes @ 0x4D
  5472                           
  5473  00ED                     ProcessCmd@cmd:	
  5474                           ; 0 bytes @ 0x4D
  5475                           
  5476                           
  5477                           ; 1 bytes @ 0x4D
  5478  00ED                     	ds	1
  5479  00EE                     ??_ProcessIO:	
  5480  00EE                     ProcessIO@numBytesRead:	
  5481                           ; 0 bytes @ 0x4E
  5482                           
  5483                           
  5484                           ; 1 bytes @ 0x4E
  5485  00EE                     	ds	1
  5486  00EF                     ??_main:	
  5487                           
  5488                           	psect	cstackCOMMON
  5489  0070                     __pcstackCOMMON:	
  5490                           ; 0 bytes @ 0x4F
  5491                           
  5492  0070                     ?_USBWakeFromSuspend:	
  5493  0070                     ?_USBSuspend:	
  5494                           ; 0 bytes @ 0x0
  5495                           
  5496  0070                     ?_USBCtrlEPAllowStatusStage:	
  5497                           ; 0 bytes @ 0x0
  5498                           
  5499  0070                     ??_USBCtrlEPAllowStatusStage:	
  5500                           ; 0 bytes @ 0x0
  5501                           
  5502  0070                     ?_USBStallHandler:	
  5503                           ; 0 bytes @ 0x0
  5504                           
  5505  0070                     ??_USBStallHandler:	
  5506                           ; 0 bytes @ 0x0
  5507                           
  5508  0070                     ?_USBCtrlEPService:	
  5509                           ; 0 bytes @ 0x0
  5510                           
  5511  0070                     ?_USBConfigureEndpoint:	
  5512                           ; 0 bytes @ 0x0
  5513                           
  5514  0070                     ?_USBCtrlTrfTxService:	
  5515                           ; 0 bytes @ 0x0
  5516                           
  5517  0070                     ??_USBCtrlTrfTxService:	
  5518                           ; 0 bytes @ 0x0
  5519                           
  5520  0070                     ?_USBCtrlTrfSetupHandler:	
  5521                           ; 0 bytes @ 0x0
  5522                           
  5523  0070                     ?_USBCtrlTrfOutHandler:	
  5524                           ; 0 bytes @ 0x0
  5525                           
  5526  0070                     ?_USBCtrlTrfInHandler:	
  5527                           ; 0 bytes @ 0x0
  5528                           
  5529  0070                     ?_USBCheckStdRequest:	
  5530                           ; 0 bytes @ 0x0
  5531                           
  5532  0070                     ?_USBStdFeatureReqHandler:	
  5533                           ; 0 bytes @ 0x0
  5534                           
  5535  0070                     ?_Send32:	
  5536                           ; 0 bytes @ 0x0
  5537                           
  5538  0070                     ?_AsicPushWork:	
  5539                           ; 0 bytes @ 0x0
  5540                           
  5541  0070                     ?_InitializeSystem:	
  5542                           ; 0 bytes @ 0x0
  5543                           
  5544  0070                     ?_ProcessIO:	
  5545                           ; 0 bytes @ 0x0
  5546                           
  5547  0070                     ?_UserInit:	
  5548                           ; 0 bytes @ 0x0
  5549                           
  5550  0070                     ?_USBDeviceInit:	
  5551                           ; 0 bytes @ 0x0
  5552                           
  5553  0070                     ?_USBDeviceTasks:	
  5554                           ; 0 bytes @ 0x0
  5555                           
  5556  0070                     ?_USBDeviceAttach:	
  5557                           ; 0 bytes @ 0x0
  5558                           
  5559  0070                     ?_USBCtrlEPAllowDataStage:	
  5560                           ; 0 bytes @ 0x0
  5561                           
  5562  0070                     ?_USBCtrlEPServiceComplete:	
  5563                           ; 0 bytes @ 0x0
  5564                           
  5565  0070                     ?_USBCtrlTrfRxService:	
  5566                           ; 0 bytes @ 0x0
  5567                           
  5568  0070                     ?_USBStdSetCfgHandler:	
  5569                           ; 0 bytes @ 0x0
  5570                           
  5571  0070                     ?_USBStdGetDscHandler:	
  5572                           ; 0 bytes @ 0x0
  5573                           
  5574  0070                     ??_USBStdGetDscHandler:	
  5575                           ; 0 bytes @ 0x0
  5576                           
  5577  0070                     ?_USBStdGetStatusHandler:	
  5578                           ; 0 bytes @ 0x0
  5579                           
  5580  0070                     ??_USBStdGetStatusHandler:	
  5581                           ; 0 bytes @ 0x0
  5582                           
  5583  0070                     ?_USBCheckCDCRequest:	
  5584                           ; 0 bytes @ 0x0
  5585                           
  5586  0070                     ??_USBCheckCDCRequest:	
  5587                           ; 0 bytes @ 0x0
  5588                           
  5589  0070                     ?_CDCInitEP:	
  5590                           ; 0 bytes @ 0x0
  5591                           
  5592  0070                     ?_CDCTxService:	
  5593                           ; 0 bytes @ 0x0
  5594                           
  5595  0070                     ?_I2CPoll:	
  5596                           ; 0 bytes @ 0x0
  5597                           
  5598  0070                     ??_I2CPoll:	
  5599                           ; 0 bytes @ 0x0
  5600                           
  5601  0070                     ?_I2CDetect:	
  5602                           ; 0 bytes @ 0x0
  5603                           
  5604  0070                     ?_I2CRead:	
  5605                           ; 0 bytes @ 0x0
  5606                           
  5607  0070                     ?_I2CWrite:	
  5608                           ; 0 bytes @ 0x0
  5609                           
  5610  0070                     ??_I2CWrite:	
  5611                           ; 0 bytes @ 0x0
  5612                           
  5613  0070                     ?_I2CSlave:	
  5614                           ; 0 bytes @ 0x0
  5615                           
  5616  0070                     ??_I2CSlave:	
  5617                           ; 0 bytes @ 0x0
  5618                           
  5619  0070                     ?_InitI2CSlave:	
  5620                           ; 0 bytes @ 0x0
  5621                           
  5622  0070                     ?_InitI2CMaster:	
  5623                           ; 0 bytes @ 0x0
  5624                           
  5625  0070                     ?_ProcessCmd:	
  5626                           ; 0 bytes @ 0x0
  5627                           
  5628  0070                     ?_CheckFanSpeed:	
  5629                           ; 0 bytes @ 0x0
  5630                           
  5631  0070                     ??_CheckFanSpeed:	
  5632                           ; 0 bytes @ 0x0
  5633                           
  5634  0070                     ?_DetectAsics:	
  5635                           ; 0 bytes @ 0x0
  5636                           
  5637  0070                     ?_WorkTick:	
  5638                           ; 0 bytes @ 0x0
  5639                           
  5640  0070                     ?_ResultRx:	
  5641                           ; 0 bytes @ 0x0
  5642                           
  5643  0070                     ?_UpdateFanSpeed:	
  5644                           ; 0 bytes @ 0x0
  5645                           
  5646  0070                     ??_UpdateFanSpeed:	
  5647                           ; 0 bytes @ 0x0
  5648                           
  5649  0070                     ?_InitFAN:	
  5650                           ; 0 bytes @ 0x0
  5651                           
  5652  0070                     ?_InitTempSensor:	
  5653                           ; 0 bytes @ 0x0
  5654                           
  5655  0070                     ?_InitWorkTick:	
  5656                           ; 0 bytes @ 0x0
  5657                           
  5658  0070                     ?_ISRCode:	
  5659                           ; 0 bytes @ 0x0
  5660                           
  5661  0070                     ?_USBCBSuspend:	
  5662                           ; 0 bytes @ 0x0
  5663                           
  5664  0070                     ??_USBCBSuspend:	
  5665                           ; 0 bytes @ 0x0
  5666                           
  5667  0070                     ?_USBCBWakeFromSuspend:	
  5668                           ; 0 bytes @ 0x0
  5669                           
  5670  0070                     ??_USBCBWakeFromSuspend:	
  5671                           ; 0 bytes @ 0x0
  5672                           
  5673  0070                     ?_USBCB_SOF_Handler:	
  5674                           ; 0 bytes @ 0x0
  5675                           
  5676  0070                     ??_USBCB_SOF_Handler:	
  5677                           ; 0 bytes @ 0x0
  5678                           
  5679  0070                     ?_USBCBErrorHandler:	
  5680                           ; 0 bytes @ 0x0
  5681                           
  5682  0070                     ??_USBCBErrorHandler:	
  5683                           ; 0 bytes @ 0x0
  5684                           
  5685  0070                     ?_USBCBCheckOtherReq:	
  5686                           ; 0 bytes @ 0x0
  5687                           
  5688  0070                     ??_USBCBCheckOtherReq:	
  5689                           ; 0 bytes @ 0x0
  5690                           
  5691  0070                     ?_USBCBStdSetDscHandler:	
  5692                           ; 0 bytes @ 0x0
  5693                           
  5694  0070                     ??_USBCBStdSetDscHandler:	
  5695                           ; 0 bytes @ 0x0
  5696                           
  5697  0070                     ?_USBCBInitEP:	
  5698                           ; 0 bytes @ 0x0
  5699                           
  5700  0070                     ?i1_USBDeviceInit:	
  5701                           ; 0 bytes @ 0x0
  5702                           
  5703  0070                     ??i1_USBDeviceInit:	
  5704                           ; 0 bytes @ 0x0
  5705                           
  5706  0070                     ?i1_putUSBUSART:	
  5707                           ; 0 bytes @ 0x0
  5708                           
  5709  0070                     ?i1_USBTransferOnePacket:	
  5710                           ; 0 bytes @ 0x0
  5711                           
  5712  0070                     ?_memset:	
  5713                           ; 1 bytes @ 0x0
  5714                           
  5715  0070                     ?_main:	
  5716                           ; 2 bytes @ 0x0
  5717                           
  5718  0070                     ?i1___wmul:	
  5719                           ; 2 bytes @ 0x0
  5720                           
  5721  0070                     USBConfigureEndpoint@direction:	
  5722                           ; 2 bytes @ 0x0
  5723                           
  5724  0070                     USBStdGetStatusHandler@p:	
  5725                           ; 1 bytes @ 0x0
  5726                           
  5727  0070                     i1USBTransferOnePacket@dir:	
  5728                           ; 1 bytes @ 0x0
  5729                           
  5730  0070                     i1putUSBUSART@length:	
  5731                           ; 1 bytes @ 0x0
  5732                           
  5733  0070                     memset@p1:	
  5734                           ; 1 bytes @ 0x0
  5735                           
  5736  0070                     i1___wmul@multiplier:	
  5737                           ; 2 bytes @ 0x0
  5738                           
  5739                           
  5740                           ; 2 bytes @ 0x0
  5741  0070                     	ds	1
  5742  0071                     ??_USBConfigureEndpoint:	
  5743  0071                     ??_WorkTick:	
  5744                           ; 0 bytes @ 0x1
  5745                           
  5746  0071                     ??i1_putUSBUSART:	
  5747                           ; 0 bytes @ 0x1
  5748                           
  5749  0071                     i1USBTransferOnePacket@data:	
  5750                           ; 0 bytes @ 0x1
  5751                           
  5752  0071                     i1putUSBUSART@data:	
  5753                           ; 1 bytes @ 0x1
  5754                           
  5755                           
  5756                           ; 1 bytes @ 0x1
  5757  0071                     	ds	1
  5758  0072                     ??_USBCtrlTrfRxService:	
  5759  0072                     ?i1_SendCmdReply:	
  5760                           ; 0 bytes @ 0x2
  5761                           
  5762  0072                     USBConfigureEndpoint@EPNum:	
  5763                           ; 0 bytes @ 0x2
  5764                           
  5765  0072                     USBCtrlTrfTxService@byteToSend:	
  5766                           ; 1 bytes @ 0x2
  5767                           
  5768  0072                     i1USBTransferOnePacket@len:	
  5769                           ; 1 bytes @ 0x2
  5770                           
  5771  0072                     memset@c:	
  5772                           ; 1 bytes @ 0x2
  5773                           
  5774  0072                     i1USBDeviceInit@p:	
  5775                           ; 2 bytes @ 0x2
  5776                           
  5777  0072                     i1SendCmdReply@cmd:	
  5778                           ; 2 bytes @ 0x2
  5779                           
  5780  0072                     i1___wmul@multiplicand:	
  5781                           ; 2 bytes @ 0x2
  5782                           
  5783                           
  5784                           ; 2 bytes @ 0x2
  5785  0072                     	ds	1
  5786  0073                     ??_USBCtrlTrfInHandler:	
  5787  0073                     ??_USBCtrlEPAllowDataStage:	
  5788                           ; 0 bytes @ 0x3
  5789                           
  5790  0073                     ??i1_USBTransferOnePacket:	
  5791                           ; 0 bytes @ 0x3
  5792                           
  5793  0073                     USBConfigureEndpoint@handle:	
  5794                           ; 0 bytes @ 0x3
  5795                           
  5796                           
  5797                           ; 1 bytes @ 0x3
  5798  0073                     	ds	1
  5799  0074                     ?_USBEnableEndpoint:	
  5800  0074                     ??i1___wmul:	
  5801                           ; 0 bytes @ 0x4
  5802                           
  5803  0074                     USBEnableEndpoint@options:	
  5804                           ; 0 bytes @ 0x4
  5805                           
  5806  0074                     USBCtrlTrfRxService@i:	
  5807                           ; 1 bytes @ 0x4
  5808                           
  5809  0074                     i1USBDeviceInit@i_750:	
  5810                           ; 1 bytes @ 0x4
  5811                           
  5812  0074                     _I2CSlave$2556:	
  5813                           ; 1 bytes @ 0x4
  5814                           
  5815  0074                     memset@n:	
  5816                           ; 2 bytes @ 0x4
  5817                           
  5818  0074                     i1SendCmdReply@data:	
  5819                           ; 2 bytes @ 0x4
  5820                           
  5821  0074                     i1___wmul@product:	
  5822                           ; 2 bytes @ 0x4
  5823                           
  5824                           
  5825                           ; 2 bytes @ 0x4
  5826  0074                     	ds	1
  5827  0075                     ??_USBEnableEndpoint:	
  5828  0075                     ??_USBCtrlEPServiceComplete:	
  5829                           ; 0 bytes @ 0x5
  5830                           
  5831  0075                     USBCtrlTrfRxService@byteToRead:	
  5832                           ; 0 bytes @ 0x5
  5833                           
  5834  0075                     USBCtrlTrfInHandler@lastDTS:	
  5835                           ; 1 bytes @ 0x5
  5836                           
  5837  0075                     i1USBDeviceInit@i:	
  5838                           ; 1 bytes @ 0x5
  5839                           
  5840  0075                     i1USBTransferOnePacket@ep:	
  5841                           ; 1 bytes @ 0x5
  5842                           
  5843                           
  5844                           ; 1 bytes @ 0x5
  5845  0075                     	ds	1
  5846  0076                     ??_memset:	
  5847  0076                     ??_USBCtrlTrfOutHandler:	
  5848                           ; 0 bytes @ 0x6
  5849                           
  5850  0076                     i1USBTransferOnePacket@handle:	
  5851                           ; 0 bytes @ 0x6
  5852                           
  5853  0076                     i1SendCmdReply@count:	
  5854                           ; 1 bytes @ 0x6
  5855                           
  5856                           
  5857                           ; 1 bytes @ 0x6
  5858  0076                     	ds	1
  5859  0077                     ??i1_SendCmdReply:	
  5860  0077                     USBEnableEndpoint@p:	
  5861                           ; 0 bytes @ 0x7
  5862                           
  5863  0077                     memset@p:	
  5864                           ; 2 bytes @ 0x7
  5865                           
  5866                           
  5867                           ; 2 bytes @ 0x7
  5868  0077                     	ds	2
  5869  0079                     USBEnableEndpoint@ep:	
  5870  0079                     i1SendCmdReply@n:	
  5871                           ; 1 bytes @ 0x9
  5872                           
  5873                           
  5874                           ; 1 bytes @ 0x9
  5875  0079                     	ds	1
  5876  007A                     ??_USBWakeFromSuspend:	
  5877  007A                     ??_USBSuspend:	
  5878                           ; 0 bytes @ 0xA
  5879                           
  5880  007A                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  5881                           ; 0 bytes @ 0xA
  5882                           
  5883  007A                     ??_USBStdFeatureReqHandler:	
  5884                           ; 0 bytes @ 0xA
  5885                           
  5886  007A                     ??_USBStdSetCfgHandler:	
  5887                           ; 0 bytes @ 0xA
  5888                           
  5889  007A                     ??_CDCInitEP:	
  5890                           ; 0 bytes @ 0xA
  5891                           
  5892  007A                     ??_I2CRead:	
  5893                           ; 0 bytes @ 0xA
  5894                           
  5895  007A                     ??_ResultRx:	
  5896                           ; 0 bytes @ 0xA
  5897                           
  5898  007A                     ??_USBCBInitEP:	
  5899                           ; 0 bytes @ 0xA
  5900                           
  5901  007A                     USBStdSetCfgHandler@p:	
  5902                           ; 0 bytes @ 0xA
  5903                           
  5904                           
  5905                           ; 2 bytes @ 0xA
  5906  007A                     	ds	2
  5907  007C                     USBStdSetCfgHandler@i_1132:	
  5908                           
  5909                           ; 1 bytes @ 0xC
  5910  007C                     	ds	1
  5911  007D                     USBStdSetCfgHandler@i:	
  5912                           
  5913                           ; 1 bytes @ 0xD
  5914  007D                     	ds	1
  5915  007E                     ??_USBCtrlTrfSetupHandler:	
  5916  007E                     ??_USBCheckStdRequest:	
  5917                           ; 0 bytes @ 0xE
  5918                           
  5919                           
  5920                           	psect	cstackBANK0
  5921  0060                     __pcstackBANK0:	
  5922                           ; 0 bytes @ 0xE
  5923                           
  5924  0060                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  5925  0060                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  5926                           ; 1 bytes @ 0x0
  5927                           
  5928  0060                     ResultRx@buf:	
  5929                           ; 2 bytes @ 0x0
  5930                           
  5931                           
  5932                           ; 7 bytes @ 0x0
  5933  0060                     	ds	2
  5934  0062                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  5935                           
  5936                           ; 2 bytes @ 0x2
  5937  0062                     	ds	2
  5938  0064                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  5939                           
  5940                           ; 2 bytes @ 0x4
  5941  0064                     	ds	2
  5942  0066                     USBStdFeatureReqHandler@pUEP:	
  5943                           
  5944                           ; 2 bytes @ 0x6
  5945  0066                     	ds	1
  5946  0067                     ResultRx@Rw:	
  5947                           
  5948                           ; 1 bytes @ 0x7
  5949  0067                     	ds	1
  5950  0068                     USBStdFeatureReqHandler@current_ep_data:	
  5951                           
  5952                           ; 1 bytes @ 0x8
  5953  0068                     	ds	1
  5954  0069                     USBStdFeatureReqHandler@p:	
  5955                           
  5956                           ; 1 bytes @ 0x9
  5957  0069                     	ds	1
  5958  006A                     ??_USBCtrlEPService:	
  5959                           
  5960                           ; 0 bytes @ 0xA
  5961  006A                     	ds	2
  5962  006C                     USBCtrlEPService@setup_cnt:	
  5963                           
  5964                           ; 1 bytes @ 0xC
  5965  006C                     	ds	1
  5966  006D                     ??_USBDeviceTasks:	
  5967                           
  5968                           ; 0 bytes @ 0xD
  5969  006D                     	ds	1
  5970  006E                     USBDeviceTasks@i:	
  5971                           
  5972                           ; 1 bytes @ 0xE
  5973  006E                     	ds	1
  5974  006F                     ??_ISRCode:	
  5975                           
  5976                           ; 0 bytes @ 0xF
  5977  006F                     	ds	1
  5978                           
  5979                           	psect	text2439
  5980  1364                     __ptext2439:	
  5981 ;; *************** function _I2CDetect *****************
  5982 ;; Defined at:
  5983 ;;		line 58 in file "i2c.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 1F/0
  5994 ;;		On exit  : 1F/4
  5995 ;;		Unchanged: FFFE0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;Total ram usage:        0 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:   11
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_InitI2CMaster
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           
  6012                           ;psect for function _I2CDetect
  6013  1364                     _I2CDetect:	
  6014  1364                     l6978:	
  6015                           ; Regs used in _I2CDetect: [wreg+status,2+status,0]
  6016                           
  6017                           
  6018                           ;i2c.c: 59: I2CCmd = '?';
  6019  1364  303F               	movlw	63
  6020  1365  0022               	movlb	2	; select bank2
  6021  1366  00C9               	movwf	_I2CCmd^(0+256)
  6022                           
  6023                           ;i2c.c: 60: I2CCount = 4;
  6024  1367  3004               	movlw	4
  6025  1368  00CA               	movwf	_I2CCount^(0+256)
  6026                           
  6027                           ;i2c.c: 61: I2CState.Next = 1;
  6028  1369  0868               	movf	_I2CState^(0+256),w
  6029  136A  39E0               	andlw	-32
  6030  136B  3801               	iorlw	1
  6031  136C  00E8               	movwf	_I2CState^(0+256)
  6032                           
  6033                           ;i2c.c: 62: SSPCON2bits.SEN = 1;
  6034  136D  0024               	movlb	4	; select bank4
  6035  136E  1416               	bsf	22,0	;volatile
  6036  136F  0008               	return
  6037  1370                     __end_of_I2CDetect:	
  6038                           
  6039                           	psect	text2441
  6040  156E                     __ptext2441:	
  6041 ;; *************** function _USBDeviceInit *****************
  6042 ;; Defined at:
  6043 ;;		line 467 in file "../USB/usb_device.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  p               2    2[BANK1 ] PTR unsigned char 
  6048 ;;		 -> UEP1(1), 
  6049 ;;  i               1    4[BANK1 ] unsigned char 
  6050 ;;  i               1    5[BANK1 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;		None               void
  6053 ;; Registers used:
  6054 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6055 ;; Tracked objects:
  6056 ;;		On entry : 1F/3
  6057 ;;		On exit  : 1F/2
  6058 ;;		Unchanged: FFFE0/0
  6059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6064 ;;Total ram usage:        6 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:   11
  6067 ;; This function calls:
  6068 ;;		Nothing
  6069 ;; This function is called by:
  6070 ;;		_InitializeSystem
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _USBDeviceInit
  6076  156E                     _USBDeviceInit:	
  6077  156E                     l6416:	
  6078                           ; Regs used in _USBDeviceInit: [wreg+fsr1l-status,0]
  6079                           
  6080                           
  6081                           ;usb_device.c: 468: BYTE i;
  6082                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  6083  156E  0021               	movlb	1	; select bank1
  6084  156F  1112               	bcf	18,2	;volatile
  6085                           
  6086                           ;usb_device.c: 473: UEIR = 0;;
  6087  1570  003D               	movlb	29	; select bank29
  6088  1571  0193               	clrf	19	;volatile
  6089                           
  6090                           ;usb_device.c: 476: UIR = 0;;
  6091  1572  0190               	clrf	16	;volatile
  6092                           
  6093                           ;usb_device.c: 479: UEP0 = 0;
  6094  1573  0198               	clrf	24	;volatile
  6095                           
  6096                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
  6097  1574  300E               	movlw	14
  6098  1575  0021               	movlb	1	; select bank1
  6099  1576  00A3               	movwf	(USBDeviceInit@p+1)^(0+128)
  6100  1577  3099               	movlw	153
  6101  1578  00A2               	movwf	USBDeviceInit@p^(0+128)
  6102  1579  01A4               	clrf	USBDeviceInit@i_750^(0+128)
  6103  157A                     l6426:	
  6104  157A  0822               	movf	USBDeviceInit@p^(0+128),w
  6105  157B  0086               	movwf	6
  6106  157C  0823               	movf	(USBDeviceInit@p+1)^(0+128),w
  6107  157D  0087               	movwf	7
  6108  157E  0181               	clrf	1
  6109  157F  0AA2               	incf	USBDeviceInit@p^(0+128),f
  6110  1580  1903               	skipnz
  6111  1581  0AA3               	incf	(USBDeviceInit@p+1)^(0+128),f
  6112  1582  3002               	movlw	2
  6113  1583  0AA4               	incf	USBDeviceInit@i_750^(0+128),f
  6114  1584  0224               	subwf	USBDeviceInit@i_750^(0+128),w
  6115  1585  1C03               	skipc
  6116  1586  2D7A               	goto	l6426
  6117                           
  6118                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6119  1587  3016               	movlw	22
  6120  1588  003D               	movlb	29	; select bank29
  6121  1589  0091               	movwf	17	;volatile
  6122  158A  309F               	movlw	159
  6123  158B  0097               	movwf	23	;volatile
  6124  158C  307B               	movlw	123
  6125  158D  0092               	movwf	18	;volatile
  6126                           
  6127                           ;usb_device.c: 486: ;
  6128                           ;usb_device.c: 489: ;
  6129                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  6130  158E  0021               	movlb	1	; select bank1
  6131  158F  01A5               	clrf	USBDeviceInit@i^(0+128)
  6132  1590                     l6442:	
  6133                           
  6134                           ;usb_device.c: 493: {
  6135                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  6136  1590  0825               	movf	USBDeviceInit@i^(0+128),w
  6137  1591  0709               	addwf	9,w
  6138  1592  0709               	addwf	9,w
  6139  1593  3E20               	addlw	32
  6140  1594  0086               	movwf	6
  6141  1595  3000               	movlw	0
  6142  1596  0187               	clrf	7
  6143  1597  3FC0               	movwi [0]fsr1
  6144  1598  3FC1               	movwi [1]fsr1
  6145  1599  3FC2               	movwi [2]fsr1
  6146  159A  3FC3               	movwi [3]fsr1
  6147  159B  300C               	movlw	12
  6148  159C  0AA5               	incf	USBDeviceInit@i^(0+128),f
  6149  159D  0225               	subwf	USBDeviceInit@i^(0+128),w
  6150  159E  1C03               	skipc
  6151  159F  2D90               	goto	l6442
  6152                           
  6153                           ;usb_device.c: 495: }
  6154                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  6155  15A0  003D               	movlb	29	; select bank29
  6156  15A1  170E               	bsf	14,6	;volatile
  6157                           
  6158                           ;usb_device.c: 501: UADDR = 0x00;
  6159  15A2  0196               	clrf	22	;volatile
  6160                           
  6161                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  6162  15A3  120E               	bcf	14,4	;volatile
  6163                           
  6164                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  6165  15A4  130E               	bcf	14,6	;volatile
  6166  15A5                     l6456:	
  6167                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  6168                           
  6169  15A5  003D               	movlb	29	; select bank29
  6170  15A6  1D90               	btfss	16,3	;volatile
  6171  15A7  2DAF               	goto	l6458
  6172                           
  6173                           ;usb_device.c: 511: {
  6174                           ;usb_device.c: 512: (UIR &= 0xF7);
  6175  15A8  1190               	bcf	16,3	;volatile
  6176                           
  6177                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  6178  15A9  0022               	movlb	2	; select bank2
  6179  15AA  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  6180                           
  6181                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  6182  15AB  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  6183                           
  6184                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  6185  15AC  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  6186  15AD  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  6187  15AE  2DA5               	goto	l6456
  6188  15AF                     l6458:	
  6189                           
  6190                           ;usb_device.c: 517: }
  6191                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  6192  15AF  3001               	movlw	1
  6193  15B0  0022               	movlb	2	; select bank2
  6194  15B1  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6195                           
  6196                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  6197  15B2  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6198                           
  6199                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  6200  15B3  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6201                           
  6202                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
  6203  15B4  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6204                           
  6205                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  6206  15B5  0023               	movlb	3	; select bank3
  6207  15B6  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  6208                           
  6209                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(2+1u); i++)
  6210  15B7  0021               	movlb	1	; select bank1
  6211  15B8  01A5               	clrf	USBDeviceInit@i^(0+128)
  6212  15B9                     l6470:	
  6213                           
  6214                           ;usb_device.c: 531: {
  6215                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  6216  15B9  0825               	movf	USBDeviceInit@i^(0+128),w
  6217  15BA  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6218  15BB  0086               	movwf	6
  6219  15BC  3001               	movlw	1	; select bank2/3
  6220  15BD  0087               	movwf	7
  6221  15BE  0181               	clrf	1
  6222                           
  6223                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  6224  15BF  0825               	movf	USBDeviceInit@i^(0+128),w
  6225  15C0  3E40               	addlw	_pBDTEntryOut& (0+255)
  6226  15C1  0086               	movwf	6
  6227  15C2  0181               	clrf	1
  6228                           
  6229                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  6230  15C3  0825               	movf	USBDeviceInit@i^(0+128),w
  6231  15C4  3E37               	addlw	_ep_data_in& (0+255)
  6232  15C5  0086               	movwf	6
  6233  15C6  0181               	clrf	1
  6234                           
  6235                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  6236  15C7  0825               	movf	USBDeviceInit@i^(0+128),w
  6237  15C8  3E3A               	addlw	_ep_data_out& (0+255)
  6238  15C9  0086               	movwf	6
  6239  15CA  3003               	movlw	3
  6240  15CB  0181               	clrf	1
  6241  15CC  0AA5               	incf	USBDeviceInit@i^(0+128),f
  6242  15CD  0225               	subwf	USBDeviceInit@i^(0+128),w
  6243  15CE  1C03               	skipc
  6244  15CF  2DB9               	goto	l6470
  6245                           
  6246                           ;usb_device.c: 536: }
  6247                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6248  15D0  3028               	movlw	40
  6249  15D1  0022               	movlb	2	; select bank2
  6250  15D2  00BD               	movwf	_pBDTEntryIn^(0+256)
  6251                           
  6252                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  6253  15D3  3016               	movlw	22
  6254  15D4  003D               	movlb	29	; select bank29
  6255  15D5  0098               	movwf	24	;volatile
  6256                           
  6257                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6258  15D6  3050               	movlw	80
  6259  15D7  0021               	movlb	1	; select bank1
  6260  15D8  00A0               	movwf	??_USBDeviceInit^(0+128)
  6261  15D9  01A1               	clrf	(??_USBDeviceInit^(0+128)+1)
  6262  15DA  0020               	movlb	0	; select bank0
  6263  15DB  00A2               	movwf	34	;volatile
  6264  15DC  0021               	movlb	1	; select bank1
  6265  15DD  0821               	movf	(??_USBDeviceInit+1)^(0+128),w
  6266  15DE  0020               	movlb	0	; select bank0
  6267  15DF  00A3               	movwf	35	;volatile
  6268                           
  6269                           ;usb_device.c: 544: BDT[0].CNT = 8;
  6270  15E0  3008               	movlw	8
  6271  15E1  00A1               	movwf	33	;volatile
  6272                           
  6273                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  6274  15E2  3084               	movlw	132
  6275  15E3  00A0               	movwf	32	;volatile
  6276                           
  6277                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  6278  15E4  0022               	movlb	2	; select bank2
  6279  15E5  01E9               	clrf	_USBActiveConfiguration^(0+256)	;volatile
  6280                           
  6281                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  6282  15E6  01D1               	clrf	_USBDeviceState^(0+256)	;volatile
  6283  15E7  0008               	return
  6284  15E8                     __end_of_USBDeviceInit:	
  6285                           
  6286                           	psect	text2444
  6287  0737                     __ptext2444:	
  6288 ;; *************** function _CDCTxService *****************
  6289 ;; Defined at:
  6290 ;;		line 956 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  byte_to_send    1   10[BANK1 ] unsigned char 
  6295 ;;  i               1    9[BANK1 ] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;		None               void
  6298 ;; Registers used:
  6299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 18/2
  6302 ;;		On exit  : 1F/1
  6303 ;;		Unchanged: FFFE0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:        4 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:   12
  6312 ;; This function calls:
  6313 ;;		_USBTransferOnePacket
  6314 ;; This function is called by:
  6315 ;;		_ProcessIO
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _CDCTxService
  6321  0737                     _CDCTxService:	
  6322  0737                     l6776:	
  6323                           ; Regs used in _CDCTxService: [wreg-status,0+pclath+cstack]
  6324                           
  6325                           
  6326                           ;usb_function_cdc.c: 957: BYTE byte_to_send;
  6327                           ;usb_function_cdc.c: 958: BYTE i;
  6328                           ;usb_function_cdc.c: 960: {PIE2bits.USBIE = 0;};
  6329  0737  0021               	movlb	1	; select bank1
  6330  0738  1112               	bcf	18,2	;volatile
  6331                           
  6332                           ;usb_function_cdc.c: 962: {};
  6333                           ;usb_function_cdc.c: 964: if((CDCDataInHandle==0?0:((volatile BDT_ENTRY*)CDCDataInHandle
      +                          )->STAT.UOWN))
  6334  0739  0022               	movlb	2	; select bank2
  6335  073A  0846               	movf	_CDCDataInHandle^(0+256),w
  6336  073B  1903               	btfsc	3,2
  6337  073C  2F46               	goto	l6782
  6338  073D  0846               	movf	_CDCDataInHandle^(0+256),w
  6339  073E  0086               	movwf	6
  6340  073F  0187               	clrf	7
  6341  0740  0D01               	rlf	1,w
  6342  0741  0D01               	rlf	1,w
  6343  0742  3901               	andlw	1
  6344  0743  0021               	movlb	1	; select bank1
  6345  0744  00A7               	movwf	_CDCTxService$2241^(0+128)
  6346  0745  2F48               	goto	L2
  6347  0746                     l6782:	
  6348  0746  0021               	movlb	1	; select bank1
  6349  0747  01A7               	clrf	_CDCTxService$2241^(0+128)
  6350  0748                     L2:	
  6351  0748  01A8               	clrf	(_CDCTxService$2241+1)^(0+128)
  6352  0749  0828               	movf	(_CDCTxService$2241+1)^(0+128),w
  6353  074A  0427               	iorwf	_CDCTxService$2241^(0+128),w
  6354  074B  1903               	skipnz
  6355  074C  2F50               	goto	l6788
  6356  074D                     l6786:	
  6357                           
  6358                           ;usb_function_cdc.c: 965: {
  6359                           ;usb_function_cdc.c: 966: {PIE2bits.USBIE = 1;};
  6360  074D  0021               	movlb	1	; select bank1
  6361  074E  1512               	bsf	18,2	;volatile
  6362                           
  6363                           ;usb_function_cdc.c: 967: return;
  6364  074F  0008               	return
  6365  0750                     l6788:	
  6366                           
  6367                           ;usb_function_cdc.c: 968: }
  6368                           ;usb_function_cdc.c: 975: if(cdc_trf_state == 3)
  6369  0750  0022               	movlb	2	; select bank2
  6370  0751  0858               	movf	_cdc_trf_state^(0+256),w
  6371  0752  3A03               	xorlw	3
  6372  0753  1903               	btfsc	3,2
  6373                           
  6374                           ;usb_function_cdc.c: 976: cdc_trf_state = 0;
  6375  0754  01D8               	clrf	_cdc_trf_state^(0+256)
  6376                           
  6377                           ;usb_function_cdc.c: 981: if(cdc_trf_state == 0)
  6378  0755  08D8               	movf	_cdc_trf_state^(0+256),f
  6379  0756  1903               	btfsc	3,2
  6380  0757  2F4D               	goto	l6786
  6381                           
  6382                           ;usb_function_cdc.c: 985: }
  6383                           ;usb_function_cdc.c: 990: if(cdc_trf_state == 2)
  6384  0758  0858               	movf	_cdc_trf_state^(0+256),w
  6385  0759  3A02               	xorlw	2
  6386  075A  1D03               	skipz
  6387  075B  2F69               	goto	l6802
  6388                           
  6389                           ;usb_function_cdc.c: 991: {
  6390                           ;usb_function_cdc.c: 992: CDCDataInHandle = USBTransferOnePacket(2,1,(0),0);
  6391  075C  0021               	movlb	1	; select bank1
  6392  075D  3002               	movlw	2
  6393  075E  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  6394  075F  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  6395  0760  01A1               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  6396  0761  01A2               	clrf	(?_USBTransferOnePacket^(0+128)+2)
  6397  0762  27A9  3187         	fcall	_USBTransferOnePacket
  6398  0764  0022               	movlb	2	; select bank2
  6399  0765  00C6               	movwf	_CDCDataInHandle^(0+256)
  6400                           
  6401                           ;usb_function_cdc.c: 994: cdc_trf_state = 3;
  6402  0766  3003               	movlw	3
  6403  0767  00D8               	movwf	_cdc_trf_state^(0+256)
  6404                           
  6405                           ;usb_function_cdc.c: 995: }
  6406  0768  2F4D               	goto	l6786
  6407  0769                     l6802:	
  6408                           
  6409                           ;usb_function_cdc.c: 996: else if(cdc_trf_state == 1)
  6410  0769  0B58               	decfsz	_cdc_trf_state^(0+256),w
  6411  076A  2F4D               	goto	l6786
  6412                           
  6413                           ;usb_function_cdc.c: 997: {
  6414                           ;usb_function_cdc.c: 1001: if(cdc_tx_len > sizeof(cdc_data_tx))
  6415  076B  3041               	movlw	65
  6416  076C  0259               	subwf	_cdc_tx_len^(0+256),w
  6417  076D  1C03               	skipc
  6418  076E  2F71               	goto	l6808
  6419                           
  6420                           ;usb_function_cdc.c: 1002: byte_to_send = sizeof(cdc_data_tx);
  6421  076F  3040               	movlw	64
  6422  0770  2F72               	goto	L3
  6423  0771                     l6808:	
  6424                           
  6425                           ;usb_function_cdc.c: 1003: else
  6426                           ;usb_function_cdc.c: 1004: byte_to_send = cdc_tx_len;
  6427  0771  0859               	movf	_cdc_tx_len^(0+256),w
  6428  0772                     L3:	
  6429  0772  0021               	movlb	1	; select bank1
  6430  0773  00AA               	movwf	CDCTxService@byte_to_send^(0+128)
  6431                           
  6432                           ;usb_function_cdc.c: 1009: cdc_tx_len = cdc_tx_len - byte_to_send;
  6433  0774  0022               	movlb	2	; select bank2
  6434  0775  02D9               	subwf	_cdc_tx_len^(0+256),f
  6435                           
  6436                           ;usb_function_cdc.c: 1011: pCDCDst.bRam = (BYTE*)&cdc_data_tx;
  6437  0776  3020               	movlw	32
  6438  0777  0023               	movlb	3	; select bank3
  6439  0778  00A8               	movwf	_pCDCDst^(0+384)
  6440                           
  6441                           ;usb_function_cdc.c: 1013: i = byte_to_send;
  6442  0779  0021               	movlb	1	; select bank1
  6443  077A  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6444  077B  00A9               	movwf	CDCTxService@i^(0+128)
  6445                           
  6446                           ;usb_function_cdc.c: 1014: if(cdc_mem_type == 0x00)
  6447  077C  0022               	movlb	2	; select bank2
  6448  077D  08D6               	movf	_cdc_mem_type^(0+256),f
  6449  077E  1903               	btfsc	3,2
  6450  077F  2F83               	goto	l6826
  6451  0780  2F8A               	goto	l6836
  6452  0781                     l6818:	
  6453                           
  6454                           ;usb_function_cdc.c: 1017: {
  6455                           ;usb_function_cdc.c: 1018: *pCDCDst.bRam = *pCDCSrc.bRom;
  6456                           
  6457                           ;usb_function_cdc.c: 1019: pCDCDst.bRam++;
  6458                           
  6459                           ;usb_function_cdc.c: 1020: pCDCSrc.bRom++;
  6460                           
  6461                           ;usb_function_cdc.c: 1021: i--;
  6462  0781  27E1  3187         	fcall	PL8	;call to abstracted procedure
  6463  0783                     l6826:	
  6464  0783  0021               	movlb	1	; select bank1
  6465  0784  08A9               	movf	CDCTxService@i^(0+128),f
  6466  0785  1903               	btfsc	3,2
  6467  0786  2F8E               	goto	l6838
  6468  0787  2F81               	goto	l6818
  6469  0788                     l6828:	
  6470                           
  6471                           ;usb_function_cdc.c: 1027: {
  6472                           ;usb_function_cdc.c: 1028: *pCDCDst.bRam = *pCDCSrc.bRam;
  6473                           
  6474                           ;usb_function_cdc.c: 1029: pCDCDst.bRam++;
  6475                           
  6476                           ;usb_function_cdc.c: 1030: pCDCSrc.bRam++;
  6477                           
  6478                           ;usb_function_cdc.c: 1031: i--;
  6479  0788  27E1  3187         	fcall	PL8	;call to abstracted procedure
  6480  078A                     l6836:	
  6481  078A  0021               	movlb	1	; select bank1
  6482  078B  08A9               	movf	CDCTxService@i^(0+128),f
  6483  078C  1D03               	skipz
  6484  078D  2F88               	goto	l6828
  6485  078E                     l6838:	
  6486                           
  6487                           ;usb_function_cdc.c: 1032: }
  6488                           ;usb_function_cdc.c: 1033: }
  6489                           ;usb_function_cdc.c: 1039: if(cdc_tx_len == 0)
  6490  078E  0022               	movlb	2	; select bank2
  6491  078F  08D9               	movf	_cdc_tx_len^(0+256),f
  6492  0790  1D03               	skipz
  6493  0791  2F9C               	goto	l6846
  6494                           
  6495                           ;usb_function_cdc.c: 1040: {
  6496                           ;usb_function_cdc.c: 1041: if(byte_to_send == 64)
  6497  0792  0021               	movlb	1	; select bank1
  6498  0793  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6499  0794  3A40               	xorlw	64
  6500  0795  1D03               	skipz
  6501  0796  2F99               	goto	l6844
  6502                           
  6503                           ;usb_function_cdc.c: 1042: cdc_trf_state = 2;
  6504  0797  3002               	movlw	2
  6505  0798  2F9A               	goto	L4
  6506  0799                     l6844:	
  6507                           
  6508                           ;usb_function_cdc.c: 1043: else
  6509                           ;usb_function_cdc.c: 1044: cdc_trf_state = 3;
  6510  0799  3003               	movlw	3
  6511  079A                     L4:	
  6512  079A  0022               	movlb	2	; select bank2
  6513  079B  00D8               	movwf	_cdc_trf_state^(0+256)
  6514  079C                     l6846:	
  6515                           
  6516                           ;usb_function_cdc.c: 1045: }
  6517                           ;usb_function_cdc.c: 1046: CDCDataInHandle = USBTransferOnePacket(2,1,(BYTE*)&cdc_data_t
      +                          x,byte_to_send);
  6518  079C  0021               	movlb	1	; select bank1
  6519  079D  3020               	movlw	32
  6520  079E  01A0               	clrf	?_USBTransferOnePacket^(0+128)
  6521  079F  0AA0               	incf	?_USBTransferOnePacket^(0+128),f
  6522  07A0  00A1               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  6523  07A1  082A               	movf	CDCTxService@byte_to_send^(0+128),w
  6524  07A2  00A2               	movwf	(?_USBTransferOnePacket^(0+128)+2)
  6525  07A3  3002               	movlw	2
  6526  07A4  27A9  3187         	fcall	_USBTransferOnePacket
  6527  07A6  0022               	movlb	2	; select bank2
  6528  07A7  00C6               	movwf	_CDCDataInHandle^(0+256)
  6529  07A8  2F4D               	goto	l6786
  6530  07A9                     __end_of_CDCTxService:	
  6531  07A9                     __ptext2445:	
  6532 ;; *************** function _USBTransferOnePacket *****************
  6533 ;; Defined at:
  6534 ;;		line 1173 in file "../USB/usb_device.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  ep              1    wreg     unsigned char 
  6537 ;;  dir             1    0[BANK1 ] unsigned char 
  6538 ;;  data            1    1[BANK1 ] PTR unsigned char 
  6539 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
  6540 ;;  len             1    2[BANK1 ] unsigned char 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  ep              1    5[BANK1 ] unsigned char 
  6543 ;;  handle          1    6[BANK1 ] PTR volatile struct __BD
  6544 ;;		 -> NULL(0), BDT(48), 
  6545 ;; Return value:  Size  Location     Type
  6546 ;;                  1    wreg      PTR void 
  6547 ;; Registers used:
  6548 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6549 ;; Tracked objects:
  6550 ;;		On entry : 1F/1
  6551 ;;		On exit  : 1F/1
  6552 ;;		Unchanged: FFFE0/0
  6553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6554 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6555 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;Total ram usage:        7 bytes
  6559 ;; Hardware stack levels used:    1
  6560 ;; Hardware stack levels required when called:   11
  6561 ;; This function calls:
  6562 ;;		Nothing
  6563 ;; This function is called by:
  6564 ;;		_getsUSBUSART
  6565 ;;		_CDCTxService
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _USBTransferOnePacket
  6571  07A9                     _USBTransferOnePacket:	
  6572                           
  6573                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l-status,0]
  6574                           ;USBTransferOnePacket@ep stored from wreg
  6575  07A9  00A5               	movwf	USBTransferOnePacket@ep^(0+128)
  6576                           
  6577                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  6578                           ;usb_device.c: 1177: if(dir != 0)
  6579  07AA  0820               	movf	USBTransferOnePacket@dir^(0+128),w
  6580  07AB  1903               	btfsc	3,2
  6581  07AC  2FB0               	goto	l6544
  6582                           
  6583                           ;usb_device.c: 1178: {
  6584                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  6585  07AD  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6586  07AE  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6587  07AF  2FB2               	goto	L5
  6588  07B0                     l6544:	
  6589                           ;usb_device.c: 1181: }
  6590                           
  6591                           
  6592                           ;usb_device.c: 1182: else
  6593                           ;usb_device.c: 1183: {
  6594                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  6595  07B0  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6596  07B1  3E40               	addlw	_pBDTEntryOut& (0+255)
  6597  07B2                     L5:	
  6598  07B2  0086               	movwf	6
  6599  07B3  3001               	movlw	1	; select bank2/3
  6600  07B4  0087               	movwf	7
  6601  07B5  0801               	movf	1,w
  6602  07B6  00A6               	movwf	USBTransferOnePacket@handle^(0+128)
  6603                           
  6604                           ;usb_device.c: 1186: }
  6605                           ;usb_device.c: 1190: if(handle == 0)
  6606  07B7  08A6               	movf	USBTransferOnePacket@handle^(0+128),f
  6607  07B8  1903               	btfsc	3,2
  6608                           
  6609                           ;usb_device.c: 1191: {
  6610                           ;usb_device.c: 1192: return 0;
  6611  07B9  3400               	retlw	0
  6612                           
  6613                           ;usb_device.c: 1193: }
  6614                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  6615  07BA  0821               	movf	USBTransferOnePacket@data^(0+128),w
  6616  07BB  00A3               	movwf	??_USBTransferOnePacket^(0+128)
  6617  07BC  3002               	movlw	2
  6618  07BD  00A4               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  6619  07BE  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6620  07BF  3E02               	addlw	2
  6621  07C0  0086               	movwf	6
  6622  07C1  0187               	clrf	7
  6623  07C2  0823               	movf	??_USBTransferOnePacket^(0+128),w
  6624  07C3  3FC0               	movwi [0]fsr1
  6625  07C4  0824               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  6626  07C5  3FC1               	movwi [1]fsr1
  6627                           
  6628                           ;usb_device.c: 1207: handle->CNT = len;
  6629  07C6  0A26               	incf	USBTransferOnePacket@handle^(0+128),w
  6630  07C7  0086               	movwf	6
  6631  07C8  0822               	movf	USBTransferOnePacket@len^(0+128),w
  6632  07C9  0081               	movwf	1
  6633                           
  6634                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  6635  07CA  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6636  07CB  0086               	movwf	6
  6637  07CC  3040               	movlw	64
  6638  07CD  0581               	andwf	1,f
  6639                           
  6640                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  6641  07CE  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6642  07CF  0086               	movwf	6
  6643  07D0  3088               	movlw	136
  6644  07D1  0481               	iorwf	1,f
  6645                           
  6646                           ;usb_device.c: 1212: if(dir != 0)
  6647  07D2  0820               	movf	USBTransferOnePacket@dir^(0+128),w
  6648  07D3  1903               	btfsc	3,2
  6649  07D4  2FD8               	goto	l6562
  6650                           
  6651                           ;usb_device.c: 1213: {
  6652                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  6653  07D5  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6654  07D6  3E3D               	addlw	_pBDTEntryIn& (0+255)
  6655  07D7  2FDA               	goto	L6
  6656  07D8                     l6562:	
  6657                           ;usb_device.c: 1216: }
  6658                           
  6659                           
  6660                           ;usb_device.c: 1217: else
  6661                           ;usb_device.c: 1218: {
  6662                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  6663  07D8  0825               	movf	USBTransferOnePacket@ep^(0+128),w
  6664  07D9  3E40               	addlw	_pBDTEntryOut& (0+255)
  6665  07DA                     L6:	
  6666  07DA  0086               	movwf	6
  6667  07DB  3001               	movlw	1	; select bank2/3
  6668  07DC  0087               	movwf	7
  6669  07DD  3004               	movlw	4
  6670  07DE  0681               	xorwf	1,f
  6671                           
  6672                           ;usb_device.c: 1221: }
  6673                           ;usb_device.c: 1222: return (void*)handle;
  6674  07DF  0826               	movf	USBTransferOnePacket@handle^(0+128),w
  6675  07E0  0008               	return
  6676  07E1                     __end_of_USBTransferOnePacket:	
  6677  07E1                     PL8:	
  6678  07E1  0023               	movlb	3	; select bank3
  6679  07E2  0828               	movf	_pCDCDst^(0+384),w
  6680  07E3  0086               	movwf	6
  6681  07E4  3002               	movlw	2	; select bank4/5
  6682  07E5  0087               	movwf	7
  6683  07E6  082A               	movf	_pCDCSrc^(0+384),w
  6684  07E7  0084               	movwf	4
  6685  07E8  3003               	movlw	3	; select bank6/7
  6686  07E9  0085               	movwf	5
  6687  07EA  0800               	movf	0,w
  6688  07EB  0081               	movwf	1
  6689  07EC  0AA8               	incf	_pCDCDst^(0+384),f
  6690  07ED  0AAA               	incf	_pCDCSrc^(0+384),f
  6691  07EE  0021               	movlb	1	; select bank1
  6692  07EF  03A9               	decf	CDCTxService@i^(0+128),f
  6693  07F0  0008               	return
  6694  07F1                     __end_ofPL8:	
  6695                           
  6696                           	psect	text2449
  6697  1388                     __ptext2449:	
  6698 ;; *************** function _putUSBUSART *****************
  6699 ;; Defined at:
  6700 ;;		line 676 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  data            1    wreg     PTR unsigned char 
  6703 ;;		 -> USB_In_Buffer(64), 
  6704 ;;  length          1    0[BANK1 ] unsigned char 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  data            1    1[BANK1 ] PTR unsigned char 
  6707 ;;		 -> USB_In_Buffer(64), 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;		None               void
  6710 ;; Registers used:
  6711 ;;		wreg, status,2, status,0
  6712 ;; Tracked objects:
  6713 ;;		On entry : 1F/1
  6714 ;;		On exit  : 1F/1
  6715 ;;		Unchanged: FFFE0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6717 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;Total ram usage:        2 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:   11
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_SendCmdReply
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _putUSBUSART
  6733  1388                     _putUSBUSART:	
  6734                           
  6735                           ; Regs used in _putUSBUSART: [wreg+status,2+status,0]
  6736                           ;putUSBUSART@data stored from wreg
  6737  1388  00A1               	movwf	putUSBUSART@data^(0+128)
  6738                           
  6739                           ;usb_function_cdc.c: 700: {PIE2bits.USBIE = 0;};
  6740  1389  1112               	bcf	18,2	;volatile
  6741                           
  6742                           ;usb_function_cdc.c: 701: if(cdc_trf_state == 0)
  6743  138A  0022               	movlb	2	; select bank2
  6744  138B  08D8               	movf	_cdc_trf_state^(0+256),f
  6745  138C  1D03               	skipz
  6746  138D  2B9A               	goto	l6774
  6747                           
  6748                           ;usb_function_cdc.c: 702: {
  6749                           ;usb_function_cdc.c: 703: { pCDCSrc.bRam = (BYTE*)data; cdc_tx_len = length; cdc_mem_typ
      +                          e = 0x01; cdc_trf_state = 1; };
  6750  138E  0021               	movlb	1	; select bank1
  6751  138F  0821               	movf	putUSBUSART@data^(0+128),w
  6752  1390  0023               	movlb	3	; select bank3
  6753  1391  00AA               	movwf	_pCDCSrc^(0+384)
  6754  1392  0021               	movlb	1	; select bank1
  6755  1393  0820               	movf	putUSBUSART@length^(0+128),w
  6756  1394  0022               	movlb	2	; select bank2
  6757  1395  00D9               	movwf	_cdc_tx_len^(0+256)
  6758  1396  01D6               	clrf	_cdc_mem_type^(0+256)
  6759  1397  0AD6               	incf	_cdc_mem_type^(0+256),f
  6760  1398  01D8               	clrf	_cdc_trf_state^(0+256)
  6761  1399  0AD8               	incf	_cdc_trf_state^(0+256),f
  6762  139A                     l6774:	
  6763                           
  6764                           ;usb_function_cdc.c: 704: }
  6765                           ;usb_function_cdc.c: 705: {PIE2bits.USBIE = 1;};
  6766  139A  0021               	movlb	1	; select bank1
  6767  139B  1512               	bsf	18,2	;volatile
  6768  139C  0008               	return
  6769  139D                     __end_of_putUSBUSART:	
  6770                           
  6771                           	psect	text2452
  6772  1712                     __ptext2452:	
  6773 ;; *************** function _DetectAsics *****************
  6774 ;; Defined at:
  6775 ;;		line 149 in file "klondike.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  x               1    3[BANK2 ] unsigned char 
  6780 ;;  x               1    2[BANK2 ] unsigned char 
  6781 ;; Return value:  Size  Location     Type
  6782 ;;		None               void
  6783 ;; Registers used:
  6784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 17F/2
  6787 ;;		On exit  : 1F/3
  6788 ;;		Unchanged: FFE00/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Totals:         0       0       6       4       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;Total ram usage:       10 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:   13
  6797 ;; This function calls:
  6798 ;;		_AsicPreCalc
  6799 ;;		_SendAsicData
  6800 ;;		___awdiv
  6801 ;; This function is called by:
  6802 ;;		_UserInit
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _DetectAsics
  6808  1712                     _DetectAsics:	
  6809  1712                     l7244:	
  6810                           ; Regs used in _DetectAsics: [wreg-status,0+pclath+cstack]
  6811                           
  6812                           
  6813                           ;klondike.c: 150: BankSize = 8;
  6814  1712  3008               	movlw	8
  6815  1713  0023               	movlb	3	; select bank3
  6816  1714  00EB               	movwf	_BankSize^(0+384)
  6817                           
  6818                           ;klondike.c: 151: Status.ChipCount = 0;
  6819  1715  01D4               	clrf	(_Status^(0+384)+1)	;volatile
  6820                           
  6821                           ;klondike.c: 152: for(BYTE x = 0; x < BankSize; x++)
  6822  1716  0022               	movlb	2	; select bank2
  6823  1717  01ED               	clrf	DetectAsics@x^(0+256)
  6824  1718                     l7254:	
  6825  1718  0023               	movlb	3	; select bank3
  6826  1719  086B               	movf	_BankSize^(0+384),w
  6827  171A  0022               	movlb	2	; select bank2
  6828  171B  026D               	subwf	DetectAsics@x^(0+256),w
  6829  171C  1803               	btfsc	3,0
  6830  171D  2F2F               	goto	l7256
  6831                           
  6832                           ;klondike.c: 153: NonceRanges[x] = StartNonce;
  6833  171E  086D               	movf	DetectAsics@x^(0+256),w
  6834  171F  0709               	addwf	9,w
  6835  1720  0709               	addwf	9,w
  6836  1721  3E20               	addlw	_NonceRanges& (0+255)
  6837  1722  0086               	movwf	6
  6838  1723  3003               	movlw	3	; select bank6/7
  6839  1724  0087               	movwf	7
  6840  1725  302D               	movlw	45
  6841  1726  3FC0               	movwi [0]fsr1
  6842  1727  30EE               	movlw	238
  6843  1728  3FC1               	movwi [1]fsr1
  6844  1729  30D4               	movlw	212
  6845  172A  3FC2               	movwi [2]fsr1
  6846  172B  30E3               	movlw	227
  6847  172C  3FC3               	movwi [3]fsr1
  6848  172D  0AED               	incf	DetectAsics@x^(0+256),f
  6849  172E  2F18               	goto	l7254
  6850  172F                     l7256:	
  6851                           
  6852                           ;klondike.c: 154: AsicPreCalc(&TestWork);
  6853  172F  3016               	movlw	low (_TestWork| (0+32768))
  6854  1730  0021               	movlb	1	; select bank1
  6855  1731  00B0               	movwf	?_AsicPreCalc^(0+128)
  6856  1732  3091               	movlw	high (_TestWork| (0+32768))
  6857  1733  00B1               	movwf	(?_AsicPreCalc^(0+128)+1)
  6858  1734  318B  23EA  3197   	fcall	_AsicPreCalc
  6859                           
  6860                           ;klondike.c: 155: WorkQue[4-1] = TestWork;
  6861  1737  3016               	movlw	low (_TestWork| (0+32768))
  6862  1738  0084               	movwf	4
  6863  1739  3091               	movlw	high (_TestWork| (0+32768))
  6864  173A  0085               	movwf	5
  6865  173B  30C3               	movlw	195
  6866  173C  0086               	movwf	6
  6867  173D  3023               	movlw	35
  6868  173E  0087               	movwf	7
  6869  173F  302D               	movlw	45
  6870  1740  00E7               	movwf	??_DetectAsics^(0+128)
  6871  1741                     u5400:	
  6872  1741  0012               	moviw fsr0++
  6873  1742  001E               	movwi fsr1++
  6874  1743  0BE7               	decfsz	??_DetectAsics^(0+128),f
  6875  1744  2F41               	goto	u5400
  6876                           
  6877                           ;klondike.c: 156: SendAsicData(&WorkQue[4-1], (StartNonce & 0x80000000) ? 0x90 : 0x48);
  6878  1745  30C3               	movlw	195
  6879  1746  00A6               	movwf	?_SendAsicData^(0+128)
  6880  1747  3023               	movlw	35
  6881  1748  00A7               	movwf	(?_SendAsicData^(0+128)+1)
  6882  1749  3090               	movlw	144
  6883  174A  00A8               	movwf	(?_SendAsicData^(0+128)+2)
  6884  174B  3188  20EE  3197   	fcall	_SendAsicData
  6885                           
  6886                           ;klondike.c: 158: Status.ChipCount = 16;
  6887  174E  3010               	movlw	16
  6888  174F  0023               	movlb	3	; select bank3
  6889  1750  00D4               	movwf	(_Status^(0+384)+1)	;volatile
  6890                           
  6891                           ;klondike.c: 161: BankSize = (Status.ChipCount+1)/2;
  6892  1751  3002               	movlw	2
  6893  1752  0021               	movlb	1	; select bank1
  6894  1753  00A0               	movwf	?___awdiv^(0+128)
  6895  1754  01A1               	clrf	(?___awdiv+1)^(0+128)
  6896  1755  0023               	movlb	3	; select bank3
  6897  1756  0854               	movf	(_Status^(0+384)+1),w	;volatile
  6898  1757  3E01               	addlw	1
  6899  1758  0021               	movlb	1	; select bank1
  6900  1759  00A2               	movwf	(?___awdiv^(0+128)+2)
  6901  175A  3000               	movlw	0
  6902  175B  1803               	skipnc
  6903  175C  3001               	movlw	1
  6904  175D  00A3               	movwf	(?___awdiv^(0+128)+3)
  6905  175E  27C0  3197         	fcall	___awdiv
  6906  1760  0820               	movf	?___awdiv^(0+128),w
  6907  1761  0023               	movlb	3	; select bank3
  6908  1762  00EB               	movwf	_BankSize^(0+384)
  6909                           
  6910                           ;klondike.c: 162: WorkTicks = 16777 / BankSize;
  6911  1763  0021               	movlb	1	; select bank1
  6912  1764  00A0               	movwf	?___awdiv^(0+128)
  6913  1765  3089               	movlw	137
  6914  1766  01A1               	clrf	(?___awdiv+1)^(0+128)
  6915  1767  00A2               	movwf	(?___awdiv^(0+128)+2)
  6916  1768  3041               	movlw	65
  6917  1769  00A3               	movwf	(?___awdiv^(0+128)+3)
  6918  176A  27C0  3197         	fcall	___awdiv
  6919  176C  0821               	movf	(?___awdiv+1)^(0+128),w
  6920  176D  0023               	movlb	3	; select bank3
  6921  176E  00D2               	movwf	(_WorkTicks+1)^(0+384)	;volatile
  6922  176F  0021               	movlb	1	; select bank1
  6923  1770  0820               	movf	?___awdiv^(0+128),w
  6924  1771  0023               	movlb	3	; select bank3
  6925  1772  00D1               	movwf	_WorkTicks^(0+384)	;volatile
  6926                           
  6927                           ;klondike.c: 163: NonceRanges[0] = 0;
  6928  1773  0026               	movlb	6	; select bank6
  6929  1774  01A0               	clrf	_NonceRanges^(0+768)
  6930  1775  01A1               	clrf	(_NonceRanges+1)^(0+768)
  6931  1776  01A2               	clrf	(_NonceRanges+2)^(0+768)
  6932  1777  01A3               	clrf	(_NonceRanges+3)^(0+768)
  6933                           
  6934                           ;klondike.c: 164: for(BYTE x = 1; x < BankSize; x++)
  6935  1778  0022               	movlb	2	; select bank2
  6936  1779  01EE               	clrf	DetectAsics@x_3070^(0+256)
  6937  177A                     L9:	
  6938  177A  0AEE               	incf	DetectAsics@x_3070^(0+256),f
  6939  177B  0023               	movlb	3	; select bank3
  6940  177C  086B               	movf	_BankSize^(0+384),w
  6941  177D  0022               	movlb	2	; select bank2
  6942  177E  026E               	subwf	DetectAsics@x_3070^(0+256),w
  6943  177F  1803               	btfsc	3,0
  6944  1780  2FBA               	goto	l7278
  6945                           
  6946                           ;klondike.c: 165: NonceRanges[x] = NonceRanges[x-1] + BankRanges[BankSize-1];
  6947  1781  0023               	movlb	3	; select bank3
  6948  1782  086B               	movf	_BankSize^(0+384),w
  6949  1783  0021               	movlb	1	; select bank1
  6950  1784  00E7               	movwf	??_DetectAsics^(0+128)
  6951  1785  30FD               	movlw	low ((_BankRanges| (0+32768)+65532))
  6952  1786  01E8               	clrf	(??_DetectAsics^(0+128)+1)
  6953  1787  35E7               	lslf	??_DetectAsics^(0+128),f
  6954  1788  0DE8               	rlf	(??_DetectAsics^(0+128)+1),f
  6955  1789  35E7               	lslf	??_DetectAsics^(0+128),f
  6956  178A  0DE8               	rlf	(??_DetectAsics^(0+128)+1),f
  6957  178B  0767               	addwf	??_DetectAsics^(0+128),w
  6958  178C  0084               	movwf	4
  6959  178D  308F               	movlw	high ((_BankRanges| (0+32768)+65532))
  6960  178E  3D68               	addwfc	(??_DetectAsics+1)^(0+128),w
  6961  178F  0085               	movwf	5
  6962  1790  3F00               	moviw [0]fsr0
  6963  1791  00E9               	movwf	(??_DetectAsics+2)^(0+128)
  6964  1792  3F01               	moviw [1]fsr0
  6965  1793  00EA               	movwf	((??_DetectAsics+2)^(0+128)+1)
  6966  1794  3F02               	moviw [2]fsr0
  6967  1795  00EB               	movwf	((??_DetectAsics+2)^(0+128)+2)
  6968  1796  3F03               	moviw [3]fsr0
  6969  1797  00EC               	movwf	((??_DetectAsics+2)^(0+128)+3)
  6970  1798  0022               	movlb	2	; select bank2
  6971  1799  086E               	movf	DetectAsics@x_3070^(0+256),w
  6972  179A  0709               	addwf	9,w
  6973  179B  0709               	addwf	9,w
  6974  179C  3E1C               	addlw	(_NonceRanges+252)& (0+255)
  6975  179D  0086               	movwf	6
  6976  179E  3003               	movlw	3	; select bank6/7
  6977  179F  0087               	movwf	7
  6978  17A0  3F40               	moviw [0]fsr1
  6979  17A1  0021               	movlb	1	; select bank1
  6980  17A2  07E9               	addwf	(??_DetectAsics+2)^(0+128),f
  6981  17A3  3F41               	moviw [1]fsr1
  6982  17A4  3DEA               	addwfc	((??_DetectAsics+2)^(0+128)+1),f
  6983  17A5  3F42               	moviw [2]fsr1
  6984  17A6  3DEB               	addwfc	((??_DetectAsics+2)^(0+128)+2),f
  6985  17A7  3F43               	moviw [3]fsr1
  6986  17A8  3DEC               	addwfc	((??_DetectAsics+2)^(0+128)+3),f
  6987  17A9  0022               	movlb	2	; select bank2
  6988  17AA  086E               	movf	DetectAsics@x_3070^(0+256),w
  6989  17AB  0709               	addwf	9,w
  6990  17AC  0709               	addwf	9,w
  6991  17AD  3E20               	addlw	_NonceRanges& (0+255)
  6992  17AE  0086               	movwf	6
  6993  17AF  0021               	movlb	1	; select bank1
  6994  17B0  0869               	movf	(??_DetectAsics+2)^(0+128),w
  6995  17B1  3FC0               	movwi [0]fsr1
  6996  17B2  086A               	movf	(??_DetectAsics+3)^(0+128),w
  6997  17B3  3FC1               	movwi [1]fsr1
  6998  17B4  086B               	movf	(??_DetectAsics+4)^(0+128),w
  6999  17B5  3FC2               	movwi [2]fsr1
  7000  17B6  086C               	movf	(??_DetectAsics+5)^(0+128),w
  7001  17B7  3FC3               	movwi [3]fsr1
  7002  17B8  0022               	movlb	2	; select bank2
  7003  17B9  2F7A               	goto	L9
  7004  17BA                     l7278:	
  7005                           
  7006                           ;klondike.c: 166: Status.State ='R';
  7007  17BA  3052               	movlw	82
  7008  17BB  0023               	movlb	3	; select bank3
  7009  17BC  00D3               	movwf	_Status^(0+384)	;volatile
  7010                           
  7011                           ;klondike.c: 167: Status.HashCount = 0;
  7012  17BD  01DA               	clrf	(_Status^(0+384)+7)	;volatile
  7013  17BE  01DB               	clrf	((_Status+1)^(0+384)+7)	;volatile
  7014  17BF  0008               	return
  7015  17C0                     __end_of_DetectAsics:	
  7016  17C0                     __ptext2463:	
  7017 ;; *************** function ___awdiv *****************
  7018 ;; Defined at:
  7019 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/awdiv.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  divisor         2    0[BANK1 ] int 
  7022 ;;  dividend        2    2[BANK1 ] int 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  quotient        2    6[BANK1 ] int 
  7025 ;;  sign            1    5[BANK1 ] unsigned char 
  7026 ;;  counter         1    4[BANK1 ] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  2    0[BANK1 ] int 
  7029 ;; Registers used:
  7030 ;;		wreg, status,2, status,0
  7031 ;; Tracked objects:
  7032 ;;		On entry : 1F/1
  7033 ;;		On exit  : 1F/1
  7034 ;;		Unchanged: FFFE0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        8 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:   11
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_DetectAsics
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           
  7051                           ;psect for function ___awdiv
  7052  17C0                     ___awdiv:	
  7053                           
  7054                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7055  17C0  01A5               	clrf	___awdiv@sign^(0+128)
  7056  17C1  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  7057  17C2  2FCA               	goto	l7462
  7058  17C3  09A0               	comf	___awdiv@divisor^(0+128),f
  7059  17C4  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  7060  17C5  0AA0               	incf	___awdiv@divisor^(0+128),f
  7061  17C6  1903               	skipnz
  7062  17C7  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  7063  17C8  01A5               	clrf	___awdiv@sign^(0+128)
  7064  17C9  0AA5               	incf	___awdiv@sign^(0+128),f
  7065  17CA                     l7462:	
  7066  17CA  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  7067  17CB  2FD3               	goto	l7468
  7068  17CC  09A2               	comf	___awdiv@dividend^(0+128),f
  7069  17CD  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  7070  17CE  0AA2               	incf	___awdiv@dividend^(0+128),f
  7071  17CF  1903               	skipnz
  7072  17D0  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  7073  17D1  3001               	movlw	1
  7074  17D2  06A5               	xorwf	___awdiv@sign^(0+128),f
  7075  17D3                     l7468:	
  7076  17D3  01A6               	clrf	___awdiv@quotient^(0+128)
  7077  17D4  01A7               	clrf	(___awdiv@quotient+1)^(0+128)
  7078  17D5  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7079  17D6  0420               	iorwf	___awdiv@divisor^(0+128),w
  7080  17D7  1903               	skipnz
  7081  17D8  2FF3               	goto	l7490
  7082  17D9  01A4               	clrf	___awdiv@counter^(0+128)
  7083  17DA                     L11:	
  7084  17DA  0AA4               	incf	___awdiv@counter^(0+128),f
  7085  17DB  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  7086  17DC  2FE0               	goto	l7478
  7087  17DD  35A0               	lslf	___awdiv@divisor^(0+128),f
  7088  17DE  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  7089  17DF  2FDA               	goto	L11
  7090  17E0                     l7478:	
  7091  17E0  35A6               	lslf	___awdiv@quotient^(0+128),f
  7092  17E1  0DA7               	rlf	(___awdiv@quotient+1)^(0+128),f
  7093  17E2  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7094  17E3  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  7095  17E4  1D03               	skipz
  7096  17E5  2FE8               	goto	u5645
  7097  17E6  0820               	movf	___awdiv@divisor^(0+128),w
  7098  17E7  0222               	subwf	___awdiv@dividend^(0+128),w
  7099  17E8                     u5645:	
  7100  17E8  1C03               	skipc
  7101  17E9  2FEF               	goto	l7486
  7102  17EA  0820               	movf	___awdiv@divisor^(0+128),w
  7103  17EB  02A2               	subwf	___awdiv@dividend^(0+128),f
  7104  17EC  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  7105  17ED  3BA3               	subwfb	(___awdiv@dividend+1)^(0+128),f
  7106  17EE  1426               	bsf	___awdiv@quotient^(0+128),0
  7107  17EF                     l7486:	
  7108  17EF  36A1               	lsrf	(___awdiv@divisor+1)^(0+128),f
  7109  17F0  0CA0               	rrf	___awdiv@divisor^(0+128),f
  7110  17F1  0BA4               	decfsz	___awdiv@counter^(0+128),f
  7111  17F2  2FE0               	goto	l7478
  7112  17F3                     l7490:	
  7113  17F3  0825               	movf	___awdiv@sign^(0+128),w
  7114  17F4  1903               	btfsc	3,2
  7115  17F5  2FFB               	goto	l7494
  7116  17F6  09A6               	comf	___awdiv@quotient^(0+128),f
  7117  17F7  09A7               	comf	(___awdiv@quotient+1)^(0+128),f
  7118  17F8  0AA6               	incf	___awdiv@quotient^(0+128),f
  7119  17F9  1903               	skipnz
  7120  17FA  0AA7               	incf	(___awdiv@quotient+1)^(0+128),f
  7121  17FB                     l7494:	
  7122  17FB  0827               	movf	(___awdiv@quotient+1)^(0+128),w
  7123  17FC  00A1               	movwf	(?___awdiv+1)^(0+128)
  7124  17FD  0826               	movf	___awdiv@quotient^(0+128),w
  7125  17FE  00A0               	movwf	?___awdiv^(0+128)
  7126  17FF  0008               	return
  7127  1800                     __end_of___awdiv:	
  7128                           
  7129                           	psect	text2457
  7130  13B7                     __ptext2457:	
  7131 ;; *************** function _InitFAN *****************
  7132 ;; Defined at:
  7133 ;;		line 241 in file "klondike.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;		None               void
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0
  7142 ;; Tracked objects:
  7143 ;;		On entry : 17F/1
  7144 ;;		On exit  : 17F/7
  7145 ;;		Unchanged: FFE80/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;Total ram usage:        0 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:   11
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_UserInit
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _InitFAN
  7163  13B7                     _InitFAN:	
  7164                           
  7165                           ;klondike.c: 242: TRISCbits.TRISC5 = 1;
  7166                           
  7167                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  7168  13B7  168E               	bsf	14,5	;volatile
  7169                           
  7170                           ;klondike.c: 243: PWM1CON = 0;
  7171  13B8  002C               	movlb	12	; select bank12
  7172  13B9  0193               	clrf	19	;volatile
  7173                           
  7174                           ;klondike.c: 244: PR2 = 0xFF;
  7175  13BA  30FF               	movlw	255
  7176  13BB  0020               	movlb	0	; select bank0
  7177  13BC  009B               	movwf	27	;volatile
  7178                           
  7179                           ;klondike.c: 245: PWM1CON = 0xC0;
  7180  13BD  30C0               	movlw	192
  7181  13BE  002C               	movlb	12	; select bank12
  7182  13BF  0093               	movwf	19	;volatile
  7183                           
  7184                           ;klondike.c: 246: PWM1DCH = 128;
  7185  13C0  3080               	movlw	128
  7186  13C1  0092               	movwf	18	;volatile
  7187                           
  7188                           ;klondike.c: 247: PWM1DCL = 0;
  7189  13C2  0191               	clrf	17	;volatile
  7190                           
  7191                           ;klondike.c: 248: TMR2IF = 0;
  7192  13C3  0020               	movlb	0	; select bank0
  7193  13C4  1091               	bcf	17,1	;volatile
  7194                           
  7195                           ;klondike.c: 249: T2CONbits.T2CKPS = 0;
  7196  13C5  30FC               	movlw	-4
  7197  13C6  059C               	andwf	28,f	;volatile
  7198                           
  7199                           ;klondike.c: 250: TMR2ON = 1;
  7200  13C7  151C               	bsf	28,2	;volatile
  7201                           
  7202                           ;klondike.c: 251: TRISCbits.TRISC5 = 0;
  7203  13C8  0021               	movlb	1	; select bank1
  7204  13C9  128E               	bcf	14,5	;volatile
  7205                           
  7206                           ;klondike.c: 252: PWM1OE=1;
  7207  13CA  002C               	movlb	12	; select bank12
  7208  13CB  1713               	bsf	19,6	;volatile
  7209                           
  7210                           ;klondike.c: 255: T1GSEL = 1;
  7211  13CC  0022               	movlb	2	; select bank2
  7212  13CD  159D               	bsf	29,3	;volatile
  7213                           
  7214                           ;klondike.c: 256: IOCAN3 = 1;
  7215  13CE  0027               	movlb	7	; select bank7
  7216  13CF  1592               	bsf	18,3	;volatile
  7217                           
  7218                           ;klondike.c: 257: IOCAF3 = 0;
  7219  13D0  1193               	bcf	19,3	;volatile
  7220  13D1  0008               	return
  7221  13D2                     __end_of_InitFAN:	
  7222                           
  7223                           	psect	intentry
  7224  0004                     __pintentry:	
  7225 ;; *************** function _ISRCode *****************
  7226 ;; Defined at:
  7227 ;;		line 61 in file "main.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 1F/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:   10
  7248 ;; This function calls:
  7249 ;;		_ResultRx
  7250 ;;		_WorkTick
  7251 ;;		_UpdateFanSpeed
  7252 ;;		_I2CSlave
  7253 ;;		_I2CRead
  7254 ;;		_I2CWrite
  7255 ;;		_USBDeviceTasks
  7256 ;; This function is called by:
  7257 ;;		Interrupt level 1
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261  0004                     _ISRCode:	
  7262                           
  7263                           ; Regs used in _ISRCode: [wreg-status,0+pclath+cstack]
  7264  0004  3180               	pagesel	$
  7265                           
  7266                           ;main.c: 62: if(RCIF)
  7267  0005  0020               	movlb	0	; select bank0
  7268  0006  1E91               	btfss	17,5	;volatile
  7269  0007  280B               	goto	i1l8344
  7270                           
  7271                           ;main.c: 63: ResultRx();
  7272  0008  3185  25D1  3180   	fcall	_ResultRx
  7273  000B                     i1l8344:	
  7274                           
  7275                           ;main.c: 64: if(TMR0IF)
  7276  000B  1D0B               	btfss	11,2	;volatile
  7277  000C  2810               	goto	i1l8348
  7278                           
  7279                           ;main.c: 65: WorkTick();
  7280  000D  3195  25E8  3180   	fcall	_WorkTick
  7281  0010                     i1l8348:	
  7282                           
  7283                           ;main.c: 66: if(TMR1GIF)
  7284  0010  0020               	movlb	0	; select bank0
  7285  0011  1F91               	btfss	17,7	;volatile
  7286  0012  2816               	goto	i1l8352
  7287                           
  7288                           ;main.c: 67: UpdateFanSpeed();
  7289  0013  3187  27F1  3180   	fcall	_UpdateFanSpeed
  7290  0016                     i1l8352:	
  7291                           
  7292                           ;main.c: 68: if(BCL1IF) {
  7293  0016  0020               	movlb	0	; select bank0
  7294  0017  1D92               	btfss	18,3	;volatile
  7295  0018  281D               	goto	i1l8358
  7296                           
  7297                           ;main.c: 69: BCL1IF = 0; I2CState.Next = 0;
  7298  0019  1192               	bcf	18,3	;volatile
  7299  001A  30E0               	movlw	-32
  7300  001B  0022               	movlb	2	; select bank2
  7301  001C  05E8               	andwf	_I2CState^(0+256),f
  7302  001D                     i1l8358:	
  7303                           
  7304                           ;main.c: 70: }
  7305                           ;main.c: 71: if(SSP1IF) {
  7306  001D  0020               	movlb	0	; select bank0
  7307  001E  1D91               	btfss	17,3	;volatile
  7308  001F  2837               	goto	i1l1003
  7309                           
  7310                           ;main.c: 72: SSP1IF = 0;
  7311  0020  1191               	bcf	17,3	;volatile
  7312                           
  7313                           ;main.c: 73: if(I2CState.Slave)
  7314  0021  0022               	movlb	2	; select bank2
  7315  0022  1EE8               	btfss	_I2CState^(0+256),5
  7316  0023  2828               	goto	i1l8364
  7317                           
  7318                           ;main.c: 74: I2CSlave();
  7319  0024  3196  266C  3180   	fcall	_I2CSlave
  7320  0027  2837               	goto	i1l1003
  7321  0028                     i1l8364:	
  7322                           
  7323                           ;main.c: 75: else if(I2CState.Next < 10)
  7324  0028  0868               	movf	_I2CState^(0+256),w
  7325  0029  391F               	andlw	31
  7326  002A  0020               	movlb	0	; select bank0
  7327  002B  00EF               	movwf	??_ISRCode
  7328  002C  300A               	movlw	10
  7329  002D  026F               	subwf	??_ISRCode,w
  7330  002E  1803               	skipnc
  7331  002F  2834               	goto	i1l8368
  7332                           
  7333                           ;main.c: 76: I2CRead();
  7334  0030  3186  2640  3180   	fcall	_I2CRead
  7335  0033  2837               	goto	i1l1003
  7336  0034                     i1l8368:	
  7337                           
  7338                           ;main.c: 77: else
  7339                           ;main.c: 78: I2CWrite();
  7340  0034  3193  23D2  3180   	fcall	_I2CWrite
  7341  0037                     i1l1003:	
  7342                           
  7343                           ;main.c: 79: }
  7344                           ;main.c: 81: USBDeviceTasks();
  7345  0037  3181  2176         	fcall	_USBDeviceTasks
  7346  0039  0009               	retfie
  7347  003A                     __end_of_ISRCode:	
  7348                           
  7349                           	psect	text2470
  7350  003C                     __ptext2470:	
  7351 ;; *************** function _USBCtrlTrfSetupHandler *****************
  7352 ;; Defined at:
  7353 ;;		line 2623 in file "../USB/usb_device.c"
  7354 ;; Parameters:    Size  Location     Type
  7355 ;;		None
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;		None
  7358 ;; Return value:  Size  Location     Type
  7359 ;;		None               void
  7360 ;; Registers used:
  7361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7362 ;; Tracked objects:
  7363 ;;		On entry : 1F/0
  7364 ;;		On exit  : 1C/0
  7365 ;;		Unchanged: FFFE0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;Total ram usage:        0 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    7
  7374 ;; This function calls:
  7375 ;;		_USBCheckStdRequest
  7376 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7377 ;;		_USBCtrlEPServiceComplete
  7378 ;; This function is called by:
  7379 ;;		_USBCtrlEPService
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           
  7384                           ;psect for function _USBCtrlTrfSetupHandler
  7385  003C                     _USBCtrlTrfSetupHandler:	
  7386  003C                     i1l8176:	
  7387                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-status,0+pclath+cstack]
  7388                           
  7389                           
  7390                           ;usb_device.c: 2627: shortPacketStatus = 0;
  7391  003C  0022               	movlb	2	; select bank2
  7392  003D  01E2               	clrf	_shortPacketStatus^(0+256)	;volatile
  7393                           
  7394                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  7395  003E  01D0               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
  7396                           
  7397                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  7398  003F  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  7399                           
  7400                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  7401  0040  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  7402                           
  7403                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  7404  0041  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  7405                           
  7406                           ;usb_device.c: 2632: controlTransferState = 0;
  7407  0042  01DA               	clrf	_controlTransferState^(0+256)	;volatile
  7408                           
  7409                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  7410  0043  083D               	movf	_pBDTEntryIn^(0+256),w
  7411  0044  0086               	movwf	6
  7412  0045  3004               	movlw	4
  7413  0046  0187               	clrf	7
  7414  0047  1381               	bcf	1,7
  7415                           
  7416                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7417  0048  06BD               	xorwf	_pBDTEntryIn^(0+256),f
  7418                           
  7419                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  7420  0049  083D               	movf	_pBDTEntryIn^(0+256),w
  7421  004A  0086               	movwf	6
  7422  004B  3004               	movlw	4
  7423  004C  1381               	bcf	1,7
  7424                           
  7425                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7426  004D  06BD               	xorwf	_pBDTEntryIn^(0+256),f
  7427                           
  7428                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  7429  004E  0021               	movlb	1	; select bank1
  7430  004F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  7431  0050  0086               	movwf	6
  7432  0051  1381               	bcf	1,7
  7433                           
  7434                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  7435  0052  0022               	movlb	2	; select bank2
  7436  0053  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  7437                           
  7438                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  7439  0054  01E6               	clrf	(_inPipes^(0+256)+3)	;volatile
  7440  0055  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
  7441                           
  7442                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  7443  0056  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  7444                           
  7445                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  7446  0057  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  7447  0058  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  7448                           
  7449                           ;usb_device.c: 2656: USBCheckStdRequest();
  7450  0059  2066  3180         	fcall	_USBCheckStdRequest
  7451                           
  7452                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  7453  005B  3003               	movlw	3
  7454  005C  0020               	movlb	0	; select bank0
  7455  005D  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7456  005E  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7457  005F  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7458  0060  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7459  0061  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7460  0062  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7461  0063  2212               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7462                           
  7463                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  7464  0064  3184  2C77         	ljmp	i1l7758
  7465  0066                     __end_of_USBCtrlTrfSetupHandler:	
  7466  0066                     __ptext2478:	
  7467 ;; *************** function _USBCheckStdRequest *****************
  7468 ;; Defined at:
  7469 ;;		line 2839 in file "../USB/usb_device.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 1F/2
  7480 ;;		On exit  : 1D/0
  7481 ;;		Unchanged: FFFE0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    6
  7490 ;; This function calls:
  7491 ;;		_USBStdGetDscHandler
  7492 ;;		_USBStdSetCfgHandler
  7493 ;;		_USBStdGetStatusHandler
  7494 ;;		_USBStdFeatureReqHandler
  7495 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7496 ;; This function is called by:
  7497 ;;		_USBCtrlTrfSetupHandler
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           
  7502                           ;psect for function _USBCheckStdRequest
  7503  0066                     _USBCheckStdRequest:	
  7504                           
  7505                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  7506                           
  7507                           ; Regs used in _USBCheckStdRequest: [wreg-status,0+pclath+cstack]
  7508  0066  0020               	movlb	0	; select bank0
  7509  0067  0E50               	swapf	80,w	;volatile
  7510  0068  0C89               	rrf	9,f
  7511  0069  3903               	andlw	3
  7512  006A  1D03               	btfss	3,2
  7513  006B  0008               	return
  7514                           
  7515                           ;usb_device.c: 2880: break;
  7516  006C  0851               	movf	81,w	;volatile
  7517                           
  7518                           ; Switch size 1, requested type "space"
  7519                           ; Number of cases is 11, Range of values is 0 to 12
  7520                           ; switch strategies available:
  7521                           ; Name         Instructions Cycles
  7522                           ; direct_byte           32     6 (fixed)
  7523                           ; simple_byte           34    18 (average)
  7524                           ; jumptable            260     6 (fixed)
  7525                           ; rangetable            17     4 (fixed)
  7526                           ; spacedrange           31     6 (fixed)
  7527                           ; locatedrange          13     3 (fixed)
  7528                           ;	Chosen strategy is direct_byte
  7529  006D  0084               	movwf	4
  7530  006E  300D               	movlw	13
  7531  006F  0204               	subwf	4,w
  7532  0070  1803               	skipnc
  7533  0071  0008               	return
  7534  0072  3191               	movlp	high i1S8490
  7535  0073  3504               	lslf	4,w
  7536  0074  3E66               	addlw	low i1S8490
  7537  0075  0082               	movwf	2
  7538  0076                     i1l338:	
  7539  0076  0008               	return
  7540  0077                     i1l340:	
  7541                           ;usb_device.c: 2843: {
  7542                           ;usb_device.c: 2844: case 5:
  7543                           
  7544                           
  7545                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  7546  0077  0022               	movlb	2	; select bank2
  7547  0078  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7548                           
  7549                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  7550  0079  3008               	movlw	8
  7551  007A  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  7552                           
  7553                           ;usb_device.c: 2848: break;
  7554  007B  0008               	return
  7555  007C                     i1l8138:	
  7556                           
  7557                           ;usb_device.c: 2850: USBStdGetDscHandler();
  7558  007C  3194  2C94         	ljmp	i1l6636
  7559  007E                     i1l8140:	
  7560                           ;usb_device.c: 2851: break;
  7561                           
  7562                           
  7563                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  7564  007E  3194  2CF6         	ljmp	i1l8006
  7565  0080                     i1l8142:	
  7566                           ;usb_device.c: 2854: break;
  7567                           
  7568                           
  7569                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  7570  0080  3069               	movlw	_USBActiveConfiguration& (0+255)
  7571  0081                     L15:	
  7572  0081  0022               	movlb	2	; select bank2
  7573  0082  00E3               	movwf	_inPipes^(0+256)	;volatile
  7574  0083  3001               	movlw	1
  7575  0084  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
  7576                           
  7577                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  7578  0085  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
  7579                           
  7580                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  7581  0086  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
  7582                           
  7583                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  7584  0087  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7585                           
  7586                           ;usb_device.c: 2860: break;
  7587  0088  0008               	return
  7588  0089                     i1l8150:	
  7589                           
  7590                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  7591  0089  3194  2C02         	ljmp	i1l6662
  7592  008B                     i1l8152:	
  7593                           ;usb_device.c: 2863: break;
  7594                           
  7595                           
  7596                           ;usb_device.c: 2865: case 3:
  7597                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  7598  008B  28A2               	ljmp	i1l8058
  7599  008C                     i1l8154:	
  7600                           ;usb_device.c: 2867: break;
  7601                           
  7602                           
  7603                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  7604  008C  0854               	movf	84,w	;volatile
  7605  008D  3ECF               	addlw	_USBAlternateInterface& (0+255)
  7606  008E  2881               	goto	L15
  7607  008F                     i1l349:	
  7608                           ;usb_device.c: 2874: case 11:
  7609                           
  7610                           
  7611                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  7612  008F  0022               	movlb	2	; select bank2
  7613  0090  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7614                           
  7615                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  7616  0091  0020               	movlb	0	; select bank0
  7617  0092  0854               	movf	84,w	;volatile
  7618  0093  3ECF               	addlw	_USBAlternateInterface& (0+255)
  7619  0094  0086               	movwf	6
  7620  0095  3001               	movlw	1	; select bank3/4
  7621  0096  0087               	movwf	7
  7622  0097  0852               	movf	82,w	;volatile
  7623  0098  0081               	movwf	1
  7624                           
  7625                           ;usb_device.c: 2877: break;
  7626  0099  0008               	return
  7627  009A                     i1l8164:	
  7628                           
  7629                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  7630  009A  3002               	movlw	2
  7631  009B  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7632  009C  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7633  009D  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7634  009E  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7635  009F  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7636  00A0  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7637  00A1  2A12               	ljmp	i1l7962
  7638  00A2                     __end_of_USBCheckStdRequest:	
  7639  00A2                     __ptext2483:	
  7640 ;; *************** function _USBStdFeatureReqHandler *****************
  7641 ;; Defined at:
  7642 ;;		line 2907 in file "../USB/usb_device.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  pUEP            2    6[BANK0 ] PTR unsigned char 
  7647 ;;		 -> UEP0(1), 
  7648 ;;  p               1    9[BANK0 ] PTR struct __BDT
  7649 ;;		 -> NULL(0), BDT(48), 
  7650 ;;  current_ep_d    1    8[BANK0 ] struct .
  7651 ;; Return value:  Size  Location     Type
  7652 ;;		None               void
  7653 ;; Registers used:
  7654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7655 ;; Tracked objects:
  7656 ;;		On entry : 1D/0
  7657 ;;		On exit  : 1D/0
  7658 ;;		Unchanged: FFFE0/0
  7659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;Total ram usage:        6 bytes
  7665 ;; Hardware stack levels used:    1
  7666 ;; Hardware stack levels required when called:    5
  7667 ;; This function calls:
  7668 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7669 ;; This function is called by:
  7670 ;;		_USBCheckStdRequest
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _USBStdFeatureReqHandler
  7676  00A2                     _USBStdFeatureReqHandler:	
  7677  00A2                     i1l8058:	
  7678                           ; Regs used in _USBStdFeatureReqHandler: [wreg-status,0+pclath+cstack]
  7679                           
  7680                           
  7681                           ;usb_device.c: 2908: BDT_ENTRY *p;
  7682                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  7683                           ;usb_device.c: 2913: unsigned char* pUEP;
  7684                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  7685                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  7686  00A2  0020               	movlb	0	; select bank0
  7687  00A3  0B52               	decfsz	82,w	;volatile
  7688  00A4  28B6               	goto	i1l8070
  7689  00A5  0850               	movf	80,w	;volatile
  7690  00A6  391F               	andlw	31
  7691  00A7  1D03               	skipz
  7692  00A8  28B6               	goto	i1l8070
  7693                           
  7694                           ;usb_device.c: 2953: {
  7695                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  7696  00A9  0022               	movlb	2	; select bank2
  7697  00AA  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7698                           
  7699                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  7700  00AB  0020               	movlb	0	; select bank0
  7701  00AC  0851               	movf	81,w	;volatile
  7702  00AD  3A03               	xorlw	3
  7703  00AE  1D03               	skipz
  7704  00AF  28B4               	goto	i1l8068
  7705                           
  7706                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  7707  00B0  3001               	movlw	1
  7708  00B1  0022               	movlb	2	; select bank2
  7709  00B2  00CB               	movwf	_RemoteWakeup^(0+256)	;volatile
  7710  00B3  28B6               	goto	i1l8070
  7711  00B4                     i1l8068:	
  7712                           
  7713                           ;usb_device.c: 2957: else
  7714                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  7715  00B4  0022               	movlb	2	; select bank2
  7716  00B5  01CB               	clrf	_RemoteWakeup^(0+256)	;volatile
  7717  00B6                     i1l8070:	
  7718                           
  7719                           ;usb_device.c: 2959: }
  7720                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  7721                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  7722                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 2)&&
  7723                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  7724  00B6  0020               	movlb	0	; select bank0
  7725  00B7  0852               	movf	82,w
  7726  00B8  1D03               	skipz
  7727  00B9  0008               	return
  7728  00BA  0850               	movf	80,w	;volatile
  7729  00BB  391F               	andlw	31
  7730  00BC  3A02               	xorlw	2
  7731  00BD  1D03               	skipz
  7732  00BE  0008               	return
  7733  00BF  0854               	movf	84,w	;volatile
  7734  00C0  390F               	andlw	15
  7735  00C1  1903               	skipnz
  7736  00C2  0008               	return
  7737  00C3  0854               	movf	84,w	;volatile
  7738  00C4  390F               	andlw	15
  7739  00C5  00FA               	movwf	??_USBStdFeatureReqHandler
  7740  00C6  3003               	movlw	3
  7741  00C7  027A               	subwf	??_USBStdFeatureReqHandler,w
  7742  00C8  1803               	skipnc
  7743  00C9  0008               	return
  7744  00CA  0022               	movlb	2	; select bank2
  7745  00CB  0851               	movf	_USBDeviceState^(0+256),w	;volatile
  7746  00CC  3A20               	xorlw	32
  7747  00CD  1D03               	skipz
  7748  00CE  0008               	return
  7749                           
  7750                           ;usb_device.c: 2966: {
  7751                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  7752  00CF  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
  7753                           
  7754                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  7755  00D0  0020               	movlb	0	; select bank0
  7756  00D1  1BD4               	btfsc	84,7	;volatile
  7757  00D2  28DF               	goto	i1l8084
  7758                           
  7759                           ;usb_device.c: 2973: {
  7760                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  7761  00D3  0854               	movf	84,w	;volatile
  7762  00D4  390F               	andlw	15
  7763  00D5  3E40               	addlw	_pBDTEntryOut& (0+255)
  7764  00D6  0086               	movwf	6
  7765  00D7  3001               	movlw	1	; select bank2/3
  7766  00D8  0087               	movwf	7
  7767  00D9  0801               	movf	1,w
  7768  00DA  00E9               	movwf	USBStdFeatureReqHandler@p
  7769                           
  7770                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  7771  00DB  0854               	movf	84,w	;volatile
  7772  00DC  390F               	andlw	15
  7773  00DD  3E3A               	addlw	_ep_data_out& (0+255)
  7774  00DE  28EA               	goto	L17
  7775  00DF                     i1l8084:	
  7776                           ;usb_device.c: 2976: }
  7777                           
  7778                           
  7779                           ;usb_device.c: 2977: else
  7780                           ;usb_device.c: 2978: {
  7781                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  7782  00DF  0854               	movf	84,w	;volatile
  7783  00E0  390F               	andlw	15
  7784  00E1  3E3D               	addlw	_pBDTEntryIn& (0+255)
  7785  00E2  0086               	movwf	6
  7786  00E3  3001               	movlw	1	; select bank2/3
  7787  00E4  0087               	movwf	7
  7788  00E5  0801               	movf	1,w
  7789  00E6  00E9               	movwf	USBStdFeatureReqHandler@p
  7790                           
  7791                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  7792  00E7  0854               	movf	84,w	;volatile
  7793  00E8  390F               	andlw	15
  7794  00E9  3E37               	addlw	_ep_data_in& (0+255)
  7795  00EA                     L17:	
  7796  00EA  0086               	movwf	6
  7797  00EB  0801               	movf	1,w
  7798  00EC  00E8               	movwf	USBStdFeatureReqHandler@current_ep_data
  7799                           
  7800                           ;usb_device.c: 2981: }
  7801                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  7802  00ED  1868               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
  7803  00EE  28F1               	goto	i1l361
  7804                           
  7805                           ;usb_device.c: 2988: {
  7806                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  7807  00EF  1169               	bcf	USBStdFeatureReqHandler@p,2
  7808                           
  7809                           ;usb_device.c: 2990: }
  7810  00F0  28F2               	goto	i1l362
  7811  00F1                     i1l361:	
  7812                           
  7813                           ;usb_device.c: 2991: else
  7814                           ;usb_device.c: 2992: {
  7815                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  7816  00F1  1569               	bsf	USBStdFeatureReqHandler@p,2
  7817  00F2                     i1l362:	
  7818                           
  7819                           ;usb_device.c: 2994: }
  7820                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  7821  00F2  1BD4               	btfsc	84,7	;volatile
  7822  00F3  28F8               	goto	i1l8092
  7823                           
  7824                           ;usb_device.c: 3000: {
  7825                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  7826  00F4  0854               	movf	84,w	;volatile
  7827  00F5  390F               	andlw	15
  7828  00F6  3E40               	addlw	_pBDTEntryOut& (0+255)
  7829  00F7  28FB               	goto	L18
  7830  00F8                     i1l8092:	
  7831                           ;usb_device.c: 3002: }
  7832                           
  7833                           
  7834                           ;usb_device.c: 3003: else
  7835                           ;usb_device.c: 3004: {
  7836                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  7837  00F8  0854               	movf	84,w	;volatile
  7838  00F9  390F               	andlw	15
  7839  00FA  3E3D               	addlw	_pBDTEntryIn& (0+255)
  7840  00FB                     L18:	
  7841  00FB  0086               	movwf	6
  7842  00FC  3001               	movlw	1	; select bank2/3
  7843  00FD  0087               	movwf	7
  7844  00FE  0869               	movf	USBStdFeatureReqHandler@p,w
  7845  00FF  0081               	movwf	1
  7846                           
  7847                           ;usb_device.c: 3006: }
  7848                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  7849  0100  0851               	movf	81,w	;volatile
  7850  0101  3A03               	xorlw	3
  7851  0102  1D03               	skipz
  7852  0103  291C               	goto	i1l8104
  7853                           
  7854                           ;usb_device.c: 3010: {
  7855                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  7856  0104  0869               	movf	USBStdFeatureReqHandler@p,w
  7857  0105  0086               	movwf	6
  7858  0106  0187               	clrf	7
  7859  0107  1F81               	btfss	1,7
  7860  0108  2916               	goto	i1l366
  7861                           
  7862                           ;usb_device.c: 3012: {
  7863                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  7864  0109  1BD4               	btfsc	84,7	;volatile
  7865  010A  290F               	goto	i1l8102
  7866                           
  7867                           ;usb_device.c: 3016: {
  7868                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  7869  010B  0854               	movf	84,w	;volatile
  7870  010C  390F               	andlw	15
  7871  010D  3E3A               	addlw	_ep_data_out& (0+255)
  7872  010E  2912               	goto	L19
  7873  010F                     i1l8102:	
  7874                           ;usb_device.c: 3018: }
  7875                           
  7876                           
  7877                           ;usb_device.c: 3019: else
  7878                           ;usb_device.c: 3020: {
  7879                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  7880  010F  0854               	movf	84,w	;volatile
  7881  0110  390F               	andlw	15
  7882  0111  3E37               	addlw	_ep_data_in& (0+255)
  7883  0112                     L19:	
  7884  0112  0086               	movwf	6
  7885  0113  3001               	movlw	1	; select bank2/3
  7886  0114  0087               	movwf	7
  7887  0115  1481               	bsf	1,1
  7888  0116                     i1l366:	
  7889                           
  7890                           ;usb_device.c: 3022: }
  7891                           ;usb_device.c: 3023: }
  7892                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  7893  0116  0869               	movf	USBStdFeatureReqHandler@p,w
  7894  0117  0086               	movwf	6
  7895  0118  3084               	movlw	132
  7896  0119  0187               	clrf	7
  7897  011A  0481               	iorwf	1,f
  7898                           
  7899                           ;usb_device.c: 3027: }
  7900  011B  0008               	return
  7901  011C                     i1l8104:	
  7902                           
  7903                           ;usb_device.c: 3028: else
  7904                           ;usb_device.c: 3029: {
  7905                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  7906  011C  3004               	movlw	4
  7907  011D  06E9               	xorwf	USBStdFeatureReqHandler@p,f
  7908                           
  7909                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  7910  011E  0869               	movf	USBStdFeatureReqHandler@p,w
  7911  011F  0086               	movwf	6
  7912  0120  0187               	clrf	7
  7913                           
  7914                           ;usb_device.c: 3036: {
  7915                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  7916  0121  0869               	movf	USBStdFeatureReqHandler@p,w
  7917  0122  1F81               	btfss	1,7
  7918  0123  2934               	goto	L21
  7919  0124  0086               	movwf	6
  7920  0125  1381               	bcf	1,7
  7921                           
  7922                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  7923  0126  0086               	movwf	6
  7924  0127  3005               	movlw	5
  7925  0128  1701               	bsf	1,6
  7926                           
  7927                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  7928  0129  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7929  012A  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7930  012B  0869               	movf	USBStdFeatureReqHandler@p,w
  7931  012C  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7932  012D  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7933  012E  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7934  012F  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  7935  0130  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  7936  0131  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  7937                           
  7938                           ;usb_device.c: 3042: }
  7939  0133  2937               	goto	i1l8114
  7940  0134                     L21:	
  7941                           ;usb_device.c: 3043: else
  7942                           ;usb_device.c: 3044: {
  7943                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  7944                           
  7945  0134  0086               	movwf	6
  7946  0135  0187               	clrf	7
  7947  0136  1701               	bsf	1,6
  7948  0137                     i1l8114:	
  7949                           
  7950                           ;usb_device.c: 3047: }
  7951                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  7952  0137  3004               	movlw	4
  7953  0138  0020               	movlb	0	; select bank0
  7954  0139  06E9               	xorwf	USBStdFeatureReqHandler@p,f
  7955                           
  7956                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  7957  013A  18E8               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
  7958  013B  2941               	goto	i1l374
  7959  013C  0869               	movf	USBStdFeatureReqHandler@p,w
  7960  013D  0086               	movwf	6
  7961  013E  0187               	clrf	7
  7962  013F  1F81               	btfss	1,7
  7963  0140  295F               	goto	i1l8126
  7964  0141                     i1l374:	
  7965                           
  7966                           ;usb_device.c: 3058: {
  7967                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  7968  0141  1BD4               	btfsc	84,7	;volatile
  7969  0142  2947               	goto	i1l8122
  7970                           
  7971                           ;usb_device.c: 3060: {
  7972                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  7973  0143  0854               	movf	84,w	;volatile
  7974  0144  390F               	andlw	15
  7975  0145  3E3A               	addlw	_ep_data_out& (0+255)
  7976  0146  294A               	goto	L20
  7977  0147                     i1l8122:	
  7978                           ;usb_device.c: 3062: }
  7979                           
  7980                           
  7981                           ;usb_device.c: 3063: else
  7982                           ;usb_device.c: 3064: {
  7983                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  7984  0147  0854               	movf	84,w	;volatile
  7985  0148  390F               	andlw	15
  7986  0149  3E37               	addlw	_ep_data_in& (0+255)
  7987  014A                     L20:	
  7988  014A  0086               	movwf	6
  7989  014B  3001               	movlw	1	; select bank2/3
  7990  014C  0087               	movwf	7
  7991  014D  1081               	bcf	1,1
  7992                           
  7993                           ;usb_device.c: 3066: }
  7994                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  7995  014E  0869               	movf	USBStdFeatureReqHandler@p,w
  7996  014F  0086               	movwf	6
  7997  0150  303B               	movlw	59
  7998  0151  0187               	clrf	7
  7999  0152  0581               	andwf	1,f
  8000                           
  8001                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  8002  0153  3005               	movlw	5
  8003  0154  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8004  0155  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8005  0156  0869               	movf	USBStdFeatureReqHandler@p,w
  8006  0157  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8007  0158  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8008  0159  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8009  015A  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  8010  015B  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8011  015C  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8012                           
  8013                           ;usb_device.c: 3072: }
  8014  015E  2964               	goto	i1l8128
  8015  015F                     i1l8126:	
  8016                           
  8017                           ;usb_device.c: 3073: else
  8018                           ;usb_device.c: 3074: {
  8019                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  8020  015F  0869               	movf	USBStdFeatureReqHandler@p,w
  8021  0160  0086               	movwf	6
  8022  0161  303B               	movlw	59
  8023  0162  0187               	clrf	7
  8024  0163  0581               	andwf	1,f
  8025  0164                     i1l8128:	
  8026                           
  8027                           ;usb_device.c: 3077: }
  8028                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  8029  0164  0020               	movlb	0	; select bank0
  8030  0165  0854               	movf	84,w	;volatile
  8031  0166  390F               	andlw	15
  8032  0167  3E98               	addlw	152
  8033  0168  00FA               	movwf	??_USBStdFeatureReqHandler
  8034  0169  300E               	movlw	14
  8035  016A  01FB               	clrf	??_USBStdFeatureReqHandler+1
  8036  016B  3DFB               	addwfc	??_USBStdFeatureReqHandler+1,f
  8037  016C  087A               	movf	??_USBStdFeatureReqHandler,w
  8038  016D  00E6               	movwf	USBStdFeatureReqHandler@pUEP
  8039  016E  087B               	movf	??_USBStdFeatureReqHandler+1,w
  8040  016F  00E7               	movwf	USBStdFeatureReqHandler@pUEP+1
  8041                           
  8042                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  8043  0170  0866               	movf	USBStdFeatureReqHandler@pUEP,w
  8044  0171  0086               	movwf	6
  8045  0172  0867               	movf	USBStdFeatureReqHandler@pUEP+1,w
  8046  0173  0087               	movwf	7
  8047  0174  1001               	bcf	1,0
  8048  0175  0008               	return
  8049  0176                     __end_of_USBStdFeatureReqHandler:	
  8050  0176                     __ptext2465:	
  8051 ;; *************** function _USBDeviceTasks *****************
  8052 ;; Defined at:
  8053 ;;		line 669 in file "../USB/usb_device.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  i               1   14[BANK0 ] unsigned char 
  8058 ;; Return value:  Size  Location     Type
  8059 ;;		None               void
  8060 ;; Registers used:
  8061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 19/0
  8064 ;;		On exit  : 1F/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        2 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    9
  8074 ;; This function calls:
  8075 ;;		_USBWakeFromSuspend
  8076 ;;		i1_USBDeviceInit
  8077 ;;		_USBSuspend
  8078 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8079 ;;		_USBCtrlEPAllowStatusStage
  8080 ;;		_USBStallHandler
  8081 ;;		_USBCtrlEPService
  8082 ;; This function is called by:
  8083 ;;		_ISRCode
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           
  8088                           ;psect for function _USBDeviceTasks
  8089  0176                     _USBDeviceTasks:	
  8090                           
  8091                           ;usb_device.c: 670: BYTE i;
  8092                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  8093                           
  8094                           ; Regs used in _USBDeviceTasks: [wreg-status,0+pclath+cstack]
  8095  0176  0022               	movlb	2	; select bank2
  8096  0177  0351               	decf	_USBDeviceState^(0+256),w	;volatile
  8097  0178  1D03               	skipz
  8098  0179  2983               	goto	i1l8250
  8099                           
  8100                           ;usb_device.c: 782: {
  8101                           ;usb_device.c: 792: if(!UCONbits.SE0)
  8102  017A  003D               	movlb	29	; select bank29
  8103  017B  1A8E               	btfsc	14,5	;volatile
  8104  017C  2983               	goto	i1l8250
  8105                           
  8106                           ;usb_device.c: 793: {
  8107                           ;usb_device.c: 794: UIR = 0;;
  8108  017D  0190               	clrf	16	;volatile
  8109                           
  8110                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  8111  017E  1412               	bsf	18,0	;volatile
  8112                           
  8113                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  8114  017F  1612               	bsf	18,4	;volatile
  8115                           
  8116                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  8117  0180  3002               	movlw	2
  8118  0181  0022               	movlb	2	; select bank2
  8119  0182  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  8120  0183                     i1l8250:	
  8121                           
  8122                           ;usb_device.c: 801: }
  8123                           ;usb_device.c: 802: }
  8124                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8125  0183  003D               	movlb	29	; select bank29
  8126  0184  1910               	btfsc	16,2	;volatile
  8127  0185  1D12               	btfss	18,2	;volatile
  8128  0186  298A               	goto	i1l8258
  8129                           
  8130                           ;usb_device.c: 819: {
  8131                           ;usb_device.c: 820: (UIR &= 0xFB);
  8132  0187  1110               	bcf	16,2	;volatile
  8133                           
  8134                           ;usb_device.c: 824: USBWakeFromSuspend();
  8135  0188  2368  3180         	fcall	_USBWakeFromSuspend
  8136  018A                     i1l8258:	
  8137                           
  8138                           ;usb_device.c: 826: }
  8139                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  8140  018A  1C8E               	btfss	14,1	;volatile
  8141  018B  298F               	goto	i1l142
  8142  018C                     i1l8260:	
  8143                           
  8144                           ;usb_device.c: 832: {
  8145                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  8146  018C  0020               	movlb	0	; select bank0
  8147  018D  1112               	bcf	18,2	;volatile
  8148                           
  8149                           ;usb_device.c: 834: return;
  8150  018E  0008               	return
  8151  018F                     i1l142:	
  8152                           
  8153                           ;usb_device.c: 835: }
  8154                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  8155  018F  1810               	btfsc	16,0	;volatile
  8156  0190  1C12               	btfss	18,0	;volatile
  8157  0191  299B               	goto	i1l8272
  8158                           
  8159                           ;usb_device.c: 848: {
  8160                           ;usb_device.c: 849: USBDeviceInit();
  8161  0192  2242  3180         	fcall	i1_USBDeviceInit
  8162                           
  8163                           ;usb_device.c: 853: {PIE2bits.USBIE = 1;};
  8164  0194  0021               	movlb	1	; select bank1
  8165  0195  1512               	bsf	18,2	;volatile
  8166                           
  8167                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  8168  0196  3004               	movlw	4
  8169  0197  0022               	movlb	2	; select bank2
  8170  0198  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
  8171                           
  8172                           ;usb_device.c: 865: (UIR &= 0xFE);
  8173  0199  003D               	movlb	29	; select bank29
  8174  019A  1010               	bcf	16,0	;volatile
  8175  019B                     i1l8272:	
  8176                           
  8177                           ;usb_device.c: 866: }
  8178                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  8179  019B  1A10               	btfsc	16,4	;volatile
  8180  019C  1E12               	btfss	18,4	;volatile
  8181  019D  29A2               	goto	i1l8280
  8182                           
  8183                           ;usb_device.c: 872: {
  8184                           ;usb_device.c: 877: USBSuspend();
  8185  019E  235C  3180         	fcall	_USBSuspend
  8186                           
  8187                           ;usb_device.c: 880: (UIR &= 0xEF);
  8188  01A0  003D               	movlb	29	; select bank29
  8189  01A1  1210               	bcf	16,4	;volatile
  8190  01A2                     i1l8280:	
  8191                           
  8192                           ;usb_device.c: 881: }
  8193                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  8194  01A2  1F10               	btfss	16,6	;volatile
  8195  01A3  29BC               	goto	i1l8294
  8196                           
  8197                           ;usb_device.c: 884: {
  8198                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  8199  01A4  1F12               	btfss	18,6	;volatile
  8200  01A5  29B1               	goto	i1l8286
  8201                           
  8202                           ;usb_device.c: 886: {
  8203                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  8204  01A6  3073               	movlw	115
  8205  01A7  0020               	movlb	0	; select bank0
  8206  01A8  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8207  01A9  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8208  01AA  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8209  01AB  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8210  01AC  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8211  01AD  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  8212  01AE  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8213  01AF  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8214  01B1                     i1l8286:	
  8215                           
  8216                           ;usb_device.c: 888: }
  8217                           ;usb_device.c: 889: (UIR &= 0xBF);
  8218  01B1  003D               	movlb	29	; select bank29
  8219  01B2  1310               	bcf	16,6	;volatile
  8220                           
  8221                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  8222  01B3  0022               	movlb	2	; select bank2
  8223  01B4  0854               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  8224  01B5  1D03               	skipz
  8225                           
  8226                           ;usb_device.c: 915: {
  8227                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  8228  01B6  03D4               	decf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  8229                           
  8230                           ;usb_device.c: 917: }
  8231                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  8232  01B7  08D4               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  8233  01B8  1D03               	skipz
  8234  01B9  29BC               	goto	i1l8294
  8235                           
  8236                           ;usb_device.c: 924: {
  8237                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  8238  01BA  22B4  3180         	fcall	_USBCtrlEPAllowStatusStage
  8239  01BC                     i1l8294:	
  8240                           
  8241                           ;usb_device.c: 926: }
  8242                           ;usb_device.c: 928: }
  8243                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  8244  01BC  003D               	movlb	29	; select bank29
  8245  01BD  1A90               	btfsc	16,5	;volatile
  8246  01BE  1E92               	btfss	18,5	;volatile
  8247  01BF  29C2               	goto	i1l8300
  8248                           
  8249                           ;usb_device.c: 931: {
  8250                           ;usb_device.c: 932: USBStallHandler();
  8251  01C0  2344  3180         	fcall	_USBStallHandler
  8252  01C2                     i1l8300:	
  8253                           
  8254                           ;usb_device.c: 933: }
  8255                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  8256  01C2  1890               	btfsc	16,1	;volatile
  8257  01C3  1C92               	btfss	18,1	;volatile
  8258  01C4  29D3               	goto	i1l8308
  8259                           
  8260                           ;usb_device.c: 936: {
  8261                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  8262  01C5  30FF               	movlw	255
  8263  01C6  0020               	movlb	0	; select bank0
  8264  01C7  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8265  01C8  307F               	movlw	127
  8266  01C9  00E1               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8267  01CA  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8268  01CB  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8269  01CC  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8270  01CD  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
  8271  01CE  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8272  01CF  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8273                           
  8274                           ;usb_device.c: 938: UEIR = 0;;
  8275  01D1  003D               	movlb	29	; select bank29
  8276  01D2  0193               	clrf	19	;volatile
  8277  01D3                     i1l8308:	
  8278                           
  8279                           ;usb_device.c: 946: }
  8280                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  8281  01D3  3004               	movlw	4
  8282  01D4  0022               	movlb	2	; select bank2
  8283  01D5  0251               	subwf	_USBDeviceState^(0+256),w	;volatile
  8284  01D6  1C03               	btfss	3,0
  8285  01D7  298C               	goto	i1l8260
  8286                           
  8287                           ;usb_device.c: 957: }
  8288                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  8289  01D8  003D               	movlb	29	; select bank29
  8290  01D9  1D92               	btfss	18,3	;volatile
  8291  01DA  298C               	goto	i1l8260
  8292                           
  8293                           ;usb_device.c: 963: {
  8294                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  8295  01DB  0020               	movlb	0	; select bank0
  8296  01DC  01EE               	clrf	USBDeviceTasks@i
  8297  01DD                     i1l154:	
  8298                           
  8299                           ;usb_device.c: 965: {
  8300                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  8301  01DD  003D               	movlb	29	; select bank29
  8302  01DE  1D90               	btfss	16,3	;volatile
  8303  01DF  298C               	goto	i1l8260
  8304                           
  8305                           ;usb_device.c: 967: {
  8306                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  8307  01E0  080F               	movf	15,w	;volatile
  8308  01E1  0022               	movlb	2	; select bank2
  8309  01E2  00EA               	movwf	_USTATcopy^(0+256)	;volatile
  8310                           
  8311                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  8312  01E3  0C6A               	rrf	_USTATcopy^(0+256),w	;volatile
  8313  01E4  0020               	movlb	0	; select bank0
  8314  01E5  00ED               	movwf	??_USBDeviceTasks
  8315  01E6  0CED               	rrf	??_USBDeviceTasks,f
  8316  01E7  0C6D               	rrf	??_USBDeviceTasks,w
  8317  01E8  390F               	andlw	15
  8318  01E9  0022               	movlb	2	; select bank2
  8319  01EA  00DB               	movwf	_endpoint_number^(0+256)	;volatile
  8320                           
  8321                           ;usb_device.c: 972: (UIR &= 0xF7);
  8322  01EB  003D               	movlb	29	; select bank29
  8323  01EC  1190               	bcf	16,3	;volatile
  8324                           
  8325                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  8326  01ED  0022               	movlb	2	; select bank2
  8327  01EE  196A               	btfsc	_USTATcopy^(0+256),2	;volatile
  8328  01EF  29F3               	goto	i1l8328
  8329                           
  8330                           ;usb_device.c: 978: {
  8331                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  8332  01F0  085B               	movf	_endpoint_number^(0+256),w	;volatile
  8333  01F1  3E3A               	addlw	_ep_data_out& (0+255)
  8334  01F2  29F5               	goto	L12
  8335  01F3                     i1l8328:	
  8336                           ;usb_device.c: 980: }
  8337                           
  8338                           
  8339                           ;usb_device.c: 981: else
  8340                           ;usb_device.c: 982: {
  8341                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  8342  01F3  085B               	movf	_endpoint_number^(0+256),w	;volatile
  8343  01F4  3E37               	addlw	_ep_data_in& (0+255)
  8344  01F5                     L12:	
  8345  01F5  0086               	movwf	6
  8346  01F6  3001               	movlw	1	; select bank2/3
  8347  01F7  0087               	movwf	7
  8348  01F8  0681               	xorwf	1,f
  8349                           
  8350                           ;usb_device.c: 984: }
  8351                           ;usb_device.c: 989: if(endpoint_number == 0)
  8352  01F9  08DB               	movf	_endpoint_number^(0+256),f
  8353  01FA  1D03               	skipz
  8354  01FB  29FF               	goto	i1l8334
  8355                           
  8356                           ;usb_device.c: 990: {
  8357                           ;usb_device.c: 991: USBCtrlEPService();
  8358  01FC  22EC  3180         	fcall	_USBCtrlEPService
  8359                           
  8360                           ;usb_device.c: 992: }
  8361  01FE  2A0B               	goto	i1l8336
  8362  01FF                     i1l8334:	
  8363                           
  8364                           ;usb_device.c: 993: else
  8365                           ;usb_device.c: 994: {
  8366                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  8367  01FF  3072               	movlw	114
  8368  0200  0020               	movlb	0	; select bank0
  8369  0201  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8370  0202  306A               	movlw	_USTATcopy& (0+255)
  8371  0203  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8372  0204  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8373  0205  3001               	movlw	1
  8374  0206  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8375  0207  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8376  0208  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  8377  0209  2212  3180         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8378  020B                     i1l8336:	
  8379  020B  0020               	movlb	0	; select bank0
  8380  020C  3004               	movlw	4
  8381  020D  0AEE               	incf	USBDeviceTasks@i,f
  8382  020E  026E               	subwf	USBDeviceTasks@i,w
  8383  020F  1803               	btfsc	3,0
  8384  0210  298C               	goto	i1l8260
  8385  0211  29DD               	goto	i1l154
  8386  0212                     __end_of_USBDeviceTasks:	
  8387  0212                     __ptext2484:	
  8388 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  8389 ;; Defined at:
  8390 ;;		line 640 in file "main.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;  event           2    0[BANK0 ] int 
  8393 ;;  pdata           2    2[BANK0 ] PTR void 
  8394 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(48), 
  8395 ;;  size            2    4[BANK0 ] unsigned short 
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      enum E5
  8400 ;; Registers used:
  8401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 1F/0
  8404 ;;		On exit  : 1D/0
  8405 ;;		Unchanged: FFFE0/0
  8406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8407 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;Total ram usage:        6 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    4
  8414 ;; This function calls:
  8415 ;;		_USBCB_SOF_Handler
  8416 ;;		_USBCBSuspend
  8417 ;;		_USBCBWakeFromSuspend
  8418 ;;		_USBCBInitEP
  8419 ;;		_USBCBStdSetDscHandler
  8420 ;;		_USBCBCheckOtherReq
  8421 ;;		_USBCBErrorHandler
  8422 ;; This function is called by:
  8423 ;;		_USBDeviceTasks
  8424 ;;		_USBStdSetCfgHandler
  8425 ;;		_USBSuspend
  8426 ;;		_USBWakeFromSuspend
  8427 ;;		_USBCtrlTrfSetupHandler
  8428 ;;		_USBCheckStdRequest
  8429 ;;		_USBStdFeatureReqHandler
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
  8435  0212                     _USER_USB_CALLBACK_EVENT_HANDLER:	
  8436  0212                     i1l7962:	
  8437                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-status,0+pclath+cstack]
  8438                           
  8439                           
  8440                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8441                           ; Switch size 1, requested type "space"
  8442                           ; Number of cases is 2, Range of values is 0 to 127
  8443                           ; switch strategies available:
  8444                           ; Name         Instructions Cycles
  8445                           ; simple_byte            7     4 (average)
  8446                           ; direct_byte          262     6 (fixed)
  8447                           ; jumptable            260     6 (fixed)
  8448                           ; rangetable           132     6 (fixed)
  8449                           ; spacedrange          261     8 (fixed)
  8450                           ; locatedrange         128     3 (fixed)
  8451                           ;	Chosen strategy is simple_byte
  8452                           
  8453                           ;main.c: 666: break;
  8454                           
  8455                           ;main.c: 641: switch( event )
  8456  0212  0861               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
  8457  0213  3A00               	xorlw	0	; case 0
  8458  0214  1903               	skipnz
  8459  0215  2A22               	goto	i1l8492
  8460  0216  3A7F               	xorlw	127	; case 127
  8461  0217  1903               	skipnz
  8462  0218  2A3C               	goto	i1l8494
  8463  0219  2A41               	goto	i1l1091
  8464  021A                     i1l7964:	
  8465                           
  8466                           ;main.c: 647: USBCB_SOF_Handler();
  8467  021A  2C19               	ljmp	i1l1053
  8468  021B                     i1l7966:	
  8469                           ;main.c: 648: break;
  8470                           
  8471                           
  8472                           ;main.c: 650: USBCBSuspend();
  8473  021B  2C1B               	ljmp	i1l1047
  8474  021C                     i1l7968:	
  8475                           ;main.c: 651: break;
  8476                           
  8477                           
  8478                           ;main.c: 653: USBCBWakeFromSuspend();
  8479  021C  2C1A               	ljmp	i1l1050
  8480  021D                     i1l7970:	
  8481                           ;main.c: 654: break;
  8482                           
  8483                           
  8484                           ;main.c: 656: USBCBInitEP();
  8485  021D  2B77               	ljmp	i1l7816
  8486  021E                     i1l7972:	
  8487                           ;main.c: 657: break;
  8488                           
  8489                           
  8490                           ;main.c: 659: USBCBStdSetDscHandler();
  8491  021E  2C15               	ljmp	i1l1062
  8492  021F                     i1l7974:	
  8493                           ;main.c: 660: break;
  8494                           
  8495                           
  8496                           ;main.c: 662: USBCBCheckOtherReq();
  8497  021F  3194  2C44         	ljmp	i1l6688
  8498  0221                     i1l7976:	
  8499                           ;main.c: 663: break;
  8500                           
  8501                           
  8502                           ;main.c: 665: USBCBErrorHandler();
  8503  0221  2C18               	ljmp	i1l1056
  8504  0222                     i1l8492:	
  8505                           
  8506                           ; Switch size 1, requested type "space"
  8507                           ; Number of cases is 8, Range of values is 1 to 117
  8508                           ; switch strategies available:
  8509                           ; Name         Instructions Cycles
  8510                           ; simple_byte           25    13 (average)
  8511                           ; direct_byte          243     9 (fixed)
  8512                           ; jumptable            263     9 (fixed)
  8513                           ;	Chosen strategy is simple_byte
  8514  0222  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  8515  0223  3A01               	xorlw	1	; case 1
  8516  0224  1903               	skipnz
  8517  0225  2A1D               	goto	i1l7970
  8518  0226  3A03               	xorlw	3	; case 2
  8519  0227  1903               	skipnz
  8520  0228  2A1E               	goto	i1l7972
  8521  0229  3A01               	xorlw	1	; case 3
  8522  022A  1903               	skipnz
  8523  022B  2A1F               	goto	i1l7974
  8524  022C  3A06               	xorlw	6	; case 5
  8525  022D  1903               	skipnz
  8526  022E  2A41               	goto	i1l1091
  8527  022F  3A77               	xorlw	119	; case 114
  8528  0230  1903               	skipnz
  8529  0231  2A41               	goto	i1l1091
  8530  0232  3A01               	xorlw	1	; case 115
  8531  0233  1903               	skipnz
  8532  0234  2A1A               	goto	i1l7964
  8533  0235  3A07               	xorlw	7	; case 116
  8534  0236  1903               	skipnz
  8535  0237  2A1C               	goto	i1l7968
  8536  0238  3A01               	xorlw	1	; case 117
  8537  0239  1903               	skipnz
  8538  023A  2A1B               	goto	i1l7966
  8539  023B  2A41               	goto	i1l1091
  8540  023C                     i1l8494:	
  8541                           
  8542                           ; Switch size 1, requested type "space"
  8543                           ; Number of cases is 1, Range of values is 255 to 255
  8544                           ; switch strategies available:
  8545                           ; Name         Instructions Cycles
  8546                           ; simple_byte            4     3 (average)
  8547                           ; direct_byte            7     5 (fixed)
  8548                           ; jumptable            263     9 (fixed)
  8549                           ;	Chosen strategy is simple_byte
  8550  023C  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  8551  023D  3AFF               	xorlw	255	; case 255
  8552  023E  1903               	skipnz
  8553  023F  2A21               	goto	i1l7976
  8554  0240  2A41               	goto	i1l1091
  8555  0241                     i1l1091:	
  8556  0241  0008               	return
  8557  0242                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
  8558  0242                     __ptext2504:	
  8559 ;; *************** function i1_USBDeviceInit *****************
  8560 ;; Defined at:
  8561 ;;		line 467 in file "../USB/usb_device.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;		None
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  USBDeviceIni    2    2[COMMON] PTR unsigned char 
  8566 ;;		 -> UEP1(1), 
  8567 ;;  USBDeviceIni    1    5[COMMON] unsigned char 
  8568 ;;  USBDeviceIni    1    4[COMMON] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;		None               void
  8571 ;; Registers used:
  8572 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8573 ;; Tracked objects:
  8574 ;;		On entry : 1F/1D
  8575 ;;		On exit  : 1F/2
  8576 ;;		Unchanged: FFFE0/0
  8577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;Total ram usage:        6 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_USBDeviceTasks
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function i1_USBDeviceInit
  8593  0242                     i1_USBDeviceInit:	
  8594                           
  8595                           ;usb_device.c: 468: BYTE i;
  8596                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  8597                           
  8598                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l-status,0]
  8599  0242  0021               	movlb	1	; select bank1
  8600  0243  1112               	bcf	18,2	;volatile
  8601                           
  8602                           ;usb_device.c: 473: UEIR = 0;;
  8603  0244  003D               	movlb	29	; select bank29
  8604  0245  0193               	clrf	19	;volatile
  8605                           
  8606                           ;usb_device.c: 476: UIR = 0;;
  8607  0246  0190               	clrf	16	;volatile
  8608                           
  8609                           ;usb_device.c: 479: UEP0 = 0;
  8610  0247  0198               	clrf	24	;volatile
  8611                           
  8612                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
  8613  0248  300E               	movlw	14
  8614  0249  00F3               	movwf	i1USBDeviceInit@p+1
  8615  024A  3099               	movlw	153
  8616  024B  00F2               	movwf	i1USBDeviceInit@p
  8617  024C  01F4               	clrf	i1USBDeviceInit@i_750
  8618  024D                     i1l7508:	
  8619  024D  0872               	movf	i1USBDeviceInit@p,w
  8620  024E  0086               	movwf	6
  8621  024F  0873               	movf	i1USBDeviceInit@p+1,w
  8622  0250  0087               	movwf	7
  8623  0251  0181               	clrf	1
  8624  0252  0AF2               	incf	i1USBDeviceInit@p,f
  8625  0253  1903               	skipnz
  8626  0254  0AF3               	incf	i1USBDeviceInit@p+1,f
  8627  0255  3002               	movlw	2
  8628  0256  0AF4               	incf	i1USBDeviceInit@i_750,f
  8629  0257  0274               	subwf	i1USBDeviceInit@i_750,w
  8630  0258  1C03               	skipc
  8631  0259  2A4D               	goto	i1l7508
  8632                           
  8633                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  8634  025A  3016               	movlw	22
  8635  025B  0091               	movwf	17	;volatile
  8636  025C  309F               	movlw	159
  8637  025D  0097               	movwf	23	;volatile
  8638  025E  307B               	movlw	123
  8639  025F  0092               	movwf	18	;volatile
  8640                           
  8641                           ;usb_device.c: 486: ;
  8642                           ;usb_device.c: 489: ;
  8643                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  8644  0260  01F5               	clrf	i1USBDeviceInit@i
  8645  0261                     i1l7524:	
  8646                           
  8647                           ;usb_device.c: 493: {
  8648                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  8649  0261  0875               	movf	i1USBDeviceInit@i,w
  8650  0262  0709               	addwf	9,w
  8651  0263  0709               	addwf	9,w
  8652  0264  3E20               	addlw	32
  8653  0265  0086               	movwf	6
  8654  0266  3000               	movlw	0
  8655  0267  0187               	clrf	7
  8656  0268  3FC0               	movwi [0]fsr1
  8657  0269  3FC1               	movwi [1]fsr1
  8658  026A  3FC2               	movwi [2]fsr1
  8659  026B  3FC3               	movwi [3]fsr1
  8660  026C  300C               	movlw	12
  8661  026D  0AF5               	incf	i1USBDeviceInit@i,f
  8662  026E  0275               	subwf	i1USBDeviceInit@i,w
  8663  026F  1C03               	skipc
  8664  0270  2A61               	goto	i1l7524
  8665                           
  8666                           ;usb_device.c: 495: }
  8667                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  8668  0271  170E               	bsf	14,6	;volatile
  8669                           
  8670                           ;usb_device.c: 501: UADDR = 0x00;
  8671  0272  0196               	clrf	22	;volatile
  8672                           
  8673                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  8674  0273  120E               	bcf	14,4	;volatile
  8675                           
  8676                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  8677  0274  130E               	bcf	14,6	;volatile
  8678  0275                     i1l7538:	
  8679                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  8680                           
  8681  0275  003D               	movlb	29	; select bank29
  8682  0276  1D90               	btfss	16,3	;volatile
  8683  0277  2A7F               	goto	i1l7540
  8684                           
  8685                           ;usb_device.c: 511: {
  8686                           ;usb_device.c: 512: (UIR &= 0xF7);
  8687  0278  1190               	bcf	16,3	;volatile
  8688                           
  8689                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  8690  0279  0022               	movlb	2	; select bank2
  8691  027A  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
  8692                           
  8693                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  8694  027B  01B3               	clrf	(_outPipes^(0+256)+2)	;volatile
  8695                           
  8696                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  8697  027C  01B4               	clrf	(_outPipes^(0+256)+3)	;volatile
  8698  027D  01B5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  8699  027E  2A75               	goto	i1l7538
  8700  027F                     i1l7540:	
  8701                           
  8702                           ;usb_device.c: 517: }
  8703                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  8704  027F  3001               	movlw	1
  8705  0280  0022               	movlb	2	; select bank2
  8706  0281  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8707                           
  8708                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  8709  0282  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8710                           
  8711                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  8712  0283  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  8713                           
  8714                           ;usb_device.c: 525: USBDeferOUTDataStagePackets = FALSE;
  8715  0284  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  8716                           
  8717                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  8718  0285  0023               	movlb	3	; select bank3
  8719  0286  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  8720                           
  8721                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(2+1u); i++)
  8722  0287  01F5               	clrf	i1USBDeviceInit@i
  8723  0288                     i1l7552:	
  8724                           
  8725                           ;usb_device.c: 531: {
  8726                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  8727  0288  0875               	movf	i1USBDeviceInit@i,w
  8728  0289  3E3D               	addlw	_pBDTEntryIn& (0+255)
  8729  028A  0086               	movwf	6
  8730  028B  3001               	movlw	1	; select bank2/3
  8731  028C  0087               	movwf	7
  8732  028D  0181               	clrf	1
  8733                           
  8734                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  8735  028E  0875               	movf	i1USBDeviceInit@i,w
  8736  028F  3E40               	addlw	_pBDTEntryOut& (0+255)
  8737  0290  0086               	movwf	6
  8738  0291  0181               	clrf	1
  8739                           
  8740                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  8741  0292  0875               	movf	i1USBDeviceInit@i,w
  8742  0293  3E37               	addlw	_ep_data_in& (0+255)
  8743  0294  0086               	movwf	6
  8744  0295  0181               	clrf	1
  8745                           
  8746                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  8747  0296  0875               	movf	i1USBDeviceInit@i,w
  8748  0297  3E3A               	addlw	_ep_data_out& (0+255)
  8749  0298  0086               	movwf	6
  8750  0299  3003               	movlw	3
  8751  029A  0181               	clrf	1
  8752  029B  0AF5               	incf	i1USBDeviceInit@i,f
  8753  029C  0275               	subwf	i1USBDeviceInit@i,w
  8754  029D  1C03               	skipc
  8755  029E  2A88               	goto	i1l7552
  8756                           
  8757                           ;usb_device.c: 536: }
  8758                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  8759  029F  3028               	movlw	40
  8760  02A0  0022               	movlb	2	; select bank2
  8761  02A1  00BD               	movwf	_pBDTEntryIn^(0+256)
  8762                           
  8763                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  8764  02A2  3016               	movlw	22
  8765  02A3  003D               	movlb	29	; select bank29
  8766  02A4  0098               	movwf	24	;volatile
  8767                           
  8768                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8769  02A5  3050               	movlw	80
  8770  02A6  00F0               	movwf	??i1_USBDeviceInit
  8771  02A7  01F1               	clrf	??i1_USBDeviceInit+1
  8772  02A8  0020               	movlb	0	; select bank0
  8773  02A9  00A2               	movwf	34	;volatile
  8774  02AA  0871               	movf	??i1_USBDeviceInit+1,w
  8775  02AB  00A3               	movwf	35	;volatile
  8776                           
  8777                           ;usb_device.c: 544: BDT[0].CNT = 8;
  8778  02AC  3008               	movlw	8
  8779  02AD  00A1               	movwf	33	;volatile
  8780                           
  8781                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  8782  02AE  3084               	movlw	132
  8783  02AF  00A0               	movwf	32	;volatile
  8784                           
  8785                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  8786  02B0  0022               	movlb	2	; select bank2
  8787  02B1  01E9               	clrf	_USBActiveConfiguration^(0+256)	;volatile
  8788                           
  8789                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  8790  02B2  01D1               	clrf	_USBDeviceState^(0+256)	;volatile
  8791  02B3  0008               	return
  8792  02B4                     __end_ofi1_USBDeviceInit:	
  8793  02B4                     __ptext2475:	
  8794 ;; *************** function _USBCtrlEPAllowStatusStage *****************
  8795 ;; Defined at:
  8796 ;;		line 1590 in file "../USB/usb_device.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;		None
  8801 ;; Return value:  Size  Location     Type
  8802 ;;		None               void
  8803 ;; Registers used:
  8804 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8805 ;; Tracked objects:
  8806 ;;		On entry : 1D/2
  8807 ;;		On exit  : 1C/0
  8808 ;;		Unchanged: FFFE0/0
  8809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;Total ram usage:        2 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; This function calls:
  8817 ;;		Nothing
  8818 ;; This function is called by:
  8819 ;;		_USBDeviceTasks
  8820 ;;		_USBCtrlEPServiceComplete
  8821 ;;		_USBCtrlTrfRxService
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _USBCtrlEPAllowStatusStage
  8827  02B4                     _USBCtrlEPAllowStatusStage:	
  8828  02B4                     i1l6482:	
  8829                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l-status,0]
  8830                           
  8831                           
  8832                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
  8833  02B4  0022               	movlb	2	; select bank2
  8834  02B5  08D2               	movf	_USBStatusStageEnabledFlag1^(0+256),f
  8835  02B6  1D03               	skipz
  8836  02B7  0008               	return
  8837                           
  8838                           ;usb_device.c: 1597: {
  8839                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
  8840  02B8  3001               	movlw	1
  8841  02B9  00D2               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8842                           
  8843                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
  8844  02BA  08D3               	movf	_USBStatusStageEnabledFlag2^(0+256),f
  8845  02BB  1D03               	skipz
  8846  02BC  0008               	return
  8847                           
  8848                           ;usb_device.c: 1600: {
  8849                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
  8850  02BD  00D3               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8851                           
  8852                           ;usb_device.c: 1605: if(controlTransferState == 2)
  8853  02BE  085A               	movf	_controlTransferState^(0+256),w	;volatile
  8854  02BF  3A02               	xorlw	2
  8855  02C0  1D03               	skipz
  8856  02C1  2AC9               	goto	i1l6494
  8857                           
  8858                           ;usb_device.c: 1606: {
  8859                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
  8860  02C2  0A3D               	incf	_pBDTEntryIn^(0+256),w
  8861  02C3  0086               	movwf	6
  8862  02C4  0187               	clrf	7
  8863  02C5  0181               	clrf	1
  8864                           
  8865                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8866  02C6  083D               	movf	_pBDTEntryIn^(0+256),w
  8867                           
  8868                           ;usb_device.c: 1609: }
  8869  02C7  3185  2DCD         	ljmp	PL30	;call to abstracted procedure
  8870  02C9                     i1l6494:	
  8871                           
  8872                           ;usb_device.c: 1610: else if(controlTransferState == 1)
  8873  02C9  0B5A               	decfsz	_controlTransferState^(0+256),w	;volatile
  8874  02CA  0008               	return
  8875                           
  8876                           ;usb_device.c: 1611: {
  8877                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
  8878  02CB  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  8879                           
  8880                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
  8881  02CC  0A5E               	incf	_pBDTEntryEP0OutCurrent^(0+256),w
  8882  02CD  0086               	movwf	6
  8883  02CE  3008               	movlw	8
  8884  02CF  0187               	clrf	7
  8885  02D0  0081               	movwf	1
  8886                           
  8887                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8888  02D1  3050               	movlw	80
  8889  02D2  00F0               	movwf	??_USBCtrlEPAllowStatusStage
  8890  02D3  01F1               	clrf	??_USBCtrlEPAllowStatusStage+1
  8891  02D4  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8892  02D5  241C  3180         	fcall	PL24	;call to abstracted procedure
  8893                           
  8894                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  8895  02D7  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8896  02D8  0086               	movwf	6
  8897  02D9  3084               	movlw	132
  8898  02DA  0081               	movwf	1
  8899                           
  8900                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
  8901  02DB  3001               	movlw	1
  8902  02DC  00C5               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
  8903                           
  8904                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
  8905  02DD  0021               	movlb	1	; select bank1
  8906  02DE  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
  8907  02DF  0086               	movwf	6
  8908  02E0  3008               	movlw	8
  8909  02E1  0081               	movwf	1
  8910                           
  8911                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8912  02E2  3050               	movlw	80
  8913  02E3  00F0               	movwf	??_USBCtrlEPAllowStatusStage
  8914  02E4  01F1               	clrf	??_USBCtrlEPAllowStatusStage+1
  8915  02E5  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  8916  02E6  241C               	fcall	PL24	;call to abstracted procedure
  8917                           
  8918                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  8919  02E7  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
  8920  02E8  0086               	movwf	6
  8921  02E9  3080               	movlw	128
  8922  02EA  0081               	movwf	1
  8923  02EB  0008               	return
  8924  02EC                     __end_of_USBCtrlEPAllowStatusStage:	
  8925  02EC                     __ptext2469:	
  8926 ;; *************** function _USBCtrlEPService *****************
  8927 ;; Defined at:
  8928 ;;		line 2523 in file "../USB/usb_device.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;		None
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  setup_cnt       1   12[BANK0 ] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;		None               void
  8935 ;; Registers used:
  8936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : 1F/2
  8939 ;;		On exit  : 1C/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;Total ram usage:        3 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    8
  8949 ;; This function calls:
  8950 ;;		_USBCtrlTrfSetupHandler
  8951 ;;		_USBCtrlTrfOutHandler
  8952 ;;		_USBCtrlTrfInHandler
  8953 ;; This function is called by:
  8954 ;;		_USBDeviceTasks
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _USBCtrlEPService
  8960  02EC                     _USBCtrlEPService:	
  8961                           
  8962                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)45;
  8963                           
  8964                           ; Regs used in _USBCtrlEPService: [wreg-status,0+pclath+cstack]
  8965  02EC  302D               	movlw	45
  8966  02ED  00D4               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
  8967                           
  8968                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  8969  02EE  086A               	movf	_USTATcopy^(0+256),w	;volatile
  8970  02EF  39FD               	andlw	253
  8971  02F0  1D03               	btfss	3,2
  8972  02F1  2B3B               	goto	i1l8234
  8973                           
  8974                           ;usb_device.c: 2533: {
  8975                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  8976  02F2  366A               	lsrf	_USTATcopy^(0+256),w	;volatile
  8977  02F3  393F               	andlw	63
  8978  02F4  0709               	addwf	9,w
  8979  02F5  0709               	addwf	9,w
  8980  02F6  3E20               	addlw	32
  8981  02F7  00DE               	movwf	_pBDTEntryEP0OutCurrent^(0+256)
  8982                           
  8983                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8984  02F8  0021               	movlb	1	; select bank1
  8985  02F9  00EF               	movwf	_pBDTEntryEP0OutNext^(0+128)
  8986                           
  8987                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  8988  02FA  3004               	movlw	4
  8989  02FB  06EF               	xorwf	_pBDTEntryEP0OutNext^(0+128),f
  8990                           
  8991                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  8992  02FC  0022               	movlb	2	; select bank2
  8993  02FD  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  8994  02FE  0086               	movwf	6
  8995  02FF  0187               	clrf	7
  8996  0300  0C01               	rrf	1,w
  8997  0301  0C89               	rrf	9,f
  8998  0302  390F               	andlw	15
  8999  0303  3A0D               	xorlw	13
  9000  0304  1D03               	skipz
  9001  0305  2B39               	goto	i1l8232
  9002                           
  9003                           ;usb_device.c: 2550: {
  9004                           ;usb_device.c: 2551: unsigned char setup_cnt;
  9005                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  9006  0306  0020               	movlb	0	; select bank0
  9007  0307  01EC               	clrf	USBCtrlEPService@setup_cnt
  9008  0308                     i1l8220:	
  9009                           
  9010                           ;usb_device.c: 2558: {
  9011                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  9012  0308  086C               	movf	USBCtrlEPService@setup_cnt,w
  9013  0309  3E50               	addlw	80
  9014  030A  0086               	movwf	6
  9015  030B  0187               	clrf	7
  9016  030C  0022               	movlb	2	; select bank2
  9017  030D  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9018  030E  3E02               	addlw	2
  9019  030F  0084               	movwf	4
  9020  0310  0185               	clrf	5
  9021  0311  3F00               	moviw [0]fsr0
  9022  0312  0020               	movlb	0	; select bank0
  9023  0313  00EA               	movwf	??_USBCtrlEPService
  9024  0314  3F01               	moviw [1]fsr0
  9025  0315  00EB               	movwf	??_USBCtrlEPService+1
  9026  0316  086A               	movf	??_USBCtrlEPService,w
  9027  0317  0084               	movwf	4
  9028  0318  086B               	movf	??_USBCtrlEPService+1,w
  9029  0319  0085               	movwf	5
  9030  031A  0800               	movf	0,w
  9031  031B  0081               	movwf	1
  9032                           
  9033                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  9034  031C  0022               	movlb	2	; select bank2
  9035  031D  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9036  031E  3E02               	addlw	2
  9037  031F  0086               	movwf	6
  9038  0320  3001               	movlw	1
  9039  0321  0781               	addwf	1,f
  9040  0322  3141               	addfsr 1,1
  9041  0323  1803               	skipnc
  9042  0324  0A81               	incf	1,f
  9043  0325  0020               	movlb	0	; select bank0
  9044  0326  3008               	movlw	8
  9045  0327  0AEC               	incf	USBCtrlEPService@setup_cnt,f
  9046  0328  026C               	subwf	USBCtrlEPService@setup_cnt,w
  9047  0329  1C03               	skipc
  9048  032A  2B08               	goto	i1l8220
  9049                           
  9050                           ;usb_device.c: 2561: }
  9051                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  9052  032B  3050               	movlw	80
  9053  032C  00EA               	movwf	??_USBCtrlEPService
  9054  032D  01EB               	clrf	??_USBCtrlEPService+1
  9055  032E  0022               	movlb	2	; select bank2
  9056  032F  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9057  0330  3E02               	addlw	2
  9058  0331  0086               	movwf	6
  9059  0332  0187               	clrf	7
  9060  0333  0020               	movlb	0	; select bank0
  9061  0334  086A               	movf	??_USBCtrlEPService,w
  9062  0335  3FC0               	movwi [0]fsr1
  9063  0336  086B               	movf	??_USBCtrlEPService+1,w
  9064  0337  3FC1               	movwi [1]fsr1
  9065                           
  9066                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  9067  0338  283C               	ljmp	i1l8176
  9068  0339                     i1l8232:	
  9069                           ;usb_device.c: 2566: }
  9070                           
  9071                           
  9072                           ;usb_device.c: 2567: else
  9073                           ;usb_device.c: 2568: {
  9074                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  9075  0339  3185  2D39         	ljmp	i1l7804
  9076  033B                     i1l8234:	
  9077                           
  9078                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  9079  033B  30FD               	movlw	253
  9080  033C  056A               	andwf	_USTATcopy^(0+256),w	;volatile
  9081  033D  0020               	movlb	0	; select bank0
  9082  033E  00EA               	movwf	??_USBCtrlEPService
  9083  033F  3A04               	xorlw	4
  9084  0340  1D03               	skipz
  9085  0341  0008               	return
  9086                           
  9087                           ;usb_device.c: 2574: {
  9088                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  9089  0342  3184  2C29         	ljmp	i1l7670
  9090  0344                     __end_of_USBCtrlEPService:	
  9091  0344                     __ptext2468:	
  9092 ;; *************** function _USBStallHandler *****************
  9093 ;; Defined at:
  9094 ;;		line 2356 in file "../USB/usb_device.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;		None               void
  9101 ;; Registers used:
  9102 ;;		wreg, fsr1l, fsr1h
  9103 ;; Tracked objects:
  9104 ;;		On entry : 1F/1D
  9105 ;;		On exit  : 1F/1D
  9106 ;;		Unchanged: FFFE0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;Total ram usage:        0 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_USBDeviceTasks
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _USBStallHandler
  9123  0344                     _USBStallHandler:	
  9124                           
  9125                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
  9126                           
  9127                           ; Regs used in _USBStallHandler: [wregfsr1]
  9128  0344  1C18               	btfss	24,0	;volatile
  9129  0345  2B5A               	goto	i1l6522
  9130                           
  9131                           ;usb_device.c: 2369: {
  9132                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  9133  0346  0022               	movlb	2	; select bank2
  9134  0347  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9135  0348  0086               	movwf	6
  9136  0349  0187               	clrf	7
  9137  034A  0801               	movf	1,w
  9138  034B  3A80               	xorlw	128
  9139  034C  1D03               	skipz
  9140  034D  2B58               	goto	i1l6520
  9141  034E  083D               	movf	_pBDTEntryIn^(0+256),w
  9142  034F  0086               	movwf	6
  9143  0350  0801               	movf	1,w
  9144  0351  3A84               	xorlw	132
  9145  0352  1D03               	skipz
  9146  0353  2B58               	goto	i1l6520
  9147                           
  9148                           ;usb_device.c: 2372: {
  9149                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  9150  0354  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
  9151  0355  0086               	movwf	6
  9152  0356  308C               	movlw	140
  9153  0357  0081               	movwf	1
  9154  0358                     i1l6520:	
  9155                           
  9156                           ;usb_device.c: 2375: }
  9157                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
  9158  0358  003D               	movlb	29	; select bank29
  9159  0359  1018               	bcf	24,0	;volatile
  9160  035A                     i1l6522:	
  9161                           
  9162                           ;usb_device.c: 2377: }
  9163                           ;usb_device.c: 2379: (UIR &= 0xDF);
  9164  035A  1290               	bcf	16,5	;volatile
  9165  035B  0008               	return
  9166  035C                     __end_of_USBStallHandler:	
  9167  035C                     __ptext2467:	
  9168 ;; *************** function _USBSuspend *****************
  9169 ;; Defined at:
  9170 ;;		line 2399 in file "../USB/usb_device.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;		None
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;		None
  9175 ;; Return value:  Size  Location     Type
  9176 ;;		None               void
  9177 ;; Registers used:
  9178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 1F/1D
  9181 ;;		On exit  : 1D/0
  9182 ;;		Unchanged: FFFE0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;Total ram usage:        0 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    5
  9191 ;; This function calls:
  9192 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9193 ;; This function is called by:
  9194 ;;		_USBDeviceTasks
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           
  9199                           ;psect for function _USBSuspend
  9200  035C                     _USBSuspend:	
  9201                           
  9202                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
  9203                           
  9204                           ; Regs used in _USBSuspend: [wreg-status,0+pclath+cstack]
  9205  035C  1512               	bsf	18,2	;volatile
  9206                           
  9207                           ;usb_device.c: 2424: (UIR &= 0xEF);
  9208  035D  1210               	bcf	16,4	;volatile
  9209                           
  9210                           ;usb_device.c: 2427: UCONbits.SUSPND = 1;
  9211  035E  148E               	bsf	14,1	;volatile
  9212                           
  9213                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
  9214  035F  3001               	movlw	1
  9215  0360  0023               	movlb	3	; select bank3
  9216  0361  00AE               	movwf	_USBBusIsSuspended^(0+384)	;volatile
  9217                           
  9218                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  9219  0362  3075               	movlw	117
  9220  0363  0020               	movlb	0	; select bank0
  9221  0364  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9222  0365  2423  3180         	fcall	PL32	;call to abstracted procedure
  9223  0367  2A12               	ljmp	i1l7962
  9224  0368                     __end_of_USBSuspend:	
  9225  0368                     __ptext2466:	
  9226 ;; *************** function _USBWakeFromSuspend *****************
  9227 ;; Defined at:
  9228 ;;		line 2456 in file "../USB/usb_device.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;		None
  9231 ;; Auto vars:     Size  Location     Type
  9232 ;;		None
  9233 ;; Return value:  Size  Location     Type
  9234 ;;		None               void
  9235 ;; Registers used:
  9236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9237 ;; Tracked objects:
  9238 ;;		On entry : 1F/1D
  9239 ;;		On exit  : 1F/1D
  9240 ;;		Unchanged: FFFE0/0
  9241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;Total ram usage:        0 bytes
  9247 ;; Hardware stack levels used:    1
  9248 ;; Hardware stack levels required when called:    5
  9249 ;; This function calls:
  9250 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9251 ;; This function is called by:
  9252 ;;		_USBDeviceTasks
  9253 ;; This function uses a non-reentrant model
  9254 ;;
  9255                           
  9256                           
  9257                           ;psect for function _USBWakeFromSuspend
  9258  0368                     _USBWakeFromSuspend:	
  9259                           
  9260                           ;usb_device.c: 2457: USBBusIsSuspended = FALSE;
  9261                           
  9262                           ; Regs used in _USBWakeFromSuspend: [wreg-status,0+pclath+cstack]
  9263  0368  0023               	movlb	3	; select bank3
  9264  0369  01AE               	clrf	_USBBusIsSuspended^(0+384)	;volatile
  9265                           
  9266                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  9267  036A  3074               	movlw	116
  9268  036B  0020               	movlb	0	; select bank0
  9269  036C  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  9270  036D  3000               	movlw	0
  9271  036E  2423  3180         	fcall	PL32	;call to abstracted procedure
  9272  0370  2212               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9273                           
  9274                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
  9275  0371  003D               	movlb	29	; select bank29
  9276  0372  108E               	bcf	14,1	;volatile
  9277                           
  9278                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
  9279  0373  1112               	bcf	18,2	;volatile
  9280                           
  9281                           ;usb_device.c: 2495: {
  9282                           ;usb_device.c: 2496: (UIR &= 0xFB);
  9283  0374  1110               	bcf	16,2	;volatile
  9284  0375  0008               	return
  9285  0376                     __end_of_USBWakeFromSuspend:	
  9286  0376                     __ptext2500:	
  9287 ;; *************** function _USBCBInitEP *****************
  9288 ;; Defined at:
  9289 ;;		line 442 in file "main.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;		None               void
  9296 ;; Registers used:
  9297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 1F/0
  9300 ;;		On exit  : 1F/2
  9301 ;;		Unchanged: FFFE0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;Total ram usage:        0 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    3
  9310 ;; This function calls:
  9311 ;;		_CDCInitEP
  9312 ;; This function is called by:
  9313 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           
  9318                           ;psect for function _USBCBInitEP
  9319  0376                     _USBCBInitEP:	
  9320                           
  9321                           ;main.c: 444: CDCInitEP();
  9322                           
  9323                           ; Regs used in _USBCBInitEP: [wreg+fsr1l-status,0+pclath+cstack]
  9324  0376  2B77               	ljmp	i1l7816
  9325  0377                     __end_of_USBCBInitEP:	
  9326  0377                     __ptext2501:	
  9327 ;; *************** function _CDCInitEP *****************
  9328 ;; Defined at:
  9329 ;;		line 414 in file "../USB/CDC Device Driver/usb_function_cdc.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;		None
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 1F/0
  9340 ;;		On exit  : 1F/2
  9341 ;;		Unchanged: FFFE0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        0 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    2
  9350 ;; This function calls:
  9351 ;;		_USBEnableEndpoint
  9352 ;;		i1_USBTransferOnePacket
  9353 ;; This function is called by:
  9354 ;;		_USBCBInitEP
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function _CDCInitEP
  9360  0377                     _CDCInitEP:	
  9361  0377                     i1l7816:	
  9362                           ; Regs used in _CDCInitEP: [wreg+fsr1l-status,0+pclath+cstack]
  9363                           
  9364                           
  9365                           ;usb_function_cdc.c: 416: line_coding.dwDTERate.Val = 19200;
  9366  0377  0022               	movlb	2	; select bank2
  9367  0378  304B               	movlw	75
  9368  0379  01A3               	clrf	35
  9369  037A  01A2               	clrf	34
  9370  037B  00A1               	movwf	33
  9371  037C  3008               	movlw	8
  9372  037D  01A0               	clrf	32
  9373                           
  9374                           ;usb_function_cdc.c: 417: line_coding.bCharFormat = 0x00;
  9375  037E  01A4               	clrf	36
  9376  037F  01A5               	clrf	37
  9377                           
  9378                           ;usb_function_cdc.c: 419: line_coding.bDataBits = 0x08;
  9379  0380  00A6               	movwf	38
  9380  0381  301A               	movlw	26
  9381                           
  9382                           ;usb_function_cdc.c: 421: cdc_rx_len = 0;
  9383  0382  01D7               	clrf	_cdc_rx_len^(0+256)
  9384                           
  9385                           ;usb_function_cdc.c: 434: USBEnableEndpoint(1,0x02|0x10|0x08);
  9386  0383  00F4               	movwf	?_USBEnableEndpoint
  9387  0384  3001               	movlw	1
  9388  0385  2397  3180         	fcall	_USBEnableEndpoint
  9389                           
  9390                           ;usb_function_cdc.c: 435: USBEnableEndpoint(2,0x02|0x04|0x10|0x08);
  9391  0387  301E               	movlw	30
  9392  0388  00F4               	movwf	?_USBEnableEndpoint
  9393  0389  3002               	movlw	2
  9394  038A  2397  3180         	fcall	_USBEnableEndpoint
  9395  038C  30A0               	movlw	160
  9396                           
  9397                           ;usb_function_cdc.c: 437: CDCDataOutHandle = USBTransferOnePacket(2,0,(BYTE*)&cdc_data_r
      +                          x,sizeof(cdc_data_rx));
  9398  038D  01F0               	clrf	?i1_USBTransferOnePacket
  9399  038E  00F1               	movwf	?i1_USBTransferOnePacket+1
  9400  038F  3040               	movlw	64
  9401  0390  00F2               	movwf	?i1_USBTransferOnePacket+2
  9402  0391  3002               	movlw	2
  9403  0392  23DD               	fcall	i1_USBTransferOnePacket
  9404  0393  00C7               	movwf	_CDCDataOutHandle^(0+256)
  9405                           
  9406                           ;usb_function_cdc.c: 438: CDCDataInHandle = (0);
  9407  0394  01C6               	clrf	_CDCDataInHandle^(0+256)
  9408                           
  9409                           ;usb_function_cdc.c: 465: cdc_trf_state = 0;
  9410  0395  01D8               	clrf	_cdc_trf_state^(0+256)
  9411  0396  0008               	return
  9412  0397                     __end_of_CDCInitEP:	
  9413  0397                     __ptext2502:	
  9414 ;; *************** function _USBEnableEndpoint *****************
  9415 ;; Defined at:
  9416 ;;		line 1056 in file "../USB/usb_device.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  ep              1    wreg     unsigned char 
  9419 ;;  options         1    4[COMMON] unsigned char 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  ep              1    9[COMMON] unsigned char 
  9422 ;;  p               2    7[COMMON] PTR unsigned char 
  9423 ;;		 -> UEP0(1), 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;		None               void
  9426 ;; Registers used:
  9427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : 1F/2
  9430 ;;		On exit  : 1F/2
  9431 ;;		Unchanged: FFFE0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;Total ram usage:        6 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    1
  9440 ;; This function calls:
  9441 ;;		_USBConfigureEndpoint
  9442 ;; This function is called by:
  9443 ;;		_CDCInitEP
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           
  9448                           ;psect for function _USBEnableEndpoint
  9449  0397                     _USBEnableEndpoint:	
  9450                           
  9451                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l-status,0+pclath+cstack]
  9452                           ;USBEnableEndpoint@ep stored from wreg
  9453  0397  00F9               	movwf	USBEnableEndpoint@ep
  9454                           
  9455                           ;usb_device.c: 1057: unsigned char* p;
  9456                           ;usb_device.c: 1061: if(options & 0x04)
  9457  0398  1D74               	btfss	USBEnableEndpoint@options,2
  9458  0399  2B9D               	goto	i1l7608
  9459                           
  9460                           ;usb_device.c: 1062: {
  9461                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
  9462  039A  01F0               	clrf	?_USBConfigureEndpoint
  9463  039B  23B6  3180         	fcall	_USBConfigureEndpoint
  9464  039D                     i1l7608:	
  9465                           
  9466                           ;usb_device.c: 1064: }
  9467                           ;usb_device.c: 1065: if(options & 0x02)
  9468  039D  1CF4               	btfss	USBEnableEndpoint@options,1
  9469  039E  2BA3               	goto	i1l7612
  9470                           
  9471                           ;usb_device.c: 1066: {
  9472                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
  9473  039F  01F0               	clrf	?_USBConfigureEndpoint
  9474  03A0  0AF0               	incf	?_USBConfigureEndpoint,f
  9475  03A1  0879               	movf	USBEnableEndpoint@ep,w
  9476  03A2  23B6               	fcall	_USBConfigureEndpoint
  9477  03A3                     i1l7612:	
  9478                           
  9479                           ;usb_device.c: 1068: }
  9480                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
  9481  03A3  0879               	movf	USBEnableEndpoint@ep,w
  9482  03A4  3E98               	addlw	152
  9483  03A5  00F5               	movwf	??_USBEnableEndpoint
  9484  03A6  300E               	movlw	14
  9485  03A7  01F6               	clrf	??_USBEnableEndpoint+1
  9486  03A8  3DF6               	addwfc	??_USBEnableEndpoint+1,f
  9487  03A9  0875               	movf	??_USBEnableEndpoint,w
  9488  03AA  00F7               	movwf	USBEnableEndpoint@p
  9489  03AB  0876               	movf	??_USBEnableEndpoint+1,w
  9490  03AC  00F8               	movwf	USBEnableEndpoint@p+1
  9491                           
  9492                           ;usb_device.c: 1078: *p = options;
  9493  03AD  0874               	movf	USBEnableEndpoint@options,w
  9494  03AE  00F5               	movwf	??_USBEnableEndpoint
  9495  03AF  0877               	movf	USBEnableEndpoint@p,w
  9496  03B0  0086               	movwf	6
  9497  03B1  0878               	movf	USBEnableEndpoint@p+1,w
  9498  03B2  0087               	movwf	7
  9499  03B3  0875               	movf	??_USBEnableEndpoint,w
  9500  03B4  0081               	movwf	1
  9501  03B5  0008               	return
  9502  03B6                     __end_of_USBEnableEndpoint:	
  9503  03B6                     __ptext2503:	
  9504 ;; *************** function _USBConfigureEndpoint *****************
  9505 ;; Defined at:
  9506 ;;		line 1713 in file "../USB/usb_device.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  EPNum           1    wreg     unsigned char 
  9509 ;;  direction       1    0[COMMON] unsigned char 
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  EPNum           1    2[COMMON] unsigned char 
  9512 ;;  handle          1    3[COMMON] PTR volatile struct __BD
  9513 ;;		 -> BDT(48), 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;		None               void
  9516 ;; Registers used:
  9517 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9518 ;; Tracked objects:
  9519 ;;		On entry : 1F/2
  9520 ;;		On exit  : 1F/2
  9521 ;;		Unchanged: FFFE0/0
  9522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9523 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;Total ram usage:        4 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_USBEnableEndpoint
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _USBConfigureEndpoint
  9538  03B6                     _USBConfigureEndpoint:	
  9539                           
  9540                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l-status,0]
  9541                           ;USBConfigureEndpoint@EPNum stored from wreg
  9542  03B6  00F2               	movwf	USBConfigureEndpoint@EPNum
  9543                           
  9544                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
  9545                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
  9546  03B7  3020               	movlw	32
  9547  03B8  00F3               	movwf	USBConfigureEndpoint@handle
  9548                           
  9549                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
  9550  03B9  0870               	movf	USBConfigureEndpoint@direction,w
  9551  03BA  00F1               	movwf	??_USBConfigureEndpoint
  9552  03BB  35F1               	lslf	??_USBConfigureEndpoint,f
  9553  03BC  0872               	movf	USBConfigureEndpoint@EPNum,w
  9554  03BD  0709               	addwf	9,w
  9555  03BE  0709               	addwf	9,w
  9556  03BF  0771               	addwf	??_USBConfigureEndpoint,w
  9557  03C0  0709               	addwf	9,w
  9558  03C1  0709               	addwf	9,w
  9559  03C2  07F3               	addwf	USBConfigureEndpoint@handle,f
  9560                           
  9561                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
  9562  03C3  0873               	movf	USBConfigureEndpoint@handle,w
  9563  03C4  0086               	movwf	6
  9564  03C5  0187               	clrf	7
  9565  03C6  1381               	bcf	1,7
  9566                           
  9567                           ;usb_device.c: 1726: if(direction == 0)
  9568  03C7  08F0               	movf	USBConfigureEndpoint@direction,f
  9569  03C8  1D03               	skipz
  9570  03C9  2BCD               	goto	i1l6534
  9571                           
  9572                           ;usb_device.c: 1727: {
  9573                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
  9574  03CA  0872               	movf	USBConfigureEndpoint@EPNum,w
  9575  03CB  3E40               	addlw	_pBDTEntryOut& (0+255)
  9576  03CC  2BCF               	goto	L25
  9577  03CD                     i1l6534:	
  9578                           ;usb_device.c: 1729: }
  9579                           
  9580                           
  9581                           ;usb_device.c: 1730: else
  9582                           ;usb_device.c: 1731: {
  9583                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
  9584  03CD  0872               	movf	USBConfigureEndpoint@EPNum,w
  9585  03CE  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9586  03CF                     L25:	
  9587  03CF  0086               	movwf	6
  9588  03D0  3001               	movlw	1	; select bank2/3
  9589  03D1  0087               	movwf	7
  9590  03D2  0873               	movf	USBConfigureEndpoint@handle,w
  9591  03D3  0081               	movwf	1
  9592                           
  9593                           ;usb_device.c: 1733: }
  9594                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
  9595  03D4  0873               	movf	USBConfigureEndpoint@handle,w
  9596  03D5  0086               	movwf	6
  9597  03D6  0187               	clrf	7
  9598  03D7  1301               	bcf	1,6
  9599                           
  9600                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
  9601  03D8  0873               	movf	USBConfigureEndpoint@handle,w
  9602  03D9  3E04               	addlw	4
  9603  03DA  0086               	movwf	6
  9604  03DB  1701               	bsf	1,6
  9605  03DC  0008               	return
  9606  03DD                     __end_of_USBConfigureEndpoint:	
  9607  03DD                     __ptext2505:	
  9608 ;; *************** function i1_USBTransferOnePacket *****************
  9609 ;; Defined at:
  9610 ;;		line 1173 in file "../USB/usb_device.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  USBTransferO    1    wreg     unsigned char 
  9613 ;;  USBTransferO    1    0[COMMON] unsigned char 
  9614 ;;  USBTransferO    1    1[COMMON] PTR unsigned char 
  9615 ;;		 -> cdc_data_tx(64), cdc_data_rx(64), NULL(0), 
  9616 ;;  USBTransferO    1    2[COMMON] unsigned char 
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  USBTransferO    1    5[COMMON] unsigned char 
  9619 ;;  USBTransferO    1    6[COMMON] PTR volatile struct __BD
  9620 ;;		 -> NULL(0), BDT(48), 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      PTR void 
  9623 ;; Registers used:
  9624 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9625 ;; Tracked objects:
  9626 ;;		On entry : 1F/2
  9627 ;;		On exit  : 1F/2
  9628 ;;		Unchanged: FFFE0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        7 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_CDCInitEP
  9640 ;; This function uses a non-reentrant model
  9641 ;;
  9642                           
  9643                           
  9644                           ;psect for function i1_USBTransferOnePacket
  9645  03DD                     i1_USBTransferOnePacket:	
  9646                           
  9647                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l-status,0]
  9648                           ;i1USBTransferOnePacket@ep stored from wreg
  9649  03DD  00F5               	movwf	i1USBTransferOnePacket@ep
  9650                           
  9651                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  9652                           ;usb_device.c: 1177: if(dir != 0)
  9653  03DE  0870               	movf	i1USBTransferOnePacket@dir,w
  9654  03DF  1903               	btfsc	3,2
  9655  03E0  2BE4               	goto	i1l7568
  9656                           
  9657                           ;usb_device.c: 1178: {
  9658                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  9659  03E1  0875               	movf	i1USBTransferOnePacket@ep,w
  9660  03E2  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9661  03E3  2BE6               	goto	L26
  9662  03E4                     i1l7568:	
  9663                           ;usb_device.c: 1181: }
  9664                           
  9665                           
  9666                           ;usb_device.c: 1182: else
  9667                           ;usb_device.c: 1183: {
  9668                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  9669  03E4  0875               	movf	i1USBTransferOnePacket@ep,w
  9670  03E5  3E40               	addlw	_pBDTEntryOut& (0+255)
  9671  03E6                     L26:	
  9672  03E6  0086               	movwf	6
  9673  03E7  3001               	movlw	1	; select bank2/3
  9674  03E8  0087               	movwf	7
  9675  03E9  0801               	movf	1,w
  9676  03EA  00F6               	movwf	i1USBTransferOnePacket@handle
  9677                           
  9678                           ;usb_device.c: 1186: }
  9679                           ;usb_device.c: 1190: if(handle == 0)
  9680  03EB  08F6               	movf	i1USBTransferOnePacket@handle,f
  9681  03EC  1903               	btfsc	3,2
  9682                           
  9683                           ;usb_device.c: 1191: {
  9684                           ;usb_device.c: 1192: return 0;
  9685  03ED  3400               	retlw	0
  9686                           
  9687                           ;usb_device.c: 1193: }
  9688                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  9689  03EE  0871               	movf	i1USBTransferOnePacket@data,w
  9690  03EF  00F3               	movwf	??i1_USBTransferOnePacket
  9691  03F0  3002               	movlw	2
  9692  03F1  00F4               	movwf	??i1_USBTransferOnePacket+1
  9693  03F2  0876               	movf	i1USBTransferOnePacket@handle,w
  9694  03F3  3E02               	addlw	2
  9695  03F4  0086               	movwf	6
  9696  03F5  0187               	clrf	7
  9697  03F6  0873               	movf	??i1_USBTransferOnePacket,w
  9698  03F7  3FC0               	movwi [0]fsr1
  9699  03F8  0874               	movf	??i1_USBTransferOnePacket+1,w
  9700  03F9  3FC1               	movwi [1]fsr1
  9701                           
  9702                           ;usb_device.c: 1207: handle->CNT = len;
  9703  03FA  0A76               	incf	i1USBTransferOnePacket@handle,w
  9704  03FB  0086               	movwf	6
  9705  03FC  0872               	movf	i1USBTransferOnePacket@len,w
  9706  03FD  0081               	movwf	1
  9707                           
  9708                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  9709  03FE  0876               	movf	i1USBTransferOnePacket@handle,w
  9710  03FF  0086               	movwf	6
  9711  0400  3040               	movlw	64
  9712  0401  0581               	andwf	1,f
  9713                           
  9714                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  9715  0402  0876               	movf	i1USBTransferOnePacket@handle,w
  9716  0403  0086               	movwf	6
  9717  0404  3088               	movlw	136
  9718  0405  0481               	iorwf	1,f
  9719                           
  9720                           ;usb_device.c: 1212: if(dir != 0)
  9721  0406  0870               	movf	i1USBTransferOnePacket@dir,w
  9722  0407  1903               	btfsc	3,2
  9723  0408  2C0C               	goto	i1l7586
  9724                           
  9725                           ;usb_device.c: 1213: {
  9726                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  9727  0409  0875               	movf	i1USBTransferOnePacket@ep,w
  9728  040A  3E3D               	addlw	_pBDTEntryIn& (0+255)
  9729  040B  2C0E               	goto	L27
  9730  040C                     i1l7586:	
  9731                           ;usb_device.c: 1216: }
  9732                           
  9733                           
  9734                           ;usb_device.c: 1217: else
  9735                           ;usb_device.c: 1218: {
  9736                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  9737  040C  0875               	movf	i1USBTransferOnePacket@ep,w
  9738  040D  3E40               	addlw	_pBDTEntryOut& (0+255)
  9739  040E                     L27:	
  9740  040E  0086               	movwf	6
  9741  040F  3001               	movlw	1	; select bank2/3
  9742  0410  0087               	movwf	7
  9743  0411  3004               	movlw	4
  9744  0412  0681               	xorwf	1,f
  9745                           
  9746                           ;usb_device.c: 1221: }
  9747                           ;usb_device.c: 1222: return (void*)handle;
  9748  0413  0876               	movf	i1USBTransferOnePacket@handle,w
  9749  0414  0008               	return
  9750  0415                     __end_ofi1_USBTransferOnePacket:	
  9751  0415                     __ptext2499:	
  9752 ;; *************** function _USBCBStdSetDscHandler *****************
  9753 ;; Defined at:
  9754 ;;		line 416 in file "main.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;		None               void
  9761 ;; Registers used:
  9762 ;;		None
  9763 ;; Tracked objects:
  9764 ;;		On entry : 1F/0
  9765 ;;		On exit  : 1F/0
  9766 ;;		Unchanged: FFFFFFE0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _USBCBStdSetDscHandler
  9783  0415                     _USBCBStdSetDscHandler:	
  9784  0415                     i1l1062:	
  9785                           ; Regs used in _USBCBStdSetDscHandler: []
  9786                           
  9787  0415  0008               	return
  9788  0416                     __end_of_USBCBStdSetDscHandler:	
  9789  0416                     __ptext2497:	
  9790 ;; *************** function _USBCBCheckOtherReq *****************
  9791 ;; Defined at:
  9792 ;;		line 391 in file "main.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;		None               void
  9799 ;; Registers used:
  9800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 1F/0
  9803 ;;		On exit  : 1D/0
  9804 ;;		Unchanged: FFFE0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;Total ram usage:        0 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    1
  9813 ;; This function calls:
  9814 ;;		_USBCheckCDCRequest
  9815 ;; This function is called by:
  9816 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           
  9821                           ;psect for function _USBCBCheckOtherReq
  9822  0416                     _USBCBCheckOtherReq:	
  9823                           
  9824                           ;main.c: 392: USBCheckCDCRequest();
  9825                           
  9826                           ; Regs used in _USBCBCheckOtherReq: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9827  0416  3194  2C44         	ljmp	i1l6688
  9828  0418                     __end_of_USBCBCheckOtherReq:	
  9829  0418                     __ptext2496:	
  9830 ;; *************** function _USBCBErrorHandler *****************
  9831 ;; Defined at:
  9832 ;;		line 340 in file "main.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;		None               void
  9839 ;; Registers used:
  9840 ;;		None
  9841 ;; Tracked objects:
  9842 ;;		On entry : 1F/0
  9843 ;;		On exit  : 1F/0
  9844 ;;		Unchanged: FFFFFFE0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; This function calls:
  9853 ;;		Nothing
  9854 ;; This function is called by:
  9855 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           
  9860                           ;psect for function _USBCBErrorHandler
  9861  0418                     _USBCBErrorHandler:	
  9862  0418                     i1l1056:	
  9863                           ; Regs used in _USBCBErrorHandler: []
  9864                           
  9865  0418  0008               	return
  9866  0419                     __end_of_USBCBErrorHandler:	
  9867  0419                     __ptext2495:	
  9868 ;; *************** function _USBCB_SOF_Handler *****************
  9869 ;; Defined at:
  9870 ;;		line 315 in file "main.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;		None               void
  9877 ;; Registers used:
  9878 ;;		None
  9879 ;; Tracked objects:
  9880 ;;		On entry : 1F/0
  9881 ;;		On exit  : 1F/0
  9882 ;;		Unchanged: FFFFFFE0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           
  9898                           ;psect for function _USBCB_SOF_Handler
  9899  0419                     _USBCB_SOF_Handler:	
  9900  0419                     i1l1053:	
  9901                           ; Regs used in _USBCB_SOF_Handler: []
  9902                           
  9903  0419  0008               	return
  9904  041A                     __end_of_USBCB_SOF_Handler:	
  9905  041A                     __ptext2494:	
  9906 ;; *************** function _USBCBWakeFromSuspend *****************
  9907 ;; Defined at:
  9908 ;;		line 283 in file "main.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;		None               void
  9915 ;; Registers used:
  9916 ;;		None
  9917 ;; Tracked objects:
  9918 ;;		On entry : 1F/0
  9919 ;;		On exit  : 1F/0
  9920 ;;		Unchanged: FFFFFFE0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;Total ram usage:        0 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _USBCBWakeFromSuspend
  9937  041A                     _USBCBWakeFromSuspend:	
  9938  041A                     i1l1050:	
  9939                           ; Regs used in _USBCBWakeFromSuspend: []
  9940                           
  9941  041A  0008               	return
  9942  041B                     __end_of_USBCBWakeFromSuspend:	
  9943  041B                     __ptext2493:	
  9944 ;; *************** function _USBCBSuspend *****************
  9945 ;; Defined at:
  9946 ;;		line 238 in file "main.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		None
  9955 ;; Tracked objects:
  9956 ;;		On entry : 1F/0
  9957 ;;		On exit  : 1F/0
  9958 ;;		Unchanged: FFFFFFE0/0
  9959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;Total ram usage:        0 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; This function calls:
  9967 ;;		Nothing
  9968 ;; This function is called by:
  9969 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           
  9974                           ;psect for function _USBCBSuspend
  9975  041B                     _USBCBSuspend:	
  9976  041B                     i1l1047:	
  9977                           ; Regs used in _USBCBSuspend: []
  9978                           
  9979  041B  0008               	return
  9980  041C                     __end_of_USBCBSuspend:	
  9981  041C                     PL24:	
  9982  041C  3E02               	addlw	2
  9983  041D  0086               	movwf	6
  9984  041E  0870               	movf	??_USBCtrlEPAllowStatusStage,w
  9985  041F  3FC0               	movwi [0]fsr1
  9986  0420  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
  9987  0421  3FC1               	movwi [1]fsr1
  9988  0422  0008               	return
  9989  0423                     __end_ofPL24:	
  9990  0423                     PL32:	
  9991  0423  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  9992  0424  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  9993  0425  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  9994  0426  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  9995  0427  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
  9996  0428  0008               	return
  9997  0429                     __end_ofPL32:	
  9998                           
  9999                           	psect	text2476
 10000  0429                     __ptext2476:	
 10001 ;; *************** function _USBCtrlTrfInHandler *****************
 10002 ;; Defined at:
 10003 ;;		line 2748 in file "../USB/usb_device.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;  lastDTS         1    5[COMMON] unsigned char 
 10008 ;; Return value:  Size  Location     Type
 10009 ;;		None               void
 10010 ;; Registers used:
 10011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 1F/0
 10014 ;;		On exit  : 1F/2
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10021 ;;Total ram usage:        3 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:    1
 10024 ;; This function calls:
 10025 ;;		_USBCtrlTrfTxService
 10026 ;;		Absolute function
 10027 ;; This function is called by:
 10028 ;;		_USBCtrlEPService
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           
 10033                           ;psect for function _USBCtrlTrfInHandler
 10034  0429                     _USBCtrlTrfInHandler:	
 10035  0429                     i1l7670:	
 10036                           ; Regs used in _USBCtrlTrfInHandler: [wreg-status,0+pclath+cstack]
 10037                           
 10038                           
 10039                           ;usb_device.c: 2749: BYTE lastDTS;
 10040                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
 10041  0429  0022               	movlb	2	; select bank2
 10042  042A  083D               	movf	_pBDTEntryIn^(0+256),w
 10043  042B  0086               	movwf	6
 10044  042C  3000               	movlw	0
 10045  042D  0187               	clrf	7
 10046  042E  1B01               	btfsc	1,6
 10047  042F  3001               	movlw	1
 10048  0430  00F5               	movwf	USBCtrlTrfInHandler@lastDTS
 10049                           
 10050                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
 10051  0431  3004               	movlw	4
 10052  0432  06BD               	xorwf	_pBDTEntryIn^(0+256),f
 10053                           
 10054                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
 10055  0433  0851               	movf	_USBDeviceState^(0+256),w	;volatile
 10056  0434  3A08               	xorlw	8
 10057  0435  1D03               	skipz
 10058  0436  2C43               	goto	i1l323
 10059                           
 10060                           ;usb_device.c: 2760: {
 10061                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
 10062  0437  0020               	movlb	0	; select bank0
 10063  0438  0852               	movf	82,w	;volatile
 10064  0439  003D               	movlb	29	; select bank29
 10065  043A  0096               	movwf	22	;volatile
 10066                           
 10067                           ;usb_device.c: 2762: if(UADDR != 0u)
 10068  043B  0816               	movf	22,w
 10069  043C  1903               	btfsc	3,2
 10070  043D  2C40               	goto	i1l7680
 10071                           
 10072                           ;usb_device.c: 2763: {
 10073                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
 10074  043E  3010               	movlw	16
 10075  043F  2C41               	goto	L13
 10076  0440                     i1l7680:	
 10077                           ;usb_device.c: 2765: }
 10078                           
 10079                           
 10080                           ;usb_device.c: 2766: else
 10081                           ;usb_device.c: 2767: {
 10082                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
 10083  0440  3004               	movlw	4
 10084  0441                     L13:	
 10085  0441  0022               	movlb	2	; select bank2
 10086  0442  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
 10087  0443                     i1l323:	
 10088                           
 10089                           ;usb_device.c: 2769: }
 10090                           ;usb_device.c: 2770: }
 10091                           ;usb_device.c: 2773: if(controlTransferState == 1)
 10092  0443  0B5A               	decfsz	_controlTransferState^(0+256),w	;volatile
 10093  0444  2C6B               	goto	i1l326
 10094                           
 10095                           ;usb_device.c: 2774: {
 10096                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
 10097  0445  3058               	movlw	88
 10098  0446  00F3               	movwf	??_USBCtrlTrfInHandler
 10099  0447  01F4               	clrf	??_USBCtrlTrfInHandler+1
 10100  0448  083D               	movf	_pBDTEntryIn^(0+256),w
 10101  0449  3E02               	addlw	2
 10102  044A  0086               	movwf	6
 10103  044B  0187               	clrf	7
 10104  044C  0873               	movf	??_USBCtrlTrfInHandler,w
 10105  044D  3FC0               	movwi [0]fsr1
 10106  044E  0874               	movf	??_USBCtrlTrfInHandler+1,w
 10107  044F  3FC1               	movwi [1]fsr1
 10108                           
 10109                           ;usb_device.c: 2776: USBCtrlTrfTxService();
 10110  0450  24E2  3184         	fcall	_USBCtrlTrfTxService
 10111                           
 10112                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
 10113  0452  0862               	movf	_shortPacketStatus^(0+256),w	;volatile
 10114  0453  3A02               	xorlw	2
 10115  0454  1D03               	skipz
 10116  0455  2C5C               	goto	i1l7690
 10117                           
 10118                           ;usb_device.c: 2783: {
 10119                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 10120  0456  083D               	movf	_pBDTEntryIn^(0+256),w
 10121  0457  0086               	movwf	6
 10122  0458  3084               	movlw	132
 10123  0459  0187               	clrf	7
 10124  045A  0081               	movwf	1
 10125                           
 10126                           ;usb_device.c: 2787: }
 10127  045B  0008               	return
 10128  045C                     i1l7690:	
 10129                           
 10130                           ;usb_device.c: 2788: else
 10131                           ;usb_device.c: 2789: {
 10132                           ;usb_device.c: 2790: if(lastDTS == 0)
 10133  045C  08F5               	movf	USBCtrlTrfInHandler@lastDTS,f
 10134  045D  1D03               	skipz
 10135  045E  2C65               	goto	i1l7694
 10136                           
 10137                           ;usb_device.c: 2791: {
 10138                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10139  045F  083D               	movf	_pBDTEntryIn^(0+256),w
 10140  0460  0086               	movwf	6
 10141  0461  30C8               	movlw	200
 10142  0462  0187               	clrf	7
 10143  0463  0081               	movwf	1
 10144                           
 10145                           ;usb_device.c: 2793: }
 10146  0464  0008               	return
 10147  0465                     i1l7694:	
 10148                           
 10149                           ;usb_device.c: 2794: else
 10150                           ;usb_device.c: 2795: {
 10151                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
 10152  0465  083D               	movf	_pBDTEntryIn^(0+256),w
 10153  0466  0086               	movwf	6
 10154  0467  3088               	movlw	136
 10155  0468  0187               	clrf	7
 10156  0469  0081               	movwf	1
 10157  046A  0008               	return
 10158  046B                     i1l326:	
 10159                           
 10160                           ;usb_device.c: 2800: else
 10161                           ;usb_device.c: 2801: {
 10162                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
 10163  046B  1FB3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10164  046C  2C75               	goto	i1l7702
 10165                           
 10166                           ;usb_device.c: 2806: {
 10167                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
 10168  046D  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10169  046E  1903               	btfsc	3,2
 10170  046F  2C73               	goto	i1l7700
 10171                           
 10172                           ;usb_device.c: 2808: {
 10173                           ;usb_device.c: 2809: outPipes[0].pFunc();
 10174  0470  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10175  0471  3184  2C29         	ljmp	$	;if you get stuck here, you called an invalid pointer
 10176  0473                     i1l7700:	
 10177                           
 10178                           ;usb_device.c: 2810: }
 10179                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
 10180  0473  0022               	movlb	2	; select bank2
 10181  0474  13B3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 10182  0475                     i1l7702:	
 10183                           
 10184                           ;usb_device.c: 2812: }
 10185                           ;usb_device.c: 2814: controlTransferState = 0;
 10186  0475  01DA               	clrf	_controlTransferState^(0+256)	;volatile
 10187  0476  0008               	return
 10188  0477                     __end_of_USBCtrlTrfInHandler:	
 10189  0477                     __ptext2471:	
 10190 ;; *************** function _USBCtrlEPServiceComplete *****************
 10191 ;; Defined at:
 10192 ;;		line 1786 in file "../USB/usb_device.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;		None
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;		None
 10197 ;; Return value:  Size  Location     Type
 10198 ;;		None               void
 10199 ;; Registers used:
 10200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10201 ;; Tracked objects:
 10202 ;;		On entry : 1D/2
 10203 ;;		On exit  : 1C/0
 10204 ;;		Unchanged: FFFE0/0
 10205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;Total ram usage:        2 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:    2
 10213 ;; This function calls:
 10214 ;;		_USBCtrlEPAllowDataStage
 10215 ;;		_USBCtrlEPAllowStatusStage
 10216 ;; This function is called by:
 10217 ;;		_USBCtrlTrfSetupHandler
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function _USBCtrlEPServiceComplete
 10223  0477                     _USBCtrlEPServiceComplete:	
 10224  0477                     i1l7758:	
 10225                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-status,0+pclath+cstack]
 10226                           
 10227                           
 10228                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
 10229  0477  003D               	movlb	29	; select bank29
 10230  0478  120E               	bcf	14,4	;volatile
 10231                           
 10232                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
 10233  0479  0022               	movlb	2	; select bank2
 10234  047A  1BE5               	btfsc	(_inPipes^(0+256)+2),7	;volatile
 10235  047B  2C91               	goto	i1l216
 10236                           
 10237                           ;usb_device.c: 1798: {
 10238                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
 10239  047C  1FB3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10240  047D  2C88               	goto	i1l7772
 10241                           
 10242                           ;usb_device.c: 1800: {
 10243                           ;usb_device.c: 1801: controlTransferState = 2;
 10244  047E  3002               	movlw	2
 10245  047F  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10246                           
 10247                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
 10248  0480  08CF               	movf	_USBDeferOUTDataStagePackets^(0+256),f
 10249  0481  1D03               	skipz
 10250  0482  2C84               	goto	i1l7768
 10251                           
 10252                           ;usb_device.c: 1813: {
 10253                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
 10254  0483  24AC               	fcall	_USBCtrlEPAllowDataStage
 10255  0484                     i1l7768:	
 10256                           
 10257                           ;usb_device.c: 1815: }
 10258                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
 10259  0484  0022               	movlb	2	; select bank2
 10260  0485  01D3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10261                           
 10262                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
 10263  0486  01D2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10264                           
 10265                           ;usb_device.c: 1821: }
 10266  0487  0008               	return
 10267  0488                     i1l7772:	
 10268                           
 10269                           ;usb_device.c: 1822: else
 10270                           ;usb_device.c: 1823: {
 10271                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
 10272                           
 10273                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10274                           
 10275                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10276  0488  2517               	fcall	PL6	;call to abstracted procedure
 10277  0489  308C               	movlw	140
 10278  048A  0081               	movwf	1
 10279                           
 10280                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
 10281  048B  0022               	movlb	2	; select bank2
 10282  048C  083D               	movf	_pBDTEntryIn^(0+256),w
 10283  048D  0086               	movwf	6
 10284  048E  3084               	movlw	132
 10285  048F  0081               	movwf	1
 10286  0490  0008               	return
 10287  0491                     i1l216:	
 10288                           
 10289                           ;usb_device.c: 1834: else
 10290                           ;usb_device.c: 1835: {
 10291                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
 10292  0491  0020               	movlb	0	; select bank0
 10293  0492  1FD0               	btfss	80,7	;volatile
 10294  0493  2CA4               	goto	i1l7788
 10295                           
 10296                           ;usb_device.c: 1837: {
 10297                           ;usb_device.c: 1838: controlTransferState = 1;
 10298  0494  3001               	movlw	1
 10299  0495  0022               	movlb	2	; select bank2
 10300  0496  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10301                           
 10302                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
 10303  0497  08CE               	movf	_USBDeferINDataStagePackets^(0+256),f
 10304  0498  1D03               	skipz
 10305  0499  2C9C               	goto	i1l7780
 10306                           
 10307                           ;usb_device.c: 1853: {
 10308                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
 10309  049A  24AC  3184         	fcall	_USBCtrlEPAllowDataStage
 10310  049C                     i1l7780:	
 10311                           
 10312                           ;usb_device.c: 1855: }
 10313                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
 10314  049C  0022               	movlb	2	; select bank2
 10315  049D  01D3               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10316                           
 10317                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
 10318  049E  01D2               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10319                           
 10320                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
 10321  049F  08D0               	movf	_USBDeferStatusStagePacket^(0+256),f
 10322  04A0  1D03               	skipz
 10323  04A1  0008               	return
 10324                           
 10325                           ;usb_device.c: 1880: {
 10326                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
 10327  04A2  3182  2AB4         	ljmp	i1l6482
 10328  04A4                     i1l7788:	
 10329                           
 10330                           ;usb_device.c: 1884: else
 10331                           ;usb_device.c: 1885: {
 10332                           ;usb_device.c: 1896: controlTransferState = 2;
 10333  04A4  3002               	movlw	2
 10334  04A5  0022               	movlb	2	; select bank2
 10335  04A6  00DA               	movwf	_controlTransferState^(0+256)	;volatile
 10336                           
 10337                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
 10338                           
 10339                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10340                           
 10341                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10342  04A7  2517  3184         	fcall	PL6	;call to abstracted procedure
 10343  04A9  3084               	movlw	132
 10344  04AA  0081               	movwf	1
 10345  04AB  2C9C               	goto	i1l7780
 10346  04AC                     __end_of_USBCtrlEPServiceComplete:	
 10347                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
 10348                           
 10349                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
 10350                           
 10351                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
 10352                           
 10353  04AC                     __ptext2472:	
 10354 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10355 ;; Defined at:
 10356 ;;		line 1660 in file "../USB/usb_device.c"
 10357 ;; Parameters:    Size  Location     Type
 10358 ;;		None
 10359 ;; Auto vars:     Size  Location     Type
 10360 ;;		None
 10361 ;; Return value:  Size  Location     Type
 10362 ;;		None               void
 10363 ;; Registers used:
 10364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10365 ;; Tracked objects:
 10366 ;;		On entry : 1F/2
 10367 ;;		On exit  : 1C/0
 10368 ;;		Unchanged: FFFE0/0
 10369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;Total ram usage:        2 bytes
 10375 ;; Hardware stack levels used:    1
 10376 ;; Hardware stack levels required when called:    1
 10377 ;; This function calls:
 10378 ;;		_USBCtrlTrfTxService
 10379 ;; This function is called by:
 10380 ;;		_USBCtrlEPServiceComplete
 10381 ;; This function uses a non-reentrant model
 10382 ;;
 10383                           
 10384                           
 10385                           ;psect for function _USBCtrlEPAllowDataStage
 10386  04AC                     _USBCtrlEPAllowDataStage:	
 10387                           
 10388                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
 10389                           
 10390                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-status,0+pclath+cstack]
 10391  04AC  01CE               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10392                           
 10393                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
 10394  04AD  01CF               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10395                           
 10396                           ;usb_device.c: 1664: if(controlTransferState == 2)
 10397  04AE  085A               	movf	_controlTransferState^(0+256),w	;volatile
 10398  04AF  3A02               	xorlw	2
 10399  04B0  1D03               	skipz
 10400  04B1  2CC1               	goto	i1l7622
 10401                           
 10402                           ;usb_device.c: 1665: {
 10403                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
 10404  04B2  0021               	movlb	1	; select bank1
 10405  04B3  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10406                           
 10407                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10408  04B5  3058               	movlw	88
 10409  04B6  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10410  04B7  01F4               	clrf	??_USBCtrlEPAllowDataStage+1
 10411  04B8  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10412  04B9  3E02               	addlw	2
 10413  04BA  0086               	movwf	6
 10414  04BB  0873               	movf	??_USBCtrlEPAllowDataStage,w
 10415  04BC  3FC0               	movwi [0]fsr1
 10416  04BD  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 10417  04BE  3FC1               	movwi [1]fsr1
 10418                           
 10419                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10420  04BF  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10421                           
 10422                           ;usb_device.c: 1670: }
 10423  04C0  2DCD               	ljmp	PL30	;call to abstracted procedure
 10424  04C1                     i1l7622:	
 10425                           
 10426                           ;usb_device.c: 1671: else
 10427                           ;usb_device.c: 1672: {
 10428                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
 10429  04C1  0867               	movf	((_inPipes+1)^(0+256)+3),w	;volatile
 10430  04C2  0020               	movlb	0	; select bank0
 10431  04C3  0257               	subwf	87,w	;volatile
 10432  04C4  1D03               	skipz
 10433  04C5  2CCA               	goto	u578_25
 10434  04C6  0022               	movlb	2	; select bank2
 10435  04C7  0866               	movf	(_inPipes^(0+256)+3),w	;volatile
 10436  04C8  0020               	movlb	0	; select bank0
 10437  04C9  0256               	subwf	86,w	;volatile
 10438  04CA                     u578_25:	
 10439  04CA  1803               	skipnc
 10440  04CB  2CD3               	goto	i1l7626
 10441                           
 10442                           ;usb_device.c: 1676: {
 10443                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
 10444  04CC  0857               	movf	87,w	;volatile
 10445  04CD  0022               	movlb	2	; select bank2
 10446  04CE  00E7               	movwf	((_inPipes+1)^(0+256)+3)	;volatile
 10447  04CF  0020               	movlb	0	; select bank0
 10448  04D0  0856               	movf	86,w	;volatile
 10449  04D1  0022               	movlb	2	; select bank2
 10450  04D2  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 10451  04D3                     i1l7626:	
 10452                           
 10453                           ;usb_device.c: 1678: }
 10454                           ;usb_device.c: 1679: USBCtrlTrfTxService();
 10455  04D3  24E2  3184         	fcall	_USBCtrlTrfTxService
 10456                           
 10457                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10458  04D5  3058               	movlw	88
 10459  04D6  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10460  04D7  01F4               	clrf	??_USBCtrlEPAllowDataStage+1
 10461  04D8  083D               	movf	_pBDTEntryIn^(0+256),w
 10462  04D9  3E02               	addlw	2
 10463  04DA  0086               	movwf	6
 10464  04DB  0187               	clrf	7
 10465  04DC  0873               	movf	??_USBCtrlEPAllowDataStage,w
 10466  04DD  3FC0               	movwi [0]fsr1
 10467  04DE  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 10468  04DF  3FC1               	movwi [1]fsr1
 10469                           
 10470                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10471  04E0  083D               	movf	_pBDTEntryIn^(0+256),w
 10472  04E1  2DCD               	ljmp	PL30	;call to abstracted procedure
 10473  04E2                     __end_of_USBCtrlEPAllowDataStage:	
 10474  04E2                     __ptext2477:	
 10475 ;; *************** function _USBCtrlTrfTxService *****************
 10476 ;; Defined at:
 10477 ;;		line 1938 in file "../USB/usb_device.c"
 10478 ;; Parameters:    Size  Location     Type
 10479 ;;		None
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;  byteToSend      1    2[COMMON] unsigned char 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;		None               void
 10484 ;; Registers used:
 10485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10486 ;; Tracked objects:
 10487 ;;		On entry : 1D/0
 10488 ;;		On exit  : 1F/2
 10489 ;;		Unchanged: FFFE0/0
 10490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10493 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;Total ram usage:        3 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		_USBCtrlEPAllowDataStage
 10501 ;;		_USBCtrlTrfInHandler
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           
 10506                           ;psect for function _USBCtrlTrfTxService
 10507  04E2                     _USBCtrlTrfTxService:	
 10508                           
 10509                           ;usb_device.c: 1939: BYTE byteToSend;
 10510                           ;usb_device.c: 1943: byteToSend = 8;
 10511                           
 10512                           ; Regs used in _USBCtrlTrfTxService: [wreg-status,0+pclath]
 10513  04E2  3008               	movlw	8
 10514  04E3  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 10515                           
 10516                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
 10517  04E4  3000               	movlw	0
 10518  04E5  0022               	movlb	2	; select bank2
 10519  04E6  0267               	subwf	((_inPipes+1)^(0+256)+3),w	;volatile
 10520  04E7  3008               	movlw	8
 10521  04E8  1903               	skipnz
 10522  04E9  0266               	subwf	(_inPipes^(0+256)+3),w	;volatile
 10523  04EA  1803               	skipnc
 10524  04EB  2CF7               	goto	i1l6598
 10525                           
 10526                           ;usb_device.c: 1945: {
 10527                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
 10528  04EC  0866               	movf	(_inPipes^(0+256)+3),w	;volatile
 10529  04ED  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 10530                           
 10531                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
 10532  04EE  08E2               	movf	_shortPacketStatus^(0+256),f
 10533  04EF  1D03               	skipz
 10534  04F0  2CF3               	goto	i1l6594
 10535                           
 10536                           ;usb_device.c: 1954: {
 10537                           ;usb_device.c: 1955: shortPacketStatus = 1;
 10538  04F1  3001               	movlw	1
 10539  04F2  2CF6               	goto	L14
 10540  04F3                     i1l6594:	
 10541                           ;usb_device.c: 1956: }
 10542                           
 10543                           
 10544                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
 10545  04F3  0B62               	decfsz	_shortPacketStatus^(0+256),w	;volatile
 10546  04F4  2CF7               	goto	i1l6598
 10547                           
 10548                           ;usb_device.c: 1958: {
 10549                           ;usb_device.c: 1959: shortPacketStatus = 2;
 10550  04F5  3002               	movlw	2
 10551  04F6                     L14:	
 10552  04F6  00E2               	movwf	_shortPacketStatus^(0+256)	;volatile
 10553  04F7                     i1l6598:	
 10554                           
 10555                           ;usb_device.c: 1960: }
 10556                           ;usb_device.c: 1961: }
 10557                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
 10558  04F7  0867               	movf	((_inPipes+1)^(0+256)+3),w	;volatile
 10559  04F8  00F1               	movwf	??_USBCtrlTrfTxService+1
 10560  04F9  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 10561  04FA  0266               	subwf	(_inPipes^(0+256)+3),w	;volatile
 10562  04FB  00F0               	movwf	??_USBCtrlTrfTxService
 10563  04FC  1C03               	skipc
 10564  04FD  03F1               	decf	??_USBCtrlTrfTxService+1,f
 10565  04FE  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 10566  04FF  0871               	movf	??_USBCtrlTrfTxService+1,w
 10567  0500  00E7               	movwf	((_inPipes+1)^(0+256)+3)	;volatile
 10568                           
 10569                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
 10570  0501  0A3D               	incf	_pBDTEntryIn^(0+256),w
 10571  0502  0086               	movwf	6
 10572  0503  0187               	clrf	7
 10573  0504  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 10574  0505  0081               	movwf	1
 10575                           
 10576                           ;usb_device.c: 1974: pDst = (volatile BYTE*)CtrlTrfData;
 10577  0506  3058               	movlw	88
 10578  0507  00DF               	movwf	_pDst^(0+256)
 10579                           
 10580                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 10581  0508  1C65               	btfss	(_inPipes^(0+256)+2),0	;volatile
 10582  0509  2D0D               	goto	i1l6616
 10583  050A  2D13               	goto	i1l6626
 10584  050B                     i1l6608:	
 10585                           
 10586                           ;usb_device.c: 1978: {
 10587                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
 10588                           
 10589                           ;usb_device.c: 1980: byteToSend--;
 10590  050B  252A  3184         	fcall	PL10	;call to abstracted procedure
 10591  050D                     i1l6616:	
 10592  050D  08F2               	movf	USBCtrlTrfTxService@byteToSend,f
 10593  050E  1903               	btfsc	3,2
 10594  050F  0008               	return
 10595  0510  2D0B               	goto	i1l6608
 10596  0511                     i1l6618:	
 10597                           
 10598                           ;usb_device.c: 1986: {
 10599                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
 10600                           
 10601                           ;usb_device.c: 1988: byteToSend--;
 10602  0511  252A  3184         	fcall	PL10	;call to abstracted procedure
 10603  0513                     i1l6626:	
 10604  0513  08F2               	movf	USBCtrlTrfTxService@byteToSend,f
 10605  0514  1903               	btfsc	3,2
 10606  0515  0008               	return
 10607  0516  2D11               	goto	i1l6618
 10608  0517                     __end_of_USBCtrlTrfTxService:	
 10609  0517                     PL6:	
 10610  0517  0021               	movlb	1	; select bank1
 10611  0518  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
 10612  0519  0086               	movwf	6
 10613  051A  3008               	movlw	8
 10614  051B  0187               	clrf	7
 10615  051C  0081               	movwf	1
 10616  051D  3050               	movlw	80
 10617  051E  00F5               	movwf	??_USBCtrlEPServiceComplete
 10618  051F  01F6               	clrf	??_USBCtrlEPServiceComplete+1
 10619  0520  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10620  0521  3E02               	addlw	2
 10621  0522  0086               	movwf	6
 10622  0523  0875               	movf	??_USBCtrlEPServiceComplete,w
 10623  0524  3FC0               	movwi [0]fsr1
 10624  0525  0876               	movf	??_USBCtrlEPServiceComplete+1,w
 10625  0526  3FC1               	movwi [1]fsr1
 10626  0527  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10627  0528  0086               	movwf	6
 10628  0529  0008               	return
 10629  052A                     __end_ofPL6:	
 10630  052A                     PL10:	
 10631  052A  085F               	movf	_pDst^(0+256),w
 10632  052B  0086               	movwf	6
 10633  052C  0187               	clrf	7
 10634  052D  0863               	movf	_inPipes^(0+256),w	;volatile
 10635  052E  0084               	movwf	4
 10636  052F  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 10637  0530  0085               	movwf	5
 10638  0531  0800               	movf	0,w	;code access
 10639  0532  0081               	movwf	1
 10640  0533  0AE3               	incf	_inPipes^(0+256),f	;volatile
 10641  0534  1903               	skipnz
 10642  0535  0AE4               	incf	(_inPipes+1)^(0+256),f	;volatile
 10643  0536  0ADF               	incf	_pDst^(0+256),f
 10644  0537  03F2               	decf	USBCtrlTrfTxService@byteToSend,f
 10645  0538  0008               	return
 10646  0539                     __end_ofPL10:	
 10647  0539                     __ptext2473:	
 10648 ;; *************** function _USBCtrlTrfOutHandler *****************
 10649 ;; Defined at:
 10650 ;;		line 2695 in file "../USB/usb_device.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;		None
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;		None
 10655 ;; Return value:  Size  Location     Type
 10656 ;;		None               void
 10657 ;; Registers used:
 10658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10659 ;; Tracked objects:
 10660 ;;		On entry : 1F/2
 10661 ;;		On exit  : 1C/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;Total ram usage:        2 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    2
 10671 ;; This function calls:
 10672 ;;		_USBCtrlTrfRxService
 10673 ;; This function is called by:
 10674 ;;		_USBCtrlEPService
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           
 10679                           ;psect for function _USBCtrlTrfOutHandler
 10680  0539                     _USBCtrlTrfOutHandler:	
 10681  0539                     i1l7804:	
 10682                           ; Regs used in _USBCtrlTrfOutHandler: [wreg+fsr1l-status,0+pclath+cstack]
 10683                           
 10684                           
 10685                           ;usb_device.c: 2696: if(controlTransferState == 2)
 10686  0539  085A               	movf	_controlTransferState^(0+256),w	;volatile
 10687  053A  3A02               	xorlw	2
 10688  053B  1D03               	skipz
 10689  053C  2D3E               	goto	i1l7808
 10690                           
 10691                           ;usb_device.c: 2697: {
 10692                           ;usb_device.c: 2698: USBCtrlTrfRxService();
 10693  053D  2D56               	ljmp	i1l7632
 10694  053E                     i1l7808:	
 10695                           ;usb_device.c: 2699: }
 10696                           
 10697                           
 10698                           ;usb_device.c: 2700: else
 10699                           ;usb_device.c: 2701: {
 10700                           ;usb_device.c: 2704: controlTransferState = 0;
 10701  053E  01DA               	clrf	_controlTransferState^(0+256)	;volatile
 10702                           
 10703                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
 10704  053F  08C5               	movf	_BothEP0OutUOWNsSet^(0+256),f
 10705  0540  1D03               	skipz
 10706  0541  2D54               	goto	i1l7814
 10707                           
 10708                           ;usb_device.c: 2712: {
 10709                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
 10710  0542  0021               	movlb	1	; select bank1
 10711  0543  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10712                           
 10713                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10714  0545  3050               	movlw	80
 10715  0546  00F6               	movwf	??_USBCtrlTrfOutHandler
 10716  0547  01F7               	clrf	??_USBCtrlTrfOutHandler+1
 10717  0548  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10718  0549  3E02               	addlw	2
 10719  054A  0086               	movwf	6
 10720  054B  0876               	movf	??_USBCtrlTrfOutHandler,w
 10721  054C  3FC0               	movwi [0]fsr1
 10722  054D  0877               	movf	??_USBCtrlTrfOutHandler+1,w
 10723  054E  3FC1               	movwi [1]fsr1
 10724                           
 10725                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
 10726  054F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10727  0550  0086               	movwf	6
 10728  0551  308C               	movlw	140
 10729  0552  0081               	movwf	1
 10730                           
 10731                           ;usb_device.c: 2716: }
 10732  0553  0008               	return
 10733  0554                     i1l7814:	
 10734                           
 10735                           ;usb_device.c: 2717: else
 10736                           ;usb_device.c: 2718: {
 10737                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
 10738  0554  01C5               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10739  0555  0008               	return
 10740  0556                     __end_of_USBCtrlTrfOutHandler:	
 10741  0556                     __ptext2474:	
 10742 ;; *************** function _USBCtrlTrfRxService *****************
 10743 ;; Defined at:
 10744 ;;		line 2019 in file "../USB/usb_device.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;		None
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;  byteToRead      1    5[COMMON] unsigned char 
 10749 ;;  i               1    4[COMMON] unsigned char 
 10750 ;; Return value:  Size  Location     Type
 10751 ;;		None               void
 10752 ;; Registers used:
 10753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10754 ;; Tracked objects:
 10755 ;;		On entry : 1F/2
 10756 ;;		On exit  : 1C/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;Total ram usage:        4 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    1
 10766 ;; This function calls:
 10767 ;;		Absolute function
 10768 ;;		_USBCtrlEPAllowStatusStage
 10769 ;; This function is called by:
 10770 ;;		_USBCtrlTrfOutHandler
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function _USBCtrlTrfRxService
 10776  0556                     _USBCtrlTrfRxService:	
 10777  0556                     i1l7632:	
 10778                           ; Regs used in _USBCtrlTrfRxService: [wreg+fsr1l-status,0+pclath+cstack]
 10779                           
 10780                           
 10781                           ;usb_device.c: 2020: BYTE byteToRead;
 10782                           ;usb_device.c: 2021: BYTE i;
 10783                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
 10784  0556  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
 10785  0557  0086               	movwf	6
 10786  0558  0187               	clrf	7
 10787  0559  3F41               	moviw [1]fsr1
 10788  055A  00F5               	movwf	USBCtrlTrfRxService@byteToRead
 10789                           
 10790                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
 10791  055B  00F2               	movwf	??_USBCtrlTrfRxService
 10792  055C  01F3               	clrf	??_USBCtrlTrfRxService+1
 10793  055D  0873               	movf	??_USBCtrlTrfRxService+1,w
 10794  055E  0235               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 10795  055F  1D03               	skipz
 10796  0560  2D63               	goto	u579_25
 10797  0561  0872               	movf	??_USBCtrlTrfRxService,w
 10798  0562  0234               	subwf	(_outPipes^(0+256)+3),w	;volatile
 10799  0563                     u579_25:	
 10800  0563  1803               	skipnc
 10801  0564  2D67               	goto	i1l7638
 10802                           
 10803                           ;usb_device.c: 2032: {
 10804                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
 10805  0565  0834               	movf	(_outPipes^(0+256)+3),w	;volatile
 10806  0566  00F5               	movwf	USBCtrlTrfRxService@byteToRead
 10807  0567                     i1l7638:	
 10808                           
 10809                           ;usb_device.c: 2034: }
 10810                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
 10811  0567  0835               	movf	((_outPipes+1)^(0+256)+3),w	;volatile
 10812  0568  00F3               	movwf	??_USBCtrlTrfRxService+1
 10813  0569  0875               	movf	USBCtrlTrfRxService@byteToRead,w
 10814  056A  0234               	subwf	(_outPipes^(0+256)+3),w	;volatile
 10815  056B  00F2               	movwf	??_USBCtrlTrfRxService
 10816  056C  1C03               	skipc
 10817  056D  03F3               	decf	??_USBCtrlTrfRxService+1,f
 10818  056E  00B4               	movwf	(_outPipes^(0+256)+3)	;volatile
 10819  056F  0873               	movf	??_USBCtrlTrfRxService+1,w
 10820  0570  00B5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 10821                           
 10822                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
 10823  0571  01F4               	clrf	USBCtrlTrfRxService@i
 10824  0572                     i1l7648:	
 10825  0572  0875               	movf	USBCtrlTrfRxService@byteToRead,w
 10826  0573  0274               	subwf	USBCtrlTrfRxService@i,w
 10827  0574  1803               	btfsc	3,0
 10828  0575  2D87               	goto	i1l7650
 10829                           
 10830                           ;usb_device.c: 2041: {
 10831                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
 10832  0576  0874               	movf	USBCtrlTrfRxService@i,w
 10833  0577  3E58               	addlw	88
 10834  0578  0086               	movwf	6
 10835  0579  0187               	clrf	7
 10836  057A  0801               	movf	1,w
 10837  057B  00F2               	movwf	??_USBCtrlTrfRxService
 10838  057C  0831               	movf	_outPipes^(0+256),w	;volatile
 10839  057D  0086               	movwf	6
 10840  057E  0832               	movf	(_outPipes+1)^(0+256),w	;volatile
 10841  057F  0087               	movwf	7
 10842  0580  0872               	movf	??_USBCtrlTrfRxService,w
 10843  0581  0081               	movwf	1
 10844  0582  0AB1               	incf	_outPipes^(0+256),f	;volatile
 10845  0583  1903               	skipnz
 10846  0584  0AB2               	incf	(_outPipes+1)^(0+256),f	;volatile
 10847  0585  0AF4               	incf	USBCtrlTrfRxService@i,f
 10848  0586  2D72               	goto	i1l7648
 10849  0587                     i1l7650:	
 10850                           
 10851                           ;usb_device.c: 2043: }
 10852                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
 10853  0587  3003               	movlw	3
 10854  0588  3E31               	addlw	_outPipes& (0+255)
 10855  0589  0086               	movwf	6
 10856  058A  3001               	movlw	1	; select bank2/3
 10857  058B  0087               	movwf	7
 10858  058C  0016               	moviw fsr1++
 10859  058D  0401               	iorwf	1,w
 10860  058E  1903               	skipnz
 10861  058F  2DA5               	goto	i1l7658
 10862                           
 10863                           ;usb_device.c: 2048: {
 10864                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
 10865  0590  0021               	movlb	1	; select bank1
 10866  0591  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10867                           
 10868                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
 10869  0593  3058               	movlw	88
 10870  0594  25C3  3184         	fcall	PL14	;call to abstracted procedure
 10871                           
 10872                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 10873  0596  0022               	movlb	2	; select bank2
 10874  0597  085E               	movf	_pBDTEntryEP0OutCurrent^(0+256),w
 10875  0598  0086               	movwf	6
 10876  0599  1B01               	btfsc	1,6
 10877  059A  2D9E               	goto	i1l7656
 10878                           
 10879                           ;usb_device.c: 2052: {
 10880                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
 10881  059B  0021               	movlb	1	; select bank1
 10882  059C  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10883                           
 10884                           ;usb_device.c: 2054: }
 10885  059D  2DCD               	ljmp	PL30	;call to abstracted procedure
 10886  059E                     i1l7656:	
 10887                           
 10888                           ;usb_device.c: 2055: else
 10889                           ;usb_device.c: 2056: {
 10890                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
 10891  059E  0021               	movlb	1	; select bank1
 10892  059F  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10893  05A0  0086               	movwf	6
 10894  05A1  3088               	movlw	136
 10895  05A2  0187               	clrf	7
 10896  05A3  0081               	movwf	1
 10897  05A4  0008               	return
 10898  05A5                     i1l7658:	
 10899                           
 10900                           ;usb_device.c: 2060: else
 10901                           ;usb_device.c: 2061: {
 10902                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
 10903  05A5  0021               	movlb	1	; select bank1
 10904  05A6  25BD  3184         	fcall	PL12	;call to abstracted procedure
 10905                           
 10906                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
 10907  05A8  3050               	movlw	80
 10908  05A9  25C3  3184         	fcall	PL14	;call to abstracted procedure
 10909                           
 10910                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
 10911  05AB  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10912  05AC  0086               	movwf	6
 10913  05AD  3084               	movlw	132
 10914  05AE  0081               	movwf	1
 10915                           
 10916                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
 10917  05AF  0022               	movlb	2	; select bank2
 10918  05B0  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10919  05B1  1903               	btfsc	3,2
 10920  05B2  2DB6               	goto	i1l7664
 10921                           
 10922                           ;usb_device.c: 2078: {
 10923                           ;usb_device.c: 2084: outPipes[0].pFunc();
 10924  05B3  0836               	movf	(_outPipes+5)^(0+256),w	;volatile
 10925  05B4  3184  2C29         	ljmp	$	;if you get stuck here, you called an invalid pointer
 10926  05B6                     i1l7664:	
 10927                           
 10928                           ;usb_device.c: 2089: }
 10929                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
 10930  05B6  0022               	movlb	2	; select bank2
 10931  05B7  13B3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 10932                           
 10933                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
 10934  05B8  08D0               	movf	_USBDeferStatusStagePacket^(0+256),f
 10935  05B9  1D03               	skipz
 10936  05BA  0008               	return
 10937                           
 10938                           ;usb_device.c: 2105: {
 10939                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
 10940  05BB  3182  2AB4         	ljmp	i1l6482
 10941  05BD                     __end_of_USBCtrlTrfRxService:	
 10942  05BD                     PL12:	
 10943  05BD  0A6F               	incf	_pBDTEntryEP0OutNext^(0+128),w
 10944  05BE  0086               	movwf	6
 10945  05BF  3008               	movlw	8
 10946  05C0  0187               	clrf	7
 10947  05C1  0081               	movwf	1
 10948  05C2  0008               	return
 10949  05C3                     __end_ofPL12:	
 10950  05C3                     PL14:	
 10951  05C3  00F2               	movwf	??_USBCtrlTrfRxService
 10952  05C4  01F3               	clrf	??_USBCtrlTrfRxService+1
 10953  05C5  086F               	movf	_pBDTEntryEP0OutNext^(0+128),w
 10954  05C6  3E02               	addlw	2
 10955  05C7  0086               	movwf	6
 10956  05C8  0872               	movf	??_USBCtrlTrfRxService,w
 10957  05C9  3FC0               	movwi [0]fsr1
 10958  05CA  0873               	movf	??_USBCtrlTrfRxService+1,w
 10959  05CB  3FC1               	movwi [1]fsr1
 10960  05CC  0008               	return
 10961  05CD                     __end_ofPL14:	
 10962  05CD                     PL30:	
 10963  05CD  0086               	movwf	6
 10964  05CE  30C8               	movlw	200
 10965  05CF  0081               	movwf	1
 10966  05D0  0008               	return
 10967  05D1                     __end_ofPL30:	
 10968                           
 10969                           	psect	swtext1
 10970  1166                     __pswtext1:	
 10971  1166                     i1S8490:	
 10972  1166  3180  2889         	ljmp	i1l8150
 10973  1168  3180  288B         	ljmp	i1l8152
 10974  116A  3180  2876         	ljmp	i1l338
 10975  116C  3180  288B         	ljmp	i1l8152
 10976  116E  3180  2876         	ljmp	i1l338
 10977  1170  3180  2877         	ljmp	i1l340
 10978  1172  3180  287C         	ljmp	i1l8138
 10979  1174  3180  289A         	ljmp	i1l8164
 10980  1176  3180  2880         	ljmp	i1l8142
 10981  1178  3180  287E         	ljmp	i1l8140
 10982  117A  3180  288C         	ljmp	i1l8154
 10983  117C  3180  288F         	ljmp	i1l349
 10984  117E  3180  2876         	ljmp	i1l338
 10985                           
 10986                           	psect	text2479
 10987  14F6                     __ptext2479:	
 10988 ;; *************** function _USBStdSetCfgHandler *****************
 10989 ;; Defined at:
 10990 ;;		line 2132 in file "../USB/usb_device.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;		None
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;  p               2   10[COMMON] PTR unsigned char 
 10995 ;;		 -> UEP1(1), 
 10996 ;;  i               1   12[COMMON] unsigned char 
 10997 ;;  i               1   13[COMMON] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;		None               void
 11000 ;; Registers used:
 11001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11002 ;; Tracked objects:
 11003 ;;		On entry : 1D/0
 11004 ;;		On exit  : 1F/2
 11005 ;;		Unchanged: FFFE0/0
 11006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;Total ram usage:        4 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    5
 11014 ;; This function calls:
 11015 ;;		_memset
 11016 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11017 ;; This function is called by:
 11018 ;;		_USBCheckStdRequest
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           
 11023                           ;psect for function _USBStdSetCfgHandler
 11024  14F6                     _USBStdSetCfgHandler:	
 11025  14F6                     i1l8006:	
 11026                           ; Regs used in _USBStdSetCfgHandler: [wreg-status,0+pclath+cstack]
 11027                           
 11028                           
 11029                           ;usb_device.c: 2133: BYTE i;
 11030                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
 11031  14F6  0022               	movlb	2	; select bank2
 11032  14F7  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11033                           
 11034                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<2;i++) *p++ = 0; };
 11035  14F8  300E               	movlw	14
 11036  14F9  00FB               	movwf	USBStdSetCfgHandler@p+1
 11037  14FA  3099               	movlw	153
 11038  14FB  00FA               	movwf	USBStdSetCfgHandler@p
 11039  14FC  01FC               	clrf	USBStdSetCfgHandler@i_1132
 11040  14FD                     i1l8014:	
 11041  14FD  087A               	movf	USBStdSetCfgHandler@p,w
 11042  14FE  0086               	movwf	6
 11043  14FF  087B               	movf	USBStdSetCfgHandler@p+1,w
 11044  1500  0087               	movwf	7
 11045  1501  0181               	clrf	1
 11046  1502  0AFA               	incf	USBStdSetCfgHandler@p,f
 11047  1503  1903               	skipnz
 11048  1504  0AFB               	incf	USBStdSetCfgHandler@p+1,f
 11049  1505  3002               	movlw	2
 11050  1506  0AFC               	incf	USBStdSetCfgHandler@i_1132,f
 11051  1507  027C               	subwf	USBStdSetCfgHandler@i_1132,w
 11052  1508  1C03               	skipc
 11053  1509  2CFD               	goto	i1l8014
 11054                           
 11055                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11056  150A  3020               	movlw	32
 11057  150B  00F0               	movwf	?_memset
 11058  150C  3030               	movlw	48
 11059  150D  01F1               	clrf	?_memset+1
 11060  150E  01F2               	clrf	?_memset+2
 11061  150F  01F3               	clrf	?_memset+3
 11062  1510  00F4               	movwf	?_memset+4
 11063  1511  01F5               	clrf	?_memset+5
 11064  1512  2555  3194         	fcall	_memset
 11065                           
 11066                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
 11067  1514  003D               	movlb	29	; select bank29
 11068  1515  170E               	bsf	14,6	;volatile
 11069                           
 11070                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(2+1u); i++)
 11071  1516  01FD               	clrf	USBStdSetCfgHandler@i
 11072  1517                     i1l8032:	
 11073                           
 11074                           ;usb_device.c: 2151: {
 11075                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
 11076  1517  087D               	movf	USBStdSetCfgHandler@i,w
 11077  1518  3E37               	addlw	_ep_data_in& (0+255)
 11078  1519  0086               	movwf	6
 11079  151A  3001               	movlw	1	; select bank2/3
 11080  151B  0087               	movwf	7
 11081  151C  0181               	clrf	1
 11082                           
 11083                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
 11084  151D  087D               	movf	USBStdSetCfgHandler@i,w
 11085  151E  3E3A               	addlw	_ep_data_out& (0+255)
 11086  151F  0086               	movwf	6
 11087  1520  3003               	movlw	3
 11088  1521  0181               	clrf	1
 11089  1522  0AFD               	incf	USBStdSetCfgHandler@i,f
 11090  1523  027D               	subwf	USBStdSetCfgHandler@i,w
 11091  1524  1C03               	skipc
 11092  1525  2D17               	goto	i1l8032
 11093                           
 11094                           ;usb_device.c: 2154: }
 11095                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,2);
 11096  1526  30CF               	movlw	_USBAlternateInterface& (0+255)
 11097  1527  00F0               	movwf	?_memset
 11098  1528  3001               	movlw	1
 11099  1529  00F1               	movwf	?_memset+1
 11100  152A  3002               	movlw	2
 11101  152B  01F2               	clrf	?_memset+2
 11102  152C  01F3               	clrf	?_memset+3
 11103  152D  00F4               	movwf	?_memset+4
 11104  152E  01F5               	clrf	?_memset+5
 11105  152F  2555  3194         	fcall	_memset
 11106                           
 11107                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
 11108  1531  003D               	movlb	29	; select bank29
 11109  1532  130E               	bcf	14,6	;volatile
 11110                           
 11111                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11112  1533  3028               	movlw	40
 11113  1534  0022               	movlb	2	; select bank2
 11114  1535  00BD               	movwf	_pBDTEntryIn^(0+256)
 11115                           
 11116                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11117  1536  3020               	movlw	32
 11118  1537  00DE               	movwf	_pBDTEntryEP0OutCurrent^(0+256)
 11119                           
 11120                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11121  1538  0021               	movlb	1	; select bank1
 11122  1539  00EF               	movwf	_pBDTEntryEP0OutNext^(0+128)
 11123                           
 11124                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11125  153A  0020               	movlb	0	; select bank0
 11126  153B  0852               	movf	82,w	;volatile
 11127  153C  0022               	movlb	2	; select bank2
 11128  153D  00E9               	movwf	_USBActiveConfiguration^(0+256)	;volatile
 11129                           
 11130                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
 11131  153E  08E9               	movf	_USBActiveConfiguration^(0+256),f
 11132  153F  1D03               	skipz
 11133  1540  2D44               	goto	i1l8054
 11134                           
 11135                           ;usb_device.c: 2173: {
 11136                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
 11137  1541  3010               	movlw	16
 11138  1542  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
 11139                           
 11140                           ;usb_device.c: 2176: }
 11141  1543  0008               	return
 11142  1544                     i1l8054:	
 11143                           
 11144                           ;usb_device.c: 2177: else
 11145                           ;usb_device.c: 2178: {
 11146                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
 11147  1544  0020               	movlb	0	; select bank0
 11148  1545  3069               	movlw	_USBActiveConfiguration& (0+255)
 11149  1546  01E0               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER
 11150  1547  0AE0               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER,f
 11151  1548  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
 11152  1549  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
 11153  154A  3001               	movlw	1
 11154  154B  00E3               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
 11155  154C  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
 11156  154D  0AE4               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+4,f
 11157  154E  01E5               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+5
 11158  154F  3182  2212         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11159                           
 11160                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
 11161  1551  3020               	movlw	32
 11162  1552  0022               	movlb	2	; select bank2
 11163  1553  00D1               	movwf	_USBDeviceState^(0+256)	;volatile
 11164  1554  0008               	return
 11165  1555                     __end_of_USBStdSetCfgHandler:	
 11166  1555                     __ptext2480:	
 11167 ;; *************** function _memset *****************
 11168 ;; Defined at:
 11169 ;;		line 10 in file "../../common/memset.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  p1              2    0[COMMON] PTR void 
 11172 ;;		 -> USBAlternateInterface(2), BDT(48), 
 11173 ;;  c               2    2[COMMON] int 
 11174 ;;  n               2    4[COMMON] unsigned int 
 11175 ;; Auto vars:     Size  Location     Type
 11176 ;;  p               2    7[COMMON] PTR unsigned char 
 11177 ;;		 -> USBAlternateInterface(2), BDT(48), 
 11178 ;; Return value:  Size  Location     Type
 11179 ;;                  2    wreg      PTR void 
 11180 ;; Registers used:
 11181 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11182 ;; Tracked objects:
 11183 ;;		On entry : 0/2
 11184 ;;		On exit  : 0/2
 11185 ;;		Unchanged: FFFFF/0
 11186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11187 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;Total ram usage:        9 bytes
 11192 ;; Hardware stack levels used:    1
 11193 ;; This function calls:
 11194 ;;		Nothing
 11195 ;; This function is called by:
 11196 ;;		_USBStdSetCfgHandler
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           
 11201                           ;psect for function _memset
 11202  1555                     _memset:	
 11203                           
 11204                           ; Regs used in _memset: [wreg+fsr1l-status,0]
 11205  1555  0871               	movf	memset@p1+1,w
 11206  1556  00F8               	movwf	memset@p+1
 11207  1557  0870               	movf	memset@p1,w
 11208  1558  00F7               	movwf	memset@p
 11209  1559                     i1l6634:	
 11210  1559  3001               	movlw	1
 11211  155A  02F4               	subwf	memset@n,f
 11212  155B  3000               	movlw	0
 11213  155C  3BF5               	subwfb	memset@n+1,f
 11214  155D  0A74               	incf	memset@n,w
 11215  155E  1903               	skipnz
 11216  155F  0A75               	incf	memset@n+1,w
 11217  1560  1903               	btfsc	3,2
 11218  1561  0008               	return
 11219  1562  0872               	movf	memset@c,w
 11220  1563  00F6               	movwf	??_memset
 11221  1564  0877               	movf	memset@p,w
 11222  1565  0086               	movwf	6
 11223  1566  0878               	movf	memset@p+1,w
 11224  1567  0087               	movwf	7
 11225  1568  0876               	movf	??_memset,w
 11226  1569  0081               	movwf	1
 11227  156A  0AF7               	incf	memset@p,f
 11228  156B  1903               	skipnz
 11229  156C  0AF8               	incf	memset@p+1,f
 11230  156D  2D59               	goto	i1l6634
 11231  156E                     __end_of_memset:	
 11232                           
 11233                           	psect	text2481
 11234  1494                     __ptext2481:	
 11235 ;; *************** function _USBStdGetDscHandler *****************
 11236 ;; Defined at:
 11237 ;;		line 2207 in file "../USB/usb_device.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;		None
 11240 ;; Auto vars:     Size  Location     Type
 11241 ;;		None
 11242 ;; Return value:  Size  Location     Type
 11243 ;;		None               void
 11244 ;; Registers used:
 11245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11246 ;; Tracked objects:
 11247 ;;		On entry : 1D/0
 11248 ;;		On exit  : 1D/0
 11249 ;;		Unchanged: FFFE0/0
 11250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;Total ram usage:        2 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; This function calls:
 11258 ;;		Nothing
 11259 ;; This function is called by:
 11260 ;;		_USBCheckStdRequest
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           
 11265                           ;psect for function _USBStdGetDscHandler
 11266  1494                     _USBStdGetDscHandler:	
 11267  1494                     i1l6636:	
 11268                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11269                           
 11270                           
 11271                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
 11272  1494  0020               	movlb	0	; select bank0
 11273  1495  0850               	movf	80,w	;volatile
 11274  1496  3A80               	xorlw	128
 11275  1497  1D03               	skipz
 11276  1498  0008               	return
 11277                           
 11278                           ;usb_device.c: 2209: {
 11279                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 11280  1499  30C0               	movlw	192
 11281  149A  0022               	movlb	2	; select bank2
 11282  149B  00E5               	movwf	(_inPipes^(0+256)+2)	;volatile
 11283                           
 11284                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
 11285  149C  2CD4               	goto	i1l6660
 11286  149D                     i1l6640:	
 11287                           
 11288                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
 11289  149D  3043               	movlw	low (_device_dsc| (0+32768))
 11290  149E  0022               	movlb	2	; select bank2
 11291  149F  00E3               	movwf	_inPipes^(0+256)	;volatile
 11292  14A0  3091               	movlw	high (_device_dsc| (0+32768))
 11293  14A1  00E4               	movwf	(_inPipes^(0+256)+1)	;volatile
 11294                           
 11295                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
 11296  14A2  3012               	movlw	18
 11297  14A3  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11298  14A4  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 11299                           
 11300                           ;usb_device.c: 2221: break;
 11301  14A5  0008               	return
 11302  14A6                     i1l6642:	
 11303                           
 11304                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11305  14A6  0852               	movf	82,w	;volatile
 11306  14A7  00F0               	movwf	??_USBStdGetDscHandler
 11307  14A8  3035               	movlw	low (_USB_CD_Ptr| (0+32768))
 11308  14A9  24F0  3194         	fcall	PL34	;call to abstracted procedure
 11309  14AB  3090               	movlw	high (_USB_CD_Ptr| (0+32768))
 11310  14AC  24E1  3194         	fcall	PL18	;call to abstracted procedure
 11311                           
 11312                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 11313  14AE  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11314  14AF  00F1               	movwf	??_USBStdGetDscHandler+1
 11315  14B0  0863               	movf	_inPipes^(0+256),w	;volatile
 11316  14B1  00F0               	movwf	??_USBStdGetDscHandler
 11317  14B2  3E02               	addlw	2
 11318  14B3  24E9  3194         	fcall	PL26	;call to abstracted procedure
 11319  14B5  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11320                           
 11321                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 11322  14B6  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11323  14B7  00F1               	movwf	??_USBStdGetDscHandler+1
 11324  14B8  0863               	movf	_inPipes^(0+256),w	;volatile
 11325  14B9  00F0               	movwf	??_USBStdGetDscHandler
 11326  14BA  3E03               	addlw	3
 11327  14BB  24E9               	fcall	PL26	;call to abstracted procedure
 11328  14BC  00E7               	movwf	(_inPipes^(0+256)+4)	;volatile
 11329                           
 11330                           ;usb_device.c: 2234: break;
 11331  14BD  0008               	return
 11332  14BE                     i1l6648:	
 11333                           
 11334                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<4)
 11335  14BE  3004               	movlw	4
 11336  14BF  0252               	subwf	82,w	;volatile
 11337  14C0  1803               	skipnc
 11338  14C1  2CD1               	goto	i1l6654
 11339                           
 11340                           ;usb_device.c: 2240: {
 11341                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 11342  14C2  0852               	movf	82,w	;volatile
 11343  14C3  00F0               	movwf	??_USBStdGetDscHandler
 11344  14C4  302D               	movlw	low (_USB_SD_Ptr| (0+32768))
 11345  14C5  24F0  3194         	fcall	PL34	;call to abstracted procedure
 11346  14C7  3090               	movlw	high (_USB_SD_Ptr| (0+32768))
 11347  14C8  24E1               	fcall	PL18	;call to abstracted procedure
 11348                           
 11349                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 11350  14C9  0863               	movf	_inPipes^(0+256),w	;volatile
 11351  14CA  0084               	movwf	4
 11352  14CB  0864               	movf	(_inPipes+1)^(0+256),w	;volatile
 11353  14CC  0085               	movwf	5
 11354  14CD  0800               	movf	0,w	;code access
 11355  14CE  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11356  14CF  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 11357                           
 11358                           ;usb_device.c: 2245: }
 11359  14D0  0008               	return
 11360  14D1                     i1l6654:	
 11361                           
 11362                           ;usb_device.c: 2255: else
 11363                           ;usb_device.c: 2256: {
 11364                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
 11365  14D1  0022               	movlb	2	; select bank2
 11366  14D2  01E5               	clrf	(_inPipes^(0+256)+2)	;volatile
 11367  14D3  0008               	return
 11368  14D4                     i1l6660:	
 11369  14D4  0020               	movlb	0	; select bank0
 11370  14D5  0853               	movf	83,w	;volatile
 11371                           
 11372                           ; Switch size 1, requested type "space"
 11373                           ; Number of cases is 3, Range of values is 1 to 3
 11374                           ; switch strategies available:
 11375                           ; Name         Instructions Cycles
 11376                           ; simple_byte           10     6 (average)
 11377                           ; direct_byte           15     9 (fixed)
 11378                           ; jumptable            263     9 (fixed)
 11379                           ;	Chosen strategy is simple_byte
 11380  14D6  3A01               	xorlw	1	; case 1
 11381  14D7  1903               	skipnz
 11382  14D8  2C9D               	goto	i1l6640
 11383  14D9  3A03               	xorlw	3	; case 2
 11384  14DA  1903               	skipnz
 11385  14DB  2CA6               	goto	i1l6642
 11386  14DC  3A01               	xorlw	1	; case 3
 11387  14DD  1903               	skipnz
 11388  14DE  2CBE               	goto	i1l6648
 11389  14DF  2CD1               	goto	i1l6654
 11390  14E0  0008               	return
 11391  14E1                     __end_of_USBStdGetDscHandler:	
 11392  14E1                     PL18:	
 11393  14E1  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11394  14E2  0085               	movwf	5
 11395  14E3  3F00               	moviw [0]fsr0
 11396  14E4  0022               	movlb	2	; select bank2
 11397  14E5  00E3               	movwf	_inPipes^(0+256)	;volatile
 11398  14E6  3F01               	moviw [1]fsr0
 11399  14E7  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 11400  14E8  0008               	return
 11401  14E9                     __end_ofPL18:	
 11402  14E9                     PL26:	
 11403  14E9  0084               	movwf	4
 11404  14EA  0871               	movf	??_USBStdGetDscHandler+1,w
 11405  14EB  1803               	skipnc
 11406  14EC  0A71               	incf	??_USBStdGetDscHandler+1,w
 11407  14ED  0085               	movwf	5
 11408  14EE  0800               	movf	0,w	;code access
 11409  14EF  0008               	return
 11410  14F0                     __end_ofPL26:	
 11411  14F0                     PL34:	
 11412  14F0  01F1               	clrf	??_USBStdGetDscHandler+1
 11413  14F1  35F0               	lslf	??_USBStdGetDscHandler,f
 11414  14F2  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11415  14F3  0770               	addwf	??_USBStdGetDscHandler,w
 11416  14F4  0084               	movwf	4
 11417  14F5  0008               	return
 11418  14F6                     __end_ofPL34:	
 11419                           
 11420                           	psect	text2482
 11421  1402                     __ptext2482:	
 11422 ;; *************** function _USBStdGetStatusHandler *****************
 11423 ;; Defined at:
 11424 ;;		line 2283 in file "../USB/usb_device.c"
 11425 ;; Parameters:    Size  Location     Type
 11426 ;;		None
 11427 ;; Auto vars:     Size  Location     Type
 11428 ;;  p               1    0[COMMON] PTR struct __BDT
 11429 ;;		 -> NULL(0), BDT(48), 
 11430 ;; Return value:  Size  Location     Type
 11431 ;;		None               void
 11432 ;; Registers used:
 11433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11434 ;; Tracked objects:
 11435 ;;		On entry : 1D/0
 11436 ;;		On exit  : 1F/2
 11437 ;;		Unchanged: FFFE0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;Total ram usage:        1 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; This function calls:
 11446 ;;		Nothing
 11447 ;; This function is called by:
 11448 ;;		_USBCheckStdRequest
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           
 11453                           ;psect for function _USBStdGetStatusHandler
 11454  1402                     _USBStdGetStatusHandler:	
 11455  1402                     i1l6662:	
 11456                           ; Regs used in _USBStdGetStatusHandler: [wreg-status,0]
 11457                           
 11458                           
 11459                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
 11460  1402  0020               	movlb	0	; select bank0
 11461  1403  01D8               	clrf	88	;volatile
 11462                           
 11463                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
 11464  1404  01D9               	clrf	89	;volatile
 11465                           
 11466                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
 11467  1405  2C2F               	goto	i1l6680
 11468  1406                     i1l279:	
 11469                           ;usb_device.c: 2288: {
 11470                           ;usb_device.c: 2289: case (0x00):
 11471                           
 11472                           
 11473                           ;usb_device.c: 2295: if(1 == 1)
 11474  1406  0022               	movlb	2	; select bank2
 11475  1407  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11476                           
 11477                           ;usb_device.c: 2296: {
 11478                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
 11479  1408  0020               	movlb	0	; select bank0
 11480  1409  1458               	bsf	88,0	;volatile
 11481                           
 11482                           ;usb_device.c: 2298: }
 11483                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
 11484  140A  0022               	movlb	2	; select bank2
 11485  140B  0B4B               	decfsz	_RemoteWakeup^(0+256),w	;volatile
 11486  140C  2C3A               	goto	i1l282
 11487                           
 11488                           ;usb_device.c: 2301: {
 11489                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
 11490  140D  0020               	movlb	0	; select bank0
 11491  140E  14D8               	bsf	88,1	;volatile
 11492  140F  2C3A               	goto	i1l282
 11493  1410                     i1l283:	
 11494                           ;usb_device.c: 2305: case (0x01):
 11495                           
 11496                           
 11497                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
 11498  1410  0022               	movlb	2	; select bank2
 11499  1411  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11500                           
 11501                           ;usb_device.c: 2307: break;
 11502  1412  2C3A               	goto	i1l282
 11503  1413                     i1l284:	
 11504                           ;usb_device.c: 2308: case (0x02):
 11505                           
 11506                           
 11507                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
 11508  1413  0022               	movlb	2	; select bank2
 11509  1414  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 11510                           
 11511                           ;usb_device.c: 2313: {
 11512                           ;usb_device.c: 2314: BDT_ENTRY *p;
 11513                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
 11514  1415  0020               	movlb	0	; select bank0
 11515  1416  1BD4               	btfsc	84,7	;volatile
 11516  1417  2C1C               	goto	i1l6670
 11517                           
 11518                           ;usb_device.c: 2317: {
 11519                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11520  1418  0854               	movf	84,w	;volatile
 11521  1419  390F               	andlw	15
 11522  141A  3E40               	addlw	_pBDTEntryOut& (0+255)
 11523  141B  2C1F               	goto	L16
 11524  141C                     i1l6670:	
 11525                           ;usb_device.c: 2319: }
 11526                           
 11527                           
 11528                           ;usb_device.c: 2320: else
 11529                           ;usb_device.c: 2321: {
 11530                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11531  141C  0854               	movf	84,w	;volatile
 11532  141D  390F               	andlw	15
 11533  141E  3E3D               	addlw	_pBDTEntryIn& (0+255)
 11534  141F                     L16:	
 11535  141F  0086               	movwf	6
 11536  1420  3001               	movlw	1	; select bank2/3
 11537  1421  0087               	movwf	7
 11538  1422  0801               	movf	1,w
 11539  1423  00F0               	movwf	USBStdGetStatusHandler@p
 11540                           
 11541                           ;usb_device.c: 2323: }
 11542                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
 11543  1424  0086               	movwf	6
 11544  1425  0187               	clrf	7
 11545  1426  1F81               	btfss	1,7
 11546  1427  2C3A               	goto	i1l282
 11547  1428  0870               	movf	USBStdGetStatusHandler@p,w
 11548  1429  0086               	movwf	6
 11549  142A  1D01               	btfss	1,2
 11550  142B  2C3A               	goto	i1l282
 11551                           
 11552                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
 11553  142C  3001               	movlw	1
 11554  142D  00D8               	movwf	88	;volatile
 11555  142E  2C3A               	goto	i1l282
 11556  142F                     i1l6680:	
 11557  142F  0850               	movf	80,w	;volatile
 11558  1430  391F               	andlw	31
 11559                           
 11560                           ; Switch size 1, requested type "space"
 11561                           ; Number of cases is 3, Range of values is 0 to 2
 11562                           ; switch strategies available:
 11563                           ; Name         Instructions Cycles
 11564                           ; simple_byte           10     6 (average)
 11565                           ; direct_byte           12     6 (fixed)
 11566                           ; jumptable            260     6 (fixed)
 11567                           ; rangetable             7     4 (fixed)
 11568                           ; spacedrange           11     6 (fixed)
 11569                           ; locatedrange           3     3 (fixed)
 11570                           ;	Chosen strategy is simple_byte
 11571  1431  1903               	skipnz
 11572  1432  2C06               	goto	i1l279
 11573  1433  3A01               	xorlw	1	; case 1
 11574  1434  1903               	skipnz
 11575  1435  2C10               	goto	i1l283
 11576  1436  3A03               	xorlw	3	; case 2
 11577  1437  1903               	skipnz
 11578  1438  2C13               	goto	i1l284
 11579  1439  2C3A               	goto	i1l282
 11580  143A                     i1l282:	
 11581                           
 11582                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
 11583  143A  0022               	movlb	2	; select bank2
 11584  143B  1FE5               	btfss	(_inPipes^(0+256)+2),7	;volatile
 11585  143C  0008               	return
 11586                           
 11587                           ;usb_device.c: 2332: {
 11588                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
 11589  143D  3058               	movlw	88
 11590  143E  00E3               	movwf	_inPipes^(0+256)	;volatile
 11591  143F  01E4               	clrf	(_inPipes+1)^(0+256)	;volatile
 11592                           
 11593                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11594  1440  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
 11595                           
 11596                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
 11597  1441  3002               	movlw	2
 11598  1442  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 11599  1443  0008               	return
 11600  1444                     __end_of_USBStdGetStatusHandler:	
 11601                           
 11602                           	psect	swtext2
 11603  1180                     __pswtext2:	
 11604  1180                     i1S8496:	
 11605  1180  3186  2E47         	ljmp	i1l7838
 11606  1182  3186  2E4D         	ljmp	i1l619
 11607  1184  3186  2E59         	ljmp	i1l621
 11608  1186  3186  2E5F         	ljmp	i1l7854
 11609  1188  3186  2E64         	ljmp	i1l7856
 11610  118A  3186  2EAD         	ljmp	i1l7892
 11611  118C  3186  2EB6         	ljmp	i1l637
 11612  118E  3186  2EB9         	ljmp	i1l638
 11613  1190  3186  2EB6         	ljmp	i1l637
 11614  1192  3186  2EC1         	ljmp	i1l7902
 11615                           
 11616                           	psect	text2486
 11617  13D2                     __ptext2486:	
 11618 ;; *************** function _I2CWrite *****************
 11619 ;; Defined at:
 11620 ;;		line 110 in file "i2c.c"
 11621 ;; Parameters:    Size  Location     Type
 11622 ;;		None
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;		None
 11625 ;; Return value:  Size  Location     Type
 11626 ;;		None               void
 11627 ;; Registers used:
 11628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11629 ;; Tracked objects:
 11630 ;;		On entry : 1F/0
 11631 ;;		On exit  : 19/0
 11632 ;;		Unchanged: FFFE0/0
 11633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;Total ram usage:        1 bytes
 11639 ;; Hardware stack levels used:    1
 11640 ;; This function calls:
 11641 ;;		Nothing
 11642 ;; This function is called by:
 11643 ;;		_ISRCode
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           
 11648                           ;psect for function _I2CWrite
 11649  13D2                     _I2CWrite:	
 11650                           
 11651                           ;i2c.c: 111: switch(I2CState.Next)
 11652                           
 11653                           ; Regs used in _I2CWrite: [wreg-status,0]
 11654  13D2  2BF4               	goto	i1l7020
 11655  13D3                     i1l7004:	
 11656                           
 11657                           ;i2c.c: 114: SSPBUF = I2CAddr;
 11658  13D3  0848               	movf	_I2CAddr^(0+256),w
 11659  13D4  0024               	movlb	4	; select bank4
 11660  13D5  0091               	movwf	17	;volatile
 11661                           
 11662                           ;i2c.c: 115: ptr = 0; I2CState.Next++;
 11663  13D6  0022               	movlb	2	; select bank2
 11664  13D7  01E0               	clrf	_ptr^(0+256)
 11665  13D8                     i1l7008:	
 11666  13D8  0868               	movf	_I2CState^(0+256),w
 11667  13D9  391F               	andlw	31
 11668  13DA  00F0               	movwf	??_I2CWrite
 11669  13DB  0AF0               	incf	??_I2CWrite,f
 11670  13DC  0868               	movf	_I2CState^(0+256),w
 11671  13DD  0670               	xorwf	??_I2CWrite,w
 11672  13DE  39E0               	andlw	-32
 11673  13DF  0670               	xorwf	??_I2CWrite,w
 11674  13E0  00E8               	movwf	_I2CState^(0+256)
 11675                           
 11676                           ;i2c.c: 116: break;
 11677  13E1  0008               	return
 11678  13E2                     i1l7010:	
 11679                           
 11680                           ;i2c.c: 118: SSPBUF = I2CInBuf[ptr++];
 11681  13E2  0860               	movf	_ptr^(0+256),w
 11682  13E3  0023               	movlb	3	; select bank3
 11683  13E4  072C               	addwf	_I2CInBuf^(0+384),w
 11684  13E5  00F0               	movwf	??_I2CWrite
 11685  13E6  0086               	movwf	6
 11686  13E7  3004               	movlw	4	; select bank8/9
 11687  13E8  0087               	movwf	7
 11688  13E9  0801               	movf	1,w
 11689  13EA  0024               	movlb	4	; select bank4
 11690  13EB  0091               	movwf	17	;volatile
 11691  13EC  0022               	movlb	2	; select bank2
 11692  13ED  0AE0               	incf	_ptr^(0+256),f
 11693                           
 11694                           ;i2c.c: 119: if(--I2CCount == 0)
 11695  13EE  0BCA               	decfsz	_I2CCount^(0+256),f
 11696  13EF  0008               	return
 11697  13F0  2BD8               	goto	i1l7008
 11698  13F1                     i1l650:	
 11699                           ;i2c.c: 121: case 10+2: SSPCON2bits.PEN = 1; break;
 11700                           
 11701  13F1  0024               	movlb	4	; select bank4
 11702  13F2  1516               	bsf	22,2	;volatile
 11703  13F3  0008               	return
 11704  13F4                     i1l7020:	
 11705  13F4  0022               	movlb	2	; select bank2
 11706  13F5  0868               	movf	_I2CState^(0+256),w
 11707  13F6  391F               	andlw	31
 11708                           
 11709                           ; Switch size 1, requested type "space"
 11710                           ; Number of cases is 3, Range of values is 10 to 12
 11711                           ; switch strategies available:
 11712                           ; Name         Instructions Cycles
 11713                           ; simple_byte           10     6 (average)
 11714                           ; direct_byte           15     9 (fixed)
 11715                           ; jumptable            263     9 (fixed)
 11716                           ;	Chosen strategy is simple_byte
 11717  13F7  3A0A               	xorlw	10	; case 10
 11718  13F8  1903               	skipnz
 11719  13F9  2BD3               	goto	i1l7004
 11720  13FA  3A01               	xorlw	1	; case 11
 11721  13FB  1903               	skipnz
 11722  13FC  2BE2               	goto	i1l7010
 11723  13FD  3A07               	xorlw	7	; case 12
 11724  13FE  1903               	skipnz
 11725  13FF  2BF1               	goto	i1l650
 11726  1400  2C01               	goto	i1l652
 11727  1401                     i1l652:	
 11728  1401  0008               	return
 11729  1402                     __end_of_I2CWrite:	
 11730                           
 11731                           	psect	text2487
 11732  166C                     __ptext2487:	
 11733 ;; *************** function _I2CSlave *****************
 11734 ;; Defined at:
 11735 ;;		line 131 in file "i2c.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;		None
 11740 ;; Return value:  Size  Location     Type
 11741 ;;		None               void
 11742 ;; Registers used:
 11743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11744 ;; Tracked objects:
 11745 ;;		On entry : 1F/2
 11746 ;;		On exit  : 19/0
 11747 ;;		Unchanged: FFFE0/0
 11748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;Total ram usage:        6 bytes
 11754 ;; Hardware stack levels used:    1
 11755 ;; This function calls:
 11756 ;;		Nothing
 11757 ;; This function is called by:
 11758 ;;		_ISRCode
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function _I2CSlave
 11764  166C                     _I2CSlave:	
 11765                           
 11766                           ;i2c.c: 132: if(SSPSTATbits.P) {
 11767                           
 11768                           ; Regs used in _I2CSlave: [wreg-status,0+pclath]
 11769  166C  0024               	movlb	4	; select bank4
 11770  166D  1E14               	btfss	20,4	;volatile
 11771  166E  2EE8               	goto	i1l7094
 11772                           
 11773                           ;i2c.c: 133: I2CState.Next = 0;
 11774  166F  30E0               	movlw	-32
 11775  1670  0022               	movlb	2	; select bank2
 11776  1671  05E8               	andwf	_I2CState^(0+256),f
 11777                           
 11778                           ;i2c.c: 134: if(I2CCmd != '?' && I2CCmd != 'P')
 11779  1672  0849               	movf	_I2CCmd^(0+256),w
 11780  1673  3A3F               	xorlw	63
 11781  1674  1903               	skipnz
 11782  1675  2EE8               	goto	i1l7094
 11783  1676  0849               	movf	_I2CCmd^(0+256),w
 11784  1677  3A50               	xorlw	80
 11785  1678  1903               	skipnz
 11786  1679  2EE8               	goto	i1l7094
 11787                           
 11788                           ;i2c.c: 135: I2CCount = ptr;
 11789  167A  0860               	movf	_ptr^(0+256),w
 11790  167B  00CA               	movwf	_I2CCount^(0+256)
 11791  167C  2EE8               	goto	i1l7094
 11792  167D                     i1l7032:	
 11793  167D  0024               	movlb	4	; select bank4
 11794  167E  0811               	movf	17,w	;volatile
 11795  167F  0022               	movlb	2	; select bank2
 11796  1680  00C8               	movwf	_I2CAddr^(0+256)
 11797  1681  26F8               	fcall	PL4	;call to abstracted procedure
 11798  1682  01E0               	clrf	_ptr^(0+256)
 11799  1683  0008               	return
 11800  1684                     i1l7038:	
 11801  1684  0860               	movf	_ptr^(0+256),w
 11802  1685  270B  3196         	fcall	PL22	;call to abstracted procedure
 11803  1687  0022               	movlb	2	; select bank2
 11804  1688  00C9               	movwf	_I2CCmd^(0+256)
 11805  1689  0081               	movwf	1
 11806  168A  0AE0               	incf	_ptr^(0+256),f
 11807                           
 11808                           ;i2c.c: 141: if(I2CCmd == '?') I2CState.Next = 13+3;
 11809  168B  0849               	movf	_I2CCmd^(0+256),w
 11810  168C  3A3F               	xorlw	63
 11811  168D  1D03               	skipz
 11812  168E  2E94               	goto	i1l7046
 11813  168F  0868               	movf	_I2CState^(0+256),w
 11814  1690  39E0               	andlw	-32
 11815  1691  3810               	iorlw	16
 11816  1692  00E8               	movwf	_I2CState^(0+256)
 11817  1693  0008               	return
 11818  1694                     i1l7046:	
 11819                           
 11820                           ;i2c.c: 142: else if(I2CCmd == 'P') I2CState.Next = (I2CCount > 0) ? 13+6 : 0;
 11821  1694  0849               	movf	_I2CCmd^(0+256),w
 11822  1695  3A50               	xorlw	80
 11823  1696  1D03               	skipz
 11824  1697  2EA6               	goto	i1l7056
 11825  1698  08CA               	movf	_I2CCount^(0+256),f
 11826  1699  1D03               	skipz
 11827  169A  2E9D               	goto	i1l7052
 11828  169B  01F4               	clrf	_I2CSlave$2556
 11829  169C  2E9F               	goto	L24
 11830  169D                     i1l7052:	
 11831  169D  3013               	movlw	19
 11832  169E  00F4               	movwf	_I2CSlave$2556
 11833  169F                     L24:	
 11834  169F  01F5               	clrf	_I2CSlave$2556+1
 11835  16A0  0868               	movf	_I2CState^(0+256),w
 11836  16A1  0674               	xorwf	_I2CSlave$2556,w
 11837  16A2  39E0               	andlw	-32
 11838  16A3  0674               	xorwf	_I2CSlave$2556,w
 11839  16A4  00E8               	movwf	_I2CState^(0+256)
 11840  16A5  0008               	return
 11841  16A6                     i1l7056:	
 11842                           
 11843                           ;i2c.c: 143: else I2CState.Next++;
 11844  16A6  26F8               	fcall	PL4	;call to abstracted procedure
 11845  16A7  0008               	return
 11846  16A8                     i1l7058:	
 11847  16A8  3040               	movlw	64
 11848  16A9  0260               	subwf	_ptr^(0+256),w
 11849  16AA  1803               	skipnc
 11850  16AB  0008               	return
 11851  16AC  0860               	movf	_ptr^(0+256),w
 11852  16AD  270B               	fcall	PL22	;call to abstracted procedure
 11853  16AE  0081               	movwf	1
 11854  16AF  0022               	movlb	2	; select bank2
 11855  16B0  0AE0               	incf	_ptr^(0+256),f
 11856  16B1  0008               	return
 11857  16B2                     i1l7064:	
 11858  16B2  3056               	movlw	low ((_ID| (0+32768)+1))
 11859  16B3  0084               	movwf	4
 11860  16B4  3091               	movlw	high ((_ID| (0+32768)+1))
 11861  16B5  0085               	movwf	5
 11862  16B6  3F00               	moviw [0]fsr0
 11863  16B7  00F0               	movwf	??_I2CSlave
 11864  16B8  3F01               	moviw [1]fsr0
 11865  16B9  00F1               	movwf	??_I2CSlave+1
 11866  16BA  3F02               	moviw [2]fsr0
 11867  16BB  00F2               	movwf	??_I2CSlave+2
 11868  16BC  3F03               	moviw [3]fsr0
 11869  16BD  00F3               	movwf	??_I2CSlave+3
 11870  16BE  3060               	movlw	low _buf
 11871  16BF  0086               	movwf	6
 11872  16C0  3002               	movlw	2	; select bank4/5
 11873  16C1  0087               	movwf	7
 11874  16C2  0870               	movf	??_I2CSlave,w
 11875  16C3  3FC0               	movwi [0]fsr1
 11876  16C4  0871               	movf	??_I2CSlave+1,w
 11877  16C5  3FC1               	movwi [1]fsr1
 11878  16C6  0872               	movf	??_I2CSlave+2,w
 11879  16C7  3FC2               	movwi [2]fsr1
 11880  16C8  0873               	movf	??_I2CSlave+3,w
 11881  16C9  3FC3               	movwi [3]fsr1
 11882  16CA  01E0               	clrf	_ptr^(0+256)
 11883  16CB  26F8  3196         	fcall	PL4	;call to abstracted procedure
 11884  16CD                     i1l7070:	
 11885  16CD  0860               	movf	_ptr^(0+256),w
 11886  16CE  3E60               	addlw	_buf& (0+255)
 11887  16CF  0086               	movwf	6
 11888  16D0  3002               	movlw	2	; select bank4/5
 11889  16D1  2702  3196         	fcall	PL16	;call to abstracted procedure
 11890                           
 11891                           ;i2c.c: 149: if(ptr == 4) I2CState.Next++; break;
 11892  16D3  0022               	movlb	2	; select bank2
 11893  16D4  0860               	movf	_ptr^(0+256),w
 11894  16D5  3A04               	xorlw	4
 11895  16D6  1D03               	skipz
 11896  16D7  0008               	return
 11897  16D8  2EA6               	goto	i1l7056
 11898  16D9                     i1l7080:	
 11899  16D9  0024               	movlb	4	; select bank4
 11900  16DA  0811               	movf	17,w	;volatile
 11901  16DB  0022               	movlb	2	; select bank2
 11902  16DC  00CD               	movwf	_SlaveAddress^(0+256)
 11903  16DD  0008               	return
 11904  16DE                     i1l7082:	
 11905  16DE  01E0               	clrf	_ptr^(0+256)
 11906  16DF  01CA               	clrf	_I2CCount^(0+256)
 11907  16E0  26F8  3196         	fcall	PL4	;call to abstracted procedure
 11908  16E2                     i1l7086:	
 11909  16E2  0860               	movf	_ptr^(0+256),w
 11910  16E3  3EA0               	addlw	_USB_In_Buffer& (0+255)
 11911  16E4  0086               	movwf	6
 11912  16E5  3003               	movlw	3	; select bank7/8
 11913  16E6  2702               	fcall	PL16	;call to abstracted procedure
 11914  16E7  0008               	return
 11915  16E8                     i1l7094:	
 11916  16E8  0022               	movlb	2	; select bank2
 11917  16E9  0868               	movf	_I2CState^(0+256),w
 11918  16EA  391F               	andlw	31
 11919                           
 11920                           ; Switch size 1, requested type "space"
 11921                           ; Number of cases is 8, Range of values is 13 to 20
 11922                           ; switch strategies available:
 11923                           ; Name         Instructions Cycles
 11924                           ; direct_byte           25     9 (fixed)
 11925                           ; simple_byte           25    13 (average)
 11926                           ; jumptable            263     9 (fixed)
 11927                           ;	Chosen strategy is direct_byte
 11928  16EB  3EF3               	addlw	-13
 11929  16EC  1C03               	skipc
 11930  16ED  0008               	return
 11931  16EE  0084               	movwf	4
 11932  16EF  3008               	movlw	8
 11933  16F0  0204               	subwf	4,w
 11934  16F1  1803               	skipnc
 11935  16F2  0008               	return
 11936  16F3  3191               	movlp	high i1S8498
 11937  16F4  3504               	lslf	4,w
 11938  16F5  3E94               	addlw	low i1S8498
 11939  16F6  0082               	movwf	2
 11940  16F7  0008               	return
 11941  16F8                     __end_of_I2CSlave:	
 11942  16F8                     PL4:	
 11943  16F8  0868               	movf	_I2CState^(0+256),w
 11944  16F9  391F               	andlw	31
 11945  16FA  00F0               	movwf	??_I2CSlave
 11946  16FB  0AF0               	incf	??_I2CSlave,f
 11947  16FC  0868               	movf	_I2CState^(0+256),w
 11948  16FD  0670               	xorwf	??_I2CSlave,w
 11949  16FE  39E0               	andlw	-32
 11950  16FF  0670               	xorwf	??_I2CSlave,w
 11951  1700  00E8               	movwf	_I2CState^(0+256)
 11952  1701  0008               	return
 11953  1702                     __end_ofPL4:	
 11954  1702                     PL16:	
 11955  1702  0087               	movwf	7
 11956  1703  0801               	movf	1,w
 11957  1704  0024               	movlb	4	; select bank4
 11958  1705  0091               	movwf	17	;volatile
 11959  1706  0022               	movlb	2	; select bank2
 11960  1707  0AE0               	incf	_ptr^(0+256),f
 11961  1708  0024               	movlb	4	; select bank4
 11962  1709  1615               	bsf	21,4	;volatile
 11963  170A  0008               	return
 11964  170B                     __end_ofPL16:	
 11965  170B                     PL22:	
 11966  170B  3E20               	addlw	_USB_Out_Buffer& (0+255)
 11967  170C  0086               	movwf	6
 11968  170D  3004               	movlw	4	; select bank8/9
 11969  170E  0087               	movwf	7
 11970  170F  0024               	movlb	4	; select bank4
 11971  1710  0811               	movf	17,w	;volatile
 11972  1711  0008               	return
 11973  1712                     __end_ofPL22:	
 11974                           
 11975                           	psect	swtext3
 11976  1194                     __pswtext3:	
 11977  1194                     i1S8498:	
 11978  1194  3196  2E7D         	ljmp	i1l7032
 11979  1196  3196  2E84         	ljmp	i1l7038
 11980  1198  3196  2EA8         	ljmp	i1l7058
 11981  119A  3196  2EB2         	ljmp	i1l7064
 11982  119C  3196  2ECD         	ljmp	i1l7070
 11983  119E  3196  2ED9         	ljmp	i1l7080
 11984  11A0  3196  2EDE         	ljmp	i1l7082
 11985  11A2  3196  2EE2         	ljmp	i1l7086
 11986                           
 11987                           	psect	text2488
 11988  15E8                     __ptext2488:	
 11989 ;; *************** function _WorkTick *****************
 11990 ;; Defined at:
 11991 ;;		line 173 in file "klondike.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;		None
 11996 ;; Return value:  Size  Location     Type
 11997 ;;		None               void
 11998 ;; Registers used:
 11999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12000 ;; Tracked objects:
 12001 ;;		On entry : 1C/0
 12002 ;;		On exit  : 18/0
 12003 ;;		Unchanged: FFE00/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;Total ram usage:        0 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; Hardware stack levels required when called:    1
 12012 ;; This function calls:
 12013 ;;		_CheckFanSpeed
 12014 ;;		_I2CPoll
 12015 ;; This function is called by:
 12016 ;;		_ISRCode
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _WorkTick
 12022  15E8                     _WorkTick:	
 12023                           
 12024                           ;klondike.c: 174: TMR0IF = 0;
 12025                           
 12026                           ; Regs used in _WorkTick: [wreg+fsr1l-status,0+pclath+cstack]
 12027  15E8  110B               	bcf	11,2	;volatile
 12028                           
 12029                           ;klondike.c: 176: if((Status.State == 'W') && (++Status.HashCount == WorkTicks)) {
 12030  15E9  0023               	movlb	3	; select bank3
 12031  15EA  0853               	movf	_Status^(0+384),w	;volatile
 12032  15EB  3A57               	xorlw	87
 12033  15EC  1D03               	skipz
 12034  15ED  2E0D               	goto	i1l7724
 12035  15EE  30DA               	movlw	(_Status& (0+255)+7)
 12036  15EF  0086               	movwf	6
 12037  15F0  3001               	movlw	1	; select bank3/4
 12038  15F1  0087               	movwf	7
 12039  15F2  0781               	addwf	1,f
 12040  15F3  3141               	addfsr 1,1
 12041  15F4  1803               	skipnc
 12042  15F5  0A81               	incf	1,f
 12043  15F6  317F               	addfsr 1,-1
 12044  15F7  3F40               	moviw [0]fsr1
 12045  15F8  0651               	xorwf	_WorkTicks^(0+384),w	;volatile
 12046  15F9  1D03               	skipz
 12047  15FA  2DFD               	goto	u593_25
 12048  15FB  3F41               	moviw [1]fsr1
 12049  15FC  0652               	xorwf	(_WorkTicks+1)^(0+384),w	;volatile
 12050  15FD                     u593_25:	
 12051  15FD  1D03               	skipz
 12052  15FE  2E0D               	goto	i1l7724
 12053                           
 12054                           ;klondike.c: 177: WorkNow = (WorkNow+1) & 4-1;
 12055  15FF  0022               	movlb	2	; select bank2
 12056  1600  3003               	movlw	3
 12057  1601  0AD5               	incf	_WorkNow^(0+256),f
 12058  1602  05D5               	andwf	_WorkNow^(0+256),f
 12059                           
 12060                           ;klondike.c: 178: if(--Status.WorkQC > 0) {
 12061  1603  0023               	movlb	3	; select bank3
 12062  1604  03D6               	decf	(_Status^(0+384)+3),f	;volatile
 12063  1605  1903               	btfsc	3,2
 12064  1606  2E0A               	goto	i1l7722
 12065                           
 12066                           ;klondike.c: 179: Status.State = 'P';
 12067  1607  3050               	movlw	80
 12068  1608  00D3               	movwf	_Status^(0+384)	;volatile
 12069  1609  0008               	return
 12070  160A                     i1l7722:	
 12071                           
 12072                           ;klondike.c: 182: else
 12073                           ;klondike.c: 183: Status.State = 'R';
 12074  160A  3052               	movlw	82
 12075  160B  00D3               	movwf	_Status^(0+384)	;volatile
 12076  160C  2E11               	goto	i1l7726
 12077  160D                     i1l7724:	
 12078                           
 12079                           ;klondike.c: 185: else
 12080                           ;klondike.c: 186: TMR0 = HashTime;
 12081  160D  0022               	movlb	2	; select bank2
 12082  160E  086F               	movf	_HashTime^(0+256),w
 12083  160F  0020               	movlb	0	; select bank0
 12084  1610  0095               	movwf	21	;volatile
 12085  1611                     i1l7726:	
 12086                           
 12087                           ;klondike.c: 188: if(++SlowTick == 0) {
 12088  1611  0023               	movlb	3	; select bank3
 12089  1612  0FAD               	incfsz	_SlowTick^(0+384),f
 12090  1613  2E1E               	goto	i1l7736
 12091                           
 12092                           ;klondike.c: 189: LATAbits.LATA5 = 0;;
 12093  1614  0022               	movlb	2	; select bank2
 12094  1615  128C               	bcf	12,5	;volatile
 12095                           
 12096                           ;klondike.c: 190: Status.Temp = ADRESH;
 12097  1616  0021               	movlb	1	; select bank1
 12098  1617  081C               	movf	28,w	;volatile
 12099  1618  0023               	movlb	3	; select bank3
 12100  1619  00D8               	movwf	(_Status^(0+384)+5)	;volatile
 12101                           
 12102                           ;klondike.c: 192: ADCON0bits.GO_nDONE = 1;
 12103  161A  0021               	movlb	1	; select bank1
 12104  161B  149D               	bsf	29,1	;volatile
 12105                           
 12106                           ;klondike.c: 193: CheckFanSpeed();
 12107  161C  261F  3195         	fcall	_CheckFanSpeed
 12108  161E                     i1l7736:	
 12109                           
 12110                           ;klondike.c: 194: }
 12111                           ;klondike.c: 196: I2CPoll();
 12112  161E  2E5D               	ljmp	i1l6968
 12113  161F                     __end_of_WorkTick:	
 12114  161F                     __ptext2490:	
 12115 ;; *************** function _CheckFanSpeed *****************
 12116 ;; Defined at:
 12117 ;;		line 125 in file "klondike.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;		None
 12120 ;; Auto vars:     Size  Location     Type
 12121 ;;		None
 12122 ;; Return value:  Size  Location     Type
 12123 ;;		None               void
 12124 ;; Registers used:
 12125 ;;		wreg, status,2, status,0
 12126 ;; Tracked objects:
 12127 ;;		On entry : 1F/1
 12128 ;;		On exit  : 18/0
 12129 ;;		Unchanged: FFE00/0
 12130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;Total ram usage:        1 bytes
 12136 ;; Hardware stack levels used:    1
 12137 ;; This function calls:
 12138 ;;		Nothing
 12139 ;; This function is called by:
 12140 ;;		_WorkTick
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           
 12145                           ;psect for function _CheckFanSpeed
 12146  161F                     _CheckFanSpeed:	
 12147                           
 12148                           ;klondike.c: 126: if(PWM1OE == 0) {
 12149                           
 12150                           ; Regs used in _CheckFanSpeed: [wreg+status,2+status,0]
 12151  161F  002C               	movlb	12	; select bank12
 12152  1620  1B13               	btfsc	19,6	;volatile
 12153  1621  2E29               	goto	i1l850
 12154                           
 12155                           ;klondike.c: 127: LATCbits.LATC5 = 0;
 12156  1622  0022               	movlb	2	; select bank2
 12157  1623  128E               	bcf	14,5	;volatile
 12158                           
 12159                           ;klondike.c: 128: PWM1OE = 1;
 12160  1624  002C               	movlb	12	; select bank12
 12161  1625  1713               	bsf	19,6	;volatile
 12162                           
 12163                           ;klondike.c: 129: Status.FanSpeed = 0;
 12164  1626  0023               	movlb	3	; select bank3
 12165  1627  01D9               	clrf	(_Status^(0+384)+6)	;volatile
 12166                           
 12167                           ;klondike.c: 130: }
 12168  1628  0008               	return
 12169  1629                     i1l850:	
 12170                           
 12171                           ;klondike.c: 131: else if( IOCAF3 == 1) {
 12172  1629  0027               	movlb	7	; select bank7
 12173  162A  1D93               	btfss	19,3	;volatile
 12174  162B  0008               	return
 12175                           
 12176                           ;klondike.c: 132: IOCAF3 = 0;
 12177  162C  1193               	bcf	19,3	;volatile
 12178                           
 12179                           ;klondike.c: 133: LATCbits.LATC5 = 1;
 12180  162D  0022               	movlb	2	; select bank2
 12181  162E  168E               	bsf	14,5	;volatile
 12182                           
 12183                           ;klondike.c: 134: PWM1OE=0;
 12184  162F  002C               	movlb	12	; select bank12
 12185  1630  1313               	bcf	19,6	;volatile
 12186                           
 12187                           ;klondike.c: 135: T1CONbits.TMR1CS = 0;
 12188  1631  303F               	movlw	-193
 12189  1632  0020               	movlb	0	; select bank0
 12190  1633  0598               	andwf	24,f	;volatile
 12191                           
 12192                           ;klondike.c: 136: T1CONbits.T1CKPS = 3;
 12193  1634  3030               	movlw	48
 12194  1635  0498               	iorwf	24,f	;volatile
 12195                           
 12196                           ;klondike.c: 137: T1CONbits.TMR1ON = TMR1GE = 1;
 12197  1636  1799               	bsf	25,7	;volatile
 12198  1637  3000               	movlw	0
 12199  1638  1B99               	btfsc	25,7	;volatile
 12200  1639  3001               	movlw	1
 12201  163A  00F0               	movwf	??_CheckFanSpeed
 12202  163B  0818               	movf	24,w	;volatile
 12203  163C  0670               	xorwf	??_CheckFanSpeed,w
 12204  163D  39FE               	andlw	-2
 12205  163E  0670               	xorwf	??_CheckFanSpeed,w
 12206  163F  0098               	movwf	24	;volatile
 12207                           
 12208                           ;klondike.c: 138: T1GCONbits.T1GPOL = 1;
 12209  1640  1719               	bsf	25,6	;volatile
 12210                           
 12211                           ;klondike.c: 139: T1GCONbits.T1GSS = T1GCONbits.T1GTM = 0;
 12212  1641  0819               	movf	25,w	;volatile
 12213  1642  39DF               	andlw	-33
 12214  1643  0099               	movwf	25	;volatile
 12215  1644  0E19               	swapf	25,w	;volatile
 12216  1645  0C89               	rrf	9,f
 12217  1646  3901               	andlw	1
 12218  1647  00F0               	movwf	??_CheckFanSpeed
 12219  1648  0819               	movf	25,w	;volatile
 12220  1649  0670               	xorwf	??_CheckFanSpeed,w
 12221  164A  39FC               	andlw	-4
 12222  164B  0670               	xorwf	??_CheckFanSpeed,w
 12223  164C  0099               	movwf	25	;volatile
 12224                           
 12225                           ;klondike.c: 140: T1GSPM = 1;
 12226  164D  1619               	bsf	25,4	;volatile
 12227                           
 12228                           ;klondike.c: 141: TMR1H = TMR1L = 0;
 12229  164E  0196               	clrf	22	;volatile
 12230  164F  0197               	clrf	23	;volatile
 12231                           
 12232                           ;klondike.c: 142: TMR1ON = 1;
 12233  1650  1418               	bsf	24,0	;volatile
 12234                           
 12235                           ;klondike.c: 143: TMR1GIE = TMR1IE = 1;
 12236  1651  0021               	movlb	1	; select bank1
 12237  1652  1411               	bsf	17,0	;volatile
 12238  1653  1C11               	btfss	17,0	;volatile
 12239  1654  2E58               	goto	u537_20
 12240  1655  0021               	movlb	1	; select bank1
 12241  1656  1791               	bsf	17,7	;volatile
 12242  1657  2E5A               	goto	i1l7242
 12243  1658                     u537_20:	
 12244  1658  0021               	movlb	1	; select bank1
 12245  1659  1391               	bcf	17,7	;volatile
 12246  165A                     i1l7242:	
 12247                           
 12248                           ;klondike.c: 144: T1GCONbits.T1GGO_nDONE = 1;
 12249  165A  0020               	movlb	0	; select bank0
 12250  165B  1599               	bsf	25,3	;volatile
 12251  165C  0008               	return
 12252  165D                     __end_of_CheckFanSpeed:	
 12253  165D                     __ptext2489:	
 12254 ;; *************** function _I2CPoll *****************
 12255 ;; Defined at:
 12256 ;;		line 48 in file "i2c.c"
 12257 ;; Parameters:    Size  Location     Type
 12258 ;;		None
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;		None
 12261 ;; Return value:  Size  Location     Type
 12262 ;;		None               void
 12263 ;; Registers used:
 12264 ;;		wreg, status,2, status,0
 12265 ;; Tracked objects:
 12266 ;;		On entry : 18/3
 12267 ;;		On exit  : 19/0
 12268 ;;		Unchanged: FFFE0/0
 12269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;Total ram usage:        0 bytes
 12275 ;; Hardware stack levels used:    1
 12276 ;; This function calls:
 12277 ;;		Nothing
 12278 ;; This function is called by:
 12279 ;;		_WorkTick
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _I2CPoll
 12285  165D                     _I2CPoll:	
 12286  165D                     i1l6968:	
 12287                           ; Regs used in _I2CPoll: [wreg+status,2+status,0]
 12288                           
 12289                           
 12290                           ;i2c.c: 49: if(I2CState.Next == 0) {
 12291  165D  0022               	movlb	2	; select bank2
 12292  165E  0868               	movf	_I2CState^(0+256),w
 12293  165F  391F               	andlw	31
 12294  1660  1D03               	skipz
 12295  1661  0008               	return
 12296                           
 12297                           ;i2c.c: 50: I2CCmd = 'P';
 12298  1662  3050               	movlw	80
 12299  1663  00C9               	movwf	_I2CCmd^(0+256)
 12300                           
 12301                           ;i2c.c: 51: I2CCount = 0;
 12302  1664  01CA               	clrf	_I2CCount^(0+256)
 12303                           
 12304                           ;i2c.c: 52: I2CState.Next = 1;
 12305  1665  0868               	movf	_I2CState^(0+256),w
 12306  1666  39E0               	andlw	-32
 12307  1667  3801               	iorlw	1
 12308  1668  00E8               	movwf	_I2CState^(0+256)
 12309                           
 12310                           ;i2c.c: 53: SSPCON2bits.SEN = 1;
 12311  1669  0024               	movlb	4	; select bank4
 12312  166A  1416               	bsf	22,0	;volatile
 12313  166B  0008               	return
 12314  166C                     __end_of_I2CPoll:	
 12315                           
 12316                           	psect	text2491
 12317  05D1                     __ptext2491:	
 12318 ;; *************** function _ResultRx *****************
 12319 ;; Defined at:
 12320 ;;		line 200 in file "klondike.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;		None
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;  buf             7    0[BANK0 ] unsigned char [7]
 12325 ;;  Rw              1    7[BANK0 ] unsigned char 
 12326 ;; Return value:  Size  Location     Type
 12327 ;;		None               void
 12328 ;; Registers used:
 12329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12330 ;; Tracked objects:
 12331 ;;		On entry : 1F/0
 12332 ;;		On exit  : 1C/0
 12333 ;;		Unchanged: FFFE0/0
 12334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;Total ram usage:       10 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    2
 12342 ;; This function calls:
 12343 ;;		i1___wmul
 12344 ;;		i1_SendCmdReply
 12345 ;; This function is called by:
 12346 ;;		_ISRCode
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _ResultRx
 12352  05D1                     _ResultRx:	
 12353                           
 12354                           ;klondike.c: 201: GIE = 0;
 12355                           
 12356                           ; Regs used in _ResultRx: [wreg-status,0+pclath+cstack]
 12357  05D1  138B               	bcf	11,7	;volatile
 12358                           
 12359                           ;klondike.c: 202: RCIF = 0;
 12360  05D2  1291               	bcf	17,5	;volatile
 12361                           
 12362                           ;klondike.c: 203: BYTE Rw = ResultQC & 0xFC;
 12363  05D3  0022               	movlb	2	; select bank2
 12364  05D4  084C               	movf	_ResultQC^(0+256),w
 12365  05D5  0020               	movlb	0	; select bank0
 12366  05D6  00E7               	movwf	ResultRx@Rw
 12367  05D7  30FC               	movlw	252
 12368  05D8  05E7               	andwf	ResultRx@Rw,f
 12369                           
 12370                           ;klondike.c: 204: ResultQue[ResultQC] = RCREG;
 12371  05D9  0022               	movlb	2	; select bank2
 12372  05DA  084C               	movf	_ResultQC^(0+256),w
 12373  05DB  3EA0               	addlw	_ResultQue& (0+255)
 12374  05DC  0086               	movwf	6
 12375  05DD  3001               	movlw	1	; select bank3/4
 12376  05DE  0087               	movwf	7
 12377  05DF  0023               	movlb	3	; select bank3
 12378  05E0  0819               	movf	25,w	;volatile
 12379  05E1  0081               	movwf	1
 12380                           
 12381                           ;klondike.c: 205: ResultQC = (ResultQC+1) & (2*4-1);
 12382  05E2  0022               	movlb	2	; select bank2
 12383  05E3  3007               	movlw	7
 12384  05E4  0ACC               	incf	_ResultQC^(0+256),f
 12385  05E5  05CC               	andwf	_ResultQC^(0+256),f
 12386                           
 12387                           ;klondike.c: 207: if(RCSTAbits.OERR) {
 12388  05E6  0023               	movlb	3	; select bank3
 12389  05E7  1C9D               	btfss	29,1	;volatile
 12390  05E8  2DEE               	goto	i1l7936
 12391                           
 12392                           ;klondike.c: 208: Status.ErrorCount++;
 12393  05E9  0ADC               	incf	(_Status^(0+384)+9),f	;volatile
 12394  05EA  1903               	skipnz
 12395  05EB  0ADD               	incf	((_Status+1)^(0+384)+9),f	;volatile
 12396                           
 12397                           ;klondike.c: 209: RCSTAbits.CREN = 0;
 12398  05EC  121D               	bcf	29,4	;volatile
 12399                           
 12400                           ;klondike.c: 210: RCSTAbits.CREN = 1;
 12401  05ED  161D               	bsf	29,4	;volatile
 12402  05EE                     i1l7936:	
 12403                           
 12404                           ;klondike.c: 211: }
 12405                           ;klondike.c: 213: if((ResultQC & 3) == 0) {
 12406  05EE  0022               	movlb	2	; select bank2
 12407  05EF  084C               	movf	_ResultQC^(0+256),w
 12408  05F0  3903               	andlw	3
 12409  05F1  1D03               	btfss	3,2
 12410  05F2  2E29               	goto	i1l7958
 12411                           
 12412                           ;klondike.c: 214: BYTE buf[7];
 12413                           ;klondike.c: 215: buf[0] = '=';
 12414  05F3  303D               	movlw	61
 12415  05F4  0020               	movlb	0	; select bank0
 12416  05F5  00E0               	movwf	ResultRx@buf
 12417                           
 12418                           ;klondike.c: 216: buf[1] = SlaveAddress;
 12419  05F6  0022               	movlb	2	; select bank2
 12420  05F7  084D               	movf	_SlaveAddress^(0+256),w
 12421  05F8  0020               	movlb	0	; select bank0
 12422  05F9  00E1               	movwf	ResultRx@buf+1
 12423                           
 12424                           ;klondike.c: 217: buf[2] = WorkQue[WorkNow].WorkID;
 12425  05FA  0022               	movlb	2	; select bank2
 12426  05FB  0855               	movf	_WorkNow^(0+256),w
 12427  05FC  00F0               	movwf	?i1___wmul
 12428  05FD  302D               	movlw	45
 12429  05FE  01F1               	clrf	?i1___wmul+1
 12430  05FF  00F2               	movwf	?i1___wmul+2
 12431  0600  01F3               	clrf	?i1___wmul+3
 12432  0601  262B  3185         	fcall	i1___wmul
 12433  0603  303C               	movlw	60
 12434  0604  00FA               	movwf	??_ResultRx
 12435  0605  3023               	movlw	35
 12436  0606  00FB               	movwf	??_ResultRx+1
 12437  0607  0870               	movf	?i1___wmul,w
 12438  0608  077A               	addwf	??_ResultRx,w
 12439  0609  0086               	movwf	6
 12440  060A  0871               	movf	?i1___wmul+1,w
 12441  060B  3D7B               	addwfc	??_ResultRx+1,w
 12442  060C  0087               	movwf	7
 12443  060D  0801               	movf	1,w
 12444  060E  0020               	movlb	0	; select bank0
 12445  060F  00E2               	movwf	ResultRx@buf+2
 12446                           
 12447                           ;klondike.c: 218: buf[3] = ResultQue[Rw++];
 12448  0610  0867               	movf	ResultRx@Rw,w
 12449  0611  3EA0               	addlw	_ResultQue& (0+255)
 12450  0612  0086               	movwf	6
 12451  0613  3001               	movlw	1	; select bank3/4
 12452  0614  0087               	movwf	7
 12453  0615  0801               	movf	1,w
 12454  0616  00E3               	movwf	ResultRx@buf+3
 12455                           
 12456                           ;klondike.c: 219: buf[4] = ResultQue[Rw++];
 12457  0617  2731  3185         	fcall	PL20	;call to abstracted procedure
 12458  0619  00E4               	movwf	ResultRx@buf+4
 12459                           
 12460                           ;klondike.c: 220: buf[5] = ResultQue[Rw++];
 12461  061A  2731  3185         	fcall	PL20	;call to abstracted procedure
 12462  061C  00E5               	movwf	ResultRx@buf+5
 12463                           
 12464                           ;klondike.c: 221: buf[6] = ResultQue[Rw];
 12465  061D  2731  3185         	fcall	PL20	;call to abstracted procedure
 12466  061F  00E6               	movwf	ResultRx@buf+6
 12467                           
 12468                           ;klondike.c: 223: SendCmdReply(buf, buf+2, sizeof(DWORD));
 12469  0620  3060               	movlw	ResultRx@buf& (0+255)
 12470  0621  00F2               	movwf	?i1_SendCmdReply
 12471  0622  3062               	movlw	(ResultRx@buf+2)& (0+255)
 12472  0623  01F3               	clrf	?i1_SendCmdReply+1
 12473  0624  00F4               	movwf	?i1_SendCmdReply+2
 12474  0625  3004               	movlw	4
 12475  0626  01F5               	clrf	?i1_SendCmdReply+3
 12476  0627  00F6               	movwf	?i1_SendCmdReply+4
 12477  0628  26E1               	fcall	i1_SendCmdReply
 12478  0629                     i1l7958:	
 12479                           
 12480                           ;klondike.c: 224: }
 12481                           ;klondike.c: 225: GIE = 1;
 12482  0629  178B               	bsf	11,7	;volatile
 12483  062A  0008               	return
 12484  062B                     __end_of_ResultRx:	
 12485  062B                     __ptext2508:	
 12486 ;; *************** function i1___wmul *****************
 12487 ;; Defined at:
 12488 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  __wmul          2    0[COMMON] unsigned int 
 12491 ;;  __wmul          2    2[COMMON] unsigned int 
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;  __wmul          2    4[COMMON] unsigned int 
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  2    0[COMMON] unsigned int 
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0
 12498 ;; Tracked objects:
 12499 ;;		On entry : 1F/2
 12500 ;;		On exit  : 1F/2
 12501 ;;		Unchanged: FFFE0/0
 12502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12503 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;Total ram usage:        6 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; This function calls:
 12510 ;;		Nothing
 12511 ;; This function is called by:
 12512 ;;		_ResultRx
 12513 ;; This function uses a non-reentrant model
 12514 ;;
 12515                           
 12516                           
 12517                           ;psect for function i1___wmul
 12518  062B                     i1___wmul:	
 12519                           
 12520                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 12521  062B  01F4               	clrf	i1___wmul@product
 12522  062C  01F5               	clrf	i1___wmul@product+1
 12523  062D                     i1l5452:	
 12524  062D  1C70               	btfss	i1___wmul@multiplier,0
 12525  062E  2E33               	goto	i1l5456
 12526  062F  0872               	movf	i1___wmul@multiplicand,w
 12527  0630  07F4               	addwf	i1___wmul@product,f
 12528  0631  0873               	movf	i1___wmul@multiplicand+1,w
 12529  0632  3DF5               	addwfc	i1___wmul@product+1,f
 12530  0633                     i1l5456:	
 12531  0633  35F2               	lslf	i1___wmul@multiplicand,f
 12532  0634  0DF3               	rlf	i1___wmul@multiplicand+1,f
 12533  0635  36F1               	lsrf	i1___wmul@multiplier+1,f
 12534  0636  0CF0               	rrf	i1___wmul@multiplier,f
 12535  0637  0871               	movf	i1___wmul@multiplier+1,w
 12536  0638  0470               	iorwf	i1___wmul@multiplier,w
 12537  0639  1D03               	skipz
 12538  063A  2E2D               	goto	i1l5452
 12539  063B  0875               	movf	i1___wmul@product+1,w
 12540  063C  00F1               	movwf	?i1___wmul+1
 12541  063D  0874               	movf	i1___wmul@product,w
 12542  063E  00F0               	movwf	?i1___wmul
 12543  063F  0008               	return
 12544  0640                     __end_ofi1___wmul:	
 12545  0640                     __ptext2485:	
 12546 ;; *************** function _I2CRead *****************
 12547 ;; Defined at:
 12548 ;;		line 66 in file "i2c.c"
 12549 ;; Parameters:    Size  Location     Type
 12550 ;;		None
 12551 ;; Auto vars:     Size  Location     Type
 12552 ;;		None
 12553 ;; Return value:  Size  Location     Type
 12554 ;;		None               void
 12555 ;; Registers used:
 12556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12557 ;; Tracked objects:
 12558 ;;		On entry : 1F/0
 12559 ;;		On exit  : 19/0
 12560 ;;		Unchanged: FFFE0/0
 12561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;Total ram usage:        1 bytes
 12567 ;; Hardware stack levels used:    1
 12568 ;; Hardware stack levels required when called:    2
 12569 ;; This function calls:
 12570 ;;		i1_SendCmdReply
 12571 ;; This function is called by:
 12572 ;;		_ISRCode
 12573 ;; This function uses a non-reentrant model
 12574 ;;
 12575                           
 12576                           
 12577                           ;psect for function _I2CRead
 12578  0640                     _I2CRead:	
 12579                           
 12580                           ;i2c.c: 67: if(SSPSTATbits.P)
 12581                           
 12582                           ; Regs used in _I2CRead: [wreg-status,0+pclath+cstack]
 12583  0640  0024               	movlb	4	; select bank4
 12584  0641  1E14               	btfss	20,4	;volatile
 12585  0642  2ED1               	goto	i1l7908
 12586                           
 12587                           ;i2c.c: 68: I2CState.Next = 0;
 12588  0643  30E0               	movlw	-32
 12589  0644  0022               	movlb	2	; select bank2
 12590  0645  05E8               	andwf	_I2CState^(0+256),f
 12591  0646  2ED1               	goto	i1l7908
 12592  0647                     i1l7838:	
 12593  0647  0024               	movlb	4	; select bank4
 12594  0648  0191               	clrf	17	;volatile
 12595  0649  0022               	movlb	2	; select bank2
 12596  064A  2727               	fcall	PL2	;call to abstracted procedure
 12597  064B  01E0               	clrf	_ptr^(0+256)
 12598  064C  0008               	return
 12599  064D                     i1l619:	
 12600                           ;i2c.c: 72: case 1+1:
 12601                           
 12602                           
 12603                           ;i2c.c: 73: if(SSPCON2bits.ACKSTAT)
 12604  064D  0024               	movlb	4	; select bank4
 12605  064E  1F16               	btfss	22,6	;volatile
 12606  064F  2E52               	goto	i1l7846
 12607  0650                     i1l7844:	
 12608                           
 12609                           ;i2c.c: 74: { SSPCON2bits.PEN = 1; break; }
 12610  0650  1516               	bsf	22,2	;volatile
 12611  0651  0008               	return
 12612  0652                     i1l7846:	
 12613                           
 12614                           ;i2c.c: 75: SSPBUF = I2CCmd; I2CState.Next++; break;
 12615  0652  0022               	movlb	2	; select bank2
 12616  0653  0849               	movf	_I2CCmd^(0+256),w
 12617  0654                     L23:	
 12618  0654  0024               	movlb	4	; select bank4
 12619  0655  0091               	movwf	17	;volatile
 12620  0656                     i1l7848:	
 12621  0656  0022               	movlb	2	; select bank2
 12622  0657  2727               	fcall	PL2	;call to abstracted procedure
 12623  0658  0008               	return
 12624  0659                     i1l621:	
 12625                           ;i2c.c: 76: case 1+2:
 12626                           
 12627                           
 12628                           ;i2c.c: 77: if(SSPCON2bits.ACKSTAT)
 12629  0659  0024               	movlb	4	; select bank4
 12630  065A  1B16               	btfsc	22,6	;volatile
 12631  065B  2E50               	goto	i1l7844
 12632                           
 12633                           ;i2c.c: 79: I2CState.Next++;
 12634  065C  0022               	movlb	2	; select bank2
 12635  065D  2727  3185         	fcall	PL2	;call to abstracted procedure
 12636  065F                     i1l7854:	
 12637                           
 12638                           ;i2c.c: 81: SSPCON2bits.RCEN = 1; I2CState.Next++; break;
 12639  065F  0024               	movlb	4	; select bank4
 12640  0660  1596               	bsf	22,3	;volatile
 12641  0661  0022               	movlb	2	; select bank2
 12642  0662  2727               	fcall	PL2	;call to abstracted procedure
 12643  0663  0008               	return
 12644  0664                     i1l7856:	
 12645                           
 12646                           ;i2c.c: 83: if(I2CCount == 0) {
 12647  0664  08CA               	movf	_I2CCount^(0+256),f
 12648  0665  1D03               	skipz
 12649  0666  2E7B               	goto	i1l7872
 12650                           
 12651                           ;i2c.c: 84: if(SSPBUF == '=') I2CCount = sizeof(DWORD)+3;
 12652  0667  0024               	movlb	4	; select bank4
 12653  0668  0811               	movf	17,w
 12654  0669  3A3D               	xorlw	61
 12655  066A  1D03               	skipz
 12656  066B  2E6E               	goto	i1l7862
 12657  066C                     i1l7860:	
 12658  066C  3007               	movlw	7
 12659  066D  2E79               	goto	L22
 12660  066E                     i1l7862:	
 12661                           
 12662                           ;i2c.c: 85: else if (SSPBUF == 'I') I2CCount = sizeof(IDENTITY)+2;
 12663  066E  0811               	movf	17,w
 12664  066F  3A49               	xorlw	73
 12665  0670  1D03               	skipz
 12666  0671  2E74               	goto	i1l7866
 12667  0672  300F               	movlw	15
 12668  0673  2E79               	goto	L22
 12669  0674                     i1l7866:	
 12670                           
 12671                           ;i2c.c: 86: else if (SSPBUF == 'C') I2CCount = sizeof(WORKCFG)+2;
 12672  0674  0811               	movf	17,w
 12673  0675  3A43               	xorlw	67
 12674  0676  1903               	btfsc	3,2
 12675  0677  2E6C               	goto	i1l7860
 12676                           
 12677                           ;i2c.c: 87: else I2CCount = sizeof(WORKSTATUS)+2;
 12678  0678  300D               	movlw	13
 12679  0679                     L22:	
 12680  0679  0022               	movlb	2	; select bank2
 12681  067A  00CA               	movwf	_I2CCount^(0+256)
 12682  067B                     i1l7872:	
 12683                           
 12684                           ;i2c.c: 88: }
 12685                           ;i2c.c: 89: buf[ptr++] = SSPBUF;
 12686  067B  0860               	movf	_ptr^(0+256),w
 12687  067C  3E60               	addlw	_buf& (0+255)
 12688  067D  0086               	movwf	6
 12689  067E  3002               	movlw	2	; select bank4/5
 12690  067F  0087               	movwf	7
 12691  0680  0024               	movlb	4	; select bank4
 12692  0681  0811               	movf	17,w	;volatile
 12693  0682  0081               	movwf	1
 12694  0683  0022               	movlb	2	; select bank2
 12695  0684  0AE0               	incf	_ptr^(0+256),f
 12696                           
 12697                           ;i2c.c: 90: SSPCON2bits.ACKDT = (I2CCount-- == 1);
 12698  0685  034A               	decf	_I2CCount^(0+256),w
 12699  0686  3000               	movlw	0
 12700  0687  1903               	skipnz
 12701  0688  3001               	movlw	1
 12702  0689  00FA               	movwf	??_I2CRead
 12703  068A  0EFA               	swapf	??_I2CRead,f
 12704  068B  0DFA               	rlf	??_I2CRead,f
 12705  068C  0024               	movlb	4	; select bank4
 12706  068D  0816               	movf	22,w	;volatile
 12707  068E  067A               	xorwf	??_I2CRead,w
 12708  068F  39DF               	andlw	-33
 12709  0690  067A               	xorwf	??_I2CRead,w
 12710  0691  0096               	movwf	22	;volatile
 12711  0692  0022               	movlb	2	; select bank2
 12712  0693  03CA               	decf	_I2CCount^(0+256),f
 12713                           
 12714                           ;i2c.c: 91: SSPCON2bits.ACKEN = 1;
 12715  0694  0024               	movlb	4	; select bank4
 12716  0695  1616               	bsf	22,4	;volatile
 12717                           
 12718                           ;i2c.c: 92: if(I2CCount > 0)
 12719  0696  0022               	movlb	2	; select bank2
 12720  0697  084A               	movf	_I2CCount^(0+256),w
 12721  0698  1903               	btfsc	3,2
 12722  0699  2EA4               	goto	i1l7886
 12723                           
 12724                           ;i2c.c: 93: I2CState.Next--;
 12725  069A  0868               	movf	_I2CState^(0+256),w
 12726  069B  391F               	andlw	31
 12727  069C  00FA               	movwf	??_I2CRead
 12728  069D  03FA               	decf	??_I2CRead,f
 12729  069E  0868               	movf	_I2CState^(0+256),w
 12730  069F  067A               	xorwf	??_I2CRead,w
 12731  06A0  39E0               	andlw	-32
 12732  06A1  067A               	xorwf	??_I2CRead,w
 12733  06A2  00E8               	movwf	_I2CState^(0+256)
 12734  06A3  0008               	return
 12735  06A4                     i1l7886:	
 12736                           
 12737                           ;i2c.c: 94: else if(I2CCmd == 'P')
 12738  06A4  0849               	movf	_I2CCmd^(0+256),w
 12739  06A5  3A50               	xorlw	80
 12740  06A6  1D03               	skipz
 12741  06A7  2E56               	goto	i1l7848
 12742                           
 12743                           ;i2c.c: 95: I2CState.Next = 1+8;
 12744  06A8  0868               	movf	_I2CState^(0+256),w
 12745  06A9  39E0               	andlw	-32
 12746  06AA  3809               	iorlw	9
 12747  06AB  00E8               	movwf	_I2CState^(0+256)
 12748  06AC  0008               	return
 12749  06AD                     i1l7892:	
 12750  06AD  3002               	movlw	2
 12751  06AE  3ED3               	addlw	_Status& (0+255)
 12752  06AF  0086               	movwf	6
 12753  06B0  3001               	movlw	1	; select bank3/4
 12754  06B1  0087               	movwf	7
 12755  06B2  3F40               	moviw [0]fsr1
 12756  06B3  3E01               	addlw	1
 12757  06B4  3FC0               	movwi [0]fsr1
 12758  06B5  2E54               	goto	L23
 12759  06B6                     i1l637:	
 12760                           ;i2c.c: 100: case 1+6: SSPCON2bits.PEN = 1; I2CState.Next++; break;
 12761                           
 12762  06B6  0024               	movlb	4	; select bank4
 12763  06B7  1516               	bsf	22,2	;volatile
 12764  06B8  2E56               	goto	i1l7848
 12765  06B9                     i1l638:	
 12766                           ;i2c.c: 101: case 1+7: SSPCON2bits.SEN = 1; I2CState.Next = 1; break;
 12767                           
 12768  06B9  0024               	movlb	4	; select bank4
 12769  06BA  1416               	bsf	22,0	;volatile
 12770  06BB  0022               	movlb	2	; select bank2
 12771  06BC  0868               	movf	_I2CState^(0+256),w
 12772  06BD  39E0               	andlw	-32
 12773  06BE  3801               	iorlw	1
 12774  06BF  00E8               	movwf	_I2CState^(0+256)
 12775  06C0  0008               	return
 12776  06C1                     i1l7902:	
 12777  06C1  3060               	movlw	_buf& (0+255)
 12778  06C2  00F2               	movwf	?i1_SendCmdReply
 12779  06C3  3002               	movlw	2
 12780  06C4  00F3               	movwf	?i1_SendCmdReply+1
 12781  06C5  3062               	movlw	(_buf+2)& (0+255)
 12782  06C6  00F4               	movwf	?i1_SendCmdReply+2
 12783  06C7  3002               	movlw	2
 12784  06C8  00F5               	movwf	?i1_SendCmdReply+3
 12785  06C9  0860               	movf	_ptr^(0+256),w
 12786  06CA  3EFD               	addlw	253
 12787  06CB  00F6               	movwf	?i1_SendCmdReply+4
 12788  06CC  26E1               	fcall	i1_SendCmdReply
 12789  06CD  30E0               	movlw	-32
 12790  06CE  0022               	movlb	2	; select bank2
 12791  06CF  05E8               	andwf	_I2CState^(0+256),f
 12792  06D0  0008               	return
 12793  06D1                     i1l7908:	
 12794  06D1  0022               	movlb	2	; select bank2
 12795  06D2  0868               	movf	_I2CState^(0+256),w
 12796  06D3  391F               	andlw	31
 12797                           
 12798                           ; Switch size 1, requested type "space"
 12799                           ; Number of cases is 10, Range of values is 1 to 10
 12800                           ; switch strategies available:
 12801                           ; Name         Instructions Cycles
 12802                           ; direct_byte           29     9 (fixed)
 12803                           ; simple_byte           31    16 (average)
 12804                           ; jumptable            263     9 (fixed)
 12805                           ;	Chosen strategy is direct_byte
 12806  06D4  3EFF               	addlw	-1
 12807  06D5  1C03               	skipc
 12808  06D6  0008               	return
 12809  06D7  0084               	movwf	4
 12810  06D8  300A               	movlw	10
 12811  06D9  0204               	subwf	4,w
 12812  06DA  1803               	skipnc
 12813  06DB  0008               	return
 12814  06DC  3191               	movlp	high i1S8496
 12815  06DD  3504               	lslf	4,w
 12816  06DE  3E80               	addlw	low i1S8496
 12817  06DF  0082               	movwf	2
 12818  06E0  0008               	return
 12819  06E1                     __end_of_I2CRead:	
 12820  06E1                     __ptext2506:	
 12821 ;; *************** function i1_SendCmdReply *****************
 12822 ;; Defined at:
 12823 ;;		line 186 in file "main.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;  SendCmdReply    2    2[COMMON] PTR unsigned char 
 12826 ;;		 -> ResultRx@buf(7), USB_Out_Buffer(64), buf(16), 
 12827 ;;  SendCmdReply    2    4[COMMON] PTR unsigned char 
 12828 ;;		 -> ResultRx@buf(7), Cfg(5), ID(13), Status(11), 
 12829 ;;		 -> buf(16), I2CState(1), PrecalcHashes(24), 
 12830 ;;  SendCmdReply    1    6[COMMON] unsigned char 
 12831 ;; Auto vars:     Size  Location     Type
 12832 ;;  SendCmdReply    1    9[COMMON] unsigned char 
 12833 ;; Return value:  Size  Location     Type
 12834 ;;		None               void
 12835 ;; Registers used:
 12836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12837 ;; Tracked objects:
 12838 ;;		On entry : 1D/2
 12839 ;;		On exit  : 1C/0
 12840 ;;		Unchanged: FFFE0/0
 12841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12842 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;Total ram usage:        8 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; Hardware stack levels required when called:    1
 12849 ;; This function calls:
 12850 ;;		i1_putUSBUSART
 12851 ;; This function is called by:
 12852 ;;		_I2CRead
 12853 ;;		_ResultRx
 12854 ;; This function uses a non-reentrant model
 12855 ;;
 12856                           
 12857                           
 12858                           ;psect for function i1_SendCmdReply
 12859  06E1                     i1_SendCmdReply:	
 12860                           
 12861                           ;main.c: 187: USB_In_Buffer[0] = cmd[0];
 12862                           
 12863                           ; Regs used in i1_SendCmdReply: [wreg-status,0+pclath+cstack]
 12864  06E1  0872               	movf	i1SendCmdReply@cmd,w
 12865  06E2  0086               	movwf	6
 12866  06E3  0873               	movf	i1SendCmdReply@cmd+1,w
 12867  06E4  0087               	movwf	7
 12868  06E5  0801               	movf	1,w
 12869  06E6  0027               	movlb	7	; select bank7
 12870  06E7  00A0               	movwf	_USB_In_Buffer^(0+896)
 12871                           
 12872                           ;main.c: 188: USB_In_Buffer[1] = SlaveAddress;
 12873  06E8  0022               	movlb	2	; select bank2
 12874  06E9  084D               	movf	_SlaveAddress^(0+256),w
 12875  06EA  0027               	movlb	7	; select bank7
 12876  06EB  00A1               	movwf	(_USB_In_Buffer^(0+896)+1)
 12877                           
 12878                           ;main.c: 189: for(BYTE n=0; n < count; n++)
 12879  06EC  01F9               	clrf	i1SendCmdReply@n
 12880  06ED                     i1l7750:	
 12881  06ED  0876               	movf	i1SendCmdReply@count,w
 12882  06EE  0279               	subwf	i1SendCmdReply@n,w
 12883  06EF  1803               	btfsc	3,0
 12884  06F0  2F05               	goto	i1l7752
 12885                           
 12886                           ;main.c: 190: USB_In_Buffer[n+2] = data[n];
 12887  06F1  0879               	movf	i1SendCmdReply@n,w
 12888  06F2  3EA2               	addlw	(_USB_In_Buffer+2)& (0+255)
 12889  06F3  0086               	movwf	6
 12890  06F4  3003               	movlw	3	; select bank7/8
 12891  06F5  0087               	movwf	7
 12892  06F6  0875               	movf	i1SendCmdReply@data+1,w
 12893  06F7  00F8               	movwf	??i1_SendCmdReply+1
 12894  06F8  0874               	movf	i1SendCmdReply@data,w
 12895  06F9  00F7               	movwf	??i1_SendCmdReply
 12896  06FA  0879               	movf	i1SendCmdReply@n,w
 12897  06FB  0777               	addwf	??i1_SendCmdReply,w
 12898  06FC  0084               	movwf	4
 12899  06FD  0878               	movf	??i1_SendCmdReply+1,w
 12900  06FE  1803               	skipnc
 12901  06FF  0A78               	incf	??i1_SendCmdReply+1,w
 12902  0700  0085               	movwf	5
 12903  0701  0800               	movf	0,w	;code access
 12904  0702  0081               	movwf	1
 12905  0703  0AF9               	incf	i1SendCmdReply@n,f
 12906  0704  2EED               	goto	i1l7750
 12907  0705                     i1l7752:	
 12908                           
 12909                           ;main.c: 192: if(USBDeviceState == DETACHED_STATE) {
 12910  0705  0022               	movlb	2	; select bank2
 12911  0706  08D1               	movf	_USBDeviceState^(0+256),f
 12912  0707  1D03               	skipz
 12913  0708  2F0D               	goto	i1l7756
 12914                           
 12915                           ;main.c: 193: I2CCount = count+2;
 12916  0709  0876               	movf	i1SendCmdReply@count,w
 12917  070A  3E02               	addlw	2
 12918  070B  00CA               	movwf	_I2CCount^(0+256)
 12919                           
 12920                           ;main.c: 194: }
 12921  070C  0008               	return
 12922  070D                     i1l7756:	
 12923                           
 12924                           ;main.c: 195: else
 12925                           ;main.c: 196: putUSBUSART(USB_In_Buffer, count+2);
 12926  070D  0876               	movf	i1SendCmdReply@count,w
 12927  070E  3E02               	addlw	2
 12928  070F  00F0               	movwf	?i1_putUSBUSART
 12929  0710  30A0               	movlw	_USB_In_Buffer& (0+255)
 12930  0711  2713               	fcall	i1_putUSBUSART
 12931  0712  0008               	return
 12932  0713                     __end_ofi1_SendCmdReply:	
 12933  0713                     __ptext2507:	
 12934 ;; *************** function i1_putUSBUSART *****************
 12935 ;; Defined at:
 12936 ;;		line 676 in file "../USB/CDC Device Driver/usb_function_cdc.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;  putUSBUSART     1    wreg     PTR unsigned char 
 12939 ;;		 -> USB_In_Buffer(64), 
 12940 ;;  putUSBUSART     1    0[COMMON] unsigned char 
 12941 ;; Auto vars:     Size  Location     Type
 12942 ;;  putUSBUSART     1    1[COMMON] PTR unsigned char 
 12943 ;;		 -> USB_In_Buffer(64), 
 12944 ;; Return value:  Size  Location     Type
 12945 ;;		None               void
 12946 ;; Registers used:
 12947 ;;		wreg, status,2, status,0
 12948 ;; Tracked objects:
 12949 ;;		On entry : 1F/2
 12950 ;;		On exit  : 1F/1
 12951 ;;		Unchanged: FFFE0/0
 12952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12953 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;Total ram usage:        2 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; This function calls:
 12960 ;;		Nothing
 12961 ;; This function is called by:
 12962 ;;		i1_SendCmdReply
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966                           
 12967                           ;psect for function i1_putUSBUSART
 12968  0713                     i1_putUSBUSART:	
 12969                           
 12970                           ; Regs used in i1_putUSBUSART: [wreg+status,2+status,0]
 12971                           ;i1putUSBUSART@data stored from wreg
 12972  0713  00F1               	movwf	i1putUSBUSART@data
 12973                           
 12974                           ;usb_function_cdc.c: 700: {PIE2bits.USBIE = 0;};
 12975  0714  0021               	movlb	1	; select bank1
 12976  0715  1112               	bcf	18,2	;volatile
 12977                           
 12978                           ;usb_function_cdc.c: 701: if(cdc_trf_state == 0)
 12979  0716  0022               	movlb	2	; select bank2
 12980  0717  08D8               	movf	_cdc_trf_state^(0+256),f
 12981  0718  1D03               	skipz
 12982  0719  2F24               	goto	i1l7602
 12983                           
 12984                           ;usb_function_cdc.c: 702: {
 12985                           ;usb_function_cdc.c: 703: { pCDCSrc.bRam = (BYTE*)data; cdc_tx_len = length; cdc_mem_typ
      +                          e = 0x01; cdc_trf_state = 1; };
 12986  071A  0871               	movf	i1putUSBUSART@data,w
 12987  071B  0023               	movlb	3	; select bank3
 12988  071C  00AA               	movwf	_pCDCSrc^(0+384)
 12989  071D  0870               	movf	i1putUSBUSART@length,w
 12990  071E  0022               	movlb	2	; select bank2
 12991  071F  00D9               	movwf	_cdc_tx_len^(0+256)
 12992  0720  01D6               	clrf	_cdc_mem_type^(0+256)
 12993  0721  0AD6               	incf	_cdc_mem_type^(0+256),f
 12994  0722  01D8               	clrf	_cdc_trf_state^(0+256)
 12995  0723  0AD8               	incf	_cdc_trf_state^(0+256),f
 12996  0724                     i1l7602:	
 12997                           
 12998                           ;usb_function_cdc.c: 704: }
 12999                           ;usb_function_cdc.c: 705: {PIE2bits.USBIE = 1;};
 13000  0724  0021               	movlb	1	; select bank1
 13001  0725  1512               	bsf	18,2	;volatile
 13002  0726  0008               	return
 13003  0727                     __end_ofi1_putUSBUSART:	
 13004  0727                     PL2:	
 13005  0727  0868               	movf	_I2CState^(0+256),w
 13006  0728  391F               	andlw	31
 13007  0729  00FA               	movwf	??_I2CRead
 13008  072A  0AFA               	incf	??_I2CRead,f
 13009  072B  0868               	movf	_I2CState^(0+256),w
 13010  072C  067A               	xorwf	??_I2CRead,w
 13011  072D  39E0               	andlw	-32
 13012  072E  067A               	xorwf	??_I2CRead,w
 13013  072F  00E8               	movwf	_I2CState^(0+256)
 13014  0730  0008               	return
 13015  0731                     __end_ofPL2:	
 13016  0731                     PL20:	
 13017  0731  0AE7               	incf	ResultRx@Rw,f
 13018  0732  0867               	movf	ResultRx@Rw,w
 13019  0733  3EA0               	addlw	_ResultQue& (0+255)
 13020  0734  0086               	movwf	6
 13021  0735  0801               	movf	1,w
 13022  0736  0008               	return
 13023  0737                     __end_ofPL20:	
 13024                           
 13025                           	psect	text2492
 13026  07F1                     __ptext2492:	
 13027 ;; *************** function _UpdateFanSpeed *****************
 13028 ;; Defined at:
 13029 ;;		line 229 in file "klondike.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;		None
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;		None
 13034 ;; Return value:  Size  Location     Type
 13035 ;;		None               void
 13036 ;; Registers used:
 13037 ;;		wreg
 13038 ;; Tracked objects:
 13039 ;;		On entry : 1F/0
 13040 ;;		On exit  : 1F/C
 13041 ;;		Unchanged: FFFE0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        0 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; This function calls:
 13050 ;;		Nothing
 13051 ;; This function is called by:
 13052 ;;		_ISRCode
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _UpdateFanSpeed
 13058  07F1                     _UpdateFanSpeed:	
 13059                           
 13060                           ;klondike.c: 230: TMR1GIF = TMR1IF = 0;
 13061                           
 13062                           ; Regs used in _UpdateFanSpeed: [wreg]
 13063  07F1  1011               	bcf	17,0	;volatile
 13064  07F2  1391               	bcf	17,7	;volatile
 13065                           
 13066                           ;klondike.c: 231: IOCAF3 = 0;
 13067  07F3  0027               	movlb	7	; select bank7
 13068  07F4  1193               	bcf	19,3	;volatile
 13069                           
 13070                           ;klondike.c: 232: TMR1ON = 0;
 13071  07F5  0020               	movlb	0	; select bank0
 13072  07F6  1018               	bcf	24,0	;volatile
 13073                           
 13074                           ;klondike.c: 233: Status.FanSpeed = TMR1H;
 13075  07F7  0817               	movf	23,w	;volatile
 13076  07F8  0023               	movlb	3	; select bank3
 13077  07F9  00D9               	movwf	(_Status^(0+384)+6)	;volatile
 13078                           
 13079                           ;klondike.c: 234: LATCbits.LATC5 = 0;
 13080  07FA  0022               	movlb	2	; select bank2
 13081  07FB  128E               	bcf	14,5	;volatile
 13082                           
 13083                           ;klondike.c: 235: PWM1OE=1;
 13084  07FC  002C               	movlb	12	; select bank12
 13085  07FD  1713               	bsf	19,6	;volatile
 13086  07FE  0008               	return
 13087  07FF                     __end_of_UpdateFanSpeed:	
 13088                           
 13089                           	psect	text2498
 13090  1444                     __ptext2498:	
 13091 ;; *************** function _USBCheckCDCRequest *****************
 13092 ;; Defined at:
 13093 ;;		line 267 in file "../USB/CDC Device Driver/usb_function_cdc.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;		None
 13098 ;; Return value:  Size  Location     Type
 13099 ;;		None               void
 13100 ;; Registers used:
 13101 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13102 ;; Tracked objects:
 13103 ;;		On entry : 1F/0
 13104 ;;		On exit  : 1D/0
 13105 ;;		Unchanged: FFFE0/0
 13106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;Total ram usage:        0 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; This function calls:
 13114 ;;		Nothing
 13115 ;; This function is called by:
 13116 ;;		_USBCBCheckOtherReq
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           
 13121                           ;psect for function _USBCheckCDCRequest
 13122  1444                     _USBCheckCDCRequest:	
 13123  1444                     i1l6688:	
 13124                           ; Regs used in _USBCheckCDCRequest: [wreg-fsr0h+status,2+status,0]
 13125                           
 13126                           
 13127                           ;usb_function_cdc.c: 271: if(SetupPkt.Recipient != (0x01)) return;
 13128  1444  0850               	movf	80,w	;volatile
 13129  1445  391F               	andlw	31
 13130  1446  3A01               	xorlw	1
 13131  1447  1D03               	btfss	3,2
 13132  1448  0008               	return
 13133                           
 13134                           ;usb_function_cdc.c: 276: if(SetupPkt.RequestType != (0x20>>5)) return;
 13135  1449  0E50               	swapf	80,w	;volatile
 13136  144A  0C89               	rrf	9,f
 13137  144B  3903               	andlw	3
 13138  144C  3A01               	xorlw	1
 13139  144D  1D03               	btfss	3,2
 13140  144E  0008               	return
 13141                           
 13142                           ;usb_function_cdc.c: 282: if((SetupPkt.bIntfID != 0x0)&&
 13143                           ;usb_function_cdc.c: 283: (SetupPkt.bIntfID != 0x01)) return;
 13144  144F  0854               	movf	84,w	;volatile
 13145  1450  1903               	btfsc	3,2
 13146  1451  2C7C               	goto	i1l6734
 13147  1452  0354               	decf	84,w	;volatile
 13148  1453  1D03               	btfss	3,2
 13149  1454  0008               	return
 13150  1455  2C7C               	goto	i1l6734
 13151  1456                     i1l6702:	
 13152                           
 13153                           ;usb_function_cdc.c: 290: inPipes[0].pSrc.bRam = (BYTE*)&dummy_encapsulated_cmd_response;
 13154  1456  248E               	fcall	PL28	;call to abstracted procedure
 13155                           
 13156                           ;usb_function_cdc.c: 291: inPipes[0].wCount.Val = 0x08;
 13157  1457  3008               	movlw	8
 13158  1458  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 13159  1459  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 13160                           
 13161                           ;usb_function_cdc.c: 292: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13162  145A  1465               	bsf	(_inPipes^(0+256)+2),0	;volatile
 13163  145B                     i1l6708:	
 13164                           
 13165                           ;usb_function_cdc.c: 293: inPipes[0].info.bits.busy = 1;
 13166  145B  0022               	movlb	2	; select bank2
 13167  145C  17E5               	bsf	(_inPipes^(0+256)+2),7	;volatile
 13168                           
 13169                           ;usb_function_cdc.c: 294: break;
 13170  145D  0008               	return
 13171  145E                     i1l6710:	
 13172                           
 13173                           ;usb_function_cdc.c: 297: inPipes[0].pSrc.bRam = (BYTE*)&dummy_encapsulated_cmd_response;
 13174  145E  248E  3194         	fcall	PL28	;call to abstracted procedure
 13175  1460  2C5B               	goto	i1l6708
 13176  1461                     i1l6714:	
 13177                           
 13178                           ;usb_function_cdc.c: 304: outPipes[0].wCount.Val = SetupPkt.wLength;
 13179  1461  0857               	movf	87,w	;volatile
 13180  1462  0022               	movlb	2	; select bank2
 13181  1463  00B5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13182  1464  0020               	movlb	0	; select bank0
 13183  1465  0856               	movf	86,w	;volatile
 13184  1466  0022               	movlb	2	; select bank2
 13185  1467  00B4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13186                           
 13187                           ;usb_function_cdc.c: 305: outPipes[0].pDst.bRam = (BYTE*)&line_coding._byte[0];
 13188  1468  3020               	movlw	32
 13189  1469  00B1               	movwf	_outPipes^(0+256)	;volatile
 13190  146A  3001               	movlw	1
 13191  146B  00B2               	movwf	(_outPipes+1)^(0+256)	;volatile
 13192                           
 13193                           ;usb_function_cdc.c: 306: outPipes[0].pFunc = (0);
 13194  146C  01B6               	clrf	(_outPipes+5)^(0+256)	;volatile
 13195                           
 13196                           ;usb_function_cdc.c: 307: outPipes[0].info.bits.busy = 1;
 13197  146D  17B3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13198                           
 13199                           ;usb_function_cdc.c: 308: break;
 13200  146E  0008               	return
 13201  146F                     i1l6722:	
 13202                           
 13203                           ;usb_function_cdc.c: 311: { inPipes[0].pSrc.bRam = (BYTE*)&line_coding; inPipes[0].wCoun
      +                          t.Val = 0x07; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 13204  146F  3020               	movlw	32
 13205  1470  0022               	movlb	2	; select bank2
 13206  1471  00E3               	movwf	_inPipes^(0+256)	;volatile
 13207  1472  3001               	movlw	1
 13208  1473  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 13209  1474  3007               	movlw	7
 13210  1475  00E6               	movwf	(_inPipes^(0+256)+3)	;volatile
 13211  1476  01E7               	clrf	((_inPipes+1)^(0+256)+3)	;volatile
 13212  1477  30C1               	movlw	193
 13213  1478  00E5               	movwf	(_inPipes^(0+256)+2)	;volatile
 13214                           
 13215                           ;usb_function_cdc.c: 315: break;
 13216  1479  0008               	return
 13217  147A                     i1l6728:	
 13218                           
 13219                           ;usb_function_cdc.c: 318: control_signal_bitmap._byte = (BYTE)SetupPkt.W_Value.v[0];
 13220  147A  0852               	movf	82,w	;volatile
 13221  147B  2C5B               	goto	i1l6708
 13222  147C                     i1l6734:	
 13223  147C  0851               	movf	81,w	;volatile
 13224                           
 13225                           ; Switch size 1, requested type "space"
 13226                           ; Number of cases is 5, Range of values is 0 to 34
 13227                           ; switch strategies available:
 13228                           ; Name         Instructions Cycles
 13229                           ; simple_byte           16     9 (average)
 13230                           ; direct_byte           76     6 (fixed)
 13231                           ; jumptable            260     6 (fixed)
 13232                           ; rangetable            39     4 (fixed)
 13233                           ; spacedrange           75     6 (fixed)
 13234                           ; locatedrange          35     3 (fixed)
 13235                           ;	Chosen strategy is simple_byte
 13236  147D  3A00               	xorlw	0	; case 0
 13237  147E  1903               	skipnz
 13238  147F  2C56               	goto	i1l6702
 13239  1480  3A01               	xorlw	1	; case 1
 13240  1481  1903               	skipnz
 13241  1482  2C5E               	goto	i1l6710
 13242  1483  3A21               	xorlw	33	; case 32
 13243  1484  1903               	skipnz
 13244  1485  2C61               	goto	i1l6714
 13245  1486  3A01               	xorlw	1	; case 33
 13246  1487  1903               	skipnz
 13247  1488  2C6F               	goto	i1l6722
 13248  1489  3A03               	xorlw	3	; case 34
 13249  148A  1903               	skipnz
 13250  148B  2C7A               	goto	i1l6728
 13251  148C  2C8D               	goto	i1l424
 13252  148D                     i1l424:	
 13253  148D  0008               	return
 13254  148E                     __end_of_USBCheckCDCRequest:	
 13255  148E                     PL28:	
 13256  148E  30C7               	movlw	_dummy_encapsulated_cmd_response& (0+255)
 13257  148F  0022               	movlb	2	; select bank2
 13258  1490  00E3               	movwf	_inPipes^(0+256)	;volatile
 13259  1491  3001               	movlw	1
 13260  1492  00E4               	movwf	(_inPipes+1)^(0+256)	;volatile
 13261  1493  0008               	return
 13262  1494                     __end_ofPL28:	
 13263                           
 13264                           	psect	text2509
 13265  0000                     __ptext2509:	
 13266                           
 13267                           ;psect for function i1___wmul
 13268  007E                     btemp	set	126	;btemp
 13269  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    357
    Data        27
    BSS         284
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            16     16      16
    BANK1            80     79      80
    BANK2            63      4      63
    BANK3            80      0      76
    BANK4            16      0      16
    BANK5            16      0       0
    BANK6            80      0      32
    BANK7            80      0      64
    BANK8            80      0      64
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 48
		 -> USTATcopy(BANK2[1]), USBActiveConfiguration(BANK2[1]), NULL(NULL[0]), BDT(BANK0[48]), 

    memset@p1	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 24
		 -> ResultRx@buf(BANK0[7]), Cfg(BANK3[5]), ID(CODE[13]), Status(BANK3[11]), 
		 -> buf(BANK4[16]), I2CState(BANK2[1]), PrecalcHashes(BANK3[24]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultRx@buf(BANK0[7]), USB_Out_Buffer(BANK8[64]), buf(BANK4[16]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), NULL(NULL[0]), 

    I2CRelay@data	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), TestWork(CODE[45]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    putUSBUSART@data	PTR unsigned char  size(1) Largest target is 64
		 -> USB_In_Buffer(BANK7[64]), 

    getsUSBUSART@buffer	PTR unsigned char  size(1) Largest target is 64
		 -> USB_Out_Buffer(BANK8[64]), 

    CDCDataInHandle	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    CDCDataOutHandle	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pCDCDst.wRom	PTR const unsigned short  size(1) Largest target is 0

    pCDCDst.bRom	PTR const unsigned char  size(1) Largest target is 0

    pCDCDst.wRam	PTR unsigned short  size(1) Largest target is 0

    pCDCDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S1392_POINTER$wRom	PTR const unsigned short  size(1) Largest target is 0

    pCDCSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S1392_POINTER$bRom	PTR const unsigned char  size(1) Largest target is 0

    pCDCSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S1392_POINTER$wRam	PTR unsigned short  size(1) Largest target is 0

    pCDCSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S1392_POINTER$bRam	PTR unsigned char  size(1) Largest target is 0

    pCDCSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USB_SD_Ptr	const PTR const unsigned char [4] size(2) Largest target is 52
		 -> sd003(CODE[52]), sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 67
		 -> configDescriptor1(CODE[67]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK3[2]), BDT(BANK0[48]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 48
		 -> BDT(BANK0[48]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> cdc_data_tx(BANK4[64]), cdc_data_rx(BANK5[64]), NULL(NULL[0]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(1) Largest target is 48
		 -> NULL(NULL[0]), BDT(BANK0[48]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0
		 -> Absolute function(), 

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0
		 -> Absolute function(), 

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _I2CRead->i1_SendCmdReply
    _WorkTick->_CheckFanSpeed
    _ResultRx->i1_SendCmdReply
    _CDCInitEP->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    i1_SendCmdReply->i1_putUSBUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISRCode in BANK0

    _ISRCode->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _ProcessIO->_ProcessCmd
    _getsUSBUSART->_USBTransferOnePacket
    _CDCTxService->_USBTransferOnePacket
    _ProcessCmd->_AsicPushWork
    _SendCmdReply->_putUSBUSART
    _AsicPushWork->_AsicPreCalc
    _UserInit->_DetectAsics
    _DetectAsics->_AsicPreCalc
    _SendAsicData->___wmul
    _AsicPreCalc->_rotate
    _rotate->___bmul

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    _UserInit->_DetectAsics

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   14327
                   _InitializeSystem
                    _USBDeviceAttach
                       _InitI2CSlave
                      _InitI2CMaster
                       _AsicPushWork
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2CSlave                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitI2CMaster                                        0     0      0       0
                          _I2CDetect
 ---------------------------------------------------------------------------------
 (2) _I2CDetect                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0    3662
                           _UserInit
                      _USBDeviceInit
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     396
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            1     1      0    7912
                                             78 BANK1      1     1      0
                         _ProcessCmd
                       _getsUSBUSART
                           _I2CRelay
                       _CDCTxService
 ---------------------------------------------------------------------------------
 (2) _getsUSBUSART                                         5     4      1     573
                                              7 BANK1      5     4      1
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (2) _CDCTxService                                         4     4      0     678
                                              7 BANK1      4     4      0
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (3) _USBTransferOnePacket                                 7     4      3     440
                                              0 BANK1      7     4      3
 ---------------------------------------------------------------------------------
 (2) _I2CRelay                                             2     1      1      93
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           5     5      0    6503
                                             73 BANK1      5     5      0
                             ___wmul
                        _AsicPreCalc
                       _SendCmdReply
                       _AsicPushWork
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                         8     3      5     316
                                              2 BANK1      8     3      5
                        _putUSBUSART
 ---------------------------------------------------------------------------------
 (4) _putUSBUSART                                          2     1      1      62
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         2     2      0    2753
                                             71 BANK1      2     2      0
                             ___wmul
                       _SendAsicData
                        _AsicPreCalc
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0    3266
                     _InitTempSensor
                            _InitFAN
                       _InitWorkTick
                        _DetectAsics
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                         10    10      0    3266
                                             71 BANK1      6     6      0
                                              0 BANK2      4     4      0
                        _AsicPreCalc
                       _SendAsicData
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         3     0      3      93
                                              6 BANK1      3     0      3
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         55    53      2    2524
                                             16 BANK1     55    53      2
                             ___bmul
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              3 BANK1     13     8      5
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               3     2      1     136
                                              0 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     136
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     241
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     445
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISRCode                                              1     1      0   17921
                                             15 BANK0      1     1      0
                           _ResultRx
                           _WorkTick
                     _UpdateFanSpeed
                           _I2CSlave
                            _I2CRead
                           _I2CWrite
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (7) _USBDeviceTasks                                       2     2      0   15362
                                             13 BANK0      2     2      0
                 _USBWakeFromSuspend
                    i1_USBDeviceInit
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (8) _USBWakeFromSuspend                                   0     0      0    1809
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (8) _USBSuspend                                           0     0      0    1809
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (8) _USBStallHandler                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlEPService                                     3     3      0    8771
                                             10 BANK0      3     3      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfSetupHandler                               0     0      0    8335
                 _USBCheckStdRequest
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPServiceComplete                            2     2      0     136
                                              5 COMMON     2     2      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPAllowDataStage                             2     2      0     136
                                              3 COMMON     2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfOutHandler                                 2     2      0     167
                                              6 COMMON     2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (10) _USBCtrlTrfRxService                                 4     4      0     167
                                              2 COMMON     4     4      0
                   Absolute function
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPAllowStatusStage                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfInHandler                                  3     3      0     170
                                              3 COMMON     3     3      0
                _USBCtrlTrfTxService
                   Absolute function
 ---------------------------------------------------------------------------------
 (10) _USBCtrlTrfTxService                                 3     3      0     136
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _USBCheckStdRequest                                  0     0      0    6390
                _USBStdGetDscHandler
                _USBStdSetCfgHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBStdSetCfgHandler                                 4     4      0    2181
                                             10 COMMON     4     4      0
                             _memset
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (12) _memset                                              9     3      6     137
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (11) _USBStdGetDscHandler                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _USBStdGetStatusHandler                              1     1      0      68
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBStdFeatureReqHandler                             6     6      0    2332
                                             10 COMMON     2     2      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USER_USB_CALLBACK_EVENT_HANDLER                     6     0      6    1809
                                              0 BANK0      6     0      6
                  _USBCB_SOF_Handler
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                        _USBCBInitEP
              _USBCBStdSetDscHandler
                 _USBCBCheckOtherReq
                  _USBCBErrorHandler
 ---------------------------------------------------------------------------------
 (7) _I2CRead                                              1     1      0     890
                                             10 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (7) _I2CWrite                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _I2CSlave                                             6     6      0      37
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (7) _WorkTick                                             0     0      0       0
                      _CheckFanSpeed
                            _I2CPoll
 ---------------------------------------------------------------------------------
 (8) _I2CPoll                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _CheckFanSpeed                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _ResultRx                                            10    10      0    1632
                                             10 COMMON     2     2      0
                                              0 BANK0      8     8      0
                           i1___wmul
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (7) _UpdateFanSpeed                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBSuspend                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBWakeFromSuspend                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCB_SOF_Handler                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBErrorHandler                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBCheckOtherReq                                  0     0      0       0
                 _USBCheckCDCRequest
 ---------------------------------------------------------------------------------
 (12) _USBCheckCDCRequest                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBStdSetDscHandler                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _USBCBInitEP                                         0     0      0    1778
                          _CDCInitEP
 ---------------------------------------------------------------------------------
 (12) _CDCInitEP                                           0     0      0    1778
                  _USBEnableEndpoint
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (13) _USBEnableEndpoint                                   6     5      1     536
                                              4 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (14) _USBConfigureEndpoint                                4     3      1     316
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) i1_USBDeviceInit                                      6     6      0    1096
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (13) i1_USBTransferOnePacket                              7     4      3    1242
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (8) i1_SendCmdReply                                       8     3      5     890
                                              2 COMMON     8     3      5
                      i1_putUSBUSART
 ---------------------------------------------------------------------------------
 (9) i1_putUSBUSART                                        2     1      1     176
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     300
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeSystem
     _UserInit
       _InitTempSensor
       _InitFAN
       _InitWorkTick
       _DetectAsics
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
         _SendAsicData
           _Send32
           ___wmul (ARG)
         ___awdiv
     _USBDeviceInit
   _USBDeviceAttach
   _InitI2CSlave
   _InitI2CMaster
     _I2CDetect
   _AsicPushWork
     ___wmul
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       ___bmul
       _rotate
         ___bmul (ARG)
       ___wmul (ARG)
   _ProcessIO
     _ProcessCmd
       ___wmul
       _AsicPreCalc
         ___bmul
         _rotate
           ___bmul (ARG)
         ___wmul (ARG)
       _SendCmdReply
         _putUSBUSART
       _AsicPushWork
         ___wmul
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
       ___lwdiv
     _getsUSBUSART
       _USBTransferOnePacket
     _I2CRelay
     _CDCTxService
       _USBTransferOnePacket

 _ISRCode (ROOT)
   _ResultRx
     i1___wmul
     i1_SendCmdReply
       i1_putUSBUSART
   _WorkTick
     _CheckFanSpeed
     _I2CPoll
   _UpdateFanSpeed
   _I2CSlave
   _I2CRead
     i1_SendCmdReply
       i1_putUSBUSART
   _I2CWrite
   _USBDeviceTasks
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i1_USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckCDCRequest
         _USBCBErrorHandler
     i1_USBDeviceInit
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _CDCInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i1_USBTransferOnePacket
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckCDCRequest
         _USBCBErrorHandler
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCB_SOF_Handler
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCBInitEP
         _CDCInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           i1_USBTransferOnePacket
       _USBCBStdSetDscHandler
       _USBCBCheckOtherReq
         _USBCheckCDCRequest
       _USBCBErrorHandler
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdGetDscHandler
           _USBStdSetCfgHandler
             _memset
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i1_USBTransferOnePacket
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckCDCRequest
               _USBCBErrorHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _CDCInitEP
                   _USBEnableEndpoint
                     _USBConfigureEndpoint
                   i1_USBTransferOnePacket
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckCDCRequest
               _USBCBErrorHandler
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCB_SOF_Handler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCBInitEP
               _CDCInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_USBTransferOnePacket
             _USBCBStdSetDscHandler
             _USBCBCheckOtherReq
               _USBCheckCDCRequest
             _USBCBErrorHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCB_SOF_Handler
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCBInitEP
             _CDCInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               i1_USBTransferOnePacket
           _USBCBStdSetDscHandler
           _USBCBCheckOtherReq
             _USBCheckCDCRequest
           _USBCBErrorHandler
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           Absolute function(Fake)
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         Absolute function(Fake)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      1B       3        0.0%
BITBANK0            10      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               10     10      10       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            3F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               3F      4      3F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0      10      13      100.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      20      17       40.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0      40      19       80.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A9      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      40      22       80.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1C4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Mon Jun 24 10:54:40 2013

                   __end_ofi1_putUSBUSART 0727                                _USB_SD_Ptr 102D  
                                       pc 0002                            ___bmul@product 00A1  
                                      PL2 0727                                        PL4 16F8  
                                      PL6 0517                                        PL8 07E1  
                             _SSPSTATbits 0214                                        _ID 1155  
                            ___awdiv@sign 00A5                             _USBDeviceInit 156E  
                     ___wmul@multiplicand 00A2                          i1___wmul@product 0074  
                      __size_of_CDCInitEP 0020                                       PL10 052A  
                                     PL20 0731                                       PL12 05BD  
                                     PL30 05CD                                       PL22 170B  
                                     PL14 05C3                                       PL32 0423  
                                     PL24 041C                                       PL16 1702  
                                     PL34 14F0                                       PL26 14E9  
                                     PL18 14E1                       __end_of_AsicPreCalc 0EB6  
                                     PL28 148E                                       LATC 010E  
                              _BankRanges 1001      USER_USB_CALLBACK_EVENT_HANDLER@event 0060  
    USER_USB_CALLBACK_EVENT_HANDLER@pdata 0062                       __end_of_DetectAsics 17C0  
             __end_of_USBStdGetDscHandler 14E1                                       l191 0FC5  
                                     l825 0BB1                                       l834 0B1F  
                                     l835 0B2A                                       l827 0AB2  
                                     _BDT 0020                                       _GIE 005F  
                                     _PR2 001B                                       _UIE 0E92  
                                     _UIR 0E90                                       _Cfg 01E6  
                                     _buf 0260                           __end_of_I2CRead 06E1  
                              _USBSuspend 035C                                       _ptr 0160  
                         __end_of_I2CPoll 166C                      USBStdSetCfgHandler@i 007D  
                    USBStdSetCfgHandler@p 007A                                       wreg 0009  
                          _USBDeviceTasks 0176                            _USBDeviceState 0151  
                          ??_InitI2CSlave 00A0                    ??_USBCBWakeFromSuspend 0070  
                   ??_USBCtrlTrfRxService 0072                            ??_getsUSBUSART 00A8  
                USBEnableEndpoint@options 0074                                      INDF1 0001  
                            __CFG_LVP$OFF 0000                                      FSR1H 0007  
                                    FSR1L 0006                                      l1013 0874  
              USBConfigureEndpoint@handle 0073                                      l7000 0BE3  
                                    l7202 0B86                                      l7142 0A18  
                                    l7206 0B93                                      l6416 156E  
                                    l6442 1590                                      l6426 157A  
                                    l7244 1712                                      l7172 0AFD  
                                    l7156 0AC0                                      l7148 0A65  
                                    l7340 0866                                      l7414 08DB  
                                    l7254 1718                                      l7190 0B54  
                                    l6470 15B9                                      l7256 172F  
                                    l7192 0B62                                      l7168 0AF0  
                                    l6544 07B0                                      l6456 15A5  
                                    l7352 0878                                      l7344 086C  
                                    l7450 0F17                                      l7418 08E1  
                                    l6562 07D8                                      l6802 0769  
                                    l6458 15AF                                      l6900 0BEA  
                                    l7356 087F                                      l7462 17CA  
                                    l7446 0F13                                      l7438 0F04  
                                    l7278 17BA                                      l7198 0B80  
                                    l6750 0F58                                      l6742 0F42  
                                    l6808 0771                                      l6760 0F7C  
                                    l7376 09F8                                      l6584 0FCA  
                                    l7490 17F3                                      l6906 0BEB  
                                    l6818 0781                                      l6826 0783  
                                    l7386 0A11                                      l7468 17D3  
                                    l6844 0799                                      l6828 0788  
                                    l6836 078A                                      l6756 0F5A  
                                    l7388 0A13                                      l7494 17FB  
                                    l7486 17EF                                      l7478 17E0  
                                    l7398 0EB8                                      l6918 0C1B  
                                    l6774 139A                                      l6846 079C  
                                    l6838 078E                                      l6782 0746  
                                    l6758 0F71                                      l6776 0737  
                                    l6786 074D                                      l6788 0750  
                                    l6994 0BC1                                      l6978 1364  
                                    l6996 0BD9                                      _LATC 010E  
                                    u5070 0ED3                                      u5230 0A3C  
                                    u5080 0EE4                                      u5400 1741  
                                    u5250 0A8F                                      u5075 0ECE  
                                    u5085 0EE0                                      u5325 0B31  
                                    u5270 0AE9                                      u5290 0B0F  
                                    _RCIF 008D                                      u5645 17E8  
                   ??_USBCtrlTrfTxService 0070                                      u5585 0F0C  
                                    _UCFG 0E91                                      _UEP0 0E98  
                                    _UEP1 0E99                                      _UEIE 0E97  
                                    _UEIR 0E93                                      _UCON 0E8E  
                                    _TMR0 0015                           __end_of_ISRCode 003A  
                         _CDCDataInHandle 0146    USBStdFeatureReqHandler@current_ep_data 0068  
                                    _pDst 015F                                      _main 0864  
                        __end_of_I2CRelay 0F33                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                           _USBDeviceAttach 0FB5  
                        __end_of_I2CSlave 16F8                                      btemp 007E  
                        __end_of_I2CWrite 1402                      __end_of_AsicPushWork 08D9  
                                    start 003A                             __CFG_IESO$OFF 0000  
                         ??_InitI2CMaster 00A0                        _USBCBCheckOtherReq 0416  
              __end_of_USBCheckStdRequest 00A2                    ??_USBCtrlTrfOutHandler 0076  
                       ___bmul@multiplier 00A2                 ??_USBStdFeatureReqHandler 007A  
                         __end_of_InitFAN 13D2                  ??_USBStdGetStatusHandler 0070  
                          ?_USBDeviceInit 0070                         DetectAsics@x_3070 016E  
                     ?_USBCBCheckOtherReq 0070                           i1SendCmdReply@n 0079  
                                   ?_main 0070                             _USB_In_Buffer 03A0  
                         __end_of___awdiv 1800                             __CFG_WDTE$OFF 0000  
       __size_of_USBCtrlEPServiceComplete 0035                           ___awdiv@divisor 00A0  
                  __end_of_USBDeviceTasks 0212                 ?_USBCtrlEPServiceComplete 0070  
                         __end_of___lwdiv 0F1C                                     i1l142 018F  
                                   i1l216 0491                                     i1l154 01DD  
                                   i1l323 0443                                     i1l340 0077  
                                   i1l326 046B                                     i1l424 148D  
                                   i1l361 00F1                                     i1l362 00F2  
                                   i1l282 143A                                     i1l338 0076  
                                   i1l283 1410                                     i1l284 1413  
                                   i1l621 0659                                     i1l349 008F  
                                   i1l374 0141                                     i1l366 0116  
                                   i1l279 1406                                     i1l650 13F1  
                                   i1l619 064D                                     i1l652 1401  
                                   i1l637 06B6                                     i1l638 06B9  
                                   i1l850 1629                                     _UADDR 0E96  
                         ___awdiv@counter 00A4                                     _RCREG 0199  
                           ?_InitWorkTick 0070                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _USTAT 0E8F  
      __size_of_USBCtrlEPAllowStatusStage 0038                             __CFG_PWRTE$ON 0000  
                          __CFG_FCMEN$OFF 0000           __end_of_USBCtrlEPAllowDataStage 04E2  
                                   _sd000 1162                                     _sd001 107A  
                                   _sd002 10AE                                     _sd003 10E2  
                       __end_of_I2CDetect 1370                      ??_USBCBCheckOtherReq 0070  
                        __end_ofi1___wmul 0640                         __end_of_CDCInitEP 0397  
                        ??i1_SendCmdReply 0077                                     status 0003  
                     i1___wmul@multiplier 0070                                     wtemp0 007E  
                         putUSBUSART@data 00A1              __size_of_USBStdSetCfgHandler 005F  
                          __CFG_MCLRE$OFF 0000                           __initialization 0802  
                             _AsicPreCalc 0BEA                              __end_of_main 0882  
                             _DetectAsics 1712                                 ??_I2CRead 007A  
                               ??_I2CPoll 0070                 __size_of_USBCtrlEPService 0058  
                                  ??_main 00EF                            ??_InitWorkTick 00A0  
               __size_of_InitializeSystem 000F                           ?_USBDeviceTasks 0070  
                             ?_USBSuspend 0070                           i1_USBDeviceInit 0242  
                        __end_of_ResultRx 062B                          __end_of_TestWork 1143  
                               ??_ISRCode 006F                              _cdc_mem_type 0156  
                          _InitTempSensor 0FD9                          __end_of_UserInit 0FD9  
                                  _BCL1IF 0093                   __end_of_USBDeviceAttach 0FCE  
                        _CDCDataOutHandle 0147                                    _I2CCmd 0149  
                       _getsUSBUSART$2193 00AA                                    _ACTCON 039B  
                                  _ADRESH 009C                                    i1S8490 1166  
                                  i1S8496 1180                                    i1S8498 1194  
                       SendAsicData@split 00A8                          ___awdiv@dividend 00A2  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                           getsUSBUSART@len 00A7  
                        __end_of_WorkTick 161F                                    _T1GSEL 08EB  
                                  _IOCAF3 1C9B                                    _IOCAN3 1C93  
                                  _T1GSPM 00CC                                    i1l1003 0037  
                                  i1l1050 041A                                    i1l1053 0419  
                                  i1l1062 0415                                    i1l1047 041B  
                   __size_of_CDCTxService 0072                                    i1l1056 0418  
                                  i1l1091 0241                                    i1l7010 13E2  
                                  i1l7004 13D3                                    i1l7020 13F4  
                                  i1l7032 167D                                    i1l7008 13D8  
                                  i1l5452 062D                                    i1l7052 169D  
                                  i1l7070 16CD                                    i1l7046 1694  
                                  i1l7038 1684                                    i1l8102 010F  
                                  i1l8014 14FD                                    i1l8006 14F6  
                                  i1l5456 0633                                    i1l7080 16D9  
                                  i1l7064 16B2                                    i1l7056 16A6  
                                  i1l8104 011C                                    i1l8032 1517  
                                  i1l6520 0358                                    i1l7242 165A  
                                  i1l7082 16DE                                    i1l7058 16A8  
                                  i1l8122 0147                                    i1l8114 0137  
                                  i1l6522 035A                                    i1l8140 007E  
                                  i1l8220 0308                                    i1l8300 01C2  
                                  i1l6534 03CD                                    i1l6710 145E  
                                  i1l6702 1456                                    i1l7086 16E2  
                                  i1l7094 16E8                                    i1l8126 015F  
                                  i1l8070 00B6                                    i1l8054 1544  
                                  i1l8150 0089                                    i1l8142 0080  
                                  i1l8128 0164                                    i1l6640 149D  
                                  i1l8152 008B                                    i1l6608 050B  
                                  i1l6616 050D                                    i1l8232 0339  
                                  i1l7602 0724                                    i1l6722 146F  
                                  i1l6714 1461                                    i1l8058 00A2  
                                  i1l6642 14A6                                    i1l6634 1559  
                                  i1l8154 008C                                    i1l8138 007C  
                                  i1l6618 0511                                    i1l6626 0513  
                                  i1l6482 02B4                                    i1l8234 033B  
                                  i1l8250 0183                                    i1l7540 027F  
                                  i1l7524 0261                                    i1l7508 024D  
                                  i1l7612 03A3                                    i1l6708 145B  
                                  i1l8092 00F8                                    i1l8084 00DF  
                                  i1l8068 00B4                                    i1l6660 14D4  
                                  i1l6636 1494                                    i1l8164 009A  
                                  i1l7700 0473                                    i1l8308 01D3  
                                  i1l8260 018C                                    i1l6734 147C  
                                  i1l6670 141C                                    i1l6662 1402  
                                  i1l6654 14D1                                    i1l7702 0475  
                                  i1l6494 02C9                                    i1l7622 04C1  
                                  i1l8334 01FF                                    i1l7552 0288  
                                  i1l7608 039D                                    i1l6728 147A  
                                  i1l6680 142F                                    i1l6648 14BE  
                                  i1l7632 0556                                    i1l8176 003C  
                                  i1l8336 020B                                    i1l8328 01F3  
                                  i1l8280 01A2                                    i1l8272 019B  
                                  i1l8352 0016                                    i1l8344 000B  
                                  i1l7538 0275                                    i1l7722 160A  
                                  i1l6594 04F3                                    i1l7650 0587  
                                  i1l7626 04D3                                    i1l8258 018A  
                                  i1l7724 160D                                    i1l7804 0539  
                                  i1l8364 0028                                    i1l8348 0010  
                                  i1l7750 06ED                                    i1l7726 1611  
                                  i1l7902 06C1                                    i1l6598 04F7  
                                  i1l7670 0429                                    i1l7638 0567  
                                  i1l7814 0554                                    i1l8286 01B1  
                                  i1l8294 01BC                                    i1l8358 001D  
                                  i1l7752 0705                                    i1l7568 03E4  
                                  i1l7816 0377                                    i1l6688 1444  
                                  i1l7736 161E                                    i1l7680 0440  
                                  i1l7664 05B6                                    i1l7656 059E  
                                  i1l7648 0572                                    i1l7808 053E  
                                  i1l8368 0034                                    i1l7586 040C  
                                  i1l7690 045C                                    i1l7658 05A5  
                                  i1l7756 070D                                    i1l7860 066C  
                                  i1l7844 0650                                    i1l7908 06D1  
                                  i1l8492 0222                                    i1l7780 049C  
                                  i1l7772 0488                                    i1l7862 066E  
                                  i1l7854 065F                                    i1l7846 0652  
                                  i1l7838 0647                                    i1l8494 023C  
                                  i1l7694 0465                                    i1l7758 0477  
                                  i1l7936 05EE                                    i1l6968 165D  
                                  i1l7872 067B                                    i1l7856 0664  
                                  i1l7848 0656                                    i1l7768 0484  
                                  i1l7866 0674                                    i1l7970 021D  
                                  i1l7962 0212                                    i1l7892 06AD  
                                  i1l7972 021E                                    i1l7964 021A  
                                  i1l7788 04A4                                    i1l7958 0629  
                                  i1l7886 06A4                                    i1l7974 021F  
                                  i1l7966 021B                                    i1l7976 0221  
                                  i1l7968 021C                                    u537_20 1658  
                                  _OSCCON 0099                    __size_of_CheckFanSpeed 003E  
                                  u593_25 15FD                                    u578_25 04CA  
                                  u579_25 0563                             CDCTxService@i 00A9  
                                  _TMR1GE 00CF                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR1ON 00C0  
                                  _TMR2ON 00E2                                    _SSP1EN 10AD  
                                  _SSP1IF 008B                                    _SSPADD 0212  
                                  _SSPBUF 0211              i1USBTransferOnePacket@handle 0076  
                               ??_InitFAN 00A0                                    _Send32 0940  
                       _shortPacketStatus 0162                             ?_SendCmdReply 00A2  
                              ResultRx@Rw 0067                           USBDeviceTasks@i 006E  
                           ?_SendAsicData 00A6                             _I2CSlave$2556 0074  
             USBStdFeatureReqHandler@pUEP 0066                  USBTransferOnePacket@data 00A1  
              USBCtrlTrfInHandler@lastDTS 0075                      __end_of_InitI2CSlave 0FB5  
                                  _Status 01D3                           ??_USBDeviceInit 00A0  
                                  ___bmul 0EB6                              ?_putUSBUSART 00A0  
                                  ___wmul 08D9                                 ??___awdiv 00A4  
                    __end_of_getsUSBUSART 0F7F                              ?_USBCBInitEP 0070  
                               ??___lwdiv 00A4                         _USBEnableEndpoint 0397  
         __size_of_USBStdGetStatusHandler 0042                                    _memset 1555  
                        ___awdiv@quotient 00A6                                _ProcessCmd 0A15  
                      ?_USBEnableEndpoint 0074                                    _rotate 0EC2  
                   _USBCBStdSetDscHandler 0415                                    clrloop 137D  
           __size_of_USBTransferOnePacket 0038                                 ?_I2CRelay 00A0  
                      __size_of_ProcessIO 0029                                 ?_I2CSlave 0070  
                  __end_of_InitTempSensor 0FEA                              _CDCTxService 0737  
                               ?_I2CWrite 0070                       ??_USBEnableEndpoint 0075  
                             _CtrlTrfData 0058                     __size_of_AsicPushWork 0057  
                    _controlTransferState 015A                   __end_of__initialization 0862  
              i1USBTransferOnePacket@data 0071                  __size_of_USBStallHandler 0018  
                          ??_SendCmdReply 00A7                       ___bmul@multiplicand 00A0  
                          ??_SendAsicData 00A9                       __size_of_USBSuspend 000C  
                    i1USBDeviceInit@i_750 0074                            __pcstackCOMMON 0070  
               __end_of_USBEnableEndpoint 03B6                             __end_of_sd000 1166  
                           __end_of_sd001 10AE                             __end_of_sd002 10E2  
                           __end_of_sd003 1116                              __pidataBANK2 0000  
                            __pidataBANK3 139D                         _USBCB_SOF_Handler 0419  
        __size_of_USBCtrlEPAllowDataStage 0036             __size_of_USBConfigureEndpoint 0027  
                 __end_ofi1_USBDeviceInit 02B4               __end_of_USBCtrlTrfInHandler 0477  
                              __end_ofPL2 0731                        ?_USBCB_SOF_Handler 0070  
                              __end_ofPL4 1702                                __end_ofPL6 052A  
                              __end_ofPL8 07F1                             _CheckFanSpeed 161F  
                              __end_of_ID 1162                                 ?i1___wmul 0070  
                              ??_I2CRelay 00A1                            _OPTION_REGbits 0095  
                       _CDCTxService$2241 00A7                                ??_I2CSlave 0070  
                            _AsicPushWork 0882                           ?_InitTempSensor 0070  
                              _cdc_notice 0127                       i1SendCmdReply@count 0076  
                              ??_I2CWrite 0070                       ??_USBCB_SOF_Handler 0070  
                              _cdc_rx_len 0157                                _cdc_tx_len 0159  
                ??_USBCtrlTrfSetupHandler 007E                            _USB_Out_Buffer 0420  
                        ?_USBDeviceAttach 0070                    _USBStdGetStatusHandler 1402  
                              __pbssBANK1 00EF                                __pbssBANK2 0131  
                              __pbssBANK3 01A0                                __pbssBANK4 0260  
                              __pbssBANK6 0320                                __pbssBANK7 03A0  
                              __pbssBANK8 0420                         i1SendCmdReply@cmd 0072  
                    __end_of_InitWorkTick 1000               __size_of_USBWakeFromSuspend 000E  
                             _pBDTEntryIn 013D                         __end_of_ProcessIO 0A15  
        __end_of_USBCtrlEPServiceComplete 04AC                                   ?_Send32 0070  
                            I2CRelay@data 00A1                 __end_of_USBCB_SOF_Handler 041A  
             __size_of_USBCheckCDCRequest 004A                                __pmaintext 0864  
                    USBCtrlTrfRxService@i 0074                                 ?_ResultRx 0070  
                                 ?___bmul 00A0                                   ?___wmul 00A0  
                              __pintentry 0004                                 ?_UserInit 0070  
                                 _I2CAddr 0148                            ?_CheckFanSpeed 0070  
                                 _I2CRead 0640                                __ptext2500 0376  
                              __ptext2501 0377                                __ptext2502 0397  
                              __ptext2503 03B6                                __ptext2504 0242  
                              __ptext2440 0F7F                                __ptext2505 03DD  
                              __ptext2441 156E                                __ptext2506 06E1  
                              __ptext2450 0882                                __ptext2442 09EC  
                              __ptext2507 0713                                __ptext2451 0FCE  
                              __ptext2443 0F33                                __ptext2508 062B  
                              __ptext2460 0EB6                                __ptext2452 1712  
                              __ptext2444 0737                                __ptext2436 0FB5  
                              __ptext2509 0000                                __ptext2461 08D9  
                              __ptext2453 08EE                                __ptext2445 07A9  
                              __ptext2437 0FA1                                __ptext2470 003C  
                              __ptext2462 0EF7                                __ptext2454 0940  
                              __ptext2446 0F1C                                __ptext2438 0F8E  
                              __ptext2471 0477                                __ptext2463 17C0  
                              __ptext2455 0BEA                                __ptext2447 0A15  
                              __ptext2439 1364                                __ptext2480 1555  
                              __ptext2472 04AC                                __ptext2456 0EC2  
                              __ptext2448 0BB4                                __ptext2481 1494  
                              __ptext2473 0539                                __ptext2465 0176  
                              __ptext2457 13B7                                __ptext2449 1388  
                              __ptext2490 161F                                __ptext2482 1402  
                              __ptext2474 0556                                __ptext2466 0368  
                              __ptext2458 0FD9                                __ptext2491 05D1  
                              __ptext2483 00A2                                __ptext2475 02B4  
                              __ptext2467 035C                                __ptext2459 0FEA  
                              __ptext2492 07F1                                __ptext2484 0212  
                              __ptext2476 0429                                __ptext2468 0344  
                              __ptext2493 041B                                __ptext2485 0640  
                              __ptext2477 04E2                                __ptext2469 02EC  
                              __ptext2494 041A                                __ptext2486 13D2  
                              __ptext2478 0066                                __ptext2495 0419  
                              __ptext2487 166C                                __ptext2479 14F6  
                              __ptext2496 0418                                __ptext2488 15E8  
                              __ptext2497 0416                                __ptext2489 165D  
                                 ?_memset 0070                                __ptext2498 1444  
                              __ptext2499 0415                    ?_USBCBStdSetDscHandler 0070  
                                 _I2CPoll 165D                                _device_dsc 1143  
                        _USBCtrlEPService 02EC                                 ?_WorkTick 0070  
                             ?_ProcessCmd 0070                                _ep_data_in 0137  
                                 ?_rotate 00A3                                ??i1___wmul 0074  
                        _InitializeSystem 0F7F                               _NonceRanges 0320  
             __end_of_USBCtrlTrfRxService 05BD                        _USBCheckStdRequest 0066  
                       _configDescriptor1 1037               __end_of_USBCtrlTrfTxService 0517  
                     _USBStdSetCfgHandler 14F6                                   _ISRCode 0004  
                                 _PWM1DCH 0612                                   _PWM1DCL 0611  
                                 _OSCTUNE 0098                                   _PWM1CON 0613  
                                 _TMR1GIE 048F                                   _TMR1GIF 008F  
                     ?_USBCheckStdRequest 0070              __size_of_USBStdGetDscHandler 004D  
                                 _UIEbits 0E92             __size_of_USBCBWakeFromSuspend 0001  
                              __stringtab 1000                    __size_ofi1_putUSBUSART 0014  
                                 _UIRbits 0E90                                 _I2CDetect 1364  
                           _cdc_trf_state 0158                  ??i1_USBTransferOnePacket 0073  
                   __size_of_InitI2CSlave 0014                                   _InitFAN 13B7  
                                 _pCDCDst 01A8                                   _pCDCSrc 01AA  
                   __size_of_getsUSBUSART 004C                      ?_USBStdSetCfgHandler 0070  
                               _CDCInitEP 0377                           __size_of_Send32 00AC  
                   __end_of_InitI2CMaster 0FA1                                ??_ResultRx 007A  
              __size_of_USBEnableEndpoint 001F                               ResultRx@buf 0060  
                            ?_AsicPreCalc 00B0                              ?_DetectAsics 0070  
                    ??_USBCheckStdRequest 007E                           __size_of___bmul 000C  
           __size_of_USBCtrlTrfOutHandler 001D                                   ___awdiv 17C0  
                        ??_USBDeviceTasks 006D                           __size_of___wmul 0015  
                                 _WorkNow 0155                                   _WorkQue 233C  
                                 ___lwdiv 0EF7                         ??_USBStallHandler 0070  
                              ??_UserInit 00ED                          ?i1_USBDeviceInit 0070  
                    __size_of_putUSBUSART 0015                        getsUSBUSART@buffer 00A9  
                         __size_of_memset 0019                                ??_WorkTick 0071  
               __end_of_configDescriptor1 107A                      __size_of_USBCBInitEP 0001  
                                 _inPipes 0163               _USBDeferOUTDataStagePackets 014F  
                         __size_of_rotate 0035                   __size_of_UpdateFanSpeed 000E  
                               _T1CONbits 0018                              ??_USBSuspend 007A  
                               _T2CONbits 001C                         _USBCBErrorHandler 0418  
                   ProcessIO@numBytesRead 00EE                      __end_of_SendCmdReply 0BEA  
                    __end_of_SendAsicData 0940                        ?_USBCBErrorHandler 0070  
                           ?_USBCBSuspend 0070                              _InitI2CSlave 0FA1  
                      __end_of_USB_CD_Ptr 1037           __size_of_USBCtrlTrfSetupHandler 002A  
                    end_of_initialization 0862                              _getsUSBUSART 0F33  
             __size_of_USBCBCheckOtherReq 0002                        __end_of_USB_SD_Ptr 1035  
                              ?_I2CDetect 0070                      __end_ofAsicPreCalc@K 102D  
                     _pBDTEntryEP0OutNext 00EF                                   init_ram 1370  
                     ??_USBCBErrorHandler 0070                                   memset@c 0072  
                                 memset@n 0074                                   memset@p 0077  
                                 initloop 1371           _dummy_encapsulated_cmd_response 01C7  
                     __size_of_ProcessCmd 019F                  ?_USBStdFeatureReqHandler 0070  
                   ??_USBStdSetCfgHandler 007A                        __end_of_BankRanges 1021  
                              ?_CDCInitEP 0070                          SendCmdReply@data 00A4  
              __size_of_USBCB_SOF_Handler 0001                        __end_of_USBSuspend 0368  
                 _USBCtrlEPAllowDataStage 04AC                                 _RCSTAbits 019D  
                         ??_CheckFanSpeed 0070                                   rotate@x 00A3  
                                 rotate@y 00A7                           AsicPreCalc@work 00B0  
                            __pstringtext 1000                             i1_putUSBUSART 0713  
                _USBCtrlEPServiceComplete 0477                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 0152                _USBStatusStageEnabledFlag2 0153  
                      USBEnableEndpoint@p 0077                 __end_of_USBCBErrorHandler 0419  
                        __CFG_FOSC$INTOSC 0000                                 _TRISAbits 008C  
                               _TRISBbits 008D                                 _TRISCbits 008E  
                          ??_USBCBSuspend 0070                        _BothEP0OutUOWNsSet 0145  
               USBStdSetCfgHandler@i_1132 007C                         __size_of_I2CRelay 0017  
                       __size_of_I2CSlave 008C                         __size_of_I2CWrite 0030  
               USBConfigureEndpoint@EPNum 0072                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0016       USER_USB_CALLBACK_EVENT_HANDLER@size 0064  
                               _USTATcopy 016A                  i1USBTransferOnePacket@ep 0075  
            __end_of_USBTransferOnePacket 07E1           __size_ofi1_USBTransferOnePacket 0038  
                           _PrecalcHashes 01AF                         putUSBUSART@length 00A0  
                      USBDeviceInit@i_750 00A4                            __end_of_Send32 09EC  
                  _USBCtrlTrfSetupHandler 003C                            ?i1_putUSBUSART 0070  
                 __size_ofi1_SendCmdReply 0032                            __end_of___bmul 0EC2  
                   __end_of_USBDeviceInit 15E8                            __end_of___wmul 08EE  
                        ??_InitTempSensor 00A0                            __end_of_memset 156E  
                       _USBBusIsSuspended 01AE                            __end_of_rotate 0EF7  
                            _InitWorkTick 0FEA                               __end_ofPL10 0539  
                             __end_ofPL20 0737                               __end_ofPL12 05C3  
                             __end_ofPL30 05D1                               __end_ofPL22 1712  
                             __end_ofPL14 05CD                               __end_ofPL32 0429  
                             __end_ofPL24 0423                               __end_ofPL16 170B  
                             __end_ofPL34 14F6                               __end_ofPL26 14F0  
                             __end_ofPL18 14E9                               __end_ofPL28 1494  
                     start_initialization 0802                         __size_ofi1___wmul 0015  
                 ?_USBStdGetStatusHandler 0070             USBCtrlTrfRxService@byteToRead 0075  
                             _cdc_data_rx 02A0                               _cdc_data_tx 0220  
            __end_of_USBConfigureEndpoint 03DD           __end_of_USBStdFeatureReqHandler 0176  
       __end_of_USBCtrlEPAllowStatusStage 02EC                               ??_I2CDetect 00A0  
                __end_of_USBCtrlEPService 0344                          SendAsicData@work 00A6  
                __end_of_InitializeSystem 0F8E                 ??_USBCtrlEPAllowDataStage 0073  
                             ??_CDCInitEP 007A                            USBDeviceInit@i 00A5  
                                ??_Send32 00A0                            USBDeviceInit@p 00A2  
                  _pBDTEntryEP0OutCurrent 015E                   USBTransferOnePacket@dir 00A0  
                 USBTransferOnePacket@len 00A2                   ??_USBCBStdSetDscHandler 0070  
                                ??___bmul 00A1                                 _ResultQue 01A0  
                                ??___wmul 00A4                       _USBStdGetDscHandler 1494  
                               _ProcessIO 09EC                               __pdataBANK2 016F  
                             __pdataBANK3 01D1                         __size_of_ResultRx 005A  
                    __size_of_AsicPreCalc 02CC                                  ?_I2CRead 0070  
                                ??_memset 0076                                  ?_I2CPoll 0070  
                    __size_of_DetectAsics 00AE                              ??_ProcessCmd 00E9  
                   __size_of_SendCmdReply 0036                                  ??_rotate 00A8  
                  i1_USBTransferOnePacket 03DD                __size_of_USBCBErrorHandler 0001  
                          _UpdateFanSpeed 07F1                     __size_of_SendAsicData 0052  
                       __size_of_UserInit 000B                    _USBActiveConfiguration 0169  
          __end_of_USBStdGetStatusHandler 1444                 i1USBTransferOnePacket@dir 0070  
                             __pbssBIGRAM 233C                 i1USBTransferOnePacket@len 0072  
                       __size_of_WorkTick 0037                             __pcstackBANK0 0060  
                           __pcstackBANK1 00A0                             __pcstackBANK2 016B  
            __size_of_USBCtrlTrfInHandler 004E                                  ?_ISRCode 0070  
                               _WorkTicks 01D1                      ?_USBStdGetDscHandler 0070  
                      i1SendCmdReply@data 0074                __end_of_USBWakeFromSuspend 0376  
                         _USBStallHandler 0344                              _pBDTEntryOut 0140  
                                ?_InitFAN 0070                __end_of_USBCheckCDCRequest 148E  
                            _send32_count 0161                                 __pnvBANK3 01EB  
                      __end_of_ProcessCmd 0BB4                  __size_of_USBDeviceAttach 0019  
                           I2CRelay@count 00A0                          ___lwdiv@dividend 00A2  
                         ??i1_putUSBUSART 0071                              _SendCmdReply 0BB4  
                            _SendAsicData 08EE                      __end_of_USBCBSuspend 041C  
            __end_of_USBCBWakeFromSuspend 041B                                  ?___awdiv 00A0  
                              ?_ProcessIO 0070                                  ?___lwdiv 00A0  
                  __end_of_UpdateFanSpeed 07FF                              AsicPreCalc@K 1021  
                            AsicPreCalc@m 00BE                              AsicPreCalc@n 00E6  
                            AsicPreCalc@x 00E2                              AsicPreCalc@y 00DE  
                            AsicPreCalc@z 00BA                                 __pswtext1 1166  
                               __pswtext2 1180                                 __pswtext3 1194  
                    _USBTransferOnePacket 07A9                                  _I2CInBuf 01AC  
                            DetectAsics@x 016D                                  _I2CCount 014A  
                                _I2CRelay 0F1C                                  _I2CSlave 166C  
                                _I2CState 0168                                  _I2CWrite 13D2  
                               _last_bit0 015C                                 _last_bit1 015D  
            __end_of_USBCtrlTrfOutHandler 0556                     ??_USBStdGetDscHandler 0070  
                             _ep_data_out 013A                          ___lwdiv@quotient 00A5  
            __size_of_USBCtrlTrfRxService 0067             USBConfigureEndpoint@direction 0070  
            __size_of_USBCtrlTrfTxService 0035                            ___wmul@product 00A4  
                                _LATAbits 010C                                  _LATCbits 010E  
                       i1putUSBUSART@data 0071                ??_USBCtrlEPServiceComplete 0075  
                                _PIE2bits 0092                           SendCmdReply@cmd 00A2  
                                _PIR2bits 0012                 USBCtrlEPService@setup_cnt 006C  
                           ??_putUSBUSART 00A1                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 014E                            i1_SendCmdReply 06E1  
                           ??_USBCBInitEP 007A               __size_of_USBCheckStdRequest 003C  
                                _UCONbits 0E8E                      _USBConfigureEndpoint 03B6  
                         ?_UpdateFanSpeed 0070                             ProcessCmd@cmd 00ED  
        __size_of_USBStdFeatureReqHandler 00D4                          __size_of_I2CRead 00A1  
                        __size_of_I2CPoll 000F                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 00A0                     ?_USBTransferOnePacket 00A0  
                                i1___wmul 062B                                  _BankSize 01EB  
                           ?_CDCTxService 0070                              _RemoteWakeup 014B  
                __size_ofi1_USBDeviceInit 0072                                  _ClockCfg 01DE  
              __end_of_USBCBCheckOtherReq 0418                                  _HashTime 016F  
                 __end_of_USBStallHandler 035C                          __size_of_ISRCode 0036  
                  __size_of_InitI2CMaster 0013               ??_USBCtrlEPAllowStatusStage 0070  
             __end_of_USBStdSetCfgHandler 1555                              _SlaveAddress 014D  
                      __end_of_device_dsc 1155                   ?_USBCtrlTrfSetupHandler 0070  
                        __size_of_InitFAN 001B                   USBStdGetStatusHandler@p 0070  
                  __end_ofi1_SendCmdReply 0713                    USBTransferOnePacket@ep 00A5  
                                _ResultQC 014C                                  _ResultRx 05D1  
                                _SetupPkt 0050                                  _TestWork 1116  
                                _SlowTick 01AD                               ??_ProcessIO 00EE  
                   ?_USBConfigureEndpoint 0070                         ??_USBDeviceAttach 00A0  
                                _UserInit 0FCE                     __end_of_CheckFanSpeed 165D  
                        __size_of___awdiv 0040                          __size_of___lwdiv 0025  
                                _WorkTick 15E8                        __end_of__stringtab 1001  
                     __end_of_putUSBUSART 139D                               _line_coding 0120  
                          ??_CDCTxService 00A7                       __end_of_USBCBInitEP 0377  
                           ?_AsicPushWork 0070                               _send32_data 0143  
                 __size_of_USBDeviceTasks 009C                           ___lwdiv@divisor 00A0  
                         ___lwdiv@counter 00A4                                _T1GCONbits 0019  
                    _USBCBWakeFromSuspend 041A            __end_of_USBCtrlTrfSetupHandler 0066  
                           __size_of_main 001E                         ?_USBCtrlEPService 0070  
                   __size_of_USBCBSuspend 0001                         ?_InitializeSystem 0070  
                      ??_USBCtrlEPService 006A                                  clear_ram 137C  
                     _USBCtrlTrfInHandler 0429                           ?i1_SendCmdReply 0072  
                      ??_InitializeSystem 00ED                                  _outPipes 0131  
                           _InitI2CMaster 0F8E                      _USBCtrlTrfOutHandler 0539  
                 ?i1_USBTransferOnePacket 0070                 _USBCtrlEPAllowStatusStage 02B4  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0416  
                  ??_USBTransferOnePacket 00A3                            ??_AsicPushWork 00E7  
               _USBDeferStatusStagePacket 0150                  CDCTxService@byte_to_send 00AA  
                        i1USBDeviceInit@i 0075                          i1USBDeviceInit@p 0072  
                              _INTCONbits 000B                       i1putUSBUSART@length 0070  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0072  
                                memset@p1 0070                              _USBCBSuspend 041B  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 0069  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 007A   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 0242  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 0030          ?_USER_USB_CALLBACK_EVENT_HANDLER 0060  
       ??_USER_USB_CALLBACK_EVENT_HANDLER 007A           _USER_USB_CALLBACK_EVENT_HANDLER 0212  
                       ??i1_USBDeviceInit 0070                                  next_word 0945  
                       SendCmdReply@count 00A6                             SendCmdReply@n 00A9  
                           ??_AsicPreCalc 00B2            __end_ofi1_USBTransferOnePacket 0415  
                          ?_InitI2CMaster 0070                           _ProcessCmd$3040 00EB  
                           ??_DetectAsics 00E7                    ??_USBConfigureEndpoint 0071  
                   ?_USBCtrlTrfOutHandler 0070                               _putUSBUSART 1388  
                    __CFG_CPUDIV$NOCLKDIV 0000                       _USBCtrlTrfRxService 0556  
                             _USBCBInitEP 0376                        _USBWakeFromSuspend 0368  
                 _USBStdFeatureReqHandler 00A2                        _USBCheckCDCRequest 1444  
                     _USBCtrlTrfTxService 04E2                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 0073                     _USBAlternateInterface 01CF  
                     ?_USBCheckCDCRequest 0070                               _SSPCON1bits 0215  
                             _SSPCON2bits 0216                       USBEnableEndpoint@ep 0079  
                             _SSPCON3bits 0217                             ?_InitI2CSlave 0070  
                         _endpoint_number 015B                   __size_of_InitTempSensor 0011  
                    ?_USBCtrlTrfRxService 0070                             ?_getsUSBUSART 00A7  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 0154                      ??_USBWakeFromSuspend 007A  
              USBTransferOnePacket@handle 00A6                      __end_of_CDCTxService 07A9  
                    ??_USBCheckCDCRequest 0070                                _USB_CD_Ptr 1035  
                        ??_UpdateFanSpeed 0070                        __size_of_I2CDetect 000C  
