

Microchip Technology PIC PRO Macro Assembler V1.12 build 49521 
                                                                                               Fri Aug 16 06:50:48 2013

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	16LF1459
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK6,global,class=CODE,delta=2
     7                           	psect	strings,global,class=STRING,delta=2
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	inittext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	text1755,local,class=CODE,merge=1,delta=2
    23                           	psect	text1759,local,class=CODE,merge=1,delta=2
    24                           	psect	text1761,local,class=CODE,merge=1,delta=2
    25                           	psect	swtext1,local,class=CONST,delta=2
    26                           	psect	text1764,local,class=CODE,merge=1,delta=2
    27                           	psect	text1766,local,class=CODE,merge=1,delta=2
    28                           	psect	text1767,local,class=CODE,merge=1,delta=2
    29                           	psect	text1781,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text1803,local,class=CODE,merge=1,delta=2
    32                           	psect	text1807,local,class=CODE,merge=1,delta=2
    33                           	psect	pa_nodes,global,class=CODE,delta=2
    34                           	dabs	1,0x620,48
    35                           	dabs	1,0x5A0,80
    36                           	dabs	1,0x53C,52
    37                           	dabs	1,0x20,32
    38                           	dabs	1,0x48,8
    39                           	dabs	1,0x40,8
    40                           	dabs	1,0x220,64
    41                           	dabs	1,0x2A0,64
    42                           	dabs	1,0x7E,2
    43  0000                     	;# 
    44  0001                     	;# 
    45  0002                     	;# 
    46  0003                     	;# 
    47  0004                     	;# 
    48  0005                     	;# 
    49  0006                     	;# 
    50  0007                     	;# 
    51  0008                     	;# 
    52  0009                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000D                     	;# 
    57  000E                     	;# 
    58  0011                     	;# 
    59  0012                     	;# 
    60  0015                     	;# 
    61  0016                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001C                     	;# 
    69  008C                     	;# 
    70  008D                     	;# 
    71  008E                     	;# 
    72  0091                     	;# 
    73  0092                     	;# 
    74  0095                     	;# 
    75  0096                     	;# 
    76  0097                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009B                     	;# 
    82  009C                     	;# 
    83  009D                     	;# 
    84  009E                     	;# 
    85  009F                     	;# 
    86  010C                     	;# 
    87  010D                     	;# 
    88  010E                     	;# 
    89  0111                     	;# 
    90  0112                     	;# 
    91  0113                     	;# 
    92  0114                     	;# 
    93  0115                     	;# 
    94  0116                     	;# 
    95  0117                     	;# 
    96  0118                     	;# 
    97  0119                     	;# 
    98  011D                     	;# 
    99  018C                     	;# 
   100  018D                     	;# 
   101  018E                     	;# 
   102  0191                     	;# 
   103  0191                     	;# 
   104  0192                     	;# 
   105  0193                     	;# 
   106  0193                     	;# 
   107  0194                     	;# 
   108  0195                     	;# 
   109  0196                     	;# 
   110  0199                     	;# 
   111  019A                     	;# 
   112  019B                     	;# 
   113  019C                     	;# 
   114  019D                     	;# 
   115  019E                     	;# 
   116  019F                     	;# 
   117  020C                     	;# 
   118  020D                     	;# 
   119  0211                     	;# 
   120  0211                     	;# 
   121  0212                     	;# 
   122  0212                     	;# 
   123  0213                     	;# 
   124  0213                     	;# 
   125  0214                     	;# 
   126  0214                     	;# 
   127  0215                     	;# 
   128  0215                     	;# 
   129  0215                     	;# 
   130  0216                     	;# 
   131  0216                     	;# 
   132  0217                     	;# 
   133  0217                     	;# 
   134  0391                     	;# 
   135  0392                     	;# 
   136  0393                     	;# 
   137  0394                     	;# 
   138  0395                     	;# 
   139  0396                     	;# 
   140  039A                     	;# 
   141  039B                     	;# 
   142  0611                     	;# 
   143  0612                     	;# 
   144  0613                     	;# 
   145  0613                     	;# 
   146  0614                     	;# 
   147  0615                     	;# 
   148  0616                     	;# 
   149  0616                     	;# 
   150  0691                     	;# 
   151  0692                     	;# 
   152  0693                     	;# 
   153  0694                     	;# 
   154  0695                     	;# 
   155  0E8E                     	;# 
   156  0E8F                     	;# 
   157  0E90                     	;# 
   158  0E91                     	;# 
   159  0E92                     	;# 
   160  0E93                     	;# 
   161  0E94                     	;# 
   162  0E94                     	;# 
   163  0E95                     	;# 
   164  0E96                     	;# 
   165  0E97                     	;# 
   166  0E98                     	;# 
   167  0E99                     	;# 
   168  0E9A                     	;# 
   169  0E9B                     	;# 
   170  0E9C                     	;# 
   171  0E9D                     	;# 
   172  0E9E                     	;# 
   173  0E9F                     	;# 
   174  0FE4                     	;# 
   175  0FE5                     	;# 
   176  0FE6                     	;# 
   177  0FE7                     	;# 
   178  0FE8                     	;# 
   179  0FE9                     	;# 
   180  0FEA                     	;# 
   181  0FEB                     	;# 
   182  0FED                     	;# 
   183  0FEE                     	;# 
   184  0FEF                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  0011                     	;# 
   201  0012                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  001A                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  008C                     	;# 
   212  008D                     	;# 
   213  008E                     	;# 
   214  0091                     	;# 
   215  0092                     	;# 
   216  0095                     	;# 
   217  0096                     	;# 
   218  0097                     	;# 
   219  0098                     	;# 
   220  0099                     	;# 
   221  009A                     	;# 
   222  009B                     	;# 
   223  009B                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  0111                     	;# 
   232  0112                     	;# 
   233  0113                     	;# 
   234  0114                     	;# 
   235  0115                     	;# 
   236  0116                     	;# 
   237  0117                     	;# 
   238  0118                     	;# 
   239  0119                     	;# 
   240  011D                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  018E                     	;# 
   244  0191                     	;# 
   245  0191                     	;# 
   246  0192                     	;# 
   247  0193                     	;# 
   248  0193                     	;# 
   249  0194                     	;# 
   250  0195                     	;# 
   251  0196                     	;# 
   252  0199                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019C                     	;# 
   256  019D                     	;# 
   257  019E                     	;# 
   258  019F                     	;# 
   259  020C                     	;# 
   260  020D                     	;# 
   261  0211                     	;# 
   262  0211                     	;# 
   263  0212                     	;# 
   264  0212                     	;# 
   265  0213                     	;# 
   266  0213                     	;# 
   267  0214                     	;# 
   268  0214                     	;# 
   269  0215                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0216                     	;# 
   273  0216                     	;# 
   274  0217                     	;# 
   275  0217                     	;# 
   276  0391                     	;# 
   277  0392                     	;# 
   278  0393                     	;# 
   279  0394                     	;# 
   280  0395                     	;# 
   281  0396                     	;# 
   282  039A                     	;# 
   283  039B                     	;# 
   284  0611                     	;# 
   285  0612                     	;# 
   286  0613                     	;# 
   287  0613                     	;# 
   288  0614                     	;# 
   289  0615                     	;# 
   290  0616                     	;# 
   291  0616                     	;# 
   292  0691                     	;# 
   293  0692                     	;# 
   294  0693                     	;# 
   295  0694                     	;# 
   296  0695                     	;# 
   297  0E8E                     	;# 
   298  0E8F                     	;# 
   299  0E90                     	;# 
   300  0E91                     	;# 
   301  0E92                     	;# 
   302  0E93                     	;# 
   303  0E94                     	;# 
   304  0E94                     	;# 
   305  0E95                     	;# 
   306  0E96                     	;# 
   307  0E97                     	;# 
   308  0E98                     	;# 
   309  0E99                     	;# 
   310  0E9A                     	;# 
   311  0E9B                     	;# 
   312  0E9C                     	;# 
   313  0E9D                     	;# 
   314  0E9E                     	;# 
   315  0E9F                     	;# 
   316  0FE4                     	;# 
   317  0FE5                     	;# 
   318  0FE6                     	;# 
   319  0FE7                     	;# 
   320  0FE8                     	;# 
   321  0FE9                     	;# 
   322  0FEA                     	;# 
   323  0FEB                     	;# 
   324  0FED                     	;# 
   325  0FEE                     	;# 
   326  0FEF                     	;# 
   327  0000                     	;# 
   328  0001                     	;# 
   329  0002                     	;# 
   330  0003                     	;# 
   331  0004                     	;# 
   332  0005                     	;# 
   333  0006                     	;# 
   334  0007                     	;# 
   335  0008                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  0011                     	;# 
   343  0012                     	;# 
   344  0015                     	;# 
   345  0016                     	;# 
   346  0016                     	;# 
   347  0017                     	;# 
   348  0018                     	;# 
   349  0019                     	;# 
   350  001A                     	;# 
   351  001B                     	;# 
   352  001C                     	;# 
   353  008C                     	;# 
   354  008D                     	;# 
   355  008E                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0098                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  009F                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  0111                     	;# 
   374  0112                     	;# 
   375  0113                     	;# 
   376  0114                     	;# 
   377  0115                     	;# 
   378  0116                     	;# 
   379  0117                     	;# 
   380  0118                     	;# 
   381  0119                     	;# 
   382  011D                     	;# 
   383  018C                     	;# 
   384  018D                     	;# 
   385  018E                     	;# 
   386  0191                     	;# 
   387  0191                     	;# 
   388  0192                     	;# 
   389  0193                     	;# 
   390  0193                     	;# 
   391  0194                     	;# 
   392  0195                     	;# 
   393  0196                     	;# 
   394  0199                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019C                     	;# 
   398  019D                     	;# 
   399  019E                     	;# 
   400  019F                     	;# 
   401  020C                     	;# 
   402  020D                     	;# 
   403  0211                     	;# 
   404  0211                     	;# 
   405  0212                     	;# 
   406  0212                     	;# 
   407  0213                     	;# 
   408  0213                     	;# 
   409  0214                     	;# 
   410  0214                     	;# 
   411  0215                     	;# 
   412  0215                     	;# 
   413  0215                     	;# 
   414  0216                     	;# 
   415  0216                     	;# 
   416  0217                     	;# 
   417  0217                     	;# 
   418  0391                     	;# 
   419  0392                     	;# 
   420  0393                     	;# 
   421  0394                     	;# 
   422  0395                     	;# 
   423  0396                     	;# 
   424  039A                     	;# 
   425  039B                     	;# 
   426  0611                     	;# 
   427  0612                     	;# 
   428  0613                     	;# 
   429  0613                     	;# 
   430  0614                     	;# 
   431  0615                     	;# 
   432  0616                     	;# 
   433  0616                     	;# 
   434  0691                     	;# 
   435  0692                     	;# 
   436  0693                     	;# 
   437  0694                     	;# 
   438  0695                     	;# 
   439  0E8E                     	;# 
   440  0E8F                     	;# 
   441  0E90                     	;# 
   442  0E91                     	;# 
   443  0E92                     	;# 
   444  0E93                     	;# 
   445  0E94                     	;# 
   446  0E94                     	;# 
   447  0E95                     	;# 
   448  0E96                     	;# 
   449  0E97                     	;# 
   450  0E98                     	;# 
   451  0E99                     	;# 
   452  0E9A                     	;# 
   453  0E9B                     	;# 
   454  0E9C                     	;# 
   455  0E9D                     	;# 
   456  0E9E                     	;# 
   457  0E9F                     	;# 
   458  0FE4                     	;# 
   459  0FE5                     	;# 
   460  0FE6                     	;# 
   461  0FE7                     	;# 
   462  0FE8                     	;# 
   463  0FE9                     	;# 
   464  0FEA                     	;# 
   465  0FEB                     	;# 
   466  0FED                     	;# 
   467  0FEE                     	;# 
   468  0FEF                     	;# 
   469  0000                     	;# 
   470  0001                     	;# 
   471  0002                     	;# 
   472  0003                     	;# 
   473  0004                     	;# 
   474  0005                     	;# 
   475  0006                     	;# 
   476  0007                     	;# 
   477  0008                     	;# 
   478  0009                     	;# 
   479  000A                     	;# 
   480  000B                     	;# 
   481  000C                     	;# 
   482  000D                     	;# 
   483  000E                     	;# 
   484  0011                     	;# 
   485  0012                     	;# 
   486  0015                     	;# 
   487  0016                     	;# 
   488  0016                     	;# 
   489  0017                     	;# 
   490  0018                     	;# 
   491  0019                     	;# 
   492  001A                     	;# 
   493  001B                     	;# 
   494  001C                     	;# 
   495  008C                     	;# 
   496  008D                     	;# 
   497  008E                     	;# 
   498  0091                     	;# 
   499  0092                     	;# 
   500  0095                     	;# 
   501  0096                     	;# 
   502  0097                     	;# 
   503  0098                     	;# 
   504  0099                     	;# 
   505  009A                     	;# 
   506  009B                     	;# 
   507  009B                     	;# 
   508  009C                     	;# 
   509  009D                     	;# 
   510  009E                     	;# 
   511  009F                     	;# 
   512  010C                     	;# 
   513  010D                     	;# 
   514  010E                     	;# 
   515  0111                     	;# 
   516  0112                     	;# 
   517  0113                     	;# 
   518  0114                     	;# 
   519  0115                     	;# 
   520  0116                     	;# 
   521  0117                     	;# 
   522  0118                     	;# 
   523  0119                     	;# 
   524  011D                     	;# 
   525  018C                     	;# 
   526  018D                     	;# 
   527  018E                     	;# 
   528  0191                     	;# 
   529  0191                     	;# 
   530  0192                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020D                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0391                     	;# 
   561  0392                     	;# 
   562  0393                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  039A                     	;# 
   567  039B                     	;# 
   568  0611                     	;# 
   569  0612                     	;# 
   570  0613                     	;# 
   571  0613                     	;# 
   572  0614                     	;# 
   573  0615                     	;# 
   574  0616                     	;# 
   575  0616                     	;# 
   576  0691                     	;# 
   577  0692                     	;# 
   578  0693                     	;# 
   579  0694                     	;# 
   580  0695                     	;# 
   581  0E8E                     	;# 
   582  0E8F                     	;# 
   583  0E90                     	;# 
   584  0E91                     	;# 
   585  0E92                     	;# 
   586  0E93                     	;# 
   587  0E94                     	;# 
   588  0E94                     	;# 
   589  0E95                     	;# 
   590  0E96                     	;# 
   591  0E97                     	;# 
   592  0E98                     	;# 
   593  0E99                     	;# 
   594  0E9A                     	;# 
   595  0E9B                     	;# 
   596  0E9C                     	;# 
   597  0E9D                     	;# 
   598  0E9E                     	;# 
   599  0E9F                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0098                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0111                     	;# 
   658  0112                     	;# 
   659  0113                     	;# 
   660  0114                     	;# 
   661  0115                     	;# 
   662  0116                     	;# 
   663  0117                     	;# 
   664  0118                     	;# 
   665  0119                     	;# 
   666  011D                     	;# 
   667  018C                     	;# 
   668  018D                     	;# 
   669  018E                     	;# 
   670  0191                     	;# 
   671  0191                     	;# 
   672  0192                     	;# 
   673  0193                     	;# 
   674  0193                     	;# 
   675  0194                     	;# 
   676  0195                     	;# 
   677  0196                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019C                     	;# 
   682  019D                     	;# 
   683  019E                     	;# 
   684  019F                     	;# 
   685  020C                     	;# 
   686  020D                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0212                     	;# 
   691  0213                     	;# 
   692  0213                     	;# 
   693  0214                     	;# 
   694  0214                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0216                     	;# 
   699  0216                     	;# 
   700  0217                     	;# 
   701  0217                     	;# 
   702  0391                     	;# 
   703  0392                     	;# 
   704  0393                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  039A                     	;# 
   709  039B                     	;# 
   710  0611                     	;# 
   711  0612                     	;# 
   712  0613                     	;# 
   713  0613                     	;# 
   714  0614                     	;# 
   715  0615                     	;# 
   716  0616                     	;# 
   717  0616                     	;# 
   718  0691                     	;# 
   719  0692                     	;# 
   720  0693                     	;# 
   721  0694                     	;# 
   722  0695                     	;# 
   723  0E8E                     	;# 
   724  0E8F                     	;# 
   725  0E90                     	;# 
   726  0E91                     	;# 
   727  0E92                     	;# 
   728  0E93                     	;# 
   729  0E94                     	;# 
   730  0E94                     	;# 
   731  0E95                     	;# 
   732  0E96                     	;# 
   733  0E97                     	;# 
   734  0E98                     	;# 
   735  0E99                     	;# 
   736  0E9A                     	;# 
   737  0E9B                     	;# 
   738  0E9C                     	;# 
   739  0E9D                     	;# 
   740  0E9E                     	;# 
   741  0E9F                     	;# 
   742  0FE4                     	;# 
   743  0FE5                     	;# 
   744  0FE6                     	;# 
   745  0FE7                     	;# 
   746  0FE8                     	;# 
   747  0FE9                     	;# 
   748  0FEA                     	;# 
   749  0FEB                     	;# 
   750  0FED                     	;# 
   751  0FEE                     	;# 
   752  0FEF                     	;# 
   753  0000                     	;# 
   754  0001                     	;# 
   755  0002                     	;# 
   756  0003                     	;# 
   757  0004                     	;# 
   758  0005                     	;# 
   759  0006                     	;# 
   760  0007                     	;# 
   761  0008                     	;# 
   762  0009                     	;# 
   763  000A                     	;# 
   764  000B                     	;# 
   765  000C                     	;# 
   766  000D                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0015                     	;# 
   771  0016                     	;# 
   772  0016                     	;# 
   773  0017                     	;# 
   774  0018                     	;# 
   775  0019                     	;# 
   776  001A                     	;# 
   777  001B                     	;# 
   778  001C                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0095                     	;# 
   785  0096                     	;# 
   786  0097                     	;# 
   787  0098                     	;# 
   788  0099                     	;# 
   789  009A                     	;# 
   790  009B                     	;# 
   791  009B                     	;# 
   792  009C                     	;# 
   793  009D                     	;# 
   794  009E                     	;# 
   795  009F                     	;# 
   796  010C                     	;# 
   797  010D                     	;# 
   798  010E                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011D                     	;# 
   809  018C                     	;# 
   810  018D                     	;# 
   811  018E                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019B                     	;# 
   823  019C                     	;# 
   824  019D                     	;# 
   825  019E                     	;# 
   826  019F                     	;# 
   827  020C                     	;# 
   828  020D                     	;# 
   829  0211                     	;# 
   830  0211                     	;# 
   831  0212                     	;# 
   832  0212                     	;# 
   833  0213                     	;# 
   834  0213                     	;# 
   835  0214                     	;# 
   836  0214                     	;# 
   837  0215                     	;# 
   838  0215                     	;# 
   839  0215                     	;# 
   840  0216                     	;# 
   841  0216                     	;# 
   842  0217                     	;# 
   843  0217                     	;# 
   844  0391                     	;# 
   845  0392                     	;# 
   846  0393                     	;# 
   847  0394                     	;# 
   848  0395                     	;# 
   849  0396                     	;# 
   850  039A                     	;# 
   851  039B                     	;# 
   852  0611                     	;# 
   853  0612                     	;# 
   854  0613                     	;# 
   855  0613                     	;# 
   856  0614                     	;# 
   857  0615                     	;# 
   858  0616                     	;# 
   859  0616                     	;# 
   860  0691                     	;# 
   861  0692                     	;# 
   862  0693                     	;# 
   863  0694                     	;# 
   864  0695                     	;# 
   865  0E8E                     	;# 
   866  0E8F                     	;# 
   867  0E90                     	;# 
   868  0E91                     	;# 
   869  0E92                     	;# 
   870  0E93                     	;# 
   871  0E94                     	;# 
   872  0E94                     	;# 
   873  0E95                     	;# 
   874  0E96                     	;# 
   875  0E97                     	;# 
   876  0E98                     	;# 
   877  0E99                     	;# 
   878  0E9A                     	;# 
   879  0E9B                     	;# 
   880  0E9C                     	;# 
   881  0E9D                     	;# 
   882  0E9E                     	;# 
   883  0E9F                     	;# 
   884  0FE4                     	;# 
   885  0FE5                     	;# 
   886  0FE6                     	;# 
   887  0FE7                     	;# 
   888  0FE8                     	;# 
   889  0FE9                     	;# 
   890  0FEA                     	;# 
   891  0FEB                     	;# 
   892  0FED                     	;# 
   893  0FEE                     	;# 
   894  0FEF                     	;# 
   895  0000                     	;# 
   896  0001                     	;# 
   897  0002                     	;# 
   898  0003                     	;# 
   899  0004                     	;# 
   900  0005                     	;# 
   901  0006                     	;# 
   902  0007                     	;# 
   903  0008                     	;# 
   904  0009                     	;# 
   905  000A                     	;# 
   906  000B                     	;# 
   907  000C                     	;# 
   908  000D                     	;# 
   909  000E                     	;# 
   910  0011                     	;# 
   911  0012                     	;# 
   912  0015                     	;# 
   913  0016                     	;# 
   914  0016                     	;# 
   915  0017                     	;# 
   916  0018                     	;# 
   917  0019                     	;# 
   918  001A                     	;# 
   919  001B                     	;# 
   920  001C                     	;# 
   921  008C                     	;# 
   922  008D                     	;# 
   923  008E                     	;# 
   924  0091                     	;# 
   925  0092                     	;# 
   926  0095                     	;# 
   927  0096                     	;# 
   928  0097                     	;# 
   929  0098                     	;# 
   930  0099                     	;# 
   931  009A                     	;# 
   932  009B                     	;# 
   933  009B                     	;# 
   934  009C                     	;# 
   935  009D                     	;# 
   936  009E                     	;# 
   937  009F                     	;# 
   938  010C                     	;# 
   939  010D                     	;# 
   940  010E                     	;# 
   941  0111                     	;# 
   942  0112                     	;# 
   943  0113                     	;# 
   944  0114                     	;# 
   945  0115                     	;# 
   946  0116                     	;# 
   947  0117                     	;# 
   948  0118                     	;# 
   949  0119                     	;# 
   950  011D                     	;# 
   951  018C                     	;# 
   952  018D                     	;# 
   953  018E                     	;# 
   954  0191                     	;# 
   955  0191                     	;# 
   956  0192                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0194                     	;# 
   960  0195                     	;# 
   961  0196                     	;# 
   962  0199                     	;# 
   963  019A                     	;# 
   964  019B                     	;# 
   965  019C                     	;# 
   966  019D                     	;# 
   967  019E                     	;# 
   968  019F                     	;# 
   969  020C                     	;# 
   970  020D                     	;# 
   971  0211                     	;# 
   972  0211                     	;# 
   973  0212                     	;# 
   974  0212                     	;# 
   975  0213                     	;# 
   976  0213                     	;# 
   977  0214                     	;# 
   978  0214                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0215                     	;# 
   982  0216                     	;# 
   983  0216                     	;# 
   984  0217                     	;# 
   985  0217                     	;# 
   986  0391                     	;# 
   987  0392                     	;# 
   988  0393                     	;# 
   989  0394                     	;# 
   990  0395                     	;# 
   991  0396                     	;# 
   992  039A                     	;# 
   993  039B                     	;# 
   994  0611                     	;# 
   995  0612                     	;# 
   996  0613                     	;# 
   997  0613                     	;# 
   998  0614                     	;# 
   999  0615                     	;# 
  1000  0616                     	;# 
  1001  0616                     	;# 
  1002  0691                     	;# 
  1003  0692                     	;# 
  1004  0693                     	;# 
  1005  0694                     	;# 
  1006  0695                     	;# 
  1007  0E8E                     	;# 
  1008  0E8F                     	;# 
  1009  0E90                     	;# 
  1010  0E91                     	;# 
  1011  0E92                     	;# 
  1012  0E93                     	;# 
  1013  0E94                     	;# 
  1014  0E94                     	;# 
  1015  0E95                     	;# 
  1016  0E96                     	;# 
  1017  0E97                     	;# 
  1018  0E98                     	;# 
  1019  0E99                     	;# 
  1020  0E9A                     	;# 
  1021  0E9B                     	;# 
  1022  0E9C                     	;# 
  1023  0E9D                     	;# 
  1024  0E9E                     	;# 
  1025  0E9F                     	;# 
  1026  0FE4                     	;# 
  1027  0FE5                     	;# 
  1028  0FE6                     	;# 
  1029  0FE7                     	;# 
  1030  0FE8                     	;# 
  1031  0FE9                     	;# 
  1032  0FEA                     	;# 
  1033  0FEB                     	;# 
  1034  0FED                     	;# 
  1035  0FEE                     	;# 
  1036  0FEF                     	;# 
  1037  0000                     	;# 
  1038  0001                     	;# 
  1039  0002                     	;# 
  1040  0003                     	;# 
  1041  0004                     	;# 
  1042  0005                     	;# 
  1043  0006                     	;# 
  1044  0007                     	;# 
  1045  0008                     	;# 
  1046  0009                     	;# 
  1047  000A                     	;# 
  1048  000B                     	;# 
  1049  000C                     	;# 
  1050  000D                     	;# 
  1051  000E                     	;# 
  1052  0011                     	;# 
  1053  0012                     	;# 
  1054  0015                     	;# 
  1055  0016                     	;# 
  1056  0016                     	;# 
  1057  0017                     	;# 
  1058  0018                     	;# 
  1059  0019                     	;# 
  1060  001A                     	;# 
  1061  001B                     	;# 
  1062  001C                     	;# 
  1063  008C                     	;# 
  1064  008D                     	;# 
  1065  008E                     	;# 
  1066  0091                     	;# 
  1067  0092                     	;# 
  1068  0095                     	;# 
  1069  0096                     	;# 
  1070  0097                     	;# 
  1071  0098                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010D                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019C                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019F                     	;# 
  1111  020C                     	;# 
  1112  020D                     	;# 
  1113  0211                     	;# 
  1114  0211                     	;# 
  1115  0212                     	;# 
  1116  0212                     	;# 
  1117  0213                     	;# 
  1118  0213                     	;# 
  1119  0214                     	;# 
  1120  0214                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0216                     	;# 
  1125  0216                     	;# 
  1126  0217                     	;# 
  1127  0217                     	;# 
  1128  0391                     	;# 
  1129  0392                     	;# 
  1130  0393                     	;# 
  1131  0394                     	;# 
  1132  0395                     	;# 
  1133  0396                     	;# 
  1134  039A                     	;# 
  1135  039B                     	;# 
  1136  0611                     	;# 
  1137  0612                     	;# 
  1138  0613                     	;# 
  1139  0613                     	;# 
  1140  0614                     	;# 
  1141  0615                     	;# 
  1142  0616                     	;# 
  1143  0616                     	;# 
  1144  0691                     	;# 
  1145  0692                     	;# 
  1146  0693                     	;# 
  1147  0694                     	;# 
  1148  0695                     	;# 
  1149  0E8E                     	;# 
  1150  0E8F                     	;# 
  1151  0E90                     	;# 
  1152  0E91                     	;# 
  1153  0E92                     	;# 
  1154  0E93                     	;# 
  1155  0E94                     	;# 
  1156  0E94                     	;# 
  1157  0E95                     	;# 
  1158  0E96                     	;# 
  1159  0E97                     	;# 
  1160  0E98                     	;# 
  1161  0E99                     	;# 
  1162  0E9A                     	;# 
  1163  0E9B                     	;# 
  1164  0E9C                     	;# 
  1165  0E9D                     	;# 
  1166  0E9E                     	;# 
  1167  0E9F                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;_WorkQue
  1179                           
  1180                           	psect	idataBANK2
  1181  1766                     __pidataBANK2:	
  1182                           
  1183                           ;initializer for _HashTime
  1184  1766  34D0               	retlw	208
  1185                           
  1186                           ;initializer for _Status
  1187  1767  3449               	retlw	73
  1188  1768  3400               	retlw	0
  1189  1769  3400               	retlw	0
  1190  176A  3400               	retlw	0
  1191  176B  3400               	retlw	0
  1192  176C  3400               	retlw	0
  1193  176D  3400               	retlw	0
  1194  176E  3400               	retlw	0
  1195  176F  3400               	retlw	0
  1196  1770  3400               	retlw	0
  1197  1771  3400               	retlw	0
  1198  1772  3440               	retlw	64
  1199  1773  3400               	retlw	0
  1200                           
  1201                           ;initializer for _ClockCfg
  1202  1774  3407               	retlw	7
  1203  1775  3400               	retlw	0
  1204  1776  3403               	retlw	3
  1205  1777  3404               	retlw	4
  1206  1778  3472               	retlw	114
  1207  1779  3401               	retlw	1
  1208  177A  3400               	retlw	0
  1209  177B  3400               	retlw	0
  1210                           
  1211                           ;initializer for _Cfg
  1212  177C  3400               	retlw	0
  1213  177D  3401               	retlw	1
  1214  177E  343C               	retlw	60
  1215  177F  3450               	retlw	80
  1216  1780  34E6               	retlw	230
  1217  1781  3400               	retlw	0
  1218                           
  1219                           	psect	idataBANK3
  1220  07EA                     __pidataBANK3:	
  1221                           
  1222                           ;initializer for AsicPreCalc@F3347
  1223  07EA  3498               	retlw	152
  1224  07EB  342F               	retlw	47
  1225  07EC  348A               	retlw	138
  1226  07ED  3442               	retlw	66
  1227  07EE  3491               	retlw	145
  1228  07EF  3444               	retlw	68
  1229  07F0  3437               	retlw	55
  1230  07F1  3471               	retlw	113
  1231  07F2  34CF               	retlw	207
  1232  07F3  34FB               	retlw	251
  1233  07F4  34C0               	retlw	192
  1234  07F5  34B5               	retlw	181
  1235                           
  1236                           	psect	idataBANK6
  1237  1782                     __pidataBANK6:	
  1238                           
  1239                           ;initializer for _BankRanges
  1240  1782  3400               	retlw	0
  1241  1783  3400               	retlw	0
  1242  1784  3400               	retlw	0
  1243  1785  3400               	retlw	0
  1244  1786  3400               	retlw	0
  1245  1787  3400               	retlw	0
  1246  1788  3400               	retlw	0
  1247  1789  3440               	retlw	64
  1248  178A  34AA               	retlw	170
  1249  178B  34AA               	retlw	170
  1250  178C  34AA               	retlw	170
  1251  178D  342A               	retlw	42
  1252  178E  3400               	retlw	0
  1253  178F  3400               	retlw	0
  1254  1790  3400               	retlw	0
  1255  1791  3420               	retlw	32
  1256  1792  3499               	retlw	153
  1257  1793  3499               	retlw	153
  1258  1794  3499               	retlw	153
  1259  1795  3419               	retlw	25
  1260  1796  3455               	retlw	85
  1261  1797  3455               	retlw	85
  1262  1798  3455               	retlw	85
  1263  1799  3415               	retlw	21
  1264  179A  3492               	retlw	146
  1265  179B  3424               	retlw	36
  1266  179C  3449               	retlw	73
  1267  179D  3412               	retlw	18
  1268  179E  3400               	retlw	0
  1269  179F  3400               	retlw	0
  1270  17A0  3400               	retlw	0
  1271  17A1  3410               	retlw	16
  1272                           
  1273                           	psect	strings
  1274  0800                     __pstrings:	
  1275  0800                     __stringtab:	
  1276  0800  3400               	retlw	0
  1277  0801                     __end_of__stringtab:	
  1278  0801                     _USB_SD_Ptr:	
  1279  0801  34AB               	retlw	(_sd000| (0+32768))& (0+255)
  1280  0802  3405               	retlw	(_sd001| (0+32768))& (0+255)
  1281  0803  3439               	retlw	(_sd002| (0+32768))& (0+255)
  1282  0804                     __end_of_USB_SD_Ptr:	
  1283  0804                     _USB_CD_Ptr:	
  1284  0804  346D               	retlw	(_configDescriptor1| (0+32768))& (0+255)
  1285  0805                     __end_of_USB_CD_Ptr:	
  1286  0805                     _sd001:	
  1287  0805  3434               	retlw	52
  1288  0806  3403               	retlw	3
  1289  0807  344B               	retlw	75
  1290  0808  3400               	retlw	0
  1291  0809  346C               	retlw	108
  1292  080A  3400               	retlw	0
  1293  080B  346F               	retlw	111
  1294  080C  3400               	retlw	0
  1295  080D  346E               	retlw	110
  1296  080E  3400               	retlw	0
  1297  080F  3464               	retlw	100
  1298  0810  3400               	retlw	0
  1299  0811  3469               	retlw	105
  1300  0812  3400               	retlw	0
  1301  0813  346B               	retlw	107
  1302  0814  3400               	retlw	0
  1303  0815  3465               	retlw	101
  1304  0816  3400               	retlw	0
  1305  0817  3420               	retlw	32
  1306  0818  3400               	retlw	0
  1307  0819  3450               	retlw	80
  1308  081A  3400               	retlw	0
  1309  081B  3472               	retlw	114
  1310  081C  3400               	retlw	0
  1311  081D  346F               	retlw	111
  1312  081E  3400               	retlw	0
  1313  081F  346A               	retlw	106
  1314  0820  3400               	retlw	0
  1315  0821  3465               	retlw	101
  1316  0822  3400               	retlw	0
  1317  0823  3463               	retlw	99
  1318  0824  3400               	retlw	0
  1319  0825  3474               	retlw	116
  1320  0826  3400               	retlw	0
  1321  0827  3400               	retlw	0
  1322  0828  3400               	retlw	0
  1323  0829  3400               	retlw	0
  1324  082A  3400               	retlw	0
  1325  082B  3400               	retlw	0
  1326  082C  3400               	retlw	0
  1327  082D  3400               	retlw	0
  1328  082E  3400               	retlw	0
  1329  082F  3400               	retlw	0
  1330  0830  3400               	retlw	0
  1331  0831  3400               	retlw	0
  1332  0832  3400               	retlw	0
  1333  0833  3400               	retlw	0
  1334  0834  3400               	retlw	0
  1335  0835  3400               	retlw	0
  1336  0836  3400               	retlw	0
  1337  0837  3400               	retlw	0
  1338  0838  3400               	retlw	0
  1339  0839                     __end_of_sd001:	
  1340  0839                     _sd002:	
  1341  0839  3434               	retlw	52
  1342  083A  3403               	retlw	3
  1343  083B  344B               	retlw	75
  1344  083C  3400               	retlw	0
  1345  083D  3431               	retlw	49
  1346  083E  3400               	retlw	0
  1347  083F  3436               	retlw	54
  1348  0840  3400               	retlw	0
  1349  0841  3400               	retlw	0
  1350  0842  3400               	retlw	0
  1351  0843  3400               	retlw	0
  1352  0844  3400               	retlw	0
  1353  0845  3400               	retlw	0
  1354  0846  3400               	retlw	0
  1355  0847  3400               	retlw	0
  1356  0848  3400               	retlw	0
  1357  0849  3400               	retlw	0
  1358  084A  3400               	retlw	0
  1359  084B  3400               	retlw	0
  1360  084C  3400               	retlw	0
  1361  084D  3400               	retlw	0
  1362  084E  3400               	retlw	0
  1363  084F  3400               	retlw	0
  1364  0850  3400               	retlw	0
  1365  0851  3400               	retlw	0
  1366  0852  3400               	retlw	0
  1367  0853  3400               	retlw	0
  1368  0854  3400               	retlw	0
  1369  0855  3400               	retlw	0
  1370  0856  3400               	retlw	0
  1371  0857  3400               	retlw	0
  1372  0858  3400               	retlw	0
  1373  0859  3400               	retlw	0
  1374  085A  3400               	retlw	0
  1375  085B  3400               	retlw	0
  1376  085C  3400               	retlw	0
  1377  085D  3400               	retlw	0
  1378  085E  3400               	retlw	0
  1379  085F  3400               	retlw	0
  1380  0860  3400               	retlw	0
  1381  0861  3400               	retlw	0
  1382  0862  3400               	retlw	0
  1383  0863  3400               	retlw	0
  1384  0864  3400               	retlw	0
  1385  0865  3400               	retlw	0
  1386  0866  3400               	retlw	0
  1387  0867  3400               	retlw	0
  1388  0868  3400               	retlw	0
  1389  0869  3400               	retlw	0
  1390  086A  3400               	retlw	0
  1391  086B  3400               	retlw	0
  1392  086C  3400               	retlw	0
  1393  086D                     __end_of_sd002:	
  1394  086D                     _configDescriptor1:	
  1395  086D  3409               	retlw	9
  1396  086E  3402               	retlw	2
  1397  086F  3420               	retlw	32
  1398  0870  3400               	retlw	0
  1399  0871  3401               	retlw	1
  1400  0872  3401               	retlw	1
  1401  0873  3400               	retlw	0
  1402  0874  34C0               	retlw	192
  1403  0875  3432               	retlw	50
  1404  0876  3409               	retlw	9
  1405  0877  3404               	retlw	4
  1406  0878  3400               	retlw	0
  1407  0879  3400               	retlw	0
  1408  087A  3402               	retlw	2
  1409  087B  34FF               	retlw	255
  1410  087C  34FF               	retlw	255
  1411  087D  34FF               	retlw	255
  1412  087E  3400               	retlw	0
  1413  087F  3407               	retlw	7
  1414  0880  3405               	retlw	5
  1415  0881  3401               	retlw	1
  1416  0882  3402               	retlw	2
  1417  0883  3440               	retlw	64
  1418  0884  3400               	retlw	0
  1419  0885  3401               	retlw	1
  1420  0886  3407               	retlw	7
  1421  0887  3405               	retlw	5
  1422  0888  3481               	retlw	129
  1423  0889  3402               	retlw	2
  1424  088A  3440               	retlw	64
  1425  088B  3400               	retlw	0
  1426  088C  3401               	retlw	1
  1427  088D                     __end_of_configDescriptor1:	
  1428  088D                     _device_dsc:	
  1429  088D  3412               	retlw	18
  1430  088E  3401               	retlw	1
  1431  088F  3400               	retlw	0
  1432  0890  3402               	retlw	2
  1433  0891  3400               	retlw	0
  1434  0892  3400               	retlw	0
  1435  0893  3400               	retlw	0
  1436  0894  3408               	retlw	8
  1437  0895  34D8               	retlw	216
  1438  0896  3404               	retlw	4
  1439  0897  340A               	retlw	10
  1440  0898  34F6               	retlw	246
  1441  0899  3400               	retlw	0
  1442  089A  3400               	retlw	0
  1443  089B  3401               	retlw	1
  1444  089C  3402               	retlw	2
  1445  089D  3400               	retlw	0
  1446  089E  3401               	retlw	1
  1447  089F                     __end_of_device_dsc:	
  1448  089F                     _ID:	
  1449  089F  3410               	retlw	16
  1450  08A0  344B               	retlw	75
  1451  08A1  3431               	retlw	49
  1452  08A2  3436               	retlw	54
  1453  08A3  3400               	retlw	0
  1454  08A4  3400               	retlw	0
  1455  08A5  3400               	retlw	0
  1456  08A6  3400               	retlw	0
  1457  08A7  34EF               	retlw	239
  1458  08A8  34BE               	retlw	190
  1459  08A9  34AD               	retlw	173
  1460  08AA  34DE               	retlw	222
  1461  08AB                     __end_of_ID:	
  1462  08AB                     _sd000:	
  1463  08AB  3404               	retlw	4
  1464  08AC  3403               	retlw	3
  1465  08AD  3409               	retlw	9
  1466  08AE  3404               	retlw	4
  1467  08AF                     __end_of_sd000:	
  1468  0020                     _BDT	set	32	;_BDT
  1469  0048                     _CtrlTrfData	set	72	;_CtrlTrfData
  1470  0040                     _SetupPkt	set	64	;_SetupPkt
  1471                           
  1472                           	psect	nvBANK2
  1473  016A                     __pnvBANK2:	
  1474  016A                     _BankSize:	
  1475  016A                     	ds	1
  1476  0220                     _INPacket	set	544	;_INPacket
  1477  02A0                     _OUTPacket	set	672	;_OUTPacket
  1478  000B                     _INTCONbits	set	11
  1479  0012                     _PIR2bits	set	18
  1480  001B                     _PR2	set	27
  1481  001C                     _T2CONbits	set	28
  1482  0015                     _TMR0	set	21
  1483  005F                     _GIE	set	95
  1484  008D                     _RCIF	set	141
  1485  005A                     _TMR0IF	set	90
  1486  0089                     _TMR2IF	set	137
  1487  00E2                     _TMR2ON	set	226
  1488  009D                     _ADCON0bits	set	157
  1489  009E                     _ADCON1bits	set	158
  1490  009F                     _ADCON2bits	set	159
  1491  009C                     _ADRESH	set	156
  1492  0095                     _OPTION_REGbits	set	149
  1493  0099                     _OSCCON	set	153
  1494  0098                     _OSCTUNE	set	152
  1495  0092                     _PIE2bits	set	146
  1496  008C                     _TRISAbits	set	140
  1497  008E                     _TRISCbits	set	142
  1498  04AD                     _TMR0CS	set	1197
  1499  010C                     _LATAbits	set	268
  1500  010E                     _LATC	set	270
  1501  018C                     _ANSELA	set	396
  1502  018D                     _ANSELB	set	397
  1503  018D                     _ANSELBbits	set	397
  1504  018E                     _ANSELC	set	398
  1505  019F                     _BAUDCONbits	set	415
  1506  0199                     _RCREG	set	409
  1507  019D                     _RCSTAbits	set	413
  1508  019E                     _TXSTAbits	set	414
  1509  039B                     _ACTCON	set	923
  1510  0396                     _IOCBF	set	918
  1511  0394                     _IOCBPbits	set	916
  1512  0613                     _PWM1CON	set	1555
  1513  0612                     _PWM1DCH	set	1554
  1514  0611                     _PWM1DCL	set	1553
  1515  309E                     _PWM1OE	set	12446
  1516  0E96                     _UADDR	set	3734
  1517  0E91                     _UCFG	set	3729
  1518  0E8E                     _UCON	set	3726
  1519  0E8E                     _UCONbits	set	3726
  1520  0E97                     _UEIE	set	3735
  1521  0E93                     _UEIR	set	3731
  1522  0E98                     _UEP0bits	set	3736
  1523  0E92                     _UIE	set	3730
  1524  0E92                     _UIEbits	set	3730
  1525  0E90                     _UIR	set	3728
  1526  0E90                     _UIRbits	set	3728
  1527  0E8F                     _USTAT	set	3727
  1528  0E98                     _UEP0	set	3736
  1529  0E99                     _UEP1	set	3737
  1530                           
  1531                           ; #config settings
  1532  0000                     
  1533                           	psect	cinit
  1534  0014                     start_initialization:	
  1535  0014                     __initialization:	
  1536  0014  303C               	movlw	60
  1537  233C                     	;BIGRAM
  1538                           
  1539                           ; Clear objects allocated to BIGRAM
  1540  0015  0084               	movwf	4
  1541  0016  3023               	movlw	35
  1542  0017  0085               	movwf	5
  1543  0018  30B4               	movlw	180
  1544  0019  00FE               	movwf	126
  1545  001A  3000               	movlw	0
  1546  001B  01FF               	clrf	127
  1547  001C  3188  20B6  3180   	fcall	clear_ram
  1548                           
  1549                           ; Clear objects allocated to BANK0
  1550  001F  01EA               	clrf	__pbssBANK0& (0+127)
  1551  0020  01EB               	clrf	(__pbssBANK0+1)& (0+127)
  1552  0021  01EC               	clrf	(__pbssBANK0+2)& (0+127)
  1553  0022  01ED               	clrf	(__pbssBANK0+3)& (0+127)
  1554  0023  01EE               	clrf	(__pbssBANK0+4)& (0+127)
  1555  0024  01EF               	clrf	(__pbssBANK0+5)& (0+127)
  1556                           
  1557                           ; Clear objects allocated to BANK1
  1558  0025  0021               	movlb	1	; select bank1
  1559  0026  3020               	movlw	low __pbssBANK2
  1560  0027  01EA               	clrf	__pbssBANK1& (0+127)
  1561  0028  01EB               	clrf	(__pbssBANK1+1)& (0+127)
  1562  0029  01EC               	clrf	(__pbssBANK1+2)& (0+127)
  1563  002A  01ED               	clrf	(__pbssBANK1+3)& (0+127)
  1564  002B  01EE               	clrf	(__pbssBANK1+4)& (0+127)
  1565  002C  01EF               	clrf	(__pbssBANK1+5)& (0+127)
  1566                           
  1567                           ; Clear objects allocated to BANK2
  1568  002D  0084               	movwf	4
  1569  002E  3001               	movlw	high __pbssBANK2
  1570  002F  0085               	movwf	5
  1571  0030  302E               	movlw	46
  1572  0031  00FE               	movwf	126
  1573  0032  3000               	movlw	0
  1574  0033  00FF               	movwf	127
  1575  0034  3188  20B6  3180   	fcall	clear_ram
  1576                           
  1577                           ; Clear objects allocated to BANK3
  1578  0037  30A0               	movlw	low __pbssBANK3
  1579  0038  0084               	movwf	4
  1580  0039  3001               	movlw	high __pbssBANK3
  1581  003A  0085               	movwf	5
  1582  003B  3038               	movlw	56
  1583  003C  00FE               	movwf	126
  1584  003D  3000               	movlw	0
  1585  003E  00FF               	movwf	127
  1586  003F  3188  20B6  3180   	fcall	clear_ram
  1587                           
  1588                           ; Initialize objects allocated to BANK2
  1589  0042  3066               	movlw	low __pidataBANK2
  1590  0043  0084               	movwf	4
  1591  0044  3097               	movlw	(high __pidataBANK2)| (0+128)
  1592  0045  0085               	movwf	5
  1593  0046  304E               	movlw	low __pdataBANK2
  1594  0047  0086               	movwf	6
  1595  0048  3001               	movlw	high __pdataBANK2
  1596  0049  0087               	movwf	7
  1597  004A  3000               	movlw	0
  1598  004B  00FF               	movwf	127
  1599  004C  301C               	movlw	28
  1600  004D  3197  275A  3180   	fcall	init_ram
  1601                           
  1602                           ; Initialize objects allocated to BANK3
  1603  0050  30EA               	movlw	low __pidataBANK3
  1604  0051  0084               	movwf	4
  1605  0052  3087               	movlw	(high __pidataBANK3)| (0+128)
  1606  0053  0085               	movwf	5
  1607  0054  30D8               	movlw	low __pdataBANK3
  1608  0055  0086               	movwf	6
  1609  0056  3001               	movlw	high __pdataBANK3
  1610  0057  0087               	movwf	7
  1611  0058  3000               	movlw	0
  1612  0059  00FF               	movwf	127
  1613  005A  300C               	movlw	12
  1614  005B  3197  275A  3180   	fcall	init_ram
  1615                           
  1616                           ; Initialize objects allocated to BANK6
  1617  005E  3082               	movlw	low __pidataBANK6
  1618  005F  0084               	movwf	4
  1619  0060  3097               	movlw	(high __pidataBANK6)| (0+128)
  1620  0061  0085               	movwf	5
  1621  0062  3020               	movlw	low __pdataBANK6
  1622  0063  0086               	movwf	6
  1623  0064  3003               	movlw	high __pdataBANK6
  1624  0065  0087               	movwf	7
  1625  0066  3000               	movlw	0
  1626  0067  00FF               	movwf	127
  1627  0068  3020               	movlw	32
  1628  0069  3197  275A  3180   	fcall	init_ram
  1629  006C                     end_of_initialization:	
  1630                           ;End of C runtime variable initialization code
  1631                           
  1632  006C                     __end_of__initialization:	
  1633  006C  0020               	movlb	0
  1634  006D  286E               	ljmp	_main	;jump to C main() function
  1635  006E                     __pmaintext:	
  1636                           ; 0 bytes @ 0x1A
  1637 ;;
  1638 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1639 ;;
  1640 ;; *************** function _main *****************
  1641 ;; Defined at:
  1642 ;;		line 98 in file "main.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2  829[COMMON] int 
  1649 ;; Registers used:
  1650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 17F/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: FFE00/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels required when called:   13
  1662 ;; This function calls:
  1663 ;;		_InitializeSystem
  1664 ;;		_USBDeviceTasks
  1665 ;;		_WorkTick
  1666 ;;		_AsicPushWork
  1667 ;;		_ProcessIO
  1668 ;; This function is called by:
  1669 ;;		Startup code after reset
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _main
  1675  006E                     _main:	
  1676                           
  1677                           ;main.c: 99: InitializeSystem();
  1678                           
  1679                           ; Regs used in _main: [allreg]
  1680  006E  25ED               	fcall	_InitializeSystem
  1681  006F                     l830:	
  1682                           ;main.c: 101: while(1)
  1683                           
  1684                           
  1685                           ;main.c: 102: {
  1686                           ;main.c: 119: USBDeviceTasks();
  1687  006F  318D  2558  3180   	fcall	_USBDeviceTasks
  1688                           
  1689                           ;main.c: 133: if(TMR0IF)
  1690  0072  1D0B               	btfss	11,2	;volatile
  1691  0073  2876               	goto	l5972
  1692                           
  1693                           ;main.c: 134: WorkTick();
  1694  0074  2602  3180         	fcall	_WorkTick
  1695  0076                     l5972:	
  1696                           
  1697                           ;main.c: 136: if(Status.State == 'P'){
  1698  0076  0022               	movlb	2	; select bank2
  1699  0077  084F               	movf	_Status^(0+256),w	;volatile
  1700  0078  3A50               	xorlw	80
  1701  0079  1D03               	skipz
  1702  007A  287D               	goto	l832
  1703                           
  1704                           ;main.c: 137: AsicPushWork();
  1705  007B  224B  3180         	fcall	_AsicPushWork
  1706  007D                     l832:	
  1707                           
  1708                           ;main.c: 138: }
  1709                           ;main.c: 140: ProcessIO();
  1710  007D  2566  3180         	fcall	_ProcessIO
  1711  007F  286F               	goto	l830
  1712  0080                     __end_of_main:	
  1713  0080                     __ptext1774:	
  1714 ;; *************** function _ProcessCmd *****************
  1715 ;; Defined at:
  1716 ;;		line 44 in file "klondike.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;  cmd             1    wreg     PTR unsigned char 
  1719 ;;		 -> OUTPacket(64), 
  1720 ;; Auto vars:     Size  Location     Type
  1721 ;;  cmd             1   69[BANK1 ] PTR unsigned char 
  1722 ;;		 -> OUTPacket(64), 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;		None               void
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 1F/1
  1729 ;;		On exit  : 1F/2
  1730 ;;		Unchanged: FFE00/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1733 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  1734 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1735 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1736 ;;Total ram usage:        5 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    7
  1739 ;; This function calls:
  1740 ;;		___wmul
  1741 ;;		_AsicPreCalc
  1742 ;;		_AsicPushWork
  1743 ;;		_SendCmdReply
  1744 ;;		___lwdiv
  1745 ;; This function is called by:
  1746 ;;		_ProcessIO
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           
  1751                           ;psect for function _ProcessCmd
  1752  0080                     _ProcessCmd:	
  1753                           
  1754                           ; Regs used in _ProcessCmd: [allreg]
  1755                           ;ProcessCmd@cmd stored from wreg
  1756  0080  00E5               	movwf	ProcessCmd@cmd^(0+128)
  1757                           
  1758                           ;klondike.c: 47: switch(cmd[0]) {
  1759  0081  298C               	goto	l5908
  1760  0082                     l5842:	
  1761                           
  1762                           ;klondike.c: 49: if( Status.WorkQC < 4-1 ) {
  1763  0082  3003               	movlw	3
  1764  0083  0022               	movlb	2	; select bank2
  1765  0084  0252               	subwf	(_Status^(0+256)+3),w	;volatile
  1766  0085  1803               	skipnc
  1767  0086  28D0               	goto	l675
  1768                           
  1769                           ;klondike.c: 50: WorkQue[ (WorkNow + Status.WorkQC++) & 4-1 ] = *(WORKTASK *)(cmd+2);
  1770  0087  0021               	movlb	1	; select bank1
  1771  0088  26FB  3180         	fcall	PL58	;call to abstracted procedure
  1772  008A  086B               	movf	_WorkNow^(0+128),w
  1773  008B  0020               	movlb	0	; select bank0
  1774  008C  00D6               	movwf	?___wmul
  1775  008D  01D7               	clrf	?___wmul+1
  1776  008E  0022               	movlb	2	; select bank2
  1777  008F  0852               	movf	(_Status^(0+256)+3),w	;volatile
  1778  0090  0020               	movlb	0	; select bank0
  1779  0091  07D6               	addwf	?___wmul,f
  1780  0092  1803               	skipnc
  1781  0093  0AD7               	incf	?___wmul+1,f
  1782  0094  3003               	movlw	3
  1783  0095  05D6               	andwf	?___wmul,f
  1784  0096  302D               	movlw	45
  1785  0097  01D7               	clrf	?___wmul+1
  1786  0098  00D8               	movwf	?___wmul+2
  1787  0099  01D9               	clrf	?___wmul+3
  1788  009A  2211  3180         	fcall	___wmul
  1789  009C  303C               	movlw	60
  1790  009D  0021               	movlb	1	; select bank1
  1791  009E  00E1               	movwf	??_ProcessCmd^(0+128)
  1792  009F  3023               	movlw	35
  1793  00A0  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  1794  00A1  0020               	movlb	0	; select bank0
  1795  00A2  0856               	movf	?___wmul,w
  1796  00A3  0021               	movlb	1	; select bank1
  1797  00A4  0761               	addwf	??_ProcessCmd^(0+128),w
  1798  00A5  0084               	movwf	4
  1799  00A6  0020               	movlb	0	; select bank0
  1800  00A7  0857               	movf	?___wmul+1,w
  1801  00A8  0021               	movlb	1	; select bank1
  1802  00A9  3D62               	addwfc	(??_ProcessCmd+1)^(0+128),w
  1803  00AA  0085               	movwf	5
  1804  00AB  302D               	movlw	45
  1805  00AC  00FF               	movwf	127
  1806  00AD                     u4590:	
  1807  00AD  0016               	moviw fsr1++
  1808  00AE  001A               	movwi fsr0++
  1809  00AF  0BFF               	decfsz	127,f
  1810  00B0  28AD               	goto	u4590
  1811  00B1  0022               	movlb	2	; select bank2
  1812  00B2  0AD2               	incf	(_Status^(0+256)+3),f	;volatile
  1813                           
  1814                           ;klondike.c: 51: if(Status.State == 'R') {
  1815  00B3  084F               	movf	_Status^(0+256),w	;volatile
  1816  00B4  3A52               	xorlw	82
  1817  00B5  1D03               	skipz
  1818  00B6  28D0               	goto	l675
  1819                           
  1820                           ;klondike.c: 52: AsicPreCalc(&WorkQue[WorkNow]);
  1821  00B7  303C               	movlw	60
  1822  00B8  26CD  3180         	fcall	PL34	;call to abstracted procedure
  1823  00BA  26A5  3180         	fcall	PL22	;call to abstracted procedure
  1824  00BC  2211  3180         	fcall	___wmul
  1825  00BE  0856               	movf	?___wmul,w
  1826  00BF  0021               	movlb	1	; select bank1
  1827  00C0  00E1               	movwf	??_ProcessCmd^(0+128)
  1828  00C1  0020               	movlb	0	; select bank0
  1829  00C2  0857               	movf	?___wmul+1,w
  1830  00C3  0021               	movlb	1	; select bank1
  1831  00C4  00E2               	movwf	(??_ProcessCmd^(0+128)+1)
  1832  00C5  0861               	movf	??_ProcessCmd^(0+128),w
  1833  00C6  0020               	movlb	0	; select bank0
  1834  00C7  07E6               	addwf	?_AsicPreCalc,f
  1835  00C8  0021               	movlb	1	; select bank1
  1836  00C9  0862               	movf	(??_ProcessCmd^(0+128)+1),w
  1837  00CA  0020               	movlb	0	; select bank0
  1838  00CB  3DE7               	addwfc	?_AsicPreCalc+1,f
  1839  00CC  2381  3180         	fcall	_AsicPreCalc
  1840                           
  1841                           ;klondike.c: 53: AsicPushWork();
  1842  00CE  224B  3180         	fcall	_AsicPushWork
  1843  00D0                     l675:	
  1844                           
  1845                           ;klondike.c: 54: }
  1846                           ;klondike.c: 55: }
  1847                           ;klondike.c: 56: SendCmdReply(cmd, (char *)&Status, sizeof(Status));
  1848  00D0  0021               	movlb	1	; select bank1
  1849  00D1  2701  3180         	fcall	PL62	;call to abstracted procedure
  1850  00D3  304F               	movlw	_Status& (0+255)
  1851  00D4  00DE               	movwf	?_SendCmdReply+2
  1852  00D5  3001               	movlw	1
  1853  00D6  00DF               	movwf	?_SendCmdReply+3
  1854  00D7  300D               	movlw	13
  1855  00D8  00E0               	movwf	?_SendCmdReply+4
  1856  00D9  21A7  3180         	fcall	_SendCmdReply
  1857                           
  1858                           ;klondike.c: 57: break;
  1859  00DB  29A4               	goto	l677
  1860  00DC                     l5852:	
  1861                           
  1862                           ;klondike.c: 59: Status.WorkQC = WorkNow = 0;
  1863  00DC  01EB               	clrf	_WorkNow^(0+128)
  1864  00DD  0022               	movlb	2	; select bank2
  1865  00DE  01D2               	clrf	(_Status^(0+256)+3)	;volatile
  1866                           
  1867                           ;klondike.c: 60: Status.State = 'R';
  1868  00DF  3052               	movlw	82
  1869  00E0  298A               	goto	L13
  1870  00E1                     l5858:	
  1871                           
  1872                           ;klondike.c: 64: SendCmdReply(cmd, (char *)&ID, sizeof(ID));
  1873  00E1  2701  3180         	fcall	PL62	;call to abstracted procedure
  1874  00E3  309F               	movlw	low (_ID| (0+32768))
  1875  00E4  00DE               	movwf	?_SendCmdReply+2
  1876  00E5  3088               	movlw	high (_ID| (0+32768))
  1877  00E6  00DF               	movwf	?_SendCmdReply+3
  1878  00E7  300C               	movlw	12
  1879  00E8  00E0               	movwf	?_SendCmdReply+4
  1880  00E9  21A7  3180         	fcall	_SendCmdReply
  1881                           
  1882                           ;klondike.c: 65: break;
  1883  00EB  29A4               	goto	l677
  1884  00EC                     l5862:	
  1885                           
  1886                           ;klondike.c: 70: if( *(WORD *)&cmd[2] != 0 ) {
  1887  00EC  26FB  3180         	fcall	PL58	;call to abstracted procedure
  1888  00EE  0016               	moviw fsr1++
  1889  00EF  0401               	iorwf	1,w
  1890  00F0  1903               	skipnz
  1891  00F1  295F               	goto	l5894
  1892                           
  1893                           ;klondike.c: 71: Cfg = *(WORKCFG *)(cmd+2);
  1894  00F2  0865               	movf	ProcessCmd@cmd^(0+128),w
  1895  00F3  3E02               	addlw	2
  1896  00F4  0086               	movwf	6
  1897  00F5  3002               	movlw	2	; select bank4/5
  1898  00F6  0087               	movwf	7
  1899  00F7  3064               	movlw	low _Cfg
  1900  00F8  0084               	movwf	4
  1901  00F9  3001               	movlw	high _Cfg
  1902  00FA  0085               	movwf	5
  1903  00FB  3006               	movlw	6
  1904  00FC  00FF               	movwf	127
  1905  00FD                     u4620:	
  1906  00FD  0016               	moviw fsr1++
  1907  00FE  001A               	movwi fsr0++
  1908  00FF  0BFF               	decfsz	127,f
  1909  0100  28FD               	goto	u4620
  1910                           
  1911                           ;klondike.c: 72: if(Cfg.HashClock < 128)
  1912  0101  3000               	movlw	0
  1913  0102  0022               	movlb	2	; select bank2
  1914  0103  0265               	subwf	(_Cfg+1)^(0+256),w
  1915  0104  3080               	movlw	128
  1916  0105  1903               	skipnz
  1917  0106  0264               	subwf	_Cfg^(0+256),w
  1918  0107  1803               	skipnc
  1919  0108  290C               	goto	l683
  1920                           
  1921                           ;klondike.c: 73: Cfg.HashClock = 128;
  1922  0109  3080               	movlw	128
  1923  010A  00E4               	movwf	_Cfg^(0+256)
  1924  010B  01E5               	clrf	(_Cfg+1)^(0+256)
  1925  010C                     l683:	
  1926                           
  1927                           ;klondike.c: 74: if(Cfg.HashClock <= 250 && Cfg.HashClock >= 450/2)
  1928  010C  3000               	movlw	0
  1929  010D  0265               	subwf	(_Cfg+1)^(0+256),w
  1930  010E  30FB               	movlw	251
  1931  010F  1903               	skipnz
  1932  0110  0264               	subwf	_Cfg^(0+256),w
  1933  0111  1803               	skipnc
  1934  0112  291D               	goto	l684
  1935  0113  3000               	movlw	0
  1936  0114  0265               	subwf	(_Cfg+1)^(0+256),w
  1937  0115  30E1               	movlw	225
  1938  0116  1903               	skipnz
  1939  0117  0264               	subwf	_Cfg^(0+256),w
  1940  0118  1C03               	skipc
  1941  0119  291D               	goto	l684
  1942                           
  1943                           ;klondike.c: 75: Cfg.HashClock = 450/2-1;
  1944  011A  30E0               	movlw	224
  1945  011B  00E4               	movwf	_Cfg^(0+256)
  1946  011C  01E5               	clrf	(_Cfg+1)^(0+256)
  1947  011D                     l684:	
  1948                           
  1949                           ;klondike.c: 76: if(Cfg.HashClock >= 450)
  1950  011D  3001               	movlw	1
  1951  011E  0265               	subwf	(_Cfg+1)^(0+256),w
  1952  011F  30C2               	movlw	194
  1953  0120  1903               	skipnz
  1954  0121  0264               	subwf	_Cfg^(0+256),w
  1955  0122  1C03               	skipc
  1956  0123  2928               	goto	l685
  1957                           
  1958                           ;klondike.c: 77: Cfg.HashClock = 450-1;
  1959  0124  30C1               	movlw	193
  1960  0125  00E4               	movwf	_Cfg^(0+256)
  1961  0126  3001               	movlw	1
  1962  0127  00E5               	movwf	(_Cfg^(0+256)+1)
  1963  0128                     l685:	
  1964                           
  1965                           ;klondike.c: 78: if(Cfg.HashClock <= 250)
  1966  0128  3000               	movlw	0
  1967  0129  0265               	subwf	(_Cfg+1)^(0+256),w
  1968  012A  30FB               	movlw	251
  1969  012B  1903               	skipnz
  1970  012C  0264               	subwf	_Cfg^(0+256),w
  1971                           
  1972                           ;klondike.c: 79: ClockCfg[0] = (((DWORD)Cfg.HashClock*2) << 18) | 0x00030017;
  1973  012D  0864               	movf	_Cfg^(0+256),w
  1974  012E  00DC               	movwf	_ClockCfg^(0+256)
  1975  012F  0865               	movf	(_Cfg+1)^(0+256),w
  1976  0130  00DD               	movwf	(_ClockCfg^(0+256)+1)
  1977  0131  01DE               	clrf	(_ClockCfg^(0+256)+2)
  1978  0132  01DF               	clrf	(_ClockCfg^(0+256)+3)
  1979  0133  1803               	skipnc
  1980  0134  293C               	goto	L16
  1981  0135  3013               	movlw	19
  1982  0136                     u4685:	
  1983  0136  2719  3180         	fcall	PL88	;call to abstracted procedure
  1984  0138  0B89               	decfsz	9,f
  1985  0139  2936               	goto	u4685
  1986  013A  3017               	movlw	23
  1987  013B  2942               	goto	L14
  1988  013C                     L16:	
  1989                           ;klondike.c: 80: else
  1990                           ;klondike.c: 81: ClockCfg[0] = ((DWORD)Cfg.HashClock << 18) | 0x00030007;
  1991                           
  1992  013C  3012               	movlw	18
  1993  013D                     u4695:	
  1994  013D  2719  3180         	fcall	PL88	;call to abstracted procedure
  1995  013F  0B89               	decfsz	9,f
  1996  0140  293D               	goto	u4695
  1997  0141  3007               	movlw	7
  1998  0142                     L14:	
  1999  0142  04DC               	iorwf	_ClockCfg^(0+256),f
  2000  0143  3000               	movlw	0
  2001  0144  04DD               	iorwf	(_ClockCfg+1)^(0+256),f
  2002  0145  3003               	movlw	3
  2003  0146  04DE               	iorwf	(_ClockCfg+2)^(0+256),f
  2004  0147  3000               	movlw	0
  2005  0148  04DF               	iorwf	(_ClockCfg+3)^(0+256),f
  2006                           
  2007                           ;klondike.c: 82: HashTime = 256 - ((WORD)12292/Cfg.HashClock);
  2008  0149  0865               	movf	(_Cfg+1)^(0+256),w
  2009  014A  0020               	movlb	0	; select bank0
  2010  014B  00D7               	movwf	?___lwdiv+1
  2011  014C  0022               	movlb	2	; select bank2
  2012  014D  0864               	movf	_Cfg^(0+256),w
  2013  014E  0020               	movlb	0	; select bank0
  2014  014F  00D6               	movwf	?___lwdiv
  2015  0150  3004               	movlw	4
  2016  0151  00D8               	movwf	?___lwdiv+2
  2017  0152  3030               	movlw	48
  2018  0153  00D9               	movwf	?___lwdiv+3
  2019  0154  2226  3180         	fcall	___lwdiv
  2020  0156  0856               	movf	?___lwdiv,w
  2021  0157  3C00               	sublw	0
  2022  0158  0022               	movlb	2	; select bank2
  2023  0159  00CE               	movwf	_HashTime^(0+256)
  2024                           
  2025                           ;klondike.c: 83: PWM1DCH = Cfg.FanTarget;
  2026  015A  0868               	movf	(_Cfg^(0+256)+4),w
  2027  015B  002C               	movlb	12	; select bank12
  2028  015C  0092               	movwf	18	;volatile
  2029                           
  2030                           ;klondike.c: 84: Status.ErrorCount = 0;
  2031  015D  0022               	movlb	2	; select bank2
  2032  015E  01D6               	clrf	(_Status^(0+256)+7)	;volatile
  2033  015F                     l5894:	
  2034                           
  2035                           ;klondike.c: 85: }
  2036                           ;klondike.c: 86: SendCmdReply(cmd, (char *)&Cfg, sizeof(Cfg));
  2037  015F  0021               	movlb	1	; select bank1
  2038  0160  2701  3180         	fcall	PL62	;call to abstracted procedure
  2039  0162  3064               	movlw	_Cfg& (0+255)
  2040  0163  00DE               	movwf	?_SendCmdReply+2
  2041  0164  3001               	movlw	1
  2042  0165  00DF               	movwf	?_SendCmdReply+3
  2043  0166  3006               	movlw	6
  2044  0167  00E0               	movwf	?_SendCmdReply+4
  2045  0168  21A7  3180         	fcall	_SendCmdReply
  2046                           
  2047                           ;klondike.c: 87: break;
  2048  016A  29A4               	goto	l677
  2049  016B                     l5896:	
  2050                           
  2051                           ;klondike.c: 89: LATAbits.LATA4 = (cmd[2] == '1');
  2052  016B  26FB  3180         	fcall	PL58	;call to abstracted procedure
  2053  016D  0801               	movf	1,w
  2054  016E  3A31               	xorlw	49
  2055  016F  3000               	movlw	0
  2056  0170  1903               	skipnz
  2057  0171  3001               	movlw	1
  2058  0172  00E1               	movwf	??_ProcessCmd^(0+128)
  2059  0173  0EE1               	swapf	??_ProcessCmd^(0+128),f
  2060  0174  0022               	movlb	2	; select bank2
  2061  0175  080C               	movf	12,w	;volatile
  2062  0176  0021               	movlb	1	; select bank1
  2063  0177  0661               	xorwf	??_ProcessCmd^(0+128),w
  2064  0178  39EF               	andlw	-17
  2065  0179  0661               	xorwf	??_ProcessCmd^(0+128),w
  2066  017A  0022               	movlb	2	; select bank2
  2067  017B  008C               	movwf	12	;volatile
  2068                           
  2069                           ;klondike.c: 90: Status.State = (cmd[2] == '1') ? 'R' : 'D';
  2070  017C  0021               	movlb	1	; select bank1
  2071  017D  0865               	movf	ProcessCmd@cmd^(0+128),w
  2072  017E  3E02               	addlw	2
  2073  017F  0086               	movwf	6
  2074  0180  0801               	movf	1,w
  2075  0181  3A31               	xorlw	49
  2076  0182  1903               	skipnz
  2077  0183  2986               	goto	l5902
  2078  0184  3044               	movlw	68
  2079  0185  2987               	goto	L15
  2080  0186                     l5902:	
  2081  0186  3052               	movlw	82
  2082  0187                     L15:	
  2083  0187  00E3               	movwf	_ProcessCmd$2047^(0+128)
  2084  0188  01E4               	clrf	(_ProcessCmd$2047+1)^(0+128)
  2085  0189  0022               	movlb	2	; select bank2
  2086  018A                     L13:	
  2087  018A  00CF               	movwf	_Status^(0+256)	;volatile
  2088  018B  28D0               	goto	l675
  2089  018C                     l5908:	
  2090  018C  0865               	movf	ProcessCmd@cmd^(0+128),w
  2091  018D  0086               	movwf	6
  2092  018E  3002               	movlw	2	; select bank4/5
  2093  018F  0087               	movwf	7
  2094  0190  0801               	movf	1,w
  2095                           
  2096                           ; Switch size 1, requested type "space"
  2097                           ; Number of cases is 6, Range of values is 65 to 87
  2098                           ; switch strategies available:
  2099                           ; Name         Instructions Cycles
  2100                           ; simple_byte           19    10 (average)
  2101                           ; direct_byte           55     9 (fixed)
  2102                           ; jumptable            263     9 (fixed)
  2103                           ;	Chosen strategy is simple_byte
  2104  0191  3A41               	xorlw	65	; case 65
  2105  0192  1903               	skipnz
  2106  0193  28DC               	goto	l5852
  2107  0194  3A02               	xorlw	2	; case 67
  2108  0195  1903               	skipnz
  2109  0196  28EC               	goto	l5862
  2110  0197  3A06               	xorlw	6	; case 69
  2111  0198  1903               	skipnz
  2112  0199  296B               	goto	l5896
  2113  019A  3A0C               	xorlw	12	; case 73
  2114  019B  1903               	skipnz
  2115  019C  28E1               	goto	l5858
  2116  019D  3A1A               	xorlw	26	; case 83
  2117  019E  1903               	skipnz
  2118  019F  28D0               	goto	l675
  2119  01A0  3A04               	xorlw	4	; case 87
  2120  01A1  1903               	skipnz
  2121  01A2  2882               	goto	l5842
  2122  01A3  29A4               	goto	l677
  2123  01A4                     l677:	
  2124                           
  2125                           ;klondike.c: 102: LATAbits.LATA5 = 1;;
  2126  01A4  0022               	movlb	2	; select bank2
  2127  01A5  168C               	bsf	12,5	;volatile
  2128  01A6  0008               	return
  2129  01A7                     __end_of_ProcessCmd:	
  2130  01A7                     __ptext1780:	
  2131 ;; *************** function _SendCmdReply *****************
  2132 ;; Defined at:
  2133 ;;		line 208 in file "main.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;  cmd             2   12[BANK0 ] PTR unsigned char 
  2136 ;;		 -> ResultQue(8), OUTPacket(64), 
  2137 ;;  data            2   14[BANK0 ] PTR unsigned char 
  2138 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
  2139 ;;  count           1   16[BANK0 ] unsigned char 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  n               1   23[BANK0 ] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 1F/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: FFE00/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2151 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2153 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2154 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2155 ;;Total ram usage:       12 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    5
  2158 ;; This function calls:
  2159 ;;		___wmul
  2160 ;;		___bmul
  2161 ;; This function is called by:
  2162 ;;		_ProcessCmd
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           
  2167                           ;psect for function _SendCmdReply
  2168  01A7                     _SendCmdReply:	
  2169                           
  2170                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
  2171                           
  2172                           ; Regs used in _SendCmdReply: [allreg]
  2173  01A7  0860               	movf	SendCmdReply@count,w
  2174  01A8  00E1               	movwf	??_SendCmdReply
  2175  01A9  01E2               	clrf	??_SendCmdReply+1
  2176  01AA  0022               	movlb	2	; select bank2
  2177  01AB  083A               	movf	_WQI^(0+256),w
  2178  01AC  0020               	movlb	0	; select bank0
  2179  01AD  00D6               	movwf	?___wmul
  2180  01AE  300F               	movlw	15
  2181  01AF  01D7               	clrf	?___wmul+1
  2182  01B0  00D8               	movwf	?___wmul+2
  2183  01B1  01D9               	clrf	?___wmul+3
  2184  01B2  2211  3180         	fcall	___wmul
  2185  01B4  0861               	movf	??_SendCmdReply,w
  2186  01B5  0756               	addwf	?___wmul,w
  2187  01B6  00E3               	movwf	??_SendCmdReply+2
  2188  01B7  0862               	movf	??_SendCmdReply+1,w
  2189  01B8  3D57               	addwfc	?___wmul+1,w
  2190  01B9  00E4               	movwf	??_SendCmdReply+3
  2191  01BA  0863               	movf	??_SendCmdReply+2,w
  2192  01BB  3E02               	addlw	2
  2193  01BC  00E5               	movwf	??_SendCmdReply+4
  2194  01BD  3000               	movlw	0
  2195  01BE  3D64               	addwfc	??_SendCmdReply+3,w
  2196  01BF  00E6               	movwf	??_SendCmdReply+5
  2197  01C0  3A80               	xorlw	128
  2198  01C1  00FF               	movwf	127
  2199  01C2  3080               	movlw	128
  2200  01C3  027F               	subwf	127,w
  2201  01C4  1D03               	skipz
  2202  01C5  29C8               	goto	u4725
  2203  01C6  3040               	movlw	64
  2204  01C7  0265               	subwf	??_SendCmdReply+4,w
  2205  01C8                     u4725:	
  2206  01C8  1803               	skipnc
  2207  01C9  0008               	return
  2208                           
  2209                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
  2210  01CA  300F               	movlw	15
  2211  01CB  0020               	movlb	0	; select bank0
  2212  01CC  00D6               	movwf	?___bmul
  2213  01CD  0022               	movlb	2	; select bank2
  2214  01CE  083A               	movf	_WQI^(0+256),w
  2215  01CF  2524  3180         	fcall	___bmul
  2216  01D1  3E20               	addlw	32
  2217  01D2  0086               	movwf	6
  2218  01D3  3002               	movlw	2	; select bank4/5
  2219  01D4  0087               	movwf	7
  2220  01D5  085C               	movf	SendCmdReply@cmd,w
  2221  01D6  0084               	movwf	4
  2222  01D7  085D               	movf	SendCmdReply@cmd+1,w
  2223  01D8  0085               	movwf	5
  2224  01D9  0800               	movf	0,w
  2225  01DA  0081               	movwf	1
  2226                           
  2227                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
  2228  01DB  300F               	movlw	15
  2229  01DC  00D6               	movwf	?___bmul
  2230  01DD  0022               	movlb	2	; select bank2
  2231  01DE  083A               	movf	_WQI^(0+256),w
  2232  01DF  2524  3180         	fcall	___bmul
  2233  01E1  3E21               	addlw	33
  2234  01E2  0086               	movwf	6
  2235  01E3  3002               	movlw	2	; select bank4/5
  2236  01E4  0087               	movwf	7
  2237  01E5  0022               	movlb	2	; select bank2
  2238  01E6  0831               	movf	_SlaveAddress^(0+256),w
  2239  01E7  0081               	movwf	1
  2240                           
  2241                           ;main.c: 212: for(BYTE n=0; n < count; n++)
  2242  01E8  0020               	movlb	0	; select bank0
  2243  01E9  01E7               	clrf	SendCmdReply@n
  2244  01EA                     l5940:	
  2245  01EA  0860               	movf	SendCmdReply@count,w
  2246  01EB  0267               	subwf	SendCmdReply@n,w
  2247  01EC  1803               	btfsc	3,0
  2248  01ED  2A0C               	goto	l5942
  2249                           
  2250                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
  2251  01EE  300F               	movlw	15
  2252  01EF  00D6               	movwf	?___bmul
  2253  01F0  0022               	movlb	2	; select bank2
  2254  01F1  083A               	movf	_WQI^(0+256),w
  2255  01F2  2524  3180         	fcall	___bmul
  2256  01F4  00E1               	movwf	??_SendCmdReply
  2257  01F5  3E22               	addlw	34
  2258  01F6  00E2               	movwf	??_SendCmdReply+1
  2259  01F7  0867               	movf	SendCmdReply@n,w
  2260  01F8  0762               	addwf	??_SendCmdReply+1,w
  2261  01F9  00E3               	movwf	??_SendCmdReply+2
  2262  01FA  0086               	movwf	6
  2263  01FB  3002               	movlw	2	; select bank4/5
  2264  01FC  0087               	movwf	7
  2265  01FD  085F               	movf	SendCmdReply@data+1,w
  2266  01FE  00E5               	movwf	??_SendCmdReply+4
  2267  01FF  085E               	movf	SendCmdReply@data,w
  2268  0200  00E4               	movwf	??_SendCmdReply+3
  2269  0201  0867               	movf	SendCmdReply@n,w
  2270  0202  0764               	addwf	??_SendCmdReply+3,w
  2271  0203  0084               	movwf	4
  2272  0204  0865               	movf	??_SendCmdReply+4,w
  2273  0205  1803               	skipnc
  2274  0206  0A65               	incf	??_SendCmdReply+4,w
  2275  0207  0085               	movwf	5
  2276  0208  0800               	movf	0,w	;code access
  2277  0209  0081               	movwf	1
  2278  020A  0AE7               	incf	SendCmdReply@n,f
  2279  020B  29EA               	goto	l5940
  2280  020C                     l5942:	
  2281                           
  2282                           ;main.c: 214: WQI = (WQI+1) & 3;
  2283  020C  0022               	movlb	2	; select bank2
  2284  020D  3003               	movlw	3
  2285  020E  0ABA               	incf	_WQI^(0+256),f
  2286  020F  05BA               	andwf	_WQI^(0+256),f
  2287  0210  0008               	return
  2288  0211                     __end_of_SendCmdReply:	
  2289  0211                     __ptext1801:	
  2290 ;; *************** function ___wmul *****************
  2291 ;; Defined at:
  2292 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  multiplier      2    6[BANK0 ] unsigned int 
  2295 ;;  multiplicand    2    8[BANK0 ] unsigned int 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  product         2   10[BANK0 ] unsigned int 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  2    6[BANK0 ] unsigned int 
  2300 ;; Registers used:
  2301 ;;		wreg, status,2, status,0
  2302 ;; Tracked objects:
  2303 ;;		On entry : 1F/0
  2304 ;;		On exit  : 1F/0
  2305 ;;		Unchanged: FFFE0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2307 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2308 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2310 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2311 ;;Total ram usage:        6 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    4
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_ProcessCmd
  2318 ;;		_AsicPushWork
  2319 ;;		_SendCmdReply
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function ___wmul
  2325  0211                     ___wmul:	
  2326                           
  2327                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2328  0211  01DA               	clrf	___wmul@product
  2329  0212  01DB               	clrf	___wmul@product+1
  2330  0213                     l6052:	
  2331  0213  1C56               	btfss	___wmul@multiplier,0
  2332  0214  2A19               	goto	l6056
  2333  0215  0858               	movf	___wmul@multiplicand,w
  2334  0216  07DA               	addwf	___wmul@product,f
  2335  0217  0859               	movf	___wmul@multiplicand+1,w
  2336  0218  3DDB               	addwfc	___wmul@product+1,f
  2337  0219                     l6056:	
  2338  0219  35D8               	lslf	___wmul@multiplicand,f
  2339  021A  0DD9               	rlf	___wmul@multiplicand+1,f
  2340  021B  36D7               	lsrf	___wmul@multiplier+1,f
  2341  021C  0CD6               	rrf	___wmul@multiplier,f
  2342  021D  0857               	movf	___wmul@multiplier+1,w
  2343  021E  0456               	iorwf	___wmul@multiplier,w
  2344  021F  1D03               	skipz
  2345  0220  2A13               	goto	l6052
  2346  0221  085B               	movf	___wmul@product+1,w
  2347  0222  00D7               	movwf	?___wmul+1
  2348  0223  085A               	movf	___wmul@product,w
  2349  0224  00D6               	movwf	?___wmul
  2350  0225  0008               	return
  2351  0226                     __end_of___wmul:	
  2352  0226                     __ptext1798:	
  2353 ;; *************** function ___lwdiv *****************
  2354 ;; Defined at:
  2355 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/lwdiv.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  divisor         2    6[BANK0 ] unsigned int 
  2358 ;;  dividend        2    8[BANK0 ] unsigned int 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  quotient        2   11[BANK0 ] unsigned int 
  2361 ;;  counter         1   10[BANK0 ] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2    6[BANK0 ] unsigned int 
  2364 ;; Registers used:
  2365 ;;		wreg, status,2, status,0
  2366 ;; Tracked objects:
  2367 ;;		On entry : 1F/0
  2368 ;;		On exit  : 1F/0
  2369 ;;		Unchanged: FFFE0/0
  2370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2371 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2372 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2374 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2375 ;;Total ram usage:        7 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    4
  2378 ;; This function calls:
  2379 ;;		Nothing
  2380 ;; This function is called by:
  2381 ;;		_ProcessCmd
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           
  2386                           ;psect for function ___lwdiv
  2387  0226                     ___lwdiv:	
  2388                           
  2389                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2390  0226  01DB               	clrf	___lwdiv@quotient
  2391  0227  01DC               	clrf	___lwdiv@quotient+1
  2392  0228  0857               	movf	___lwdiv@divisor+1,w
  2393  0229  0456               	iorwf	___lwdiv@divisor,w
  2394  022A  1903               	skipnz
  2395  022B  2A46               	goto	l6088
  2396  022C  01DA               	clrf	___lwdiv@counter
  2397  022D                     L21:	
  2398  022D  0ADA               	incf	___lwdiv@counter,f
  2399  022E  1BD7               	btfsc	___lwdiv@divisor+1,7
  2400  022F  2A33               	goto	l6076
  2401  0230  35D6               	lslf	___lwdiv@divisor,f
  2402  0231  0DD7               	rlf	___lwdiv@divisor+1,f
  2403  0232  2A2D               	goto	L21
  2404  0233                     l6076:	
  2405  0233  35DB               	lslf	___lwdiv@quotient,f
  2406  0234  0DDC               	rlf	___lwdiv@quotient+1,f
  2407  0235  0857               	movf	___lwdiv@divisor+1,w
  2408  0236  0259               	subwf	___lwdiv@dividend+1,w
  2409  0237  1D03               	skipz
  2410  0238  2A3B               	goto	u4905
  2411  0239  0856               	movf	___lwdiv@divisor,w
  2412  023A  0258               	subwf	___lwdiv@dividend,w
  2413  023B                     u4905:	
  2414  023B  1C03               	skipc
  2415  023C  2A42               	goto	l6084
  2416  023D  0856               	movf	___lwdiv@divisor,w
  2417  023E  02D8               	subwf	___lwdiv@dividend,f
  2418  023F  0857               	movf	___lwdiv@divisor+1,w
  2419  0240  3BD9               	subwfb	___lwdiv@dividend+1,f
  2420  0241  145B               	bsf	___lwdiv@quotient,0
  2421  0242                     l6084:	
  2422  0242  36D7               	lsrf	___lwdiv@divisor+1,f
  2423  0243  0CD6               	rrf	___lwdiv@divisor,f
  2424  0244  0BDA               	decfsz	___lwdiv@counter,f
  2425  0245  2A33               	goto	l6076
  2426  0246                     l6088:	
  2427  0246  085C               	movf	___lwdiv@quotient+1,w
  2428  0247  00D7               	movwf	?___lwdiv+1
  2429  0248  085B               	movf	___lwdiv@quotient,w
  2430  0249  00D6               	movwf	?___lwdiv
  2431  024A  0008               	return
  2432  024B                     __end_of___lwdiv:	
  2433  024B                     __ptext1775:	
  2434 ;; *************** function _AsicPushWork *****************
  2435 ;; Defined at:
  2436 ;;		line 106 in file "klondike.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;		None               void
  2443 ;; Registers used:
  2444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 1C/2
  2447 ;;		On exit  : 1C/0
  2448 ;;		Unchanged: FFE00/0
  2449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2454 ;;Total ram usage:        2 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    6
  2457 ;; This function calls:
  2458 ;;		___wmul
  2459 ;;		_SendAsicData
  2460 ;;		_AsicPreCalc
  2461 ;; This function is called by:
  2462 ;;		_ProcessCmd
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           
  2468                           ;psect for function _AsicPushWork
  2469  024B                     _AsicPushWork:	
  2470                           
  2471                           ;klondike.c: 107: Status.WorkID = WorkQue[WorkNow].WorkID;
  2472                           
  2473                           ; Regs used in _AsicPushWork: [allreg]
  2474  024B  26A5  3180         	fcall	PL22	;call to abstracted procedure
  2475  024D  2211  3180         	fcall	___wmul
  2476  024F  303C               	movlw	60
  2477  0250  00E8               	movwf	??_AsicPushWork
  2478  0251  3023               	movlw	35
  2479  0252  00E9               	movwf	??_AsicPushWork+1
  2480  0253  0856               	movf	?___wmul,w
  2481  0254  0768               	addwf	??_AsicPushWork,w
  2482  0255  0086               	movwf	6
  2483  0256  0857               	movf	?___wmul+1,w
  2484  0257  3D69               	addwfc	??_AsicPushWork+1,w
  2485  0258  0087               	movwf	7
  2486  0259  0801               	movf	1,w
  2487  025A  0022               	movlb	2	; select bank2
  2488  025B  00D3               	movwf	(_Status^(0+256)+4)	;volatile
  2489                           
  2490                           ;klondike.c: 108: SendAsicData(&WorkQue[WorkNow], 0x50);
  2491  025C  303C               	movlw	60
  2492  025D  0020               	movlb	0	; select bank0
  2493  025E  00DC               	movwf	?_SendAsicData
  2494  025F  3023               	movlw	35
  2495  0260  00DD               	movwf	?_SendAsicData+1
  2496  0261  26A5  3180         	fcall	PL22	;call to abstracted procedure
  2497  0263  2211  3180         	fcall	___wmul
  2498  0265  2713  3180         	fcall	PL78	;call to abstracted procedure
  2499  0267  07DC               	addwf	?_SendAsicData,f
  2500  0268  0869               	movf	??_AsicPushWork+1,w
  2501  0269  3DDD               	addwfc	?_SendAsicData+1,f
  2502  026A  3050               	movlw	80
  2503  026B  00DE               	movwf	?_SendAsicData+2
  2504  026C  228B  3180         	fcall	_SendAsicData
  2505                           
  2506                           ;klondike.c: 109: WorkNow = (WorkNow+1) & 4-1;
  2507  026E  0021               	movlb	1	; select bank1
  2508  026F  3003               	movlw	3
  2509  0270  0AEB               	incf	_WorkNow^(0+128),f
  2510  0271  05EB               	andwf	_WorkNow^(0+128),f
  2511                           
  2512                           ;klondike.c: 110: Status.HashCount = 0;
  2513  0272  0022               	movlb	2	; select bank2
  2514  0273  01D7               	clrf	(_Status^(0+256)+8)	;volatile
  2515  0274  01D8               	clrf	((_Status+1)^(0+256)+8)	;volatile
  2516                           
  2517                           ;klondike.c: 111: TMR0 = HashTime;
  2518  0275  084E               	movf	_HashTime^(0+256),w
  2519  0276  0020               	movlb	0	; select bank0
  2520  0277  0095               	movwf	21	;volatile
  2521                           
  2522                           ;klondike.c: 112: Status.State ='W';
  2523  0278  3057               	movlw	87
  2524  0279  0022               	movlb	2	; select bank2
  2525  027A  00CF               	movwf	_Status^(0+256)	;volatile
  2526                           
  2527                           ;klondike.c: 113: if(--Status.WorkQC > 0)
  2528  027B  03D2               	decf	(_Status^(0+256)+3),f	;volatile
  2529  027C  1903               	btfsc	3,2
  2530  027D  0008               	return
  2531                           
  2532                           ;klondike.c: 114: AsicPreCalc(&WorkQue[WorkNow]);
  2533  027E  303C               	movlw	60
  2534  027F  26CD  3180         	fcall	PL34	;call to abstracted procedure
  2535  0281  26A5  3180         	fcall	PL22	;call to abstracted procedure
  2536  0283  2211  3180         	fcall	___wmul
  2537  0285  2713  3180         	fcall	PL78	;call to abstracted procedure
  2538  0287  07E6               	addwf	?_AsicPreCalc,f
  2539  0288  0869               	movf	??_AsicPushWork+1,w
  2540  0289  3DE7               	addwfc	?_AsicPreCalc+1,f
  2541  028A  2B81               	ljmp	l5780
  2542  028B                     __end_of_AsicPushWork:	
  2543  028B                     __ptext1776:	
  2544 ;; *************** function _SendAsicData *****************
  2545 ;; Defined at:
  2546 ;;		line 36 in file "asic.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  work            2   12[BANK0 ] PTR struct _worktask
  2549 ;;		 -> WorkQue(180), 
  2550 ;;  split           1   14[BANK0 ] unsigned char 
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;		None               void
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0, pclath, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 1F/0
  2559 ;;		On exit  : 1F/2
  2560 ;;		Unchanged: FFE00/0
  2561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2562 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2565 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2566 ;;Total ram usage:        3 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    5
  2569 ;; This function calls:
  2570 ;;		_Send32
  2571 ;; This function is called by:
  2572 ;;		_AsicPushWork
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _SendAsicData
  2578  028B                     _SendAsicData:	
  2579                           
  2580                           ;asic.c: 37: GIE = 0;
  2581                           
  2582                           ; Regs used in _SendAsicData: [wreg+status,2+status,0+pclath+cstack]
  2583  028B  138B               	bcf	11,7	;volatile
  2584                           
  2585                           ;asic.c: 38: last_bit0 = 0x48; last_bit1 = 0x90;
  2586  028C  3048               	movlw	72
  2587  028D  0022               	movlb	2	; select bank2
  2588  028E  00BD               	movwf	_last_bit0^(0+256)
  2589  028F  3090               	movlw	144
  2590  0290  00BE               	movwf	_last_bit1^(0+256)
  2591                           
  2592                           ;asic.c: 39: send32_data = (WORD)&ClockCfg; send32_count = 2;
  2593  0291  305C               	movlw	_ClockCfg& (0+255)
  2594  0292  00AC               	movwf	_send32_data^(0+256)
  2595  0293  3001               	movlw	1
  2596  0294  00AD               	movwf	(_send32_data+1)^(0+256)
  2597  0295  3002               	movlw	2
  2598  0296  00C0               	movwf	_send32_count^(0+256)
  2599                           
  2600                           ;asic.c: 40: Send32();
  2601  0297  22D5  3180         	fcall	_Send32
  2602                           
  2603                           ;asic.c: 41: send32_data = (WORD)&work->Merkle; send32_count = 3;
  2604  0299  26DA  3180         	fcall	PL46	;call to abstracted procedure
  2605  029B  3021               	movlw	33
  2606  029C  07AC               	addwf	_send32_data^(0+256),f
  2607  029D  1803               	skipnc
  2608  029E  0AAD               	incf	(_send32_data+1)^(0+256),f
  2609  029F  3003               	movlw	3
  2610  02A0  00C0               	movwf	_send32_count^(0+256)
  2611                           
  2612                           ;asic.c: 42: Send32();
  2613  02A1  22D5  3180         	fcall	_Send32
  2614                           
  2615                           ;asic.c: 43: send32_data = (WORD)&PrecalcHashes[1]; send32_count = 5;
  2616  02A3  30C4               	movlw	(_PrecalcHashes+4)& (0+255)
  2617  02A4  0022               	movlb	2	; select bank2
  2618  02A5  00AC               	movwf	_send32_data^(0+256)
  2619  02A6  3001               	movlw	1
  2620  02A7  00AD               	movwf	(_send32_data+1)^(0+256)
  2621  02A8  3005               	movlw	5
  2622  02A9  00C0               	movwf	_send32_count^(0+256)
  2623                           
  2624                           ;asic.c: 44: Send32();
  2625  02AA  22D5  3180         	fcall	_Send32
  2626                           
  2627                           ;asic.c: 45: send32_data = (WORD)&work->MidState; send32_count = 8;
  2628  02AC  26DA  3180         	fcall	PL46	;call to abstracted procedure
  2629  02AE  0AAC               	incf	_send32_data^(0+256),f
  2630  02AF  1903               	skipnz
  2631  02B0  0AAD               	incf	(_send32_data+1)^(0+256),f
  2632  02B1  3008               	movlw	8
  2633  02B2  00C0               	movwf	_send32_count^(0+256)
  2634                           
  2635                           ;asic.c: 46: Send32();
  2636  02B3  22D5  3180         	fcall	_Send32
  2637                           
  2638                           ;asic.c: 47: send32_data = (WORD)&PrecalcHashes; send32_count = 1;
  2639  02B5  30C0               	movlw	_PrecalcHashes& (0+255)
  2640  02B6  0022               	movlb	2	; select bank2
  2641  02B7  00AC               	movwf	_send32_data^(0+256)
  2642  02B8  3001               	movlw	1
  2643  02B9  00AD               	movwf	(_send32_data+1)^(0+256)
  2644  02BA  01C0               	clrf	_send32_count^(0+256)
  2645  02BB  0AC0               	incf	_send32_count^(0+256),f
  2646                           
  2647                           ;asic.c: 48: Send32();
  2648  02BC  22D5  3180         	fcall	_Send32
  2649                           
  2650                           ;asic.c: 50: last_bit0 = last_bit1 = split;
  2651  02BE  0020               	movlb	0	; select bank0
  2652  02BF  085E               	movf	SendAsicData@split,w
  2653  02C0  0022               	movlb	2	; select bank2
  2654  02C1  00BE               	movwf	_last_bit1^(0+256)
  2655  02C2  00BD               	movwf	_last_bit0^(0+256)
  2656                           
  2657                           ;asic.c: 51: send32_data = (WORD)&NonceRanges; send32_count = BankSize;
  2658  02C3  30A0               	movlw	_NonceRanges& (0+255)
  2659  02C4  00AC               	movwf	_send32_data^(0+256)
  2660  02C5  3001               	movlw	1
  2661  02C6  00AD               	movwf	(_send32_data+1)^(0+256)
  2662  02C7  086A               	movf	_BankSize^(0+256),w
  2663  02C8  00C0               	movwf	_send32_count^(0+256)
  2664                           
  2665                           ;asic.c: 52: Send32();
  2666  02C9  22D5               	fcall	_Send32
  2667                           
  2668                           ;asic.c: 53: LATC = 0xD8;;
  2669  02CA  30D8               	movlw	216
  2670  02CB  0022               	movlb	2	; select bank2
  2671  02CC  008E               	movwf	14	;volatile
  2672                           
  2673                           ;asic.c: 54: GIE = 1;
  2674  02CD  178B               	bsf	11,7	;volatile
  2675                           
  2676                           ;asic.c: 55: ClockCfg[0] = ClockCfg[0] & ~0x00000002;
  2677  02CE  30FD               	movlw	253
  2678  02CF  05DC               	andwf	_ClockCfg^(0+256),f
  2679  02D0  30FF               	movlw	255
  2680  02D1  05DD               	andwf	(_ClockCfg+1)^(0+256),f
  2681  02D2  05DE               	andwf	(_ClockCfg+2)^(0+256),f
  2682  02D3  05DF               	andwf	(_ClockCfg+3)^(0+256),f
  2683  02D4  0008               	return
  2684  02D5                     __end_of_SendAsicData:	
  2685  02D5                     __ptext1777:	
  2686 ;; *************** function _Send32 *****************
  2687 ;; Defined at:
  2688 ;;		line 59 in file "asic.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;		None
  2693 ;; Return value:  Size  Location     Type
  2694 ;;		None               void
  2695 ;; Registers used:
  2696 ;;		None
  2697 ;; Tracked objects:
  2698 ;;		On entry : 1F/2
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: FFE00/0
  2701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2706 ;;Total ram usage:        0 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    4
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_SendAsicData
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           
  2717                           ;psect for function _Send32
  2718  02D5                     _Send32:	
  2719                           
  2720                           ; Regs used in _Send32: []
  2721  02D5  0022               	banksel	270	;# 
  2722  02D6  082C               	movf	_send32_data& (0+127),w	;# 
  2723  02D7  0086               	movwf	6	;# 
  2724  02D8  082D               	movf	(_send32_data+1)& (0+127),w	;# 
  2725  02D9  0087               	movwf	7	;# 
  2726  02DA                     next_word:	
  2727                           
  2728                           ;# 
  2729  02DA  3048               	movlw	72	;# 
  2730  02DB  018E               	clrf	14	;# 
  2731  02DC  1801               	btfsc	1,0	;# 
  2732  02DD  3090               	movlw	144	;# 
  2733  02DE  008E               	movwf	14	;# 
  2734  02DF  3048               	movlw	72	;# 
  2735  02E0  018E               	clrf	14	;# 
  2736  02E1  1881               	btfsc	1,1	;# 
  2737  02E2  3090               	movlw	144	;# 
  2738  02E3  008E               	movwf	14	;# 
  2739  02E4  3048               	movlw	72	;# 
  2740  02E5  018E               	clrf	14	;# 
  2741  02E6  1901               	btfsc	1,2	;# 
  2742  02E7  3090               	movlw	144	;# 
  2743  02E8  008E               	movwf	14	;# 
  2744  02E9  3048               	movlw	72	;# 
  2745  02EA  018E               	clrf	14	;# 
  2746  02EB  1981               	btfsc	1,3	;# 
  2747  02EC  3090               	movlw	144	;# 
  2748  02ED  008E               	movwf	14	;# 
  2749  02EE  3048               	movlw	72	;# 
  2750  02EF  018E               	clrf	14	;# 
  2751  02F0  1A01               	btfsc	1,4	;# 
  2752  02F1  3090               	movlw	144	;# 
  2753  02F2  008E               	movwf	14	;# 
  2754  02F3  3048               	movlw	72	;# 
  2755  02F4  018E               	clrf	14	;# 
  2756  02F5  1A81               	btfsc	1,5	;# 
  2757  02F6  3090               	movlw	144	;# 
  2758  02F7  008E               	movwf	14	;# 
  2759  02F8  3048               	movlw	72	;# 
  2760  02F9  018E               	clrf	14	;# 
  2761  02FA  1B01               	btfsc	1,6	;# 
  2762  02FB  3090               	movlw	144	;# 
  2763  02FC  008E               	movwf	14	;# 
  2764  02FD  3048               	movlw	72	;# 
  2765  02FE  018E               	clrf	14	;# 
  2766  02FF  1B81               	btfsc	1,7	;# 
  2767  0300  3090               	movlw	144	;# 
  2768  0301  008E               	movwf	14	;# 
  2769  0302  3141               	addfsr 1,1	;# 
  2770  0303  3048               	movlw	72	;# 
  2771  0304  018E               	clrf	14	;# 
  2772  0305  1801               	btfsc	1,0	;# 
  2773  0306  3090               	movlw	144	;# 
  2774  0307  008E               	movwf	14	;# 
  2775  0308  3048               	movlw	72	;# 
  2776  0309  018E               	clrf	14	;# 
  2777  030A  1881               	btfsc	1,1	;# 
  2778  030B  3090               	movlw	144	;# 
  2779  030C  008E               	movwf	14	;# 
  2780  030D  3048               	movlw	72	;# 
  2781  030E  018E               	clrf	14	;# 
  2782  030F  1901               	btfsc	1,2	;# 
  2783  0310  3090               	movlw	144	;# 
  2784  0311  008E               	movwf	14	;# 
  2785  0312  3048               	movlw	72	;# 
  2786  0313  018E               	clrf	14	;# 
  2787  0314  1981               	btfsc	1,3	;# 
  2788  0315  3090               	movlw	144	;# 
  2789  0316  008E               	movwf	14	;# 
  2790  0317  3048               	movlw	72	;# 
  2791  0318  018E               	clrf	14	;# 
  2792  0319  1A01               	btfsc	1,4	;# 
  2793  031A  3090               	movlw	144	;# 
  2794  031B  008E               	movwf	14	;# 
  2795  031C  3048               	movlw	72	;# 
  2796  031D  018E               	clrf	14	;# 
  2797  031E  1A81               	btfsc	1,5	;# 
  2798  031F  3090               	movlw	144	;# 
  2799  0320  008E               	movwf	14	;# 
  2800  0321  3048               	movlw	72	;# 
  2801  0322  018E               	clrf	14	;# 
  2802  0323  1B01               	btfsc	1,6	;# 
  2803  0324  3090               	movlw	144	;# 
  2804  0325  008E               	movwf	14	;# 
  2805  0326  3048               	movlw	72	;# 
  2806  0327  018E               	clrf	14	;# 
  2807  0328  1B81               	btfsc	1,7	;# 
  2808  0329  3090               	movlw	144	;# 
  2809  032A  008E               	movwf	14	;# 
  2810  032B  3141               	addfsr 1,1	;# 
  2811  032C  3048               	movlw	72	;# 
  2812  032D  018E               	clrf	14	;# 
  2813  032E  1801               	btfsc	1,0	;# 
  2814  032F  3090               	movlw	144	;# 
  2815  0330  008E               	movwf	14	;# 
  2816  0331  3048               	movlw	72	;# 
  2817  0332  018E               	clrf	14	;# 
  2818  0333  1881               	btfsc	1,1	;# 
  2819  0334  3090               	movlw	144	;# 
  2820  0335  008E               	movwf	14	;# 
  2821  0336  3048               	movlw	72	;# 
  2822  0337  018E               	clrf	14	;# 
  2823  0338  1901               	btfsc	1,2	;# 
  2824  0339  3090               	movlw	144	;# 
  2825  033A  008E               	movwf	14	;# 
  2826  033B  3048               	movlw	72	;# 
  2827  033C  018E               	clrf	14	;# 
  2828  033D  1981               	btfsc	1,3	;# 
  2829  033E  3090               	movlw	144	;# 
  2830  033F  008E               	movwf	14	;# 
  2831  0340  3048               	movlw	72	;# 
  2832  0341  018E               	clrf	14	;# 
  2833  0342  1A01               	btfsc	1,4	;# 
  2834  0343  3090               	movlw	144	;# 
  2835  0344  008E               	movwf	14	;# 
  2836  0345  3048               	movlw	72	;# 
  2837  0346  018E               	clrf	14	;# 
  2838  0347  1A81               	btfsc	1,5	;# 
  2839  0348  3090               	movlw	144	;# 
  2840  0349  008E               	movwf	14	;# 
  2841  034A  3048               	movlw	72	;# 
  2842  034B  018E               	clrf	14	;# 
  2843  034C  1B01               	btfsc	1,6	;# 
  2844  034D  3090               	movlw	144	;# 
  2845  034E  008E               	movwf	14	;# 
  2846  034F  3048               	movlw	72	;# 
  2847  0350  018E               	clrf	14	;# 
  2848  0351  1B81               	btfsc	1,7	;# 
  2849  0352  3090               	movlw	144	;# 
  2850  0353  008E               	movwf	14	;# 
  2851  0354  3141               	addfsr 1,1	;# 
  2852  0355  3048               	movlw	72	;# 
  2853  0356  018E               	clrf	14	;# 
  2854  0357  1801               	btfsc	1,0	;# 
  2855  0358  3090               	movlw	144	;# 
  2856  0359  008E               	movwf	14	;# 
  2857  035A  3048               	movlw	72	;# 
  2858  035B  018E               	clrf	14	;# 
  2859  035C  1881               	btfsc	1,1	;# 
  2860  035D  3090               	movlw	144	;# 
  2861  035E  008E               	movwf	14	;# 
  2862  035F  3048               	movlw	72	;# 
  2863  0360  018E               	clrf	14	;# 
  2864  0361  1901               	btfsc	1,2	;# 
  2865  0362  3090               	movlw	144	;# 
  2866  0363  008E               	movwf	14	;# 
  2867  0364  3048               	movlw	72	;# 
  2868  0365  018E               	clrf	14	;# 
  2869  0366  1981               	btfsc	1,3	;# 
  2870  0367  3090               	movlw	144	;# 
  2871  0368  008E               	movwf	14	;# 
  2872  0369  3048               	movlw	72	;# 
  2873  036A  018E               	clrf	14	;# 
  2874  036B  1A01               	btfsc	1,4	;# 
  2875  036C  3090               	movlw	144	;# 
  2876  036D  008E               	movwf	14	;# 
  2877  036E  3048               	movlw	72	;# 
  2878  036F  018E               	clrf	14	;# 
  2879  0370  1A81               	btfsc	1,5	;# 
  2880  0371  3090               	movlw	144	;# 
  2881  0372  008E               	movwf	14	;# 
  2882  0373  3048               	movlw	72	;# 
  2883  0374  018E               	clrf	14	;# 
  2884  0375  1B01               	btfsc	1,6	;# 
  2885  0376  3090               	movlw	144	;# 
  2886  0377  008E               	movwf	14	;# 
  2887  0378  083D               	movf	_last_bit0& (0+127),w	;# 
  2888  0379  018E               	clrf	14	;# 
  2889  037A  1B81               	btfsc	1,7	;# 
  2890  037B  083E               	movf	_last_bit1& (0+127),w	;# 
  2891  037C  008E               	movwf	14	;# 
  2892  037D  3141               	addfsr 1,1	;# 
  2893  037E  0BC0               	decfsz	_send32_count& (0+127),f	;# 
  2894  037F  2ADA               	goto	next_word	;# 
  2895  0380  0008               	return
  2896  0381                     __end_of_Send32:	
  2897  0381                     __ptext1778:	
  2898 ;; *************** function _AsicPreCalc *****************
  2899 ;; Defined at:
  2900 ;;		line 319 in file "asic.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  work            2   22[BANK0 ] PTR struct _worktask
  2903 ;;		 -> WorkQue(180), 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  m              32   24[BANK1 ] unsigned long [8]
  2906 ;;  K              12    8[BANK1 ] unsigned long [3]
  2907 ;;  x               4   60[BANK1 ] unsigned long 
  2908 ;;  y               4   56[BANK1 ] unsigned long 
  2909 ;;  z               4   20[BANK1 ] unsigned long 
  2910 ;;  n               1   64[BANK1 ] unsigned char 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;		None               void
  2913 ;; Registers used:
  2914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 1F/0
  2917 ;;		On exit  : 1F/1
  2918 ;;		Unchanged: FFFE0/0
  2919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2921 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  2922 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;      Totals:         0       2      65       0       0       0       0       0       0       0       0       0       
      +0       0
  2924 ;;Total ram usage:       67 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    5
  2927 ;; This function calls:
  2928 ;;		___bmul
  2929 ;;		_rotate
  2930 ;; This function is called by:
  2931 ;;		_ProcessCmd
  2932 ;;		_AsicPushWork
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           
  2937                           ;psect for function _AsicPreCalc
  2938  0381                     _AsicPreCalc:	
  2939  0381                     l5780:	
  2940                           ; Regs used in _AsicPreCalc: [allreg]
  2941                           
  2942                           
  2943                           ;asic.c: 320: DWORD K[3] = { 0x428a2f98, 0x71374491, 0xb5c0fbcf };
  2944  0381  30D8               	movlw	low AsicPreCalc@F3347
  2945  0382  0086               	movwf	6
  2946  0383  3001               	movlw	high AsicPreCalc@F3347
  2947  0384  0087               	movwf	7
  2948  0385  30A8               	movlw	low AsicPreCalc@K
  2949  0386  0084               	movwf	4
  2950  0387  3000               	movlw	high AsicPreCalc@K
  2951  0388  0085               	movwf	5
  2952  0389  300C               	movlw	12
  2953  038A  00FF               	movwf	127
  2954  038B                     u4550:	
  2955  038B  0016               	moviw fsr1++
  2956  038C  001A               	movwi fsr0++
  2957  038D  0BFF               	decfsz	127,f
  2958  038E  2B8B               	goto	u4550
  2959                           
  2960                           ;asic.c: 321: DWORD x, y, z;
  2961                           ;asic.c: 322: DWORD m[8];
  2962                           ;asic.c: 323: BYTE n;
  2963                           ;asic.c: 325: for(n = 0; n < 8; n++)
  2964  038F  0021               	movlb	1	; select bank1
  2965  0390  01E0               	clrf	AsicPreCalc@n^(0+128)
  2966  0391                     l5788:	
  2967                           
  2968                           ;asic.c: 326: m[n] = work->MidState[n];
  2969  0391  268A  3180         	fcall	PL18	;call to abstracted procedure
  2970  0393  0086               	movwf	6
  2971  0394  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  2972  0395  0087               	movwf	7
  2973  0396  3141               	addfsr 1,1
  2974  0397  3F40               	moviw [0]fsr1
  2975  0398  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  2976  0399  3F41               	moviw [1]fsr1
  2977  039A  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  2978  039B  3F42               	moviw [2]fsr1
  2979  039C  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  2980  039D  3F43               	moviw [3]fsr1
  2981  039E  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  2982  039F  0860               	movf	AsicPreCalc@n^(0+128),w
  2983  03A0  0709               	addwf	9,w
  2984  03A1  0709               	addwf	9,w
  2985  03A2  3EB8               	addlw	AsicPreCalc@m& (0+255)
  2986  03A3  0086               	movwf	6
  2987  03A4  0187               	clrf	7
  2988  03A5  0824               	movf	(??_AsicPreCalc+4)^(0+128),w
  2989  03A6  3FC0               	movwi [0]fsr1
  2990  03A7  0825               	movf	(??_AsicPreCalc+5)^(0+128),w
  2991  03A8  3FC1               	movwi [1]fsr1
  2992  03A9  0826               	movf	(??_AsicPreCalc+6)^(0+128),w
  2993  03AA  3FC2               	movwi [2]fsr1
  2994  03AB  0827               	movf	(??_AsicPreCalc+7)^(0+128),w
  2995  03AC  3FC3               	movwi [3]fsr1
  2996  03AD  3008               	movlw	8
  2997  03AE  0AE0               	incf	AsicPreCalc@n^(0+128),f
  2998  03AF  0260               	subwf	AsicPreCalc@n^(0+128),w
  2999  03B0  1C03               	skipc
  3000  03B1  2B91               	goto	l5788
  3001                           
  3002                           ;asic.c: 328: for(n = 0; n < 3; n++) {
  3003  03B2  01E0               	clrf	AsicPreCalc@n^(0+128)
  3004  03B3                     l5800:	
  3005                           
  3006                           ;asic.c: 330: x = m[5-n] ^ m[6-n];
  3007  03B3  265C  3180         	fcall	PL8	;call to abstracted procedure
  3008  03B5  2524  3180         	fcall	___bmul
  3009  03B7  3E18               	addlw	24
  3010  03B8  2635  3180         	fcall	PL2	;call to abstracted procedure
  3011  03BA  2524  3180         	fcall	___bmul
  3012  03BC  3E14               	addlw	20
  3013  03BD  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3014  03BE  0086               	movwf	6
  3015  03BF  0187               	clrf	7
  3016  03C0  3F40               	moviw [0]fsr1
  3017  03C1  0021               	movlb	1	; select bank1
  3018  03C2  26C4  3180         	fcall	PL32	;call to abstracted procedure
  3019  03C4  0624               	xorwf	(??_AsicPreCalc+4)^(0+128),w
  3020  03C5  00DC               	movwf	AsicPreCalc@x^(0+128)
  3021  03C6  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3022  03C7  0625               	xorwf	(??_AsicPreCalc+5)^(0+128),w
  3023  03C8  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3024  03C9  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3025  03CA  0626               	xorwf	(??_AsicPreCalc+6)^(0+128),w
  3026  03CB  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3027  03CC  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3028  03CD  0627               	xorwf	(??_AsicPreCalc+7)^(0+128),w
  3029  03CE  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3030                           
  3031                           ;asic.c: 331: x = x & m[4-n];
  3032  03CF  265C  3180         	fcall	PL8	;call to abstracted procedure
  3033  03D1  2524  3180         	fcall	___bmul
  3034  03D3  3E10               	addlw	16
  3035  03D4  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3036  03D5  2647  3180         	fcall	PL4	;call to abstracted procedure
  3037  03D7  26EB  3180         	fcall	PL54	;call to abstracted procedure
  3038                           
  3039                           ;asic.c: 332: x = m[6-n] ^ x;
  3040  03D9  265C  3180         	fcall	PL8	;call to abstracted procedure
  3041  03DB  2524  3180         	fcall	___bmul
  3042  03DD  3E18               	addlw	24
  3043  03DE  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3044  03DF  2647  3180         	fcall	PL4	;call to abstracted procedure
  3045  03E1  06DC               	xorwf	AsicPreCalc@x^(0+128),f
  3046  03E2  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3047  03E3  06DD               	xorwf	(AsicPreCalc@x+1)^(0+128),f
  3048  03E4  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3049  03E5  06DE               	xorwf	(AsicPreCalc@x+2)^(0+128),f
  3050  03E6  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3051  03E7  06DF               	xorwf	(AsicPreCalc@x+3)^(0+128),f
  3052                           
  3053                           ;asic.c: 333: x += K[n];
  3054  03E8  0860               	movf	AsicPreCalc@n^(0+128),w
  3055  03E9  0709               	addwf	9,w
  3056  03EA  0709               	addwf	9,w
  3057  03EB  3EA8               	addlw	AsicPreCalc@K& (0+255)
  3058  03EC  0086               	movwf	6
  3059  03ED  3F40               	moviw [0]fsr1
  3060  03EE  26D2  3180         	fcall	PL36	;call to abstracted procedure
  3061                           
  3062                           ;asic.c: 334: x += work->Merkle[n];
  3063  03F0  268A  3180         	fcall	PL18	;call to abstracted procedure
  3064  03F2  3E21               	addlw	33
  3065  03F3  0086               	movwf	6
  3066  03F4  3000               	movlw	0
  3067  03F5  3D23               	addwfc	(??_AsicPreCalc+3)^(0+128),w
  3068  03F6  0087               	movwf	7
  3069  03F7  3F40               	moviw [0]fsr1
  3070  03F8  26D2  3180         	fcall	PL36	;call to abstracted procedure
  3071                           
  3072                           ;asic.c: 335: x += m[7-n];
  3073  03FA  265C  3180         	fcall	PL8	;call to abstracted procedure
  3074  03FC  2524  3180         	fcall	___bmul
  3075  03FE  3E1C               	addlw	28
  3076  03FF  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3077  0400  0086               	movwf	6
  3078  0401  0187               	clrf	7
  3079  0402  3F40               	moviw [0]fsr1
  3080  0403  0021               	movlb	1	; select bank1
  3081  0404  26D2  3180         	fcall	PL36	;call to abstracted procedure
  3082                           
  3083                           ;asic.c: 336: y = rotate(m[4-n], 26);
  3084  0406  265C  3180         	fcall	PL8	;call to abstracted procedure
  3085  0408  2524  3180         	fcall	___bmul
  3086  040A  267A  3180         	fcall	PL14	;call to abstracted procedure
  3087  040C  2672  3180         	fcall	PL12	;call to abstracted procedure
  3088  040E  301A               	movlw	26
  3089  040F  00DD               	movwf	?_rotate+4
  3090  0410  2531  3180         	fcall	_rotate
  3091  0412  2662  3180         	fcall	PL10	;call to abstracted procedure
  3092                           
  3093                           ;asic.c: 337: z = rotate(m[4-n], 21);
  3094  0414  265C  3180         	fcall	PL8	;call to abstracted procedure
  3095  0416  2524  3180         	fcall	___bmul
  3096  0418  267A  3180         	fcall	PL14	;call to abstracted procedure
  3097  041A  2672  3180         	fcall	PL12	;call to abstracted procedure
  3098  041C  3015               	movlw	21
  3099  041D  00DD               	movwf	?_rotate+4
  3100  041E  2531  3180         	fcall	_rotate
  3101  0420  085C               	movf	?_rotate+3,w
  3102  0421  0021               	movlb	1	; select bank1
  3103  0422  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3104  0423  0020               	movlb	0	; select bank0
  3105  0424  085B               	movf	?_rotate+2,w
  3106  0425  0021               	movlb	1	; select bank1
  3107  0426  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3108  0427  0020               	movlb	0	; select bank0
  3109  0428  085A               	movf	?_rotate+1,w
  3110  0429  0021               	movlb	1	; select bank1
  3111  042A  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3112  042B  0020               	movlb	0	; select bank0
  3113  042C  0859               	movf	?_rotate,w
  3114  042D  0021               	movlb	1	; select bank1
  3115  042E  00B4               	movwf	AsicPreCalc@z^(0+128)
  3116                           
  3117                           ;asic.c: 338: z = y^z;
  3118  042F  0858               	movf	AsicPreCalc@y^(0+128),w
  3119  0430  26F3  3180         	fcall	PL56	;call to abstracted procedure
  3120                           
  3121                           ;asic.c: 339: y = rotate(m[4-n], 7);
  3122  0432  265C  3180         	fcall	PL8	;call to abstracted procedure
  3123  0434  2524  3180         	fcall	___bmul
  3124  0436  267A  3180         	fcall	PL14	;call to abstracted procedure
  3125  0438  2672  3180         	fcall	PL12	;call to abstracted procedure
  3126  043A  3007               	movlw	7
  3127  043B  00DD               	movwf	?_rotate+4
  3128  043C  2531  3180         	fcall	_rotate
  3129  043E  2662  3180         	fcall	PL10	;call to abstracted procedure
  3130                           
  3131                           ;asic.c: 340: z = y^z;
  3132  0440  26F3  3180         	fcall	PL56	;call to abstracted procedure
  3133                           
  3134                           ;asic.c: 341: m[7-n] = z+x;
  3135  0442  0834               	movf	AsicPreCalc@z^(0+128),w
  3136  0443  075C               	addwf	AsicPreCalc@x^(0+128),w
  3137  0444  00A0               	movwf	??_AsicPreCalc^(0+128)
  3138  0445  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3139  0446  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3140  0447  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3141  0448  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3142  0449  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3143  044A  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3144  044B  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3145  044C  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3146  044D  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3147  044E  265C  3180         	fcall	PL8	;call to abstracted procedure
  3148  0450  2524  3180         	fcall	___bmul
  3149  0452  270E  3180         	fcall	PL70	;call to abstracted procedure
  3150  0454  2680  3180         	fcall	PL16	;call to abstracted procedure
  3151                           
  3152                           ;asic.c: 342: m[3-n] = m[3-n] + m[7-n];
  3153  0456  265C  3180         	fcall	PL8	;call to abstracted procedure
  3154  0458  2524  3180         	fcall	___bmul
  3155  045A  3E1C               	addlw	28
  3156  045B  2635  3180         	fcall	PL2	;call to abstracted procedure
  3157  045D  2524  3180         	fcall	___bmul
  3158  045F  3E0C               	addlw	12
  3159  0460  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3160  0461  0086               	movwf	6
  3161  0462  0187               	clrf	7
  3162  0463  3F40               	moviw [0]fsr1
  3163  0464  0021               	movlb	1	; select bank1
  3164  0465  07A0               	addwf	??_AsicPreCalc^(0+128),f
  3165  0466  3F41               	moviw [1]fsr1
  3166  0467  3DA1               	addwfc	(??_AsicPreCalc^(0+128)+1),f
  3167  0468  3F42               	moviw [2]fsr1
  3168  0469  3DA2               	addwfc	(??_AsicPreCalc^(0+128)+2),f
  3169  046A  3F43               	moviw [3]fsr1
  3170  046B  3DA3               	addwfc	(??_AsicPreCalc^(0+128)+3),f
  3171  046C  265C  3180         	fcall	PL8	;call to abstracted procedure
  3172  046E  2524  3180         	fcall	___bmul
  3173  0470  3E0C               	addlw	12
  3174  0471  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3175  0472  0086               	movwf	6
  3176  0473  0187               	clrf	7
  3177  0474  2680  3180         	fcall	PL16	;call to abstracted procedure
  3178                           
  3179                           ;asic.c: 343: x = rotate(m[((0-n)&7)], 30);
  3180  0476  269D  3180         	fcall	PL20	;call to abstracted procedure
  3181  0478  3F40               	moviw [0]fsr1
  3182  0479  0020               	movlb	0	; select bank0
  3183  047A  2672  3180         	fcall	PL12	;call to abstracted procedure
  3184  047C  301E               	movlw	30
  3185  047D  00DD               	movwf	?_rotate+4
  3186  047E  2531  3180         	fcall	_rotate
  3187  0480  26AE  3180         	fcall	PL28	;call to abstracted procedure
  3188                           
  3189                           ;asic.c: 344: y = rotate(m[((0-n)&7)], 19);
  3190  0482  269D  3180         	fcall	PL20	;call to abstracted procedure
  3191  0484  0187               	clrf	7
  3192  0485  3F40               	moviw [0]fsr1
  3193  0486  0020               	movlb	0	; select bank0
  3194  0487  2672  3180         	fcall	PL12	;call to abstracted procedure
  3195  0489  3013               	movlw	19
  3196  048A  00DD               	movwf	?_rotate+4
  3197  048B  2531  3180         	fcall	_rotate
  3198  048D  2662  3180         	fcall	PL10	;call to abstracted procedure
  3199                           
  3200                           ;asic.c: 345: y = y^x;
  3201  048F  085C               	movf	AsicPreCalc@x^(0+128),w
  3202  0490  26E3  3180         	fcall	PL50	;call to abstracted procedure
  3203                           
  3204                           ;asic.c: 346: x = rotate(m[((0-n)&7)], 10);
  3205  0492  269D  3180         	fcall	PL20	;call to abstracted procedure
  3206  0494  0187               	clrf	7
  3207  0495  3F40               	moviw [0]fsr1
  3208  0496  0020               	movlb	0	; select bank0
  3209  0497  2672  3180         	fcall	PL12	;call to abstracted procedure
  3210  0499  300A               	movlw	10
  3211  049A  00DD               	movwf	?_rotate+4
  3212  049B  2531  3180         	fcall	_rotate
  3213  049D  26AE  3180         	fcall	PL28	;call to abstracted procedure
  3214                           
  3215                           ;asic.c: 347: y = x^y;
  3216  049F  26E3  3180         	fcall	PL50	;call to abstracted procedure
  3217                           
  3218                           ;asic.c: 348: x = m[((0-n)&7)] | m[((1-n)&7)];
  3219  04A1  0860               	movf	AsicPreCalc@n^(0+128),w
  3220  04A2  3C01               	sublw	1
  3221  04A3  26BE  3180         	fcall	PL30	;call to abstracted procedure
  3222  04A5  0187               	clrf	7
  3223  04A6  3F40               	moviw [0]fsr1
  3224  04A7  2654  3180         	fcall	PL6	;call to abstracted procedure
  3225  04A9  269D  3180         	fcall	PL20	;call to abstracted procedure
  3226  04AB  3F40               	moviw [0]fsr1
  3227  04AC  26C4  3180         	fcall	PL32	;call to abstracted procedure
  3228  04AE  0424               	iorwf	(??_AsicPreCalc+4)^(0+128),w
  3229  04AF  00DC               	movwf	AsicPreCalc@x^(0+128)
  3230  04B0  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3231  04B1  0425               	iorwf	(??_AsicPreCalc+5)^(0+128),w
  3232  04B2  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  3233  04B3  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3234  04B4  0426               	iorwf	(??_AsicPreCalc+6)^(0+128),w
  3235  04B5  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  3236  04B6  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3237  04B7  0427               	iorwf	(??_AsicPreCalc+7)^(0+128),w
  3238  04B8  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  3239                           
  3240                           ;asic.c: 349: x = m[((2-n)&7)] & x;
  3241  04B9  0860               	movf	AsicPreCalc@n^(0+128),w
  3242  04BA  3C02               	sublw	2
  3243  04BB  26BE  3180         	fcall	PL30	;call to abstracted procedure
  3244  04BD  3F40               	moviw [0]fsr1
  3245  04BE  2654  3180         	fcall	PL6	;call to abstracted procedure
  3246  04C0  0820               	movf	??_AsicPreCalc^(0+128),w
  3247  04C1  26EB  3180         	fcall	PL54	;call to abstracted procedure
  3248                           
  3249                           ;asic.c: 350: z = m[((0-n)&7)] & m[((1-n)&7)];
  3250  04C3  0860               	movf	AsicPreCalc@n^(0+128),w
  3251  04C4  3C01               	sublw	1
  3252  04C5  26BE  3180         	fcall	PL30	;call to abstracted procedure
  3253  04C7  3F40               	moviw [0]fsr1
  3254  04C8  2654  3180         	fcall	PL6	;call to abstracted procedure
  3255  04CA  269D  3180         	fcall	PL20	;call to abstracted procedure
  3256  04CC  3F40               	moviw [0]fsr1
  3257  04CD  26C4  3180         	fcall	PL32	;call to abstracted procedure
  3258  04CF  0524               	andwf	(??_AsicPreCalc+4)^(0+128),w
  3259  04D0  00B4               	movwf	AsicPreCalc@z^(0+128)
  3260  04D1  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3261  04D2  0525               	andwf	(??_AsicPreCalc+5)^(0+128),w
  3262  04D3  00B5               	movwf	(AsicPreCalc@z+1)^(0+128)
  3263  04D4  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3264  04D5  0526               	andwf	(??_AsicPreCalc+6)^(0+128),w
  3265  04D6  00B6               	movwf	(AsicPreCalc@z+2)^(0+128)
  3266  04D7  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3267  04D8  0527               	andwf	(??_AsicPreCalc+7)^(0+128),w
  3268  04D9  00B7               	movwf	(AsicPreCalc@z+3)^(0+128)
  3269                           
  3270                           ;asic.c: 351: x = x | z;
  3271  04DA  0834               	movf	AsicPreCalc@z^(0+128),w
  3272  04DB  04DC               	iorwf	AsicPreCalc@x^(0+128),f
  3273  04DC  0835               	movf	(AsicPreCalc@z+1)^(0+128),w
  3274  04DD  04DD               	iorwf	(AsicPreCalc@x+1)^(0+128),f
  3275  04DE  0836               	movf	(AsicPreCalc@z+2)^(0+128),w
  3276  04DF  04DE               	iorwf	(AsicPreCalc@x+2)^(0+128),f
  3277  04E0  0837               	movf	(AsicPreCalc@z+3)^(0+128),w
  3278  04E1  04DF               	iorwf	(AsicPreCalc@x+3)^(0+128),f
  3279                           
  3280                           ;asic.c: 352: m[7-n] += y + x;
  3281  04E2  0858               	movf	AsicPreCalc@y^(0+128),w
  3282  04E3  075C               	addwf	AsicPreCalc@x^(0+128),w
  3283  04E4  00A0               	movwf	??_AsicPreCalc^(0+128)
  3284  04E5  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  3285  04E6  3D5D               	addwfc	(AsicPreCalc@x+1)^(0+128),w
  3286  04E7  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3287  04E8  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  3288  04E9  3D5E               	addwfc	(AsicPreCalc@x+2)^(0+128),w
  3289  04EA  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3290  04EB  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  3291  04EC  3D5F               	addwfc	(AsicPreCalc@x+3)^(0+128),w
  3292  04ED  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3293  04EE  265C  3180         	fcall	PL8	;call to abstracted procedure
  3294  04F0  2524  3180         	fcall	___bmul
  3295  04F2  270E  3180         	fcall	PL70	;call to abstracted procedure
  3296  04F4  0021               	movlb	1	; select bank1
  3297  04F5  0820               	movf	??_AsicPreCalc^(0+128),w
  3298  04F6  0781               	addwf	1,f
  3299  04F7  3141               	addfsr 1,1
  3300  04F8  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  3301  04F9  3D81               	addwfc	1,f
  3302  04FA  3141               	addfsr 1,1
  3303  04FB  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  3304  04FC  3D81               	addwfc	1,f
  3305  04FD  3141               	addfsr 1,1
  3306  04FE  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  3307  04FF  3D81               	addwfc	1,f
  3308                           
  3309                           ;asic.c: 354: PrecalcHashes[2-n] = m[7-n];
  3310  0500  265C  3180         	fcall	PL8	;call to abstracted procedure
  3311  0502  2524  3180         	fcall	___bmul
  3312  0504  3E1C               	addlw	28
  3313  0505  2635  3180         	fcall	PL2	;call to abstracted procedure
  3314  0507  2524  3180         	fcall	___bmul
  3315  0509  3EC8               	addlw	(_PrecalcHashes+8)& (0+255)
  3316  050A  0086               	movwf	6
  3317  050B  3001               	movlw	1	; select bank3/4
  3318  050C  0087               	movwf	7
  3319  050D  2680  3180         	fcall	PL16	;call to abstracted procedure
  3320                           
  3321                           ;asic.c: 355: PrecalcHashes[5-n] = m[3-n];
  3322  050F  265C  3180         	fcall	PL8	;call to abstracted procedure
  3323  0511  2524  3180         	fcall	___bmul
  3324  0513  3E0C               	addlw	12
  3325  0514  2635  3180         	fcall	PL2	;call to abstracted procedure
  3326  0516  2524  3180         	fcall	___bmul
  3327  0518  3ED4               	addlw	(_PrecalcHashes+20)& (0+255)
  3328  0519  0086               	movwf	6
  3329  051A  3001               	movlw	1	; select bank3/4
  3330  051B  0087               	movwf	7
  3331  051C  2680  3180         	fcall	PL16	;call to abstracted procedure
  3332  051E  3003               	movlw	3
  3333  051F  0AE0               	incf	AsicPreCalc@n^(0+128),f
  3334  0520  0260               	subwf	AsicPreCalc@n^(0+128),w
  3335  0521  1803               	btfsc	3,0
  3336  0522  0008               	return
  3337  0523  2BB3               	goto	l5800
  3338  0524                     __end_of_AsicPreCalc:	
  3339  0524                     __ptext1800:	
  3340 ;; *************** function ___bmul *****************
  3341 ;; Defined at:
  3342 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  multiplier      1    wreg     unsigned char 
  3345 ;;  multiplicand    1    6[BANK0 ] unsigned char 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;  multiplier      1    8[BANK0 ] unsigned char 
  3348 ;;  product         1    7[BANK0 ] unsigned char 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      unsigned char 
  3351 ;; Registers used:
  3352 ;;		wreg, status,2, status,0
  3353 ;; Tracked objects:
  3354 ;;		On entry : 1C/2
  3355 ;;		On exit  : 1F/0
  3356 ;;		Unchanged: FFFE0/0
  3357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3358 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3362 ;;Total ram usage:        3 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:    4
  3365 ;; This function calls:
  3366 ;;		Nothing
  3367 ;; This function is called by:
  3368 ;;		_AsicPreCalc
  3369 ;;		_ProcessIO
  3370 ;;		_SendCmdReply
  3371 ;;		i1_SendCmdReply
  3372 ;; This function uses a non-reentrant model
  3373 ;;
  3374                           
  3375                           
  3376                           ;psect for function ___bmul
  3377  0524                     ___bmul:	
  3378                           
  3379                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3380                           ;___bmul@multiplier stored from wreg
  3381  0524  0020               	movlb	0	; select bank0
  3382  0525  00D8               	movwf	___bmul@multiplier
  3383  0526  01D7               	clrf	___bmul@product
  3384  0527                     l6036:	
  3385  0527  0856               	movf	___bmul@multiplicand,w
  3386  0528  1858               	btfsc	___bmul@multiplier,0
  3387  0529  07D7               	addwf	___bmul@product,f
  3388  052A  35D6               	lslf	___bmul@multiplicand,f
  3389  052B  36D8               	lsrf	___bmul@multiplier,f
  3390  052C  08D8               	movf	___bmul@multiplier,f
  3391  052D  1D03               	skipz
  3392  052E  2D27               	goto	l6036
  3393  052F  0857               	movf	___bmul@product,w
  3394  0530  0008               	return
  3395  0531                     __end_of___bmul:	
  3396  0531                     __ptext1779:	
  3397 ;; *************** function _rotate *****************
  3398 ;; Defined at:
  3399 ;;		line 314 in file "asic.c"
  3400 ;; Parameters:    Size  Location     Type
  3401 ;;  x               4    9[BANK0 ] unsigned long 
  3402 ;;  y               1   13[BANK0 ] unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;		None
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  4    9[BANK0 ] unsigned long 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0
  3409 ;; Tracked objects:
  3410 ;;		On entry : 1F/0
  3411 ;;		On exit  : 1F/0
  3412 ;;		Unchanged: FFFE0/0
  3413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3414 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3416 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3417 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3418 ;;Total ram usage:       13 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    4
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_AsicPreCalc
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           
  3429                           ;psect for function _rotate
  3430  0531                     _rotate:	
  3431                           
  3432                           ;asic.c: 315: return ((x<<y) | (x>>(32-y)));
  3433                           
  3434                           ; Regs used in _rotate: [wreg+status,2+status,0]
  3435  0531  0859               	movf	rotate@x,w
  3436  0532  00DE               	movwf	??_rotate
  3437  0533  085A               	movf	rotate@x+1,w
  3438  0534  00DF               	movwf	??_rotate+1
  3439  0535  085B               	movf	rotate@x+2,w
  3440  0536  00E0               	movwf	??_rotate+2
  3441  0537  085C               	movf	rotate@x+3,w
  3442  0538  00E1               	movwf	??_rotate+3
  3443  0539  085D               	movf	rotate@y,w
  3444  053A  3C20               	sublw	32
  3445  053B  0A89               	incf	9,f
  3446  053C  2D42               	goto	u4530
  3447  053D                     u4535:	
  3448  053D  1003               	clrc
  3449  053E  0CE1               	rrf	??_rotate+3,f
  3450  053F  0CE0               	rrf	??_rotate+2,f
  3451  0540  0CDF               	rrf	??_rotate+1,f
  3452  0541  0CDE               	rrf	??_rotate,f
  3453  0542                     u4530:	
  3454  0542  3EFF               	addlw	-1
  3455  0543  1D03               	skipz
  3456  0544  2D3D               	goto	u4535
  3457  0545  0859               	movf	rotate@x,w
  3458  0546  00E2               	movwf	??_rotate+4
  3459  0547  085A               	movf	rotate@x+1,w
  3460  0548  00E3               	movwf	??_rotate+5
  3461  0549  085B               	movf	rotate@x+2,w
  3462  054A  00E4               	movwf	??_rotate+6
  3463  054B  085C               	movf	rotate@x+3,w
  3464  054C  00E5               	movwf	??_rotate+7
  3465  054D  0A5D               	incf	rotate@y,w
  3466  054E  2D53               	goto	u4540
  3467  054F                     u4545:	
  3468  054F  35E2               	lslf	??_rotate+4,f
  3469  0550  0DE3               	rlf	??_rotate+5,f
  3470  0551  0DE4               	rlf	??_rotate+6,f
  3471  0552  0DE5               	rlf	??_rotate+7,f
  3472  0553                     u4540:	
  3473  0553  0B89               	decfsz	9,f
  3474  0554  2D4F               	goto	u4545
  3475  0555  0862               	movf	??_rotate+4,w
  3476  0556  04DE               	iorwf	??_rotate,f
  3477  0557  0863               	movf	??_rotate+5,w
  3478  0558  04DF               	iorwf	??_rotate+1,f
  3479  0559  0864               	movf	??_rotate+6,w
  3480  055A  04E0               	iorwf	??_rotate+2,f
  3481  055B  0865               	movf	??_rotate+7,w
  3482  055C  04E1               	iorwf	??_rotate+3,f
  3483  055D  0861               	movf	??_rotate+3,w
  3484  055E  00DC               	movwf	?_rotate+3
  3485  055F  0860               	movf	??_rotate+2,w
  3486  0560  00DB               	movwf	?_rotate+2
  3487  0561  085F               	movf	??_rotate+1,w
  3488  0562  00DA               	movwf	?_rotate+1
  3489  0563  085E               	movf	??_rotate,w
  3490  0564  00D9               	movwf	?_rotate
  3491  0565  0008               	return
  3492  0566                     __end_of_rotate:	
  3493  0566                     __ptext1773:	
  3494 ;; *************** function _ProcessIO *****************
  3495 ;; Defined at:
  3496 ;;		line 182 in file "main.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;		None
  3501 ;; Return value:  Size  Location     Type
  3502 ;;		None               void
  3503 ;; Registers used:
  3504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  3505 ;; Tracked objects:
  3506 ;;		On entry : 1C/2
  3507 ;;		On exit  : 0/0
  3508 ;;		Unchanged: FFE00/0
  3509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3511 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3513 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  3514 ;;Total ram usage:        4 bytes
  3515 ;; Hardware stack levels used:    1
  3516 ;; Hardware stack levels required when called:    8
  3517 ;; This function calls:
  3518 ;;		_ProcessCmd
  3519 ;;		_USBTransferOnePacket
  3520 ;;		___bmul
  3521 ;; This function is called by:
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           
  3527                           ;psect for function _ProcessIO
  3528  0566                     _ProcessIO:	
  3529                           
  3530                           ;main.c: 184: if((USBDeviceState < CONFIGURED_STATE)||(UCONbits.SUSPND==1)) return;
  3531                           
  3532                           ; Regs used in _ProcessIO: [allreg]
  3533  0566  3020               	movlw	32
  3534  0567  0021               	movlb	1	; select bank1
  3535  0568  026A               	subwf	_USBDeviceState^(0+128),w
  3536  0569  1C03               	skipc
  3537  056A  0008               	return
  3538  056B  003D               	movlb	29	; select bank29
  3539  056C  188E               	btfsc	14,1	;volatile
  3540  056D  0008               	return
  3541                           
  3542                           ;main.c: 193: if(!(USBGenericOutHandle==0?0:((volatile BDT_ENTRY*)USBGenericOutHandle)->
      +                          STAT.UOWN)) {
  3543  056E  0022               	movlb	2	; select bank2
  3544  056F  0836               	movf	_USBGenericOutHandle^(0+256),w
  3545  0570  1903               	btfsc	3,2
  3546  0571  2D77               	goto	l6000
  3547  0572  0836               	movf	_USBGenericOutHandle^(0+256),w
  3548  0573  2707  3180         	fcall	PL66	;call to abstracted procedure
  3549  0575  00E6               	movwf	_ProcessIO$2365^(0+128)
  3550  0576  2D79               	goto	L11
  3551  0577                     l6000:	
  3552  0577  0021               	movlb	1	; select bank1
  3553  0578  01E6               	clrf	_ProcessIO$2365^(0+128)
  3554  0579                     L11:	
  3555  0579  01E7               	clrf	(_ProcessIO$2365+1)^(0+128)
  3556  057A  0867               	movf	(_ProcessIO$2365+1)^(0+128),w
  3557  057B  0466               	iorwf	_ProcessIO$2365^(0+128),w
  3558  057C  1D03               	skipz
  3559  057D  2D8C               	goto	l6008
  3560                           
  3561                           ;main.c: 197: ProcessCmd(OUTPacket);
  3562  057E  30A0               	movlw	160
  3563  057F  2080  3180         	fcall	_ProcessCmd
  3564                           
  3565                           ;main.c: 198: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  3566  0581  0020               	movlb	0	; select bank0
  3567  0582  30A0               	movlw	160
  3568  0583  01D9               	clrf	?_USBTransferOnePacket
  3569  0584  00DA               	movwf	?_USBTransferOnePacket+1
  3570  0585  3040               	movlw	64
  3571  0586  00DB               	movwf	?_USBTransferOnePacket+2
  3572  0587  3001               	movlw	1
  3573  0588  25B5  3180         	fcall	_USBTransferOnePacket
  3574  058A  0022               	movlb	2	; select bank2
  3575  058B  00B6               	movwf	_USBGenericOutHandle^(0+256)
  3576  058C                     l6008:	
  3577                           
  3578                           ;main.c: 199: }
  3579                           ;main.c: 201: if(WQI != WQX && !(USBGenericInHandle==0?0:((volatile BDT_ENTRY*)USBGeneri
      +                          cInHandle)->STAT.UOWN)) {
  3580  058C  0022               	movlb	2	; select bank2
  3581  058D  083A               	movf	_WQI^(0+256),w
  3582  058E  063B               	xorwf	_WQX^(0+256),w
  3583  058F  1903               	skipnz
  3584  0590  0008               	return
  3585  0591  0835               	movf	_USBGenericInHandle^(0+256),w
  3586  0592  1903               	btfsc	3,2
  3587  0593  2D99               	goto	l6014
  3588  0594  0835               	movf	_USBGenericInHandle^(0+256),w
  3589  0595  2707  3180         	fcall	PL66	;call to abstracted procedure
  3590  0597  00E8               	movwf	_ProcessIO$2399^(0+128)
  3591  0598  2D9B               	goto	L12
  3592  0599                     l6014:	
  3593  0599  0021               	movlb	1	; select bank1
  3594  059A  01E8               	clrf	_ProcessIO$2399^(0+128)
  3595  059B                     L12:	
  3596  059B  01E9               	clrf	(_ProcessIO$2399+1)^(0+128)
  3597  059C  0869               	movf	(_ProcessIO$2399+1)^(0+128),w
  3598  059D  0468               	iorwf	_ProcessIO$2399^(0+128),w
  3599  059E  1D03               	skipz
  3600  059F  0008               	return
  3601                           
  3602                           ;main.c: 202: USBGenericInHandle = USBTransferOnePacket(1,1,(BYTE*)&INPacket[WQX*15],15);
  3603  05A0  0020               	movlb	0	; select bank0
  3604  05A1  300F               	movlw	15
  3605  05A2  01D9               	clrf	?_USBTransferOnePacket
  3606  05A3  0AD9               	incf	?_USBTransferOnePacket,f
  3607  05A4  00D6               	movwf	?___bmul
  3608  05A5  0022               	movlb	2	; select bank2
  3609  05A6  083B               	movf	_WQX^(0+256),w
  3610  05A7  2524  3180         	fcall	___bmul
  3611  05A9  3E20               	addlw	32
  3612  05AA  00DA               	movwf	?_USBTransferOnePacket+1
  3613  05AB  300F               	movlw	15
  3614  05AC  00DB               	movwf	?_USBTransferOnePacket+2
  3615  05AD  3001               	movlw	1
  3616  05AE  25B5               	fcall	_USBTransferOnePacket
  3617  05AF  0022               	movlb	2	; select bank2
  3618  05B0  00B5               	movwf	_USBGenericInHandle^(0+256)
  3619  05B1  3003               	movlw	3
  3620                           
  3621                           ;main.c: 203: WQX = (WQX+1) & 3;
  3622  05B2  0ABB               	incf	_WQX^(0+256),f
  3623  05B3  05BB               	andwf	_WQX^(0+256),f
  3624  05B4  0008               	return
  3625  05B5                     __end_of_ProcessIO:	
  3626  05B5                     __ptext1797:	
  3627 ;; *************** function _USBTransferOnePacket *****************
  3628 ;; Defined at:
  3629 ;;		line 1173 in file "../USB/usb_device.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  ep              1    wreg     unsigned char 
  3632 ;;  dir             1    9[BANK0 ] unsigned char 
  3633 ;;  data            1   10[BANK0 ] PTR unsigned char 
  3634 ;;		 -> INPacket(64), OUTPacket(64), 
  3635 ;;  len             1   11[BANK0 ] unsigned char 
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  ep              1   14[BANK0 ] unsigned char 
  3638 ;;  handle          1   15[BANK0 ] PTR volatile struct __BD
  3639 ;;		 -> NULL(0), BDT(32), 
  3640 ;; Return value:  Size  Location     Type
  3641 ;;                  1    wreg      PTR void 
  3642 ;; Registers used:
  3643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3644 ;; Tracked objects:
  3645 ;;		On entry : 1F/0
  3646 ;;		On exit  : 1F/0
  3647 ;;		Unchanged: FFFE0/0
  3648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3649 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;Total ram usage:        7 bytes
  3654 ;; Hardware stack levels used:    1
  3655 ;; Hardware stack levels required when called:    4
  3656 ;; This function calls:
  3657 ;;		Nothing
  3658 ;; This function is called by:
  3659 ;;		_ProcessIO
  3660 ;;		_USBCBInitEP
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _USBTransferOnePacket
  3666  05B5                     _USBTransferOnePacket:	
  3667                           
  3668                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l-status,0]
  3669                           ;USBTransferOnePacket@ep stored from wreg
  3670  05B5  00DE               	movwf	USBTransferOnePacket@ep
  3671                           
  3672                           ;usb_device.c: 1174: volatile BDT_ENTRY* handle;
  3673                           ;usb_device.c: 1177: if(dir != 0)
  3674  05B6  0859               	movf	USBTransferOnePacket@dir,w
  3675  05B7  1903               	btfsc	3,2
  3676  05B8  2DBE               	goto	l5260
  3677                           
  3678                           ;usb_device.c: 1178: {
  3679                           ;usb_device.c: 1180: handle = pBDTEntryIn[ep];
  3680  05B9  085E               	movf	USBTransferOnePacket@ep,w
  3681  05BA  3E6A               	addlw	_pBDTEntryIn& (0+255)
  3682  05BB  0086               	movwf	6
  3683  05BC  0187               	clrf	7
  3684  05BD  2DC2               	goto	L18
  3685  05BE                     l5260:	
  3686                           ;usb_device.c: 1181: }
  3687                           
  3688                           
  3689                           ;usb_device.c: 1182: else
  3690                           ;usb_device.c: 1183: {
  3691                           ;usb_device.c: 1185: handle = pBDTEntryOut[ep];
  3692  05BE  085E               	movf	USBTransferOnePacket@ep,w
  3693  05BF  318F  27EA  3180   	fcall	PL76	;call to abstracted procedure
  3694  05C2                     L18:	
  3695  05C2  0801               	movf	1,w
  3696  05C3  00DF               	movwf	USBTransferOnePacket@handle
  3697                           
  3698                           ;usb_device.c: 1186: }
  3699                           ;usb_device.c: 1190: if(handle == 0)
  3700  05C4  08DF               	movf	USBTransferOnePacket@handle,f
  3701  05C5  1903               	btfsc	3,2
  3702                           
  3703                           ;usb_device.c: 1191: {
  3704                           ;usb_device.c: 1192: return 0;
  3705  05C6  3400               	retlw	0
  3706                           
  3707                           ;usb_device.c: 1193: }
  3708                           ;usb_device.c: 1206: handle->ADR = (((WORD)(data))& 0x7FFF);
  3709  05C7  085A               	movf	USBTransferOnePacket@data,w
  3710  05C8  00DC               	movwf	??_USBTransferOnePacket
  3711  05C9  3002               	movlw	2
  3712  05CA  00DD               	movwf	??_USBTransferOnePacket+1
  3713  05CB  085F               	movf	USBTransferOnePacket@handle,w
  3714  05CC  3E02               	addlw	2
  3715  05CD  0086               	movwf	6
  3716  05CE  0187               	clrf	7
  3717  05CF  085C               	movf	??_USBTransferOnePacket,w
  3718  05D0  3FC0               	movwi [0]fsr1
  3719  05D1  085D               	movf	??_USBTransferOnePacket+1,w
  3720  05D2  3FC1               	movwi [1]fsr1
  3721                           
  3722                           ;usb_device.c: 1207: handle->CNT = len;
  3723  05D3  0A5F               	incf	USBTransferOnePacket@handle,w
  3724  05D4  0086               	movwf	6
  3725  05D5  085B               	movf	USBTransferOnePacket@len,w
  3726  05D6  0081               	movwf	1
  3727                           
  3728                           ;usb_device.c: 1208: handle->STAT.Val &= 0x40;
  3729  05D7  085F               	movf	USBTransferOnePacket@handle,w
  3730  05D8  0086               	movwf	6
  3731  05D9  3040               	movlw	64
  3732  05DA  0581               	andwf	1,f
  3733                           
  3734                           ;usb_device.c: 1209: handle->STAT.Val |= 0x80 | (0x08 & 0x08);
  3735  05DB  085F               	movf	USBTransferOnePacket@handle,w
  3736  05DC  0086               	movwf	6
  3737  05DD  3088               	movlw	136
  3738  05DE  0481               	iorwf	1,f
  3739                           
  3740                           ;usb_device.c: 1212: if(dir != 0)
  3741  05DF  0859               	movf	USBTransferOnePacket@dir,w
  3742  05E0  1903               	btfsc	3,2
  3743  05E1  2DE6               	goto	l5278
  3744                           
  3745                           ;usb_device.c: 1213: {
  3746                           ;usb_device.c: 1215: ((BYTE_VAL*)&pBDTEntryIn[ep])->Val ^= 0x0004;;
  3747  05E2  085E               	movf	USBTransferOnePacket@ep,w
  3748  05E3  3E6A               	addlw	_pBDTEntryIn& (0+255)
  3749  05E4  0086               	movwf	6
  3750  05E5  2DE9               	goto	L20
  3751  05E6                     l5278:	
  3752                           ;usb_device.c: 1216: }
  3753                           
  3754                           
  3755                           ;usb_device.c: 1217: else
  3756                           ;usb_device.c: 1218: {
  3757                           ;usb_device.c: 1220: ((BYTE_VAL*)&pBDTEntryOut[ep])->Val ^= 0x0004;;
  3758  05E6  085E               	movf	USBTransferOnePacket@ep,w
  3759  05E7  318F  27EA         	fcall	PL76	;call to abstracted procedure
  3760  05E9                     L20:	
  3761  05E9  3004               	movlw	4
  3762  05EA  0681               	xorwf	1,f
  3763                           
  3764                           ;usb_device.c: 1221: }
  3765                           ;usb_device.c: 1222: return (void*)handle;
  3766  05EB  085F               	movf	USBTransferOnePacket@handle,w
  3767  05EC  0008               	return
  3768  05ED                     __end_of_USBTransferOnePacket:	
  3769  05ED                     __ptext1771:	
  3770 ;; *************** function _InitializeSystem *****************
  3771 ;; Defined at:
  3772 ;;		line 146 in file "main.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 17F/0
  3783 ;;		On exit  : 17F/1
  3784 ;;		Unchanged: FFE80/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3790 ;;Total ram usage:        0 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    7
  3793 ;; This function calls:
  3794 ;;		_UserInit
  3795 ;;		_USBDeviceInit
  3796 ;; This function is called by:
  3797 ;;		_main
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           
  3802                           ;psect for function _InitializeSystem
  3803  05ED                     _InitializeSystem:	
  3804                           
  3805                           ;main.c: 148: ANSELA = 0x00;
  3806                           
  3807                           ; Regs used in _InitializeSystem: [wreg+fsr1l-status,0+pclath+cstack]
  3808  05ED  0023               	movlb	3	; select bank3
  3809  05EE  018C               	clrf	12	;volatile
  3810                           
  3811                           ;main.c: 149: ANSELB = 0x00;
  3812  05EF  018D               	clrf	13	;volatile
  3813                           
  3814                           ;main.c: 150: ANSELC = 0x04;
  3815  05F0  3004               	movlw	4
  3816  05F1  008E               	movwf	14	;volatile
  3817                           
  3818                           ;main.c: 153: OSCTUNE = 0;
  3819  05F2  0021               	movlb	1	; select bank1
  3820  05F3  0198               	clrf	24	;volatile
  3821                           
  3822                           ;main.c: 154: OSCCON = 0xFC;
  3823  05F4  30FC               	movlw	252
  3824  05F5  0099               	movwf	25	;volatile
  3825                           
  3826                           ;main.c: 155: ACTCON = 0x90;
  3827  05F6  3090               	movlw	144
  3828  05F7  0027               	movlb	7	; select bank7
  3829  05F8  009B               	movwf	27	;volatile
  3830                           
  3831                           ;main.c: 158: USBGenericOutHandle = 0;
  3832  05F9  0022               	movlb	2	; select bank2
  3833  05FA  01B6               	clrf	_USBGenericOutHandle^(0+256)
  3834                           
  3835                           ;main.c: 159: USBGenericInHandle = 0;
  3836  05FB  01B5               	clrf	_USBGenericInHandle^(0+256)
  3837                           
  3838                           ;main.c: 160: WQI = WQX = 0;
  3839  05FC  01BB               	clrf	_WQX^(0+256)
  3840  05FD  01BA               	clrf	_WQI^(0+256)
  3841                           
  3842                           ;main.c: 162: UserInit();
  3843  05FE  3189  21EF         	fcall	_UserInit
  3844                           
  3845                           ;main.c: 164: USBDeviceInit();
  3846  0600  318E  2E2A         	ljmp	l4926
  3847  0602                     __end_of_InitializeSystem:	
  3848  0602                     __ptext1770:	
  3849 ;; *************** function _WorkTick *****************
  3850 ;; Defined at:
  3851 ;;		line 174 in file "klondike.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;		None
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 1F/0
  3862 ;;		On exit  : 1C/0
  3863 ;;		Unchanged: FFFE0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3869 ;;Total ram usage:        0 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    4
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _WorkTick
  3881  0602                     _WorkTick:	
  3882                           
  3883                           ;klondike.c: 175: TMR0 += HashTime;
  3884                           
  3885                           ; Regs used in _WorkTick: [wreg+fsr1l-status,0]
  3886  0602  0022               	movlb	2	; select bank2
  3887  0603  084E               	movf	_HashTime^(0+256),w
  3888  0604  0020               	movlb	0	; select bank0
  3889  0605  0795               	addwf	21,f	;volatile
  3890                           
  3891                           ;klondike.c: 176: TMR0IF = 0;
  3892  0606  110B               	bcf	11,2	;volatile
  3893                           
  3894                           ;klondike.c: 177: if(RCSTAbits.SPEN == 0) {
  3895  0607  0023               	movlb	3	; select bank3
  3896  0608  1B9D               	btfsc	29,7	;volatile
  3897  0609  2E0D               	goto	l4438
  3898                           
  3899                           ;klondike.c: 178: RCSTAbits.SPEN = 1;
  3900  060A  179D               	bsf	29,7	;volatile
  3901                           
  3902                           ;klondike.c: 179: ResultQC = 0;
  3903  060B  0022               	movlb	2	; select bank2
  3904  060C  01B0               	clrf	_ResultQC^(0+256)
  3905  060D                     l4438:	
  3906                           
  3907                           ;klondike.c: 180: }
  3908                           ;klondike.c: 181: if((Status.State == 'W') && (++Status.HashCount == Status.MaxCount)) {
  3909  060D  0022               	movlb	2	; select bank2
  3910  060E  084F               	movf	_Status^(0+256),w	;volatile
  3911  060F  3A57               	xorlw	87
  3912  0610  1D03               	skipz
  3913  0611  2E2B               	goto	l4452
  3914  0612  3057               	movlw	(_Status& (0+255)+8)
  3915  0613  0086               	movwf	6
  3916  0614  3001               	movlw	1	; select bank2/3
  3917  0615  0087               	movwf	7
  3918  0616  0781               	addwf	1,f
  3919  0617  3141               	addfsr 1,1
  3920  0618  1803               	skipnc
  3921  0619  0A81               	incf	1,f
  3922  061A  317F               	addfsr 1,-1
  3923  061B  3F40               	moviw [0]fsr1
  3924  061C  0659               	xorwf	(_Status^(0+256)+10),w	;volatile
  3925  061D  1D03               	skipz
  3926  061E  2E21               	goto	u3075
  3927  061F  3F41               	moviw [1]fsr1
  3928  0620  065A               	xorwf	((_Status+1)^(0+256)+10),w	;volatile
  3929  0621                     u3075:	
  3930  0621  1D03               	skipz
  3931  0622  2E2B               	goto	l4452
  3932                           
  3933                           ;klondike.c: 182: if(Status.WorkQC > 0) {
  3934  0623  0852               	movf	(_Status^(0+256)+3),w	;volatile
  3935  0624  1903               	btfsc	3,2
  3936  0625  2E29               	goto	l4450
  3937                           
  3938                           ;klondike.c: 183: Status.State = 'P';
  3939  0626  3050               	movlw	80
  3940  0627  00CF               	movwf	_Status^(0+256)	;volatile
  3941  0628  0008               	return
  3942  0629                     l4450:	
  3943                           
  3944                           ;klondike.c: 186: else
  3945                           ;klondike.c: 187: Status.State = 'R';
  3946  0629  3052               	movlw	82
  3947  062A  00CF               	movwf	_Status^(0+256)	;volatile
  3948  062B                     l4452:	
  3949                           
  3950                           ;klondike.c: 188: }
  3951                           ;klondike.c: 190: if(++SlowTick == 0) {
  3952  062B  0FB2               	incfsz	_SlowTick^(0+256),f
  3953  062C  0008               	return
  3954                           
  3955                           ;klondike.c: 191: LATAbits.LATA5 = 0;;
  3956  062D  128C               	bcf	12,5	;volatile
  3957                           
  3958                           ;klondike.c: 192: Status.Temp = ADRESH;
  3959  062E  0021               	movlb	1	; select bank1
  3960  062F  081C               	movf	28,w	;volatile
  3961  0630  0022               	movlb	2	; select bank2
  3962  0631  00D4               	movwf	(_Status^(0+256)+5)	;volatile
  3963                           
  3964                           ;klondike.c: 194: ADCON0bits.GO_nDONE = 1;
  3965  0632  0021               	movlb	1	; select bank1
  3966  0633  149D               	bsf	29,1	;volatile
  3967  0634  0008               	return
  3968  0635                     __end_of_WorkTick:	
  3969  0635                     PL2:	
  3970  0635  3EB8               	addlw	AsicPreCalc@m& (0+255)
  3971  0636  0086               	movwf	6
  3972  0637  0187               	clrf	7
  3973  0638  3F40               	moviw [0]fsr1
  3974  0639  0021               	movlb	1	; select bank1
  3975  063A  00A0               	movwf	??_AsicPreCalc^(0+128)
  3976  063B  3F41               	moviw [1]fsr1
  3977  063C  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3978  063D  3F42               	moviw [2]fsr1
  3979  063E  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3980  063F  3F43               	moviw [3]fsr1
  3981  0640  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  3982  0641  30FC               	movlw	-4
  3983  0642  0020               	movlb	0	; select bank0
  3984  0643  00D6               	movwf	?___bmul
  3985  0644  0021               	movlb	1	; select bank1
  3986  0645  0860               	movf	AsicPreCalc@n^(0+128),w
  3987  0646  0008               	return
  3988  0647                     __end_ofPL2:	
  3989  0647                     PL4:	
  3990  0647  0086               	movwf	6
  3991  0648  0187               	clrf	7
  3992  0649  3F40               	moviw [0]fsr1
  3993  064A  0021               	movlb	1	; select bank1
  3994  064B  00A0               	movwf	??_AsicPreCalc^(0+128)
  3995  064C  3F41               	moviw [1]fsr1
  3996  064D  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  3997  064E  3F42               	moviw [2]fsr1
  3998  064F  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  3999  0650  3F43               	moviw [3]fsr1
  4000  0651  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4001  0652  0820               	movf	??_AsicPreCalc^(0+128),w
  4002  0653  0008               	return
  4003  0654                     __end_ofPL4:	
  4004  0654                     PL6:	
  4005  0654  00A0               	movwf	??_AsicPreCalc^(0+128)
  4006  0655  3F41               	moviw [1]fsr1
  4007  0656  00A1               	movwf	(??_AsicPreCalc^(0+128)+1)
  4008  0657  3F42               	moviw [2]fsr1
  4009  0658  00A2               	movwf	(??_AsicPreCalc^(0+128)+2)
  4010  0659  3F43               	moviw [3]fsr1
  4011  065A  00A3               	movwf	(??_AsicPreCalc^(0+128)+3)
  4012  065B  0008               	return
  4013  065C                     __end_ofPL6:	
  4014  065C                     PL8:	
  4015  065C  30FC               	movlw	-4
  4016  065D  0020               	movlb	0	; select bank0
  4017  065E  00D6               	movwf	?___bmul
  4018  065F  0021               	movlb	1	; select bank1
  4019  0660  0860               	movf	AsicPreCalc@n^(0+128),w
  4020  0661  0008               	return
  4021  0662                     __end_ofPL8:	
  4022  0662                     PL10:	
  4023  0662  085C               	movf	?_rotate+3,w
  4024  0663  0021               	movlb	1	; select bank1
  4025  0664  00DB               	movwf	(AsicPreCalc@y+3)^(0+128)
  4026  0665  0020               	movlb	0	; select bank0
  4027  0666  085B               	movf	?_rotate+2,w
  4028  0667  0021               	movlb	1	; select bank1
  4029  0668  00DA               	movwf	(AsicPreCalc@y+2)^(0+128)
  4030  0669  0020               	movlb	0	; select bank0
  4031  066A  085A               	movf	?_rotate+1,w
  4032  066B  0021               	movlb	1	; select bank1
  4033  066C  00D9               	movwf	(AsicPreCalc@y+1)^(0+128)
  4034  066D  0020               	movlb	0	; select bank0
  4035  066E  0859               	movf	?_rotate,w
  4036  066F  0021               	movlb	1	; select bank1
  4037  0670  00D8               	movwf	AsicPreCalc@y^(0+128)
  4038  0671  0008               	return
  4039  0672                     __end_ofPL10:	
  4040  0672                     PL12:	
  4041  0672  00D9               	movwf	?_rotate
  4042  0673  3F41               	moviw [1]fsr1
  4043  0674  00DA               	movwf	?_rotate+1
  4044  0675  3F42               	moviw [2]fsr1
  4045  0676  00DB               	movwf	?_rotate+2
  4046  0677  3F43               	moviw [3]fsr1
  4047  0678  00DC               	movwf	?_rotate+3
  4048  0679  0008               	return
  4049  067A                     __end_ofPL12:	
  4050  067A                     PL14:	
  4051  067A  3E10               	addlw	16
  4052  067B  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4053  067C  0086               	movwf	6
  4054  067D  0187               	clrf	7
  4055  067E  3F40               	moviw [0]fsr1
  4056  067F  0008               	return
  4057  0680                     __end_ofPL14:	
  4058  0680                     PL16:	
  4059  0680  0021               	movlb	1	; select bank1
  4060  0681  0820               	movf	??_AsicPreCalc^(0+128),w
  4061  0682  3FC0               	movwi [0]fsr1
  4062  0683  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4063  0684  3FC1               	movwi [1]fsr1
  4064  0685  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4065  0686  3FC2               	movwi [2]fsr1
  4066  0687  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4067  0688  3FC3               	movwi [3]fsr1
  4068  0689  0008               	return
  4069  068A                     __end_ofPL16:	
  4070  068A                     PL18:	
  4071  068A  0860               	movf	AsicPreCalc@n^(0+128),w
  4072  068B  00A0               	movwf	??_AsicPreCalc^(0+128)
  4073  068C  01A1               	clrf	(??_AsicPreCalc^(0+128)+1)
  4074  068D  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4075  068E  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4076  068F  35A0               	lslf	??_AsicPreCalc^(0+128),f
  4077  0690  0DA1               	rlf	(??_AsicPreCalc^(0+128)+1),f
  4078  0691  0820               	movf	??_AsicPreCalc^(0+128),w
  4079  0692  0020               	movlb	0	; select bank0
  4080  0693  0766               	addwf	AsicPreCalc@work,w
  4081  0694  0021               	movlb	1	; select bank1
  4082  0695  00A2               	movwf	(??_AsicPreCalc+2)^(0+128)
  4083  0696  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4084  0697  0020               	movlb	0	; select bank0
  4085  0698  3D67               	addwfc	AsicPreCalc@work+1,w
  4086  0699  0021               	movlb	1	; select bank1
  4087  069A  00A3               	movwf	(??_AsicPreCalc+3)^(0+128)
  4088  069B  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4089  069C  0008               	return
  4090  069D                     __end_ofPL18:	
  4091  069D                     PL20:	
  4092  069D  0860               	movf	AsicPreCalc@n^(0+128),w
  4093  069E  3C00               	sublw	0
  4094  069F  3907               	andlw	7
  4095  06A0  0709               	addwf	9,w
  4096  06A1  0709               	addwf	9,w
  4097  06A2  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4098  06A3  0086               	movwf	6
  4099  06A4  0008               	return
  4100  06A5                     __end_ofPL20:	
  4101  06A5                     PL22:	
  4102  06A5  0021               	movlb	1	; select bank1
  4103  06A6  086B               	movf	_WorkNow^(0+128),w
  4104  06A7  0020               	movlb	0	; select bank0
  4105  06A8  00D6               	movwf	?___wmul
  4106  06A9  302D               	movlw	45
  4107  06AA  01D7               	clrf	?___wmul+1
  4108  06AB  00D8               	movwf	?___wmul+2
  4109  06AC  01D9               	clrf	?___wmul+3
  4110  06AD  0008               	return
  4111  06AE                     __end_ofPL22:	
  4112  06AE                     PL28:	
  4113  06AE  085C               	movf	?_rotate+3,w
  4114  06AF  0021               	movlb	1	; select bank1
  4115  06B0  00DF               	movwf	(AsicPreCalc@x+3)^(0+128)
  4116  06B1  0020               	movlb	0	; select bank0
  4117  06B2  085B               	movf	?_rotate+2,w
  4118  06B3  0021               	movlb	1	; select bank1
  4119  06B4  00DE               	movwf	(AsicPreCalc@x+2)^(0+128)
  4120  06B5  0020               	movlb	0	; select bank0
  4121  06B6  085A               	movf	?_rotate+1,w
  4122  06B7  0021               	movlb	1	; select bank1
  4123  06B8  00DD               	movwf	(AsicPreCalc@x+1)^(0+128)
  4124  06B9  0020               	movlb	0	; select bank0
  4125  06BA  0859               	movf	?_rotate,w
  4126  06BB  0021               	movlb	1	; select bank1
  4127  06BC  00DC               	movwf	AsicPreCalc@x^(0+128)
  4128  06BD  0008               	return
  4129  06BE                     __end_ofPL28:	
  4130  06BE                     PL30:	
  4131  06BE  3907               	andlw	7
  4132  06BF  0709               	addwf	9,w
  4133  06C0  0709               	addwf	9,w
  4134  06C1  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4135  06C2  0086               	movwf	6
  4136  06C3  0008               	return
  4137  06C4                     __end_ofPL30:	
  4138  06C4                     PL32:	
  4139  06C4  00A4               	movwf	(??_AsicPreCalc+4)^(0+128)
  4140  06C5  3F41               	moviw [1]fsr1
  4141  06C6  00A5               	movwf	((??_AsicPreCalc+4)^(0+128)+1)
  4142  06C7  3F42               	moviw [2]fsr1
  4143  06C8  00A6               	movwf	((??_AsicPreCalc+4)^(0+128)+2)
  4144  06C9  3F43               	moviw [3]fsr1
  4145  06CA  00A7               	movwf	((??_AsicPreCalc+4)^(0+128)+3)
  4146  06CB  0820               	movf	??_AsicPreCalc^(0+128),w
  4147  06CC  0008               	return
  4148  06CD                     __end_ofPL32:	
  4149  06CD                     PL34:	
  4150  06CD  0020               	movlb	0	; select bank0
  4151  06CE  00E6               	movwf	?_AsicPreCalc
  4152  06CF  3023               	movlw	35
  4153  06D0  00E7               	movwf	?_AsicPreCalc+1
  4154  06D1  0008               	return
  4155  06D2                     __end_ofPL34:	
  4156  06D2                     PL36:	
  4157  06D2  07DC               	addwf	AsicPreCalc@x^(0+128),f
  4158  06D3  3F41               	moviw [1]fsr1
  4159  06D4  3DDD               	addwfc	(AsicPreCalc@x+1)^(0+128),f
  4160  06D5  3F42               	moviw [2]fsr1
  4161  06D6  3DDE               	addwfc	(AsicPreCalc@x+2)^(0+128),f
  4162  06D7  3F43               	moviw [3]fsr1
  4163  06D8  3DDF               	addwfc	(AsicPreCalc@x+3)^(0+128),f
  4164  06D9  0008               	return
  4165  06DA                     __end_ofPL36:	
  4166  06DA                     PL46:	
  4167  06DA  0020               	movlb	0	; select bank0
  4168  06DB  085D               	movf	SendAsicData@work+1,w
  4169  06DC  0022               	movlb	2	; select bank2
  4170  06DD  00AD               	movwf	(_send32_data+1)^(0+256)
  4171  06DE  0020               	movlb	0	; select bank0
  4172  06DF  085C               	movf	SendAsicData@work,w
  4173  06E0  0022               	movlb	2	; select bank2
  4174  06E1  00AC               	movwf	_send32_data^(0+256)
  4175  06E2  0008               	return
  4176  06E3                     __end_ofPL46:	
  4177  06E3                     PL50:	
  4178  06E3  06D8               	xorwf	AsicPreCalc@y^(0+128),f
  4179  06E4  085D               	movf	(AsicPreCalc@x+1)^(0+128),w
  4180  06E5  06D9               	xorwf	(AsicPreCalc@y+1)^(0+128),f
  4181  06E6  085E               	movf	(AsicPreCalc@x+2)^(0+128),w
  4182  06E7  06DA               	xorwf	(AsicPreCalc@y+2)^(0+128),f
  4183  06E8  085F               	movf	(AsicPreCalc@x+3)^(0+128),w
  4184  06E9  06DB               	xorwf	(AsicPreCalc@y+3)^(0+128),f
  4185  06EA  0008               	return
  4186  06EB                     __end_ofPL50:	
  4187  06EB                     PL54:	
  4188  06EB  05DC               	andwf	AsicPreCalc@x^(0+128),f
  4189  06EC  0821               	movf	(??_AsicPreCalc+1)^(0+128),w
  4190  06ED  05DD               	andwf	(AsicPreCalc@x+1)^(0+128),f
  4191  06EE  0822               	movf	(??_AsicPreCalc+2)^(0+128),w
  4192  06EF  05DE               	andwf	(AsicPreCalc@x+2)^(0+128),f
  4193  06F0  0823               	movf	(??_AsicPreCalc+3)^(0+128),w
  4194  06F1  05DF               	andwf	(AsicPreCalc@x+3)^(0+128),f
  4195  06F2  0008               	return
  4196  06F3                     __end_ofPL54:	
  4197  06F3                     PL56:	
  4198  06F3  06B4               	xorwf	AsicPreCalc@z^(0+128),f
  4199  06F4  0859               	movf	(AsicPreCalc@y+1)^(0+128),w
  4200  06F5  06B5               	xorwf	(AsicPreCalc@z+1)^(0+128),f
  4201  06F6  085A               	movf	(AsicPreCalc@y+2)^(0+128),w
  4202  06F7  06B6               	xorwf	(AsicPreCalc@z+2)^(0+128),f
  4203  06F8  085B               	movf	(AsicPreCalc@y+3)^(0+128),w
  4204  06F9  06B7               	xorwf	(AsicPreCalc@z+3)^(0+128),f
  4205  06FA  0008               	return
  4206  06FB                     __end_ofPL56:	
  4207  06FB                     PL58:	
  4208  06FB  0865               	movf	ProcessCmd@cmd^(0+128),w
  4209  06FC  3E02               	addlw	2
  4210  06FD  0086               	movwf	6
  4211  06FE  3002               	movlw	2	; select bank4/5
  4212  06FF  0087               	movwf	7
  4213  0700  0008               	return
  4214  0701                     __end_ofPL58:	
  4215  0701                     PL62:	
  4216  0701  0865               	movf	ProcessCmd@cmd^(0+128),w
  4217  0702  0020               	movlb	0	; select bank0
  4218  0703  00DC               	movwf	?_SendCmdReply
  4219  0704  3002               	movlw	2
  4220  0705  00DD               	movwf	?_SendCmdReply+1
  4221  0706  0008               	return
  4222  0707                     __end_ofPL62:	
  4223  0707                     PL66:	
  4224  0707  0086               	movwf	6
  4225  0708  0187               	clrf	7
  4226  0709  0D01               	rlf	1,w
  4227  070A  0D01               	rlf	1,w
  4228  070B  3901               	andlw	1
  4229  070C  0021               	movlb	1	; select bank1
  4230  070D  0008               	return
  4231  070E                     __end_ofPL66:	
  4232  070E                     PL70:	
  4233  070E  3E1C               	addlw	28
  4234  070F  3EB8               	addlw	AsicPreCalc@m& (0+255)
  4235  0710  0086               	movwf	6
  4236  0711  0187               	clrf	7
  4237  0712  0008               	return
  4238  0713                     __end_ofPL70:	
  4239  0713                     PL78:	
  4240  0713  0856               	movf	?___wmul,w
  4241  0714  00E8               	movwf	??_AsicPushWork
  4242  0715  0857               	movf	?___wmul+1,w
  4243  0716  00E9               	movwf	??_AsicPushWork+1
  4244  0717  0868               	movf	??_AsicPushWork,w
  4245  0718  0008               	return
  4246  0719                     __end_ofPL78:	
  4247  0719                     PL88:	
  4248  0719  35DC               	lslf	_ClockCfg^(0+256),f
  4249  071A  0DDD               	rlf	(_ClockCfg+1)^(0+256),f
  4250  071B  0DDE               	rlf	(_ClockCfg+2)^(0+256),f
  4251  071C  0DDF               	rlf	(_ClockCfg+3)^(0+256),f
  4252  071D  0008               	return
  4253  071E                     __end_ofPL88:	
  4254                           
  4255                           	psect	bssBANK0
  4256  006A                     __pbssBANK0:	
  4257  006A                     _pBDTEntryIn:	
  4258  006A                     	ds	2
  4259  006C                     _USBDeferStatusStagePacket:	
  4260  006C                     	ds	1
  4261  006D                     _controlTransferState:	
  4262  006D                     	ds	1
  4263  006E                     _pBDTEntryEP0OutCurrent:	
  4264  006E                     	ds	1
  4265  006F                     _pBDTEntryEP0OutNext:	
  4266  006F                     	ds	1
  4267                           
  4268                           	psect	bssBANK1
  4269  00EA                     __pbssBANK1:	
  4270  00EA                     _USBDeviceState:	
  4271  00EA                     	ds	1
  4272  00EB                     _WorkNow:	
  4273  00EB                     	ds	1
  4274  00EC                     _shortPacketStatus:	
  4275  00EC                     	ds	1
  4276  00ED                     _USBActiveConfiguration:	
  4277  00ED                     	ds	1
  4278  00EE                     _USBAlternateInterface:	
  4279  00EE                     	ds	1
  4280  00EF                     _USTATcopy:	
  4281  00EF                     	ds	1
  4282                           
  4283                           	psect	bssBANK2
  4284  0120                     __pbssBANK2:	
  4285  0120                     _outPipes:	
  4286  0120                     	ds	6
  4287  0126                     _ep_data_in:	
  4288  0126                     	ds	2
  4289  0128                     _ep_data_out:	
  4290  0128                     	ds	2
  4291  012A                     _pBDTEntryOut:	
  4292  012A                     	ds	2
  4293  012C                     _send32_data:	
  4294  012C                     	ds	2
  4295  012E                     _BothEP0OutUOWNsSet:	
  4296  012E                     	ds	1
  4297  012F                     _RemoteWakeup:	
  4298  012F                     	ds	1
  4299  0130                     _ResultQC:	
  4300  0130                     	ds	1
  4301  0131                     _SlaveAddress:	
  4302  0131                     	ds	1
  4303  0132                     _SlowTick:	
  4304  0132                     	ds	1
  4305  0133                     _USBDeferINDataStagePackets:	
  4306  0133                     	ds	1
  4307  0134                     _USBDeferOUTDataStagePackets:	
  4308  0134                     	ds	1
  4309  0135                     _USBGenericInHandle:	
  4310  0135                     	ds	1
  4311  0136                     _USBGenericOutHandle:	
  4312  0136                     	ds	1
  4313  0137                     _USBStatusStageEnabledFlag1:	
  4314  0137                     	ds	1
  4315  0138                     _USBStatusStageEnabledFlag2:	
  4316  0138                     	ds	1
  4317  0139                     _USBStatusStageTimeoutCounter:	
  4318  0139                     	ds	1
  4319  013A                     _WQI:	
  4320  013A                     	ds	1
  4321  013B                     _WQX:	
  4322  013B                     	ds	1
  4323  013C                     _endpoint_number:	
  4324  013C                     	ds	1
  4325  013D                     _last_bit0:	
  4326  013D                     	ds	1
  4327  013E                     _last_bit1:	
  4328  013E                     	ds	1
  4329  013F                     _pDst:	
  4330  013F                     	ds	1
  4331  0140                     _send32_count:	
  4332  0140                     	ds	1
  4333  0141                     _ResultQue:	
  4334  0141                     	ds	8
  4335  0149                     _inPipes:	
  4336  0149                     	ds	5
  4337                           
  4338                           	psect	dataBANK2
  4339  014E                     __pdataBANK2:	
  4340  014E                     _HashTime:	
  4341  014E                     	ds	1
  4342  014F                     _Status:	
  4343  014F                     	ds	13
  4344  015C                     _ClockCfg:	
  4345  015C                     	ds	8
  4346  0164                     _Cfg:	
  4347  0164                     	ds	6
  4348                           
  4349                           	psect	bssBANK3
  4350  01A0                     __pbssBANK3:	
  4351  01A0                     _NonceRanges:	
  4352  01A0                     	ds	32
  4353  01C0                     _PrecalcHashes:	
  4354  01C0                     	ds	24
  4355                           
  4356                           	psect	dataBANK3
  4357  01D8                     __pdataBANK3:	
  4358  01D8                     AsicPreCalc@F3347:	
  4359  01D8                     	ds	12
  4360                           
  4361                           	psect	dataBANK6
  4362  0320                     __pdataBANK6:	
  4363  0320                     _BankRanges:	
  4364  0320                     	ds	32
  4365                           
  4366                           	psect	clrtext
  4367  08B6                     clear_ram:	
  4368                           ;	Called with FSR0 containing the base address, and
  4369                           ;	btemp/btemp+1 has the size to clear
  4370                           
  4371  08B6  0064               	clrwdt	;clear the watchdog before getting into this loop
  4372  08B7                     clrloop:	
  4373  08B7  0180               	clrf	0	;clear RAM location pointed to by FSR
  4374  08B8  3101               	addfsr 0,1
  4375  08B9  3001               	movlw	1
  4376  08BA  02FE               	subwf	126,f
  4377  08BB  3000               	movlw	0
  4378  08BC  3BFF               	subwfb	127,f
  4379  08BD  087F               	movf	127,w
  4380  08BE  047E               	iorwf	126,w
  4381  08BF  1903               	btfsc	3,2
  4382  08C0  3400               	retlw	0	;all done for this memory range, return
  4383  08C1  28B7               	goto	clrloop	;have we reached the end yet?
  4384                           
  4385                           	psect	inittext
  4386  175A                     init_ram:	
  4387  175A  00FE               	movwf	126
  4388  175B                     initloop:	
  4389  175B  0012               	moviw fsr0++
  4390  175C  001E               	movwi fsr1++
  4391  175D  3001               	movlw	1
  4392  175E  02FE               	subwf	126,f
  4393  175F  3000               	movlw	0
  4394  1760  3BFF               	subwfb	127,f
  4395  1761  087F               	movf	127,w
  4396  1762  047E               	iorwf	126,w
  4397  1763  1903               	btfsc	3,2
  4398  1764  3400               	retlw	0
  4399  1765  2F5B               	goto	initloop
  4400                           
  4401                           	psect	cstackBANK1
  4402  00A0                     __pcstackBANK1:	
  4403  00A0                     ??_AsicPreCalc:	
  4404  00A0                     USBStdFeatureReqHandler@pUEP:	
  4405                           ; 0 bytes @ 0x0
  4406                           
  4407                           
  4408                           ; 2 bytes @ 0x0
  4409  00A0                     	ds	2
  4410  00A2                     USBStdFeatureReqHandler@current_ep_data:	
  4411                           
  4412                           ; 1 bytes @ 0x2
  4413  00A2                     	ds	1
  4414  00A3                     USBStdFeatureReqHandler@p:	
  4415                           
  4416                           ; 1 bytes @ 0x3
  4417  00A3                     	ds	1
  4418  00A4                     ??_USBCtrlEPService:	
  4419                           
  4420                           ; 0 bytes @ 0x4
  4421  00A4                     	ds	2
  4422  00A6                     ??_USBDeviceTasks:	
  4423                           
  4424                           ; 0 bytes @ 0x6
  4425  00A6                     	ds	1
  4426  00A7                     USBDeviceTasks@i:	
  4427                           
  4428                           ; 1 bytes @ 0x7
  4429  00A7                     	ds	1
  4430  00A8                     AsicPreCalc@K:	
  4431                           
  4432                           ; 12 bytes @ 0x8
  4433  00A8                     	ds	12
  4434  00B4                     AsicPreCalc@z:	
  4435                           
  4436                           ; 4 bytes @ 0x14
  4437  00B4                     	ds	4
  4438  00B8                     AsicPreCalc@m:	
  4439                           
  4440                           ; 32 bytes @ 0x18
  4441  00B8                     	ds	32
  4442  00D8                     AsicPreCalc@y:	
  4443                           
  4444                           ; 4 bytes @ 0x38
  4445  00D8                     	ds	4
  4446  00DC                     AsicPreCalc@x:	
  4447                           
  4448                           ; 4 bytes @ 0x3C
  4449  00DC                     	ds	4
  4450  00E0                     AsicPreCalc@n:	
  4451                           
  4452                           ; 1 bytes @ 0x40
  4453  00E0                     	ds	1
  4454  00E1                     ??_ProcessCmd:	
  4455                           
  4456                           ; 0 bytes @ 0x41
  4457  00E1                     	ds	2
  4458  00E3                     _ProcessCmd$2047:	
  4459                           
  4460                           ; 2 bytes @ 0x43
  4461  00E3                     	ds	2
  4462  00E5                     ProcessCmd@cmd:	
  4463                           
  4464                           ; 1 bytes @ 0x45
  4465  00E5                     	ds	1
  4466  00E6                     _ProcessIO$2365:	
  4467                           
  4468                           ; 2 bytes @ 0x46
  4469  00E6                     	ds	2
  4470  00E8                     _ProcessIO$2399:	
  4471                           
  4472                           ; 2 bytes @ 0x48
  4473  00E8                     	ds	2
  4474                           
  4475                           	psect	cstackCOMMON
  4476  0070                     __pcstackCOMMON:	
  4477  0070                     ?_USBWakeFromSuspend:	
  4478  0070                     ?_USBSuspend:	
  4479                           ; 0 bytes @ 0x0
  4480                           
  4481  0070                     ?_USBCtrlEPAllowStatusStage:	
  4482                           ; 0 bytes @ 0x0
  4483                           
  4484  0070                     ?_USBStallHandler:	
  4485                           ; 0 bytes @ 0x0
  4486                           
  4487  0070                     ?_USBCtrlEPService:	
  4488                           ; 0 bytes @ 0x0
  4489                           
  4490  0070                     ?_USBCtrlTrfTxService:	
  4491                           ; 0 bytes @ 0x0
  4492                           
  4493  0070                     ?_USBCtrlTrfSetupHandler:	
  4494                           ; 0 bytes @ 0x0
  4495                           
  4496  0070                     ?_USBCtrlTrfOutHandler:	
  4497                           ; 0 bytes @ 0x0
  4498                           
  4499  0070                     ?_USBCtrlTrfInHandler:	
  4500                           ; 0 bytes @ 0x0
  4501                           
  4502  0070                     ?_USBCheckStdRequest:	
  4503                           ; 0 bytes @ 0x0
  4504                           
  4505  0070                     ?_USBStdFeatureReqHandler:	
  4506                           ; 0 bytes @ 0x0
  4507                           
  4508  0070                     ?_Send32:	
  4509                           ; 0 bytes @ 0x0
  4510                           
  4511  0070                     ?_AsicPushWork:	
  4512                           ; 0 bytes @ 0x0
  4513                           
  4514  0070                     ?_InitializeSystem:	
  4515                           ; 0 bytes @ 0x0
  4516                           
  4517  0070                     ?_ProcessIO:	
  4518                           ; 0 bytes @ 0x0
  4519                           
  4520  0070                     ?_UserInit:	
  4521                           ; 0 bytes @ 0x0
  4522                           
  4523  0070                     ?_USBDeviceInit:	
  4524                           ; 0 bytes @ 0x0
  4525                           
  4526  0070                     ?_USBDeviceTasks:	
  4527                           ; 0 bytes @ 0x0
  4528                           
  4529  0070                     ?_USBCtrlEPAllowDataStage:	
  4530                           ; 0 bytes @ 0x0
  4531                           
  4532  0070                     ?_USBCtrlEPServiceComplete:	
  4533                           ; 0 bytes @ 0x0
  4534                           
  4535  0070                     ?_USBCtrlTrfRxService:	
  4536                           ; 0 bytes @ 0x0
  4537                           
  4538  0070                     ?_USBStdSetCfgHandler:	
  4539                           ; 0 bytes @ 0x0
  4540                           
  4541  0070                     ?_USBStdGetDscHandler:	
  4542                           ; 0 bytes @ 0x0
  4543                           
  4544  0070                     ?_USBStdGetStatusHandler:	
  4545                           ; 0 bytes @ 0x0
  4546                           
  4547  0070                     ?_USBCheckVendorRequest:	
  4548                           ; 0 bytes @ 0x0
  4549                           
  4550  0070                     ?_ProcessCmd:	
  4551                           ; 0 bytes @ 0x0
  4552                           
  4553  0070                     ?_DetectAsics:	
  4554                           ; 0 bytes @ 0x0
  4555                           
  4556  0070                     ?_WorkTick:	
  4557                           ; 0 bytes @ 0x0
  4558                           
  4559  0070                     ?_ResultRx:	
  4560                           ; 0 bytes @ 0x0
  4561                           
  4562  0070                     ?_InitFAN:	
  4563                           ; 0 bytes @ 0x0
  4564                           
  4565  0070                     ?_InitTempSensor:	
  4566                           ; 0 bytes @ 0x0
  4567                           
  4568  0070                     ?_InitWorkTick:	
  4569                           ; 0 bytes @ 0x0
  4570                           
  4571  0070                     ?_InitResultRx:	
  4572                           ; 0 bytes @ 0x0
  4573                           
  4574  0070                     ?_ISRCode:	
  4575                           ; 0 bytes @ 0x0
  4576                           
  4577  0070                     ?_USBCBSuspend:	
  4578                           ; 0 bytes @ 0x0
  4579                           
  4580  0070                     ?_USBCBWakeFromSuspend:	
  4581                           ; 0 bytes @ 0x0
  4582                           
  4583  0070                     ?_USBCB_SOF_Handler:	
  4584                           ; 0 bytes @ 0x0
  4585                           
  4586  0070                     ?_USBCBErrorHandler:	
  4587                           ; 0 bytes @ 0x0
  4588                           
  4589  0070                     ?_USBCBCheckOtherReq:	
  4590                           ; 0 bytes @ 0x0
  4591                           
  4592  0070                     ?_USBCBStdSetDscHandler:	
  4593                           ; 0 bytes @ 0x0
  4594                           
  4595  0070                     ?_USBCBInitEP:	
  4596                           ; 0 bytes @ 0x0
  4597                           
  4598  0070                     ?i1___bmul:	
  4599                           ; 0 bytes @ 0x0
  4600                           
  4601  0070                     ?_main:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     ?i1___wmul:	
  4605                           ; 2 bytes @ 0x0
  4606                           
  4607  0070                     i1___bmul@multiplicand:	
  4608                           ; 2 bytes @ 0x0
  4609                           
  4610  0070                     i1___wmul@multiplier:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613                           
  4614                           ; 2 bytes @ 0x0
  4615  0070                     	ds	1
  4616  0071                     ??i1___bmul:	
  4617  0071                     i1___bmul@multiplier:	
  4618                           ; 0 bytes @ 0x1
  4619                           
  4620                           
  4621                           ; 1 bytes @ 0x1
  4622  0071                     	ds	1
  4623  0072                     i1___bmul@product:	
  4624  0072                     i1___wmul@multiplicand:	
  4625                           ; 1 bytes @ 0x2
  4626                           
  4627                           
  4628                           ; 2 bytes @ 0x2
  4629  0072                     	ds	2
  4630  0074                     ??i1___wmul:	
  4631  0074                     i1___wmul@product:	
  4632                           ; 0 bytes @ 0x4
  4633                           
  4634                           
  4635                           ; 2 bytes @ 0x4
  4636  0074                     	ds	2
  4637  0076                     ?i1_SendCmdReply:	
  4638  0076                     i1SendCmdReply@cmd:	
  4639                           ; 0 bytes @ 0x6
  4640                           
  4641                           
  4642                           ; 2 bytes @ 0x6
  4643  0076                     	ds	2
  4644  0078                     i1SendCmdReply@data:	
  4645                           
  4646                           ; 2 bytes @ 0x8
  4647  0078                     	ds	2
  4648  007A                     i1SendCmdReply@count:	
  4649                           
  4650                           ; 1 bytes @ 0xA
  4651  007A                     	ds	1
  4652  007B                     i1SendCmdReply@n:	
  4653                           
  4654                           ; 1 bytes @ 0xB
  4655  007B                     	ds	1
  4656  007C                     ??_ResultRx:	
  4657  007C                     ResultRx@TimeOut:	
  4658                           ; 0 bytes @ 0xC
  4659                           
  4660                           
  4661                           ; 1 bytes @ 0xC
  4662  007C                     	ds	1
  4663  007D                     ??_ISRCode:	
  4664                           
  4665                           ; 0 bytes @ 0xD
  4666  007D                     	ds	1
  4667                           
  4668                           	psect	cstackBANK0
  4669  0050                     __pcstackBANK0:	
  4670  0050                     ??i1_SendCmdReply:	
  4671                           
  4672                           ; 0 bytes @ 0x0
  4673  0050                     	ds	6
  4674  0056                     ??_USBCtrlEPAllowStatusStage:	
  4675  0056                     ??_USBStallHandler:	
  4676                           ; 0 bytes @ 0x6
  4677                           
  4678  0056                     ?_USBConfigureEndpoint:	
  4679                           ; 0 bytes @ 0x6
  4680                           
  4681  0056                     ??_USBCtrlTrfTxService:	
  4682                           ; 0 bytes @ 0x6
  4683                           
  4684  0056                     ??_Send32:	
  4685                           ; 0 bytes @ 0x6
  4686                           
  4687  0056                     ??_USBDeviceInit:	
  4688                           ; 0 bytes @ 0x6
  4689                           
  4690  0056                     ??_USBStdGetDscHandler:	
  4691                           ; 0 bytes @ 0x6
  4692                           
  4693  0056                     ??_USBStdGetStatusHandler:	
  4694                           ; 0 bytes @ 0x6
  4695                           
  4696  0056                     ??_USBCheckVendorRequest:	
  4697                           ; 0 bytes @ 0x6
  4698                           
  4699  0056                     ??_WorkTick:	
  4700                           ; 0 bytes @ 0x6
  4701                           
  4702  0056                     ??_InitFAN:	
  4703                           ; 0 bytes @ 0x6
  4704                           
  4705  0056                     ??_InitTempSensor:	
  4706                           ; 0 bytes @ 0x6
  4707                           
  4708  0056                     ??_InitWorkTick:	
  4709                           ; 0 bytes @ 0x6
  4710                           
  4711  0056                     ??_InitResultRx:	
  4712                           ; 0 bytes @ 0x6
  4713                           
  4714  0056                     ??_USBCBSuspend:	
  4715                           ; 0 bytes @ 0x6
  4716                           
  4717  0056                     ??_USBCBWakeFromSuspend:	
  4718                           ; 0 bytes @ 0x6
  4719                           
  4720  0056                     ??_USBCB_SOF_Handler:	
  4721                           ; 0 bytes @ 0x6
  4722                           
  4723  0056                     ??_USBCBErrorHandler:	
  4724                           ; 0 bytes @ 0x6
  4725                           
  4726  0056                     ??_USBCBCheckOtherReq:	
  4727                           ; 0 bytes @ 0x6
  4728                           
  4729  0056                     ??_USBCBStdSetDscHandler:	
  4730                           ; 0 bytes @ 0x6
  4731                           
  4732  0056                     ?_memset:	
  4733                           ; 0 bytes @ 0x6
  4734                           
  4735  0056                     ?___bmul:	
  4736                           ; 1 bytes @ 0x6
  4737                           
  4738  0056                     ?___wmul:	
  4739                           ; 1 bytes @ 0x6
  4740                           
  4741  0056                     ?___lwdiv:	
  4742                           ; 2 bytes @ 0x6
  4743                           
  4744  0056                     ?___awdiv:	
  4745                           ; 2 bytes @ 0x6
  4746                           
  4747  0056                     USBConfigureEndpoint@direction:	
  4748                           ; 2 bytes @ 0x6
  4749                           
  4750  0056                     USBStdGetStatusHandler@p:	
  4751                           ; 1 bytes @ 0x6
  4752                           
  4753  0056                     ___bmul@multiplicand:	
  4754                           ; 1 bytes @ 0x6
  4755                           
  4756  0056                     memset@c:	
  4757                           ; 1 bytes @ 0x6
  4758                           
  4759  0056                     ___wmul@multiplier:	
  4760                           ; 2 bytes @ 0x6
  4761                           
  4762  0056                     ___lwdiv@divisor:	
  4763                           ; 2 bytes @ 0x6
  4764                           
  4765  0056                     ___awdiv@divisor:	
  4766                           ; 2 bytes @ 0x6
  4767                           
  4768                           
  4769                           ; 2 bytes @ 0x6
  4770  0056                     	ds	1
  4771  0057                     ??_USBConfigureEndpoint:	
  4772  0057                     ??___bmul:	
  4773                           ; 0 bytes @ 0x7
  4774                           
  4775  0057                     ___bmul@product:	
  4776                           ; 0 bytes @ 0x7
  4777                           
  4778                           
  4779                           ; 1 bytes @ 0x7
  4780  0057                     	ds	1
  4781  0058                     ??_USBCtrlTrfRxService:	
  4782  0058                     USBConfigureEndpoint@EPNum:	
  4783                           ; 0 bytes @ 0x8
  4784                           
  4785  0058                     USBCtrlTrfTxService@byteToSend:	
  4786                           ; 1 bytes @ 0x8
  4787                           
  4788  0058                     ___bmul@multiplier:	
  4789                           ; 1 bytes @ 0x8
  4790                           
  4791  0058                     USBDeviceInit@p:	
  4792                           ; 1 bytes @ 0x8
  4793                           
  4794  0058                     memset@n:	
  4795                           ; 2 bytes @ 0x8
  4796                           
  4797  0058                     ___wmul@multiplicand:	
  4798                           ; 2 bytes @ 0x8
  4799                           
  4800  0058                     ___lwdiv@dividend:	
  4801                           ; 2 bytes @ 0x8
  4802                           
  4803  0058                     ___awdiv@dividend:	
  4804                           ; 2 bytes @ 0x8
  4805                           
  4806                           
  4807                           ; 2 bytes @ 0x8
  4808  0058                     	ds	1
  4809  0059                     ??_USBCtrlTrfInHandler:	
  4810  0059                     ??_USBCtrlEPAllowDataStage:	
  4811                           ; 0 bytes @ 0x9
  4812                           
  4813  0059                     ?_USBTransferOnePacket:	
  4814                           ; 0 bytes @ 0x9
  4815                           
  4816  0059                     ?_rotate:	
  4817                           ; 1 bytes @ 0x9
  4818                           
  4819  0059                     USBTransferOnePacket@dir:	
  4820                           ; 4 bytes @ 0x9
  4821                           
  4822  0059                     USBConfigureEndpoint@handle:	
  4823                           ; 1 bytes @ 0x9
  4824                           
  4825  0059                     rotate@x:	
  4826                           ; 1 bytes @ 0x9
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0x9
  4830  0059                     	ds	1
  4831  005A                     ??_memset:	
  4832  005A                     ?_USBEnableEndpoint:	
  4833                           ; 0 bytes @ 0xA
  4834                           
  4835  005A                     ??___wmul:	
  4836                           ; 0 bytes @ 0xA
  4837                           
  4838  005A                     ??___lwdiv:	
  4839                           ; 0 bytes @ 0xA
  4840                           
  4841  005A                     ??___awdiv:	
  4842                           ; 0 bytes @ 0xA
  4843                           
  4844  005A                     USBDeviceInit@i_718:	
  4845                           ; 0 bytes @ 0xA
  4846                           
  4847  005A                     USBEnableEndpoint@options:	
  4848                           ; 1 bytes @ 0xA
  4849                           
  4850  005A                     USBTransferOnePacket@data:	
  4851                           ; 1 bytes @ 0xA
  4852                           
  4853  005A                     USBCtrlTrfRxService@i:	
  4854                           ; 1 bytes @ 0xA
  4855                           
  4856  005A                     memset@p1:	
  4857                           ; 1 bytes @ 0xA
  4858                           
  4859  005A                     ___lwdiv@counter:	
  4860                           ; 1 bytes @ 0xA
  4861                           
  4862  005A                     ___awdiv@counter:	
  4863                           ; 1 bytes @ 0xA
  4864                           
  4865  005A                     ___wmul@product:	
  4866                           ; 1 bytes @ 0xA
  4867                           
  4868                           
  4869                           ; 2 bytes @ 0xA
  4870  005A                     	ds	1
  4871  005B                     ??_USBEnableEndpoint:	
  4872  005B                     ??_USBCtrlEPServiceComplete:	
  4873                           ; 0 bytes @ 0xB
  4874                           
  4875  005B                     USBDeviceInit@i:	
  4876                           ; 0 bytes @ 0xB
  4877                           
  4878  005B                     USBTransferOnePacket@len:	
  4879                           ; 1 bytes @ 0xB
  4880                           
  4881  005B                     USBCtrlTrfRxService@byteToRead:	
  4882                           ; 1 bytes @ 0xB
  4883                           
  4884  005B                     USBCtrlTrfInHandler@lastDTS:	
  4885                           ; 1 bytes @ 0xB
  4886                           
  4887  005B                     memset@p:	
  4888                           ; 1 bytes @ 0xB
  4889                           
  4890  005B                     ___awdiv@sign:	
  4891                           ; 1 bytes @ 0xB
  4892                           
  4893  005B                     ___lwdiv@quotient:	
  4894                           ; 1 bytes @ 0xB
  4895                           
  4896                           
  4897                           ; 2 bytes @ 0xB
  4898  005B                     	ds	1
  4899  005C                     ??_USBCtrlTrfOutHandler:	
  4900  005C                     ?_SendCmdReply:	
  4901                           ; 0 bytes @ 0xC
  4902                           
  4903  005C                     ??_USBTransferOnePacket:	
  4904                           ; 0 bytes @ 0xC
  4905                           
  4906  005C                     ?_SendAsicData:	
  4907                           ; 0 bytes @ 0xC
  4908                           
  4909  005C                     SendAsicData@work:	
  4910                           ; 0 bytes @ 0xC
  4911                           
  4912  005C                     SendCmdReply@cmd:	
  4913                           ; 2 bytes @ 0xC
  4914                           
  4915  005C                     ___awdiv@quotient:	
  4916                           ; 2 bytes @ 0xC
  4917                           
  4918                           
  4919                           ; 2 bytes @ 0xC
  4920  005C                     	ds	1
  4921  005D                     rotate@y:	
  4922  005D                     USBEnableEndpoint@p:	
  4923                           ; 1 bytes @ 0xD
  4924                           
  4925                           
  4926                           ; 2 bytes @ 0xD
  4927  005D                     	ds	1
  4928  005E                     ??_rotate:	
  4929  005E                     ??_DetectAsics:	
  4930                           ; 0 bytes @ 0xE
  4931                           
  4932  005E                     USBTransferOnePacket@ep:	
  4933                           ; 0 bytes @ 0xE
  4934                           
  4935  005E                     SendAsicData@split:	
  4936                           ; 1 bytes @ 0xE
  4937                           
  4938  005E                     SendCmdReply@data:	
  4939                           ; 1 bytes @ 0xE
  4940                           
  4941                           
  4942                           ; 2 bytes @ 0xE
  4943  005E                     	ds	1
  4944  005F                     ??_SendAsicData:	
  4945  005F                     USBEnableEndpoint@ep:	
  4946                           ; 0 bytes @ 0xF
  4947                           
  4948  005F                     USBTransferOnePacket@handle:	
  4949                           ; 1 bytes @ 0xF
  4950                           
  4951                           
  4952                           ; 1 bytes @ 0xF
  4953  005F                     	ds	1
  4954  0060                     ??_USBCBInitEP:	
  4955  0060                     ?_USER_USB_CALLBACK_EVENT_HANDLER:	
  4956                           ; 0 bytes @ 0x10
  4957                           
  4958  0060                     SendCmdReply@count:	
  4959                           ; 1 bytes @ 0x10
  4960                           
  4961  0060                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4962                           ; 1 bytes @ 0x10
  4963                           
  4964                           
  4965                           ; 2 bytes @ 0x10
  4966  0060                     	ds	1
  4967  0061                     ??_SendCmdReply:	
  4968                           
  4969                           ; 0 bytes @ 0x11
  4970  0061                     	ds	1
  4971  0062                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:	
  4972                           
  4973                           ; 1 bytes @ 0x12
  4974  0062                     	ds	1
  4975  0063                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4976                           
  4977                           ; 2 bytes @ 0x13
  4978  0063                     	ds	2
  4979  0065                     ??_USBWakeFromSuspend:	
  4980  0065                     ??_USBSuspend:	
  4981                           ; 0 bytes @ 0x15
  4982                           
  4983  0065                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4984                           ; 0 bytes @ 0x15
  4985                           
  4986  0065                     ??_USBStdFeatureReqHandler:	
  4987                           ; 0 bytes @ 0x15
  4988                           
  4989  0065                     ??_USBStdSetCfgHandler:	
  4990                           ; 0 bytes @ 0x15
  4991                           
  4992  0065                     USBStdSetCfgHandler@p:	
  4993                           ; 0 bytes @ 0x15
  4994                           
  4995                           
  4996                           ; 2 bytes @ 0x15
  4997  0065                     	ds	1
  4998  0066                     ?_AsicPreCalc:	
  4999  0066                     DetectAsics@x:	
  5000                           ; 0 bytes @ 0x16
  5001                           
  5002  0066                     AsicPreCalc@work:	
  5003                           ; 1 bytes @ 0x16
  5004                           
  5005                           
  5006                           ; 2 bytes @ 0x16
  5007  0066                     	ds	1
  5008  0067                     ??_InitializeSystem:	
  5009  0067                     ??_UserInit:	
  5010                           ; 0 bytes @ 0x17
  5011                           
  5012  0067                     USBStdSetCfgHandler@i_1089:	
  5013                           ; 0 bytes @ 0x17
  5014                           
  5015  0067                     SendCmdReply@n:	
  5016                           ; 1 bytes @ 0x17
  5017                           
  5018                           
  5019                           ; 1 bytes @ 0x17
  5020  0067                     	ds	1
  5021  0068                     ??_AsicPushWork:	
  5022  0068                     USBStdSetCfgHandler@i:	
  5023                           ; 0 bytes @ 0x18
  5024                           
  5025                           
  5026                           ; 1 bytes @ 0x18
  5027  0068                     	ds	1
  5028  0069                     ??_USBCtrlTrfSetupHandler:	
  5029  0069                     ??_USBCheckStdRequest:	
  5030                           ; 0 bytes @ 0x19
  5031                           
  5032  0069                     USBCtrlEPService@setup_cnt:	
  5033                           ; 0 bytes @ 0x19
  5034                           
  5035                           
  5036                           ; 1 bytes @ 0x19
  5037  0069                     	ds	1
  5038  006A                     ??_ProcessIO:	
  5039  006A                     ??_main:	
  5040                           ; 0 bytes @ 0x1A
  5041                           
  5042                           
  5043                           	psect	text1755
  5044  0C2B                     __ptext1755:	
  5045 ;; *************** function _USBCtrlTrfSetupHandler *****************
  5046 ;; Defined at:
  5047 ;;		line 2623 in file "../USB/usb_device.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;		None               void
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 1F/1
  5058 ;;		On exit  : 1D/0
  5059 ;;		Unchanged: FFFE0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;Total ram usage:        0 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:   10
  5068 ;; This function calls:
  5069 ;;		_USBCheckStdRequest
  5070 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5071 ;;		_USBCtrlEPServiceComplete
  5072 ;; This function is called by:
  5073 ;;		_USBCtrlEPService
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _USBCtrlTrfSetupHandler
  5079  0C2B                     _USBCtrlTrfSetupHandler:	
  5080  0C2B                     l5538:	
  5081                           ; Regs used in _USBCtrlTrfSetupHandler: [allreg]
  5082                           
  5083                           
  5084                           ;usb_device.c: 2627: shortPacketStatus = 0;
  5085  0C2B  01EC               	clrf	_shortPacketStatus^(0+128)
  5086                           
  5087                           ;usb_device.c: 2628: USBDeferStatusStagePacket = FALSE;
  5088  0C2C  0020               	movlb	0	; select bank0
  5089  0C2D  01EC               	clrf	_USBDeferStatusStagePacket	;volatile
  5090                           
  5091                           ;usb_device.c: 2629: USBDeferINDataStagePackets = FALSE;
  5092  0C2E  0022               	movlb	2	; select bank2
  5093  0C2F  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  5094                           
  5095                           ;usb_device.c: 2630: USBDeferOUTDataStagePackets = FALSE;
  5096  0C30  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  5097                           
  5098                           ;usb_device.c: 2631: BothEP0OutUOWNsSet = FALSE;
  5099  0C31  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  5100                           
  5101                           ;usb_device.c: 2632: controlTransferState = 0;
  5102  0C32  0020               	movlb	0	; select bank0
  5103  0C33  01ED               	clrf	_controlTransferState
  5104                           
  5105                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  5106  0C34  086A               	movf	_pBDTEntryIn,w
  5107  0C35  0086               	movwf	6
  5108  0C36  3004               	movlw	4
  5109  0C37  0187               	clrf	7
  5110  0C38  1381               	bcf	1,7
  5111                           
  5112                           ;usb_device.c: 2642: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  5113  0C39  06EA               	xorwf	_pBDTEntryIn,f
  5114                           
  5115                           ;usb_device.c: 2643: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
  5116  0C3A  086A               	movf	_pBDTEntryIn,w
  5117  0C3B  0086               	movwf	6
  5118  0C3C  3004               	movlw	4
  5119  0C3D  1381               	bcf	1,7
  5120                           
  5121                           ;usb_device.c: 2644: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  5122  0C3E  06EA               	xorwf	_pBDTEntryIn,f
  5123                           
  5124                           ;usb_device.c: 2645: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
  5125  0C3F  086F               	movf	_pBDTEntryEP0OutNext,w
  5126  0C40  0086               	movwf	6
  5127  0C41  1381               	bcf	1,7
  5128                           
  5129                           ;usb_device.c: 2647: inPipes[0].info.Val = 0;
  5130  0C42  0022               	movlb	2	; select bank2
  5131  0C43  01CB               	clrf	(_inPipes^(0+256)+2)
  5132                           
  5133                           ;usb_device.c: 2648: inPipes[0].wCount.Val = 0;
  5134  0C44  01CC               	clrf	(_inPipes^(0+256)+3)
  5135  0C45  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  5136                           
  5137                           ;usb_device.c: 2649: outPipes[0].info.Val = 0;
  5138  0C46  01A2               	clrf	(_outPipes^(0+256)+2)
  5139                           
  5140                           ;usb_device.c: 2650: outPipes[0].wCount.Val = 0;
  5141  0C47  01A3               	clrf	(_outPipes^(0+256)+3)
  5142  0C48  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  5143                           
  5144                           ;usb_device.c: 2656: USBCheckStdRequest();
  5145  0C49  2451  318C         	fcall	_USBCheckStdRequest
  5146                           
  5147                           ;usb_device.c: 2657: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
  5148  0C4B  3003               	movlw	3
  5149  0C4C  27CC  318C         	fcall	PL44	;call to abstracted procedure
  5150  0C4E  25FB               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5151                           
  5152                           ;usb_device.c: 2670: USBCtrlEPServiceComplete();
  5153  0C4F  318B  2B54         	ljmp	l5342
  5154  0C51                     __end_of_USBCtrlTrfSetupHandler:	
  5155  0C51                     __ptext1763:	
  5156 ;; *************** function _USBCheckStdRequest *****************
  5157 ;; Defined at:
  5158 ;;		line 2839 in file "../USB/usb_device.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;		None
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;		None
  5163 ;; Return value:  Size  Location     Type
  5164 ;;		None               void
  5165 ;; Registers used:
  5166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 1F/2
  5169 ;;		On exit  : 1C/0
  5170 ;;		Unchanged: FFFE0/0
  5171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;Total ram usage:        0 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    9
  5179 ;; This function calls:
  5180 ;;		_USBStdGetDscHandler
  5181 ;;		_USBStdSetCfgHandler
  5182 ;;		_USBStdGetStatusHandler
  5183 ;;		_USBStdFeatureReqHandler
  5184 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5185 ;; This function is called by:
  5186 ;;		_USBCtrlTrfSetupHandler
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _USBCheckStdRequest
  5192  0C51                     _USBCheckStdRequest:	
  5193                           
  5194                           ;usb_device.c: 2840: if(SetupPkt.RequestType != (0x00>>5)) return;
  5195                           
  5196                           ; Regs used in _USBCheckStdRequest: [allreg]
  5197  0C51  0020               	movlb	0	; select bank0
  5198  0C52  0E40               	swapf	64,w	;volatile
  5199  0C53  0C89               	rrf	9,f
  5200  0C54  3903               	andlw	3
  5201  0C55  1D03               	btfss	3,2
  5202  0C56  0008               	return
  5203                           
  5204                           ;usb_device.c: 2880: break;
  5205  0C57  0841               	movf	65,w	;volatile
  5206                           
  5207                           ; Switch size 1, requested type "space"
  5208                           ; Number of cases is 11, Range of values is 0 to 12
  5209                           ; switch strategies available:
  5210                           ; Name         Instructions Cycles
  5211                           ; direct_byte           32     6 (fixed)
  5212                           ; simple_byte           34    18 (average)
  5213                           ; jumptable            260     6 (fixed)
  5214                           ; rangetable            17     4 (fixed)
  5215                           ; spacedrange           31     6 (fixed)
  5216                           ; locatedrange          13     3 (fixed)
  5217                           ;	Chosen strategy is direct_byte
  5218  0C58  0084               	movwf	4
  5219  0C59  300D               	movlw	13
  5220  0C5A  0204               	subwf	4,w
  5221  0C5B  1803               	skipnc
  5222  0C5C  0008               	return
  5223  0C5D  3190               	movlp	high S6232
  5224  0C5E  3504               	lslf	4,w
  5225  0C5F  3E00               	addlw	low S6232
  5226  0C60  0082               	movwf	2
  5227  0C61                     l330:	
  5228  0C61  0008               	return
  5229  0C62                     l332:	
  5230                           ;usb_device.c: 2843: {
  5231                           ;usb_device.c: 2844: case 5:
  5232                           
  5233                           
  5234                           ;usb_device.c: 2845: inPipes[0].info.bits.busy = 1;
  5235  0C62  0022               	movlb	2	; select bank2
  5236  0C63  3008               	movlw	8
  5237  0C64  17CB               	bsf	(_inPipes^(0+256)+2),7
  5238                           
  5239                           ;usb_device.c: 2846: USBDeviceState = ADR_PENDING_STATE;
  5240  0C65  0021               	movlb	1	; select bank1
  5241  0C66  00EA               	movwf	_USBDeviceState^(0+128)
  5242                           
  5243                           ;usb_device.c: 2848: break;
  5244  0C67  0008               	return
  5245  0C68                     l5616:	
  5246                           
  5247                           ;usb_device.c: 2850: USBStdGetDscHandler();
  5248  0C68  3197  2FA2         	ljmp	l5486
  5249  0C6A                     l5618:	
  5250                           ;usb_device.c: 2851: break;
  5251                           
  5252                           
  5253                           ;usb_device.c: 2853: USBStdSetCfgHandler();
  5254  0C6A  3189  290C         	ljmp	l5426
  5255  0C6C                     l5620:	
  5256                           ;usb_device.c: 2854: break;
  5257                           
  5258                           
  5259                           ;usb_device.c: 2856: inPipes[0].pSrc.bRam = (BYTE*)&USBActiveConfiguration;
  5260  0C6C  30ED               	movlw	_USBActiveConfiguration& (0+255)
  5261  0C6D                     L4:	
  5262  0C6D  0022               	movlb	2	; select bank2
  5263  0C6E  00C9               	movwf	_inPipes^(0+256)
  5264  0C6F  3000               	movlw	0
  5265  0C70  01CA               	clrf	(_inPipes+1)^(0+256)
  5266                           
  5267                           ;usb_device.c: 2857: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  5268  0C71  144B               	bsf	(_inPipes^(0+256)+2),0
  5269                           
  5270                           ;usb_device.c: 2858: inPipes[0].wCount.v[0] = 1;
  5271  0C72  01CC               	clrf	(_inPipes^(0+256)+3)
  5272  0C73  0ACC               	incf	(_inPipes^(0+256)+3),f
  5273                           
  5274                           ;usb_device.c: 2859: inPipes[0].info.bits.busy = 1;
  5275  0C74  17CB               	bsf	(_inPipes^(0+256)+2),7
  5276                           
  5277                           ;usb_device.c: 2860: break;
  5278  0C75  0008               	return
  5279  0C76                     l5628:	
  5280                           
  5281                           ;usb_device.c: 2862: USBStdGetStatusHandler();
  5282  0C76  3188  28C2         	ljmp	l5512
  5283  0C78                     l5630:	
  5284                           ;usb_device.c: 2863: break;
  5285                           
  5286                           
  5287                           ;usb_device.c: 2865: case 3:
  5288                           ;usb_device.c: 2866: USBStdFeatureReqHandler();
  5289  0C78  2C8D               	ljmp	l5654
  5290  0C79                     l5632:	
  5291                           ;usb_device.c: 2867: break;
  5292                           
  5293                           
  5294                           ;usb_device.c: 2869: inPipes[0].pSrc.bRam = (BYTE*)&USBAlternateInterface[SetupPkt.bIntf
      +                          ID];
  5295  0C79  0844               	movf	68,w	;volatile
  5296  0C7A  3EEE               	addlw	_USBAlternateInterface& (0+255)
  5297  0C7B  2C6D               	goto	L4
  5298  0C7C                     l341:	
  5299                           ;usb_device.c: 2874: case 11:
  5300                           
  5301                           
  5302                           ;usb_device.c: 2875: inPipes[0].info.bits.busy = 1;
  5303  0C7C  0022               	movlb	2	; select bank2
  5304  0C7D  17CB               	bsf	(_inPipes^(0+256)+2),7
  5305                           
  5306                           ;usb_device.c: 2876: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
  5307  0C7E  0020               	movlb	0	; select bank0
  5308  0C7F  0844               	movf	68,w	;volatile
  5309  0C80  3EEE               	addlw	_USBAlternateInterface& (0+255)
  5310  0C81  0086               	movwf	6
  5311  0C82  0187               	clrf	7
  5312  0C83  0842               	movf	66,w	;volatile
  5313  0C84  0081               	movwf	1
  5314                           
  5315                           ;usb_device.c: 2877: break;
  5316  0C85  0008               	return
  5317  0C86                     l5642:	
  5318                           
  5319                           ;usb_device.c: 2879: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
  5320  0C86  3002               	movlw	2
  5321  0C87  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5322  0C88  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  5323  0C89  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  5324  0C8A  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  5325  0C8B  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  5326  0C8C  2DFB               	ljmp	l5122
  5327  0C8D                     __end_of_USBCheckStdRequest:	
  5328  0C8D                     __ptext1768:	
  5329 ;; *************** function _USBStdFeatureReqHandler *****************
  5330 ;; Defined at:
  5331 ;;		line 2907 in file "../USB/usb_device.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  pUEP            2    0[BANK1 ] PTR unsigned char 
  5336 ;;		 -> UEP0(1), 
  5337 ;;  p               1    3[BANK1 ] PTR struct __BDT
  5338 ;;		 -> NULL(0), BDT(32), 
  5339 ;;  current_ep_d    1    2[BANK1 ] struct .
  5340 ;; Return value:  Size  Location     Type
  5341 ;;		None               void
  5342 ;; Registers used:
  5343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5344 ;; Tracked objects:
  5345 ;;		On entry : 1D/0
  5346 ;;		On exit  : 1E/0
  5347 ;;		Unchanged: FFFE0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        6 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    8
  5356 ;; This function calls:
  5357 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5358 ;; This function is called by:
  5359 ;;		_USBCheckStdRequest
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           
  5364                           ;psect for function _USBStdFeatureReqHandler
  5365  0C8D                     _USBStdFeatureReqHandler:	
  5366  0C8D                     l5654:	
  5367                           ; Regs used in _USBStdFeatureReqHandler: [wreg-status,0+pclath+cstack]
  5368                           
  5369                           
  5370                           ;usb_device.c: 2908: BDT_ENTRY *p;
  5371                           ;usb_device.c: 2909: EP_STATUS current_ep_data;
  5372                           ;usb_device.c: 2913: unsigned char* pUEP;
  5373                           ;usb_device.c: 2951: if((SetupPkt.bFeature == 1)&&
  5374                           ;usb_device.c: 2952: (SetupPkt.Recipient == (0x00)))
  5375  0C8D  0020               	movlb	0	; select bank0
  5376  0C8E  0B42               	decfsz	66,w	;volatile
  5377  0C8F  2CA1               	goto	l5666
  5378  0C90  0840               	movf	64,w	;volatile
  5379  0C91  391F               	andlw	31
  5380  0C92  1D03               	skipz
  5381  0C93  2CA1               	goto	l5666
  5382                           
  5383                           ;usb_device.c: 2953: {
  5384                           ;usb_device.c: 2954: inPipes[0].info.bits.busy = 1;
  5385  0C94  0022               	movlb	2	; select bank2
  5386  0C95  17CB               	bsf	(_inPipes^(0+256)+2),7
  5387                           
  5388                           ;usb_device.c: 2955: if(SetupPkt.bRequest == 3)
  5389  0C96  0020               	movlb	0	; select bank0
  5390  0C97  0841               	movf	65,w	;volatile
  5391  0C98  3A03               	xorlw	3
  5392  0C99  1D03               	skipz
  5393  0C9A  2C9F               	goto	l5664
  5394                           
  5395                           ;usb_device.c: 2956: RemoteWakeup = TRUE;
  5396  0C9B  0022               	movlb	2	; select bank2
  5397  0C9C  01AF               	clrf	_RemoteWakeup^(0+256)
  5398  0C9D  0AAF               	incf	_RemoteWakeup^(0+256),f
  5399  0C9E  2CA1               	goto	l5666
  5400  0C9F                     l5664:	
  5401                           
  5402                           ;usb_device.c: 2957: else
  5403                           ;usb_device.c: 2958: RemoteWakeup = FALSE;
  5404  0C9F  0022               	movlb	2	; select bank2
  5405  0CA0  01AF               	clrf	_RemoteWakeup^(0+256)
  5406  0CA1                     l5666:	
  5407                           
  5408                           ;usb_device.c: 2959: }
  5409                           ;usb_device.c: 2962: if((SetupPkt.bFeature == 0)&&
  5410                           ;usb_device.c: 2963: (SetupPkt.Recipient == (0x02))&&
  5411                           ;usb_device.c: 2964: (SetupPkt.EPNum != 0) && (SetupPkt.EPNum <= 1)&&
  5412                           ;usb_device.c: 2965: (USBDeviceState == CONFIGURED_STATE))
  5413  0CA1  0020               	movlb	0	; select bank0
  5414  0CA2  0842               	movf	66,w
  5415  0CA3  1D03               	skipz
  5416  0CA4  0008               	return
  5417  0CA5  0840               	movf	64,w	;volatile
  5418  0CA6  391F               	andlw	31
  5419  0CA7  3A02               	xorlw	2
  5420  0CA8  1D03               	skipz
  5421  0CA9  0008               	return
  5422  0CAA  0844               	movf	68,w	;volatile
  5423  0CAB  390F               	andlw	15
  5424  0CAC  1903               	skipnz
  5425  0CAD  0008               	return
  5426  0CAE  0844               	movf	68,w	;volatile
  5427  0CAF  390F               	andlw	15
  5428  0CB0  00E5               	movwf	??_USBStdFeatureReqHandler
  5429  0CB1  3002               	movlw	2
  5430  0CB2  0265               	subwf	??_USBStdFeatureReqHandler,w
  5431  0CB3  1803               	skipnc
  5432  0CB4  0008               	return
  5433  0CB5  0021               	movlb	1	; select bank1
  5434  0CB6  086A               	movf	_USBDeviceState^(0+128),w
  5435  0CB7  3A20               	xorlw	32
  5436  0CB8  1D03               	skipz
  5437  0CB9  0008               	return
  5438                           
  5439                           ;usb_device.c: 2966: {
  5440                           ;usb_device.c: 2969: inPipes[0].info.bits.busy = 1;
  5441  0CBA  0022               	movlb	2	; select bank2
  5442  0CBB  17CB               	bsf	(_inPipes^(0+256)+2),7
  5443                           
  5444                           ;usb_device.c: 2972: if(SetupPkt.EPDir == 0)
  5445  0CBC  0020               	movlb	0	; select bank0
  5446  0CBD  1BC4               	btfsc	68,7	;volatile
  5447  0CBE  2CC8               	goto	l5680
  5448                           
  5449                           ;usb_device.c: 2973: {
  5450                           ;usb_device.c: 2974: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  5451  0CBF  0844               	movf	68,w	;volatile
  5452  0CC0  3189  2106  318C   	fcall	PL64	;call to abstracted procedure
  5453                           
  5454                           ;usb_device.c: 2975: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
  5455  0CC3  27E3  318C         	fcall	PL72	;call to abstracted procedure
  5456  0CC5  3E28               	addlw	_ep_data_out& (0+255)
  5457  0CC6  0086               	movwf	6
  5458  0CC7  2CD1               	goto	L6
  5459  0CC8                     l5680:	
  5460                           ;usb_device.c: 2976: }
  5461                           
  5462                           
  5463                           ;usb_device.c: 2977: else
  5464                           ;usb_device.c: 2978: {
  5465                           ;usb_device.c: 2979: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  5466  0CC8  3189  2100  318C   	fcall	PL60	;call to abstracted procedure
  5467                           
  5468                           ;usb_device.c: 2980: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
  5469  0CCB  27E3  318C         	fcall	PL72	;call to abstracted procedure
  5470  0CCD  3E26               	addlw	_ep_data_in& (0+255)
  5471  0CCE  0086               	movwf	6
  5472  0CCF  3001               	movlw	1	; select bank2/3
  5473  0CD0  0087               	movwf	7
  5474  0CD1                     L6:	
  5475  0CD1  0801               	movf	1,w
  5476  0CD2  0021               	movlb	1	; select bank1
  5477  0CD3  00A2               	movwf	USBStdFeatureReqHandler@current_ep_data^(0+128)
  5478                           
  5479                           ;usb_device.c: 2981: }
  5480                           ;usb_device.c: 2987: if(current_ep_data.bits.ping_pong_state == 0)
  5481  0CD4  1822               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),0
  5482  0CD5  2CD8               	goto	l353
  5483                           
  5484                           ;usb_device.c: 2988: {
  5485                           ;usb_device.c: 2989: {((BYTE_VAL*)&p)->Val &= ~0x0004;};
  5486  0CD6  1123               	bcf	USBStdFeatureReqHandler@p^(0+128),2
  5487                           
  5488                           ;usb_device.c: 2990: }
  5489  0CD7  2CD9               	goto	l354
  5490  0CD8                     l353:	
  5491                           
  5492                           ;usb_device.c: 2991: else
  5493                           ;usb_device.c: 2992: {
  5494                           ;usb_device.c: 2993: {((BYTE_VAL*)&p)->Val |= 0x0004;};
  5495  0CD8  1523               	bsf	USBStdFeatureReqHandler@p^(0+128),2
  5496  0CD9                     l354:	
  5497                           
  5498                           ;usb_device.c: 2994: }
  5499                           ;usb_device.c: 2999: if(SetupPkt.EPDir == 0)
  5500  0CD9  0020               	movlb	0	; select bank0
  5501  0CDA  1BC4               	btfsc	68,7	;volatile
  5502  0CDB  2CE1               	goto	l5688
  5503                           
  5504                           ;usb_device.c: 3000: {
  5505                           ;usb_device.c: 3001: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  5506  0CDC  0844               	movf	68,w	;volatile
  5507  0CDD  3189  2106  318C   	fcall	PL64	;call to abstracted procedure
  5508  0CE0  2CE4               	goto	L7
  5509  0CE1                     l5688:	
  5510                           ;usb_device.c: 3002: }
  5511                           
  5512                           
  5513                           ;usb_device.c: 3003: else
  5514                           ;usb_device.c: 3004: {
  5515                           ;usb_device.c: 3005: pBDTEntryIn[SetupPkt.EPNum] = (volatile BDT_ENTRY *)p;
  5516  0CE1  3189  2100  318C   	fcall	PL60	;call to abstracted procedure
  5517  0CE4                     L7:	
  5518  0CE4  0021               	movlb	1	; select bank1
  5519  0CE5  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5520  0CE6  0081               	movwf	1
  5521                           
  5522                           ;usb_device.c: 3006: }
  5523                           ;usb_device.c: 3009: if(SetupPkt.bRequest == 3)
  5524  0CE7  0020               	movlb	0	; select bank0
  5525  0CE8  0841               	movf	65,w	;volatile
  5526  0CE9  3A03               	xorlw	3
  5527  0CEA  1D03               	skipz
  5528  0CEB  2D07               	goto	l5700
  5529                           
  5530                           ;usb_device.c: 3010: {
  5531                           ;usb_device.c: 3011: if(p->STAT.UOWN == 1)
  5532  0CEC  0021               	movlb	1	; select bank1
  5533  0CED  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5534  0CEE  0086               	movwf	6
  5535  0CEF  0187               	clrf	7
  5536  0CF0  1F81               	btfss	1,7
  5537  0CF1  2D00               	goto	l358
  5538                           
  5539                           ;usb_device.c: 3012: {
  5540                           ;usb_device.c: 3015: if(SetupPkt.EPDir == 0)
  5541  0CF2  0020               	movlb	0	; select bank0
  5542  0CF3  1BC4               	btfsc	68,7	;volatile
  5543  0CF4  2CF9               	goto	l5698
  5544                           
  5545                           ;usb_device.c: 3016: {
  5546                           ;usb_device.c: 3017: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
  5547  0CF5  0844               	movf	68,w	;volatile
  5548  0CF6  390F               	andlw	15
  5549  0CF7  3E28               	addlw	_ep_data_out& (0+255)
  5550  0CF8  2CFC               	goto	L8
  5551  0CF9                     l5698:	
  5552                           ;usb_device.c: 3018: }
  5553                           
  5554                           
  5555                           ;usb_device.c: 3019: else
  5556                           ;usb_device.c: 3020: {
  5557                           ;usb_device.c: 3021: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
  5558  0CF9  0844               	movf	68,w	;volatile
  5559  0CFA  390F               	andlw	15
  5560  0CFB  3E26               	addlw	_ep_data_in& (0+255)
  5561  0CFC                     L8:	
  5562  0CFC  0086               	movwf	6
  5563  0CFD  3001               	movlw	1	; select bank2/3
  5564  0CFE  0087               	movwf	7
  5565  0CFF  1481               	bsf	1,1
  5566  0D00                     l358:	
  5567                           
  5568                           ;usb_device.c: 3022: }
  5569                           ;usb_device.c: 3023: }
  5570                           ;usb_device.c: 3026: p->STAT.Val |= 0x80|0x04;
  5571  0D00  0021               	movlb	1	; select bank1
  5572  0D01  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5573  0D02  0086               	movwf	6
  5574  0D03  3084               	movlw	132
  5575  0D04  0187               	clrf	7
  5576  0D05  0481               	iorwf	1,f
  5577                           
  5578                           ;usb_device.c: 3027: }
  5579  0D06  0008               	return
  5580  0D07                     l5700:	
  5581                           
  5582                           ;usb_device.c: 3028: else
  5583                           ;usb_device.c: 3029: {
  5584                           ;usb_device.c: 3033: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  5585  0D07  3004               	movlw	4
  5586  0D08  0021               	movlb	1	; select bank1
  5587  0D09  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  5588                           
  5589                           ;usb_device.c: 3035: if(p->STAT.UOWN == 1)
  5590  0D0A  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5591  0D0B  0086               	movwf	6
  5592  0D0C  0187               	clrf	7
  5593                           
  5594                           ;usb_device.c: 3036: {
  5595                           ;usb_device.c: 3039: p->STAT.Val &= (~0x80);
  5596  0D0D  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5597  0D0E  1F81               	btfss	1,7
  5598  0D0F  2D1C               	goto	L10
  5599  0D10  0086               	movwf	6
  5600  0D11  1381               	bcf	1,7
  5601                           
  5602                           ;usb_device.c: 3040: p->STAT.Val |= 0x40;
  5603  0D12  0086               	movwf	6
  5604  0D13  3005               	movlw	5
  5605  0D14  1701               	bsf	1,6
  5606                           
  5607                           ;usb_device.c: 3041: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  5608  0D15  0020               	movlb	0	; select bank0
  5609  0D16  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5610  0D17  27D3  318C         	fcall	PL48	;call to abstracted procedure
  5611  0D19  25FB  318C         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5612                           
  5613                           ;usb_device.c: 3042: }
  5614  0D1B  2D1F               	goto	l5710
  5615  0D1C                     L10:	
  5616                           ;usb_device.c: 3043: else
  5617                           ;usb_device.c: 3044: {
  5618                           ;usb_device.c: 3046: p->STAT.Val |= 0x40;
  5619                           
  5620  0D1C  0086               	movwf	6
  5621  0D1D  0187               	clrf	7
  5622  0D1E  1701               	bsf	1,6
  5623  0D1F                     l5710:	
  5624                           
  5625                           ;usb_device.c: 3047: }
  5626                           ;usb_device.c: 3051: ((BYTE_VAL*)&p)->Val ^= 0x0004;;
  5627  0D1F  3004               	movlw	4
  5628  0D20  0021               	movlb	1	; select bank1
  5629  0D21  06A3               	xorwf	USBStdFeatureReqHandler@p^(0+128),f
  5630                           
  5631                           ;usb_device.c: 3057: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
  5632  0D22  18A2               	btfsc	USBStdFeatureReqHandler@current_ep_data^(0+128),1
  5633  0D23  2D29               	goto	l366
  5634  0D24  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  5635  0D25  0086               	movwf	6
  5636  0D26  0187               	clrf	7
  5637  0D27  1F81               	btfss	1,7
  5638  0D28  2D42               	goto	l5722
  5639  0D29                     l366:	
  5640                           
  5641                           ;usb_device.c: 3058: {
  5642                           ;usb_device.c: 3059: if(SetupPkt.EPDir == 0)
  5643  0D29  0020               	movlb	0	; select bank0
  5644  0D2A  1BC4               	btfsc	68,7	;volatile
  5645  0D2B  2D30               	goto	l5718
  5646                           
  5647                           ;usb_device.c: 3060: {
  5648                           ;usb_device.c: 3061: ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
  5649  0D2C  0844               	movf	68,w	;volatile
  5650  0D2D  390F               	andlw	15
  5651  0D2E  3E28               	addlw	_ep_data_out& (0+255)
  5652  0D2F  2D33               	goto	L9
  5653  0D30                     l5718:	
  5654                           ;usb_device.c: 3062: }
  5655                           
  5656                           
  5657                           ;usb_device.c: 3063: else
  5658                           ;usb_device.c: 3064: {
  5659                           ;usb_device.c: 3065: ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
  5660  0D30  0844               	movf	68,w	;volatile
  5661  0D31  390F               	andlw	15
  5662  0D32  3E26               	addlw	_ep_data_in& (0+255)
  5663  0D33                     L9:	
  5664  0D33  0086               	movwf	6
  5665  0D34  3001               	movlw	1	; select bank2/3
  5666  0D35  0087               	movwf	7
  5667  0D36  1081               	bcf	1,1
  5668                           
  5669                           ;usb_device.c: 3066: }
  5670                           ;usb_device.c: 3068: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  5671  0D37  0021               	movlb	1	; select bank1
  5672  0D38  27EF  318C         	fcall	PL80	;call to abstracted procedure
  5673                           
  5674                           ;usb_device.c: 3071: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
  5675  0D3A  3005               	movlw	5
  5676  0D3B  0020               	movlb	0	; select bank0
  5677  0D3C  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5678  0D3D  27D3  318C         	fcall	PL48	;call to abstracted procedure
  5679  0D3F  25FB  318C         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5680                           
  5681                           ;usb_device.c: 3072: }
  5682  0D41  2D43               	goto	l5724
  5683  0D42                     l5722:	
  5684                           
  5685                           ;usb_device.c: 3073: else
  5686                           ;usb_device.c: 3074: {
  5687                           ;usb_device.c: 3076: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
  5688  0D42  27EF               	fcall	PL80	;call to abstracted procedure
  5689  0D43                     l5724:	
  5690                           
  5691                           ;usb_device.c: 3077: }
  5692                           ;usb_device.c: 3124: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
  5693  0D43  0020               	movlb	0	; select bank0
  5694  0D44  0844               	movf	68,w	;volatile
  5695  0D45  390F               	andlw	15
  5696  0D46  3E98               	addlw	152
  5697  0D47  00E5               	movwf	??_USBStdFeatureReqHandler
  5698  0D48  300E               	movlw	14
  5699  0D49  01E6               	clrf	??_USBStdFeatureReqHandler+1
  5700  0D4A  3DE6               	addwfc	??_USBStdFeatureReqHandler+1,f
  5701  0D4B  0865               	movf	??_USBStdFeatureReqHandler,w
  5702  0D4C  0021               	movlb	1	; select bank1
  5703  0D4D  00A0               	movwf	USBStdFeatureReqHandler@pUEP^(0+128)
  5704  0D4E  0020               	movlb	0	; select bank0
  5705  0D4F  0866               	movf	??_USBStdFeatureReqHandler+1,w
  5706  0D50  0021               	movlb	1	; select bank1
  5707  0D51  00A1               	movwf	(USBStdFeatureReqHandler@pUEP+1)^(0+128)
  5708                           
  5709                           ;usb_device.c: 3128: *pUEP &= ~0x0001;
  5710  0D52  0820               	movf	USBStdFeatureReqHandler@pUEP^(0+128),w
  5711  0D53  0086               	movwf	6
  5712  0D54  0821               	movf	(USBStdFeatureReqHandler@pUEP+1)^(0+128),w
  5713  0D55  0087               	movwf	7
  5714  0D56  1001               	bcf	1,0
  5715  0D57  0008               	return
  5716  0D58                     __end_of_USBStdFeatureReqHandler:	
  5717  0D58                     __ptext1750:	
  5718 ;; *************** function _USBDeviceTasks *****************
  5719 ;; Defined at:
  5720 ;;		line 669 in file "../USB/usb_device.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;		None
  5723 ;; Auto vars:     Size  Location     Type
  5724 ;;  i               1    7[BANK1 ] unsigned char 
  5725 ;; Return value:  Size  Location     Type
  5726 ;;		None               void
  5727 ;; Registers used:
  5728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/1
  5731 ;;		On exit  : 1F/0
  5732 ;;		Unchanged: FFFE0/0
  5733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5735 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5736 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;Total ram usage:        2 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; Hardware stack levels required when called:   12
  5741 ;; This function calls:
  5742 ;;		_USBWakeFromSuspend
  5743 ;;		_USBDeviceInit
  5744 ;;		_USBSuspend
  5745 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  5746 ;;		_USBCtrlEPAllowStatusStage
  5747 ;;		_USBStallHandler
  5748 ;;		_USBCtrlEPService
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _USBDeviceTasks
  5756  0D58                     _USBDeviceTasks:	
  5757                           
  5758                           ;usb_device.c: 735: }
  5759                           ;usb_device.c: 757: if(USBDeviceState == DETACHED_STATE)
  5760                           
  5761                           ;usb_device.c: 670: BYTE i;
  5762                           ;usb_device.c: 696: if (1 != 1)
  5763                           
  5764                           ; Regs used in _USBDeviceTasks: [allreg]
  5765  0D58  0021               	movlb	1	; select bank1
  5766  0D59  08EA               	movf	_USBDeviceState^(0+128),f
  5767  0D5A  1D03               	skipz
  5768  0D5B  2D69               	goto	l5010
  5769                           
  5770                           ;usb_device.c: 758: {
  5771                           ;usb_device.c: 760: UCON = 0;
  5772  0D5C  003D               	movlb	29	; select bank29
  5773  0D5D  018E               	clrf	14	;volatile
  5774                           
  5775                           ;usb_device.c: 763: UIE = 0;
  5776  0D5E  0192               	clrf	18	;volatile
  5777                           
  5778                           ;usb_device.c: 767: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  5779  0D5F  3016               	movlw	22
  5780  0D60  27F5  318C         	fcall	PL82	;call to abstracted procedure
  5781  0D62                     l140:	
  5782                           ;usb_device.c: 770: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  5783                           
  5784  0D62  198E               	btfsc	14,3	;volatile
  5785  0D63  2D66               	goto	l142
  5786  0D64  158E               	bsf	14,3	;volatile
  5787  0D65  2D62               	goto	l140
  5788  0D66                     l142:	
  5789                           
  5790                           ;usb_device.c: 773: USBDeviceState = ATTACHED_STATE;
  5791  0D66  0021               	movlb	1	; select bank1
  5792  0D67  01EA               	clrf	_USBDeviceState^(0+128)
  5793  0D68  0AEA               	incf	_USBDeviceState^(0+128),f
  5794  0D69                     l5010:	
  5795                           
  5796                           ;usb_device.c: 778: }
  5797                           ;usb_device.c: 781: if(USBDeviceState == ATTACHED_STATE)
  5798  0D69  036A               	decf	_USBDeviceState^(0+128),w
  5799  0D6A  1D03               	skipz
  5800  0D6B  2D76               	goto	l5022
  5801                           
  5802                           ;usb_device.c: 782: {
  5803                           ;usb_device.c: 792: if(!UCONbits.SE0)
  5804  0D6C  003D               	movlb	29	; select bank29
  5805  0D6D  1A8E               	btfsc	14,5	;volatile
  5806  0D6E  2D76               	goto	l5022
  5807                           
  5808                           ;usb_device.c: 793: {
  5809                           ;usb_device.c: 794: UIR = 0;;
  5810  0D6F  0190               	clrf	16	;volatile
  5811                           
  5812                           ;usb_device.c: 796: UIE=0;
  5813  0D70  0192               	clrf	18	;volatile
  5814                           
  5815                           ;usb_device.c: 798: UIEbits.URSTIE = 1;
  5816  0D71  1412               	bsf	18,0	;volatile
  5817                           
  5818                           ;usb_device.c: 799: UIEbits.IDLEIE = 1;
  5819  0D72  1612               	bsf	18,4	;volatile
  5820                           
  5821                           ;usb_device.c: 800: USBDeviceState = POWERED_STATE;
  5822  0D73  3002               	movlw	2
  5823  0D74  0021               	movlb	1	; select bank1
  5824  0D75  00EA               	movwf	_USBDeviceState^(0+128)
  5825  0D76                     l5022:	
  5826                           
  5827                           ;usb_device.c: 801: }
  5828                           ;usb_device.c: 802: }
  5829                           ;usb_device.c: 818: if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  5830  0D76  003D               	movlb	29	; select bank29
  5831  0D77  1910               	btfsc	16,2	;volatile
  5832  0D78  1D12               	btfss	18,2	;volatile
  5833  0D79  2D7D               	goto	l5030
  5834                           
  5835                           ;usb_device.c: 819: {
  5836                           ;usb_device.c: 820: (UIR &= 0xFB);
  5837  0D7A  1110               	bcf	16,2	;volatile
  5838                           
  5839                           ;usb_device.c: 824: USBWakeFromSuspend();
  5840  0D7B  2747  318C         	fcall	_USBWakeFromSuspend
  5841  0D7D                     l5030:	
  5842                           
  5843                           ;usb_device.c: 826: }
  5844                           ;usb_device.c: 831: if(UCONbits.SUSPND==1)
  5845  0D7D  1C8E               	btfss	14,1	;volatile
  5846  0D7E  2D82               	goto	l146
  5847  0D7F                     l5032:	
  5848                           
  5849                           ;usb_device.c: 832: {
  5850                           ;usb_device.c: 833: PIR2bits.USBIF = 0;;
  5851  0D7F  0020               	movlb	0	; select bank0
  5852  0D80  1112               	bcf	18,2	;volatile
  5853                           
  5854                           ;usb_device.c: 834: return;
  5855  0D81  0008               	return
  5856  0D82                     l146:	
  5857                           
  5858                           ;usb_device.c: 835: }
  5859                           ;usb_device.c: 847: if(UIRbits.URSTIF && UIEbits.URSTIE)
  5860  0D82  1810               	btfsc	16,0	;volatile
  5861  0D83  1C12               	btfss	18,0	;volatile
  5862  0D84  2D8B               	goto	l5042
  5863                           
  5864                           ;usb_device.c: 848: {
  5865                           ;usb_device.c: 849: USBDeviceInit();
  5866  0D85  262A  318C         	fcall	_USBDeviceInit
  5867                           
  5868                           ;usb_device.c: 853: ;
  5869                           ;usb_device.c: 855: USBDeviceState = DEFAULT_STATE;
  5870  0D87  3004               	movlw	4
  5871  0D88  00EA               	movwf	_USBDeviceState^(0+128)
  5872                           
  5873                           ;usb_device.c: 865: (UIR &= 0xFE);
  5874  0D89  003D               	movlb	29	; select bank29
  5875  0D8A  1010               	bcf	16,0	;volatile
  5876  0D8B                     l5042:	
  5877                           
  5878                           ;usb_device.c: 866: }
  5879                           ;usb_device.c: 871: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  5880  0D8B  1A10               	btfsc	16,4	;volatile
  5881  0D8C  1E12               	btfss	18,4	;volatile
  5882  0D8D  2D92               	goto	l5050
  5883                           
  5884                           ;usb_device.c: 872: {
  5885                           ;usb_device.c: 877: USBSuspend();
  5886  0D8E  2740  318C         	fcall	_USBSuspend
  5887                           
  5888                           ;usb_device.c: 880: (UIR &= 0xEF);
  5889  0D90  003D               	movlb	29	; select bank29
  5890  0D91  1210               	bcf	16,4	;volatile
  5891  0D92                     l5050:	
  5892                           
  5893                           ;usb_device.c: 881: }
  5894                           ;usb_device.c: 883: if(UIRbits.SOFIF)
  5895  0D92  1F10               	btfss	16,6	;volatile
  5896  0D93  2DA9               	goto	l5064
  5897                           
  5898                           ;usb_device.c: 884: {
  5899                           ;usb_device.c: 885: if(UIEbits.SOFIE)
  5900  0D94  1F12               	btfss	18,6	;volatile
  5901  0D95  2D9E               	goto	l5056
  5902                           
  5903                           ;usb_device.c: 886: {
  5904                           ;usb_device.c: 887: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
  5905  0D96  3073               	movlw	115
  5906  0D97  0020               	movlb	0	; select bank0
  5907  0D98  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5908  0D99  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  5909  0D9A  27FB  318C         	fcall	PL86	;call to abstracted procedure
  5910  0D9C  25FB  318C         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5911  0D9E                     l5056:	
  5912                           
  5913                           ;usb_device.c: 888: }
  5914                           ;usb_device.c: 889: (UIR &= 0xBF);
  5915  0D9E  003D               	movlb	29	; select bank29
  5916  0D9F  1310               	bcf	16,6	;volatile
  5917                           
  5918                           ;usb_device.c: 914: if(USBStatusStageTimeoutCounter != 0u)
  5919  0DA0  0022               	movlb	2	; select bank2
  5920  0DA1  0839               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  5921  0DA2  1D03               	skipz
  5922                           
  5923                           ;usb_device.c: 915: {
  5924                           ;usb_device.c: 916: USBStatusStageTimeoutCounter--;
  5925  0DA3  03B9               	decf	_USBStatusStageTimeoutCounter^(0+256),f
  5926                           
  5927                           ;usb_device.c: 917: }
  5928                           ;usb_device.c: 923: if(USBStatusStageTimeoutCounter == 0)
  5929  0DA4  08B9               	movf	_USBStatusStageTimeoutCounter^(0+256),f
  5930  0DA5  1D03               	skipz
  5931  0DA6  2DA9               	goto	l5064
  5932                           
  5933                           ;usb_device.c: 924: {
  5934                           ;usb_device.c: 925: USBCtrlEPAllowStatusStage();
  5935  0DA7  269A  318C         	fcall	_USBCtrlEPAllowStatusStage
  5936  0DA9                     l5064:	
  5937                           
  5938                           ;usb_device.c: 926: }
  5939                           ;usb_device.c: 928: }
  5940                           ;usb_device.c: 930: if(UIRbits.STALLIF && UIEbits.STALLIE)
  5941  0DA9  003D               	movlb	29	; select bank29
  5942  0DAA  1A90               	btfsc	16,5	;volatile
  5943  0DAB  1E92               	btfss	18,5	;volatile
  5944  0DAC  2DAF               	goto	l5070
  5945                           
  5946                           ;usb_device.c: 931: {
  5947                           ;usb_device.c: 932: USBStallHandler();
  5948  0DAD  2728  318C         	fcall	_USBStallHandler
  5949  0DAF                     l5070:	
  5950                           
  5951                           ;usb_device.c: 933: }
  5952                           ;usb_device.c: 935: if(UIRbits.UERRIF && UIEbits.UERRIE)
  5953  0DAF  1890               	btfsc	16,1	;volatile
  5954  0DB0  1C92               	btfss	18,1	;volatile
  5955  0DB1  2DBD               	goto	l5078
  5956                           
  5957                           ;usb_device.c: 936: {
  5958                           ;usb_device.c: 937: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR,0,1);
  5959  0DB2  30FF               	movlw	255
  5960  0DB3  0020               	movlb	0	; select bank0
  5961  0DB4  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  5962  0DB5  307F               	movlw	127
  5963  0DB6  00E1               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  5964  0DB7  27FB  318C         	fcall	PL86	;call to abstracted procedure
  5965  0DB9  25FB  318C         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  5966                           
  5967                           ;usb_device.c: 938: UEIR = 0;;
  5968  0DBB  003D               	movlb	29	; select bank29
  5969  0DBC  0193               	clrf	19	;volatile
  5970  0DBD                     l5078:	
  5971                           
  5972                           ;usb_device.c: 946: }
  5973                           ;usb_device.c: 953: if(USBDeviceState < DEFAULT_STATE)
  5974  0DBD  3004               	movlw	4
  5975  0DBE  0021               	movlb	1	; select bank1
  5976  0DBF  026A               	subwf	_USBDeviceState^(0+128),w
  5977  0DC0  1C03               	btfss	3,0
  5978  0DC1  2D7F               	goto	l5032
  5979                           
  5980                           ;usb_device.c: 957: }
  5981                           ;usb_device.c: 962: if(UIEbits.TRNIE)
  5982  0DC2  003D               	movlb	29	; select bank29
  5983  0DC3  1D92               	btfss	18,3	;volatile
  5984  0DC4  2D7F               	goto	l5032
  5985                           
  5986                           ;usb_device.c: 963: {
  5987                           ;usb_device.c: 964: for(i = 0; i < 4u; i++)
  5988  0DC5  0021               	movlb	1	; select bank1
  5989  0DC6  01A7               	clrf	USBDeviceTasks@i^(0+128)
  5990  0DC7                     l157:	
  5991                           
  5992                           ;usb_device.c: 965: {
  5993                           ;usb_device.c: 966: if(UIRbits.TRNIF)
  5994  0DC7  003D               	movlb	29	; select bank29
  5995  0DC8  1D90               	btfss	16,3	;volatile
  5996  0DC9  2D7F               	goto	l5032
  5997                           
  5998                           ;usb_device.c: 967: {
  5999                           ;usb_device.c: 969: USTATcopy.Val = USTAT;
  6000  0DCA  080F               	movf	15,w	;volatile
  6001  0DCB  0021               	movlb	1	; select bank1
  6002  0DCC  00EF               	movwf	_USTATcopy^(0+128)
  6003                           
  6004                           ;usb_device.c: 970: endpoint_number = USTATcopy.endpoint_number;
  6005  0DCD  0C6F               	rrf	_USTATcopy^(0+128),w
  6006  0DCE  00A6               	movwf	??_USBDeviceTasks^(0+128)
  6007  0DCF  0CA6               	rrf	??_USBDeviceTasks^(0+128),f
  6008  0DD0  0C26               	rrf	??_USBDeviceTasks^(0+128),w
  6009  0DD1  390F               	andlw	15
  6010  0DD2  0022               	movlb	2	; select bank2
  6011  0DD3  00BC               	movwf	_endpoint_number^(0+256)
  6012                           
  6013                           ;usb_device.c: 972: (UIR &= 0xF7);
  6014  0DD4  003D               	movlb	29	; select bank29
  6015  0DD5  1190               	bcf	16,3	;volatile
  6016                           
  6017                           ;usb_device.c: 977: if(USTATcopy.direction == 0)
  6018  0DD6  0021               	movlb	1	; select bank1
  6019  0DD7  196F               	btfsc	_USTATcopy^(0+128),2
  6020  0DD8  2DDD               	goto	l5098
  6021                           
  6022                           ;usb_device.c: 978: {
  6023                           ;usb_device.c: 979: ep_data_out[endpoint_number].bits.ping_pong_state ^= 1;
  6024  0DD9  0022               	movlb	2	; select bank2
  6025  0DDA  083C               	movf	_endpoint_number^(0+256),w
  6026  0DDB  3E28               	addlw	_ep_data_out& (0+255)
  6027  0DDC  2DE0               	goto	L1
  6028  0DDD                     l5098:	
  6029                           ;usb_device.c: 980: }
  6030                           
  6031                           
  6032                           ;usb_device.c: 981: else
  6033                           ;usb_device.c: 982: {
  6034                           ;usb_device.c: 983: ep_data_in[endpoint_number].bits.ping_pong_state ^= 1;
  6035  0DDD  0022               	movlb	2	; select bank2
  6036  0DDE  083C               	movf	_endpoint_number^(0+256),w
  6037  0DDF  3E26               	addlw	_ep_data_in& (0+255)
  6038  0DE0                     L1:	
  6039  0DE0  0086               	movwf	6
  6040  0DE1  3001               	movlw	1	; select bank2/3
  6041  0DE2  0087               	movwf	7
  6042  0DE3  0681               	xorwf	1,f
  6043                           
  6044                           ;usb_device.c: 984: }
  6045                           ;usb_device.c: 989: if(endpoint_number == 0)
  6046  0DE4  08BC               	movf	_endpoint_number^(0+256),f
  6047  0DE5  1D03               	skipz
  6048  0DE6  2DEA               	goto	l5104
  6049                           
  6050                           ;usb_device.c: 990: {
  6051                           ;usb_device.c: 991: USBCtrlEPService();
  6052  0DE7  26D4  318C         	fcall	_USBCtrlEPService
  6053                           
  6054                           ;usb_device.c: 992: }
  6055  0DE9  2DF4               	goto	l5106
  6056  0DEA                     l5104:	
  6057                           
  6058                           ;usb_device.c: 993: else
  6059                           ;usb_device.c: 994: {
  6060                           ;usb_device.c: 995: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER,(BYTE*)&USTATcopy.Val
      +                          ,0);
  6061  0DEA  3072               	movlw	114
  6062  0DEB  0020               	movlb	0	; select bank0
  6063  0DEC  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  6064  0DED  30EF               	movlw	_USTATcopy& (0+255)
  6065  0DEE  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  6066  0DEF  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  6067  0DF0  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  6068  0DF1  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  6069  0DF2  25FB  318C         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6070  0DF4                     l5106:	
  6071  0DF4  0021               	movlb	1	; select bank1
  6072  0DF5  3004               	movlw	4
  6073  0DF6  0AA7               	incf	USBDeviceTasks@i^(0+128),f
  6074  0DF7  0227               	subwf	USBDeviceTasks@i^(0+128),w
  6075  0DF8  1803               	btfsc	3,0
  6076  0DF9  2D7F               	goto	l5032
  6077  0DFA  2DC7               	goto	l157
  6078  0DFB                     __end_of_USBDeviceTasks:	
  6079  0DFB                     __ptext1769:	
  6080 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
  6081 ;; Defined at:
  6082 ;;		line 630 in file "main.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  event           2   16[BANK0 ] int 
  6085 ;;  pdata           1   18[BANK0 ] PTR void 
  6086 ;;		 -> USTATcopy(1), USBActiveConfiguration(1), NULL(0), BDT(32), 
  6087 ;;  size            2   19[BANK0 ] unsigned short 
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      enum E5
  6092 ;; Registers used:
  6093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 1F/0
  6096 ;;		On exit  : 1D/0
  6097 ;;		Unchanged: FFFE0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6099 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;Total ram usage:        5 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    7
  6106 ;; This function calls:
  6107 ;;		_USBCB_SOF_Handler
  6108 ;;		_USBCBSuspend
  6109 ;;		_USBCBWakeFromSuspend
  6110 ;;		_USBCBInitEP
  6111 ;;		_USBCBStdSetDscHandler
  6112 ;;		_USBCBCheckOtherReq
  6113 ;;		_USBCBErrorHandler
  6114 ;; This function is called by:
  6115 ;;		_USBDeviceTasks
  6116 ;;		_USBStdSetCfgHandler
  6117 ;;		_USBSuspend
  6118 ;;		_USBWakeFromSuspend
  6119 ;;		_USBCtrlTrfSetupHandler
  6120 ;;		_USBCheckStdRequest
  6121 ;;		_USBStdFeatureReqHandler
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           
  6126                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
  6127  0DFB                     _USER_USB_CALLBACK_EVENT_HANDLER:	
  6128  0DFB                     l5122:	
  6129                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-status,0+pclath+cstack]
  6130                           
  6131                           
  6132                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6133                           ; Switch size 1, requested type "space"
  6134                           ; Number of cases is 2, Range of values is 0 to 127
  6135                           ; switch strategies available:
  6136                           ; Name         Instructions Cycles
  6137                           ; simple_byte            7     4 (average)
  6138                           ; direct_byte          262     6 (fixed)
  6139                           ; jumptable            260     6 (fixed)
  6140                           ; rangetable           132     6 (fixed)
  6141                           ; spacedrange          261     8 (fixed)
  6142                           ; locatedrange         128     3 (fixed)
  6143                           ;	Chosen strategy is simple_byte
  6144                           
  6145                           ;main.c: 656: break;
  6146                           
  6147                           ;main.c: 631: switch( event )
  6148  0DFB  0861               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
  6149  0DFC  3A00               	xorlw	0	; case 0
  6150  0DFD  1903               	skipnz
  6151  0DFE  2E0A               	goto	l6234
  6152  0DFF  3A7F               	xorlw	127	; case 127
  6153  0E00  1903               	skipnz
  6154  0E01  2E24               	goto	l6236
  6155  0E02  2E29               	goto	l911
  6156  0E03                     l5124:	
  6157                           
  6158                           ;main.c: 637: USBCB_SOF_Handler();
  6159  0E03  2FA9               	ljmp	l873
  6160  0E04                     l5126:	
  6161                           ;main.c: 638: break;
  6162                           
  6163                           
  6164                           ;main.c: 640: USBCBSuspend();
  6165  0E04  2FAB               	ljmp	l867
  6166  0E05                     l5128:	
  6167                           ;main.c: 641: break;
  6168                           
  6169                           
  6170                           ;main.c: 643: USBCBWakeFromSuspend();
  6171  0E05  2FAA               	ljmp	l870
  6172  0E06                     l5130:	
  6173                           ;main.c: 644: break;
  6174                           
  6175                           
  6176                           ;main.c: 646: USBCBInitEP();
  6177  0E06  2F50               	ljmp	l6032
  6178  0E07                     l5132:	
  6179                           ;main.c: 647: break;
  6180                           
  6181                           
  6182                           ;main.c: 649: USBCBStdSetDscHandler();
  6183  0E07  2FA5               	ljmp	l882
  6184  0E08                     l5134:	
  6185                           ;main.c: 650: break;
  6186                           
  6187                           
  6188                           ;main.c: 652: USBCBCheckOtherReq();
  6189  0E08  2FA7               	ljmp	l373
  6190  0E09                     l5136:	
  6191                           ;main.c: 653: break;
  6192                           
  6193                           
  6194                           ;main.c: 655: USBCBErrorHandler();
  6195  0E09  2FA8               	ljmp	l876
  6196  0E0A                     l6234:	
  6197                           
  6198                           ; Switch size 1, requested type "space"
  6199                           ; Number of cases is 8, Range of values is 1 to 117
  6200                           ; switch strategies available:
  6201                           ; Name         Instructions Cycles
  6202                           ; simple_byte           25    13 (average)
  6203                           ; direct_byte          243     9 (fixed)
  6204                           ; jumptable            263     9 (fixed)
  6205                           ;	Chosen strategy is simple_byte
  6206  0E0A  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  6207  0E0B  3A01               	xorlw	1	; case 1
  6208  0E0C  1903               	skipnz
  6209  0E0D  2E06               	goto	l5130
  6210  0E0E  3A03               	xorlw	3	; case 2
  6211  0E0F  1903               	skipnz
  6212  0E10  2E07               	goto	l5132
  6213  0E11  3A01               	xorlw	1	; case 3
  6214  0E12  1903               	skipnz
  6215  0E13  2E08               	goto	l5134
  6216  0E14  3A06               	xorlw	6	; case 5
  6217  0E15  1903               	skipnz
  6218  0E16  2E29               	goto	l911
  6219  0E17  3A77               	xorlw	119	; case 114
  6220  0E18  1903               	skipnz
  6221  0E19  2E29               	goto	l911
  6222  0E1A  3A01               	xorlw	1	; case 115
  6223  0E1B  1903               	skipnz
  6224  0E1C  2E03               	goto	l5124
  6225  0E1D  3A07               	xorlw	7	; case 116
  6226  0E1E  1903               	skipnz
  6227  0E1F  2E05               	goto	l5128
  6228  0E20  3A01               	xorlw	1	; case 117
  6229  0E21  1903               	skipnz
  6230  0E22  2E04               	goto	l5126
  6231  0E23  2E29               	goto	l911
  6232  0E24                     l6236:	
  6233                           
  6234                           ; Switch size 1, requested type "space"
  6235                           ; Number of cases is 1, Range of values is 255 to 255
  6236                           ; switch strategies available:
  6237                           ; Name         Instructions Cycles
  6238                           ; simple_byte            4     3 (average)
  6239                           ; direct_byte            7     5 (fixed)
  6240                           ; jumptable            263     9 (fixed)
  6241                           ;	Chosen strategy is simple_byte
  6242  0E24  0860               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
  6243  0E25  3AFF               	xorlw	255	; case 255
  6244  0E26  1903               	skipnz
  6245  0E27  2E09               	goto	l5136
  6246  0E28  2E29               	goto	l911
  6247  0E29                     l911:	
  6248  0E29  0008               	return
  6249  0E2A                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:	
  6250  0E2A                     __ptext1772:	
  6251 ;; *************** function _USBDeviceInit *****************
  6252 ;; Defined at:
  6253 ;;		line 467 in file "../USB/usb_device.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  p               2    8[BANK0 ] PTR unsigned char 
  6258 ;;		 -> UEP1(1), 
  6259 ;;  i               1   10[BANK0 ] unsigned char 
  6260 ;;  i               1   11[BANK0 ] unsigned char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;		None               void
  6263 ;; Registers used:
  6264 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/1D
  6267 ;;		On exit  : 1F/1
  6268 ;;		Unchanged: FFFE0/0
  6269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;Total ram usage:        6 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    4
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_USBDeviceTasks
  6281 ;;		_InitializeSystem
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           
  6286                           ;psect for function _USBDeviceInit
  6287  0E2A                     _USBDeviceInit:	
  6288  0E2A                     l4926:	
  6289                           ; Regs used in _USBDeviceInit: [wreg+fsr1l-status,0]
  6290                           
  6291                           
  6292                           ;usb_device.c: 468: BYTE i;
  6293                           ;usb_device.c: 470: {PIE2bits.USBIE = 0;};
  6294  0E2A  0021               	movlb	1	; select bank1
  6295  0E2B  1112               	bcf	18,2	;volatile
  6296                           
  6297                           ;usb_device.c: 473: UEIR = 0;;
  6298  0E2C  003D               	movlb	29	; select bank29
  6299  0E2D  0193               	clrf	19	;volatile
  6300                           
  6301                           ;usb_device.c: 476: UIR = 0;;
  6302  0E2E  0190               	clrf	16	;volatile
  6303                           
  6304                           ;usb_device.c: 479: UEP0 = 0;
  6305  0E2F  0198               	clrf	24	;volatile
  6306                           
  6307                           ;usb_device.c: 481: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  6308  0E30  300E               	movlw	14
  6309  0E31  0020               	movlb	0	; select bank0
  6310  0E32  00D9               	movwf	USBDeviceInit@p+1
  6311  0E33  3099               	movlw	153
  6312  0E34  00D8               	movwf	USBDeviceInit@p
  6313  0E35  01DA               	clrf	USBDeviceInit@i_718
  6314  0E36                     l4936:	
  6315  0E36  0858               	movf	USBDeviceInit@p,w
  6316  0E37  0086               	movwf	6
  6317  0E38  0859               	movf	USBDeviceInit@p+1,w
  6318  0E39  0087               	movwf	7
  6319  0E3A  0181               	clrf	1
  6320  0E3B  0AD8               	incf	USBDeviceInit@p,f
  6321  0E3C  1903               	skipnz
  6322  0E3D  0AD9               	incf	USBDeviceInit@p+1,f
  6323  0E3E  0ADA               	incf	USBDeviceInit@i_718,f
  6324  0E3F  1903               	btfsc	3,2
  6325  0E40  2E36               	goto	l4936
  6326                           
  6327                           ;usb_device.c: 483: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
  6328  0E41  3016               	movlw	22
  6329  0E42  003D               	movlb	29	; select bank29
  6330  0E43  27F5  318C         	fcall	PL82	;call to abstracted procedure
  6331                           
  6332                           ;usb_device.c: 486: ;
  6333                           ;usb_device.c: 489: ;
  6334                           ;usb_device.c: 492: for(i=0;i<(sizeof(BDT)/sizeof(BDT_ENTRY));i++)
  6335  0E45  0020               	movlb	0	; select bank0
  6336  0E46  01DB               	clrf	USBDeviceInit@i
  6337  0E47                     l4952:	
  6338                           
  6339                           ;usb_device.c: 493: {
  6340                           ;usb_device.c: 494: BDT[i].Val = 0x00;
  6341  0E47  085B               	movf	USBDeviceInit@i,w
  6342  0E48  0709               	addwf	9,w
  6343  0E49  0709               	addwf	9,w
  6344  0E4A  3E20               	addlw	32
  6345  0E4B  0086               	movwf	6
  6346  0E4C  3000               	movlw	0
  6347  0E4D  0187               	clrf	7
  6348  0E4E  3FC0               	movwi [0]fsr1
  6349  0E4F  3FC1               	movwi [1]fsr1
  6350  0E50  3FC2               	movwi [2]fsr1
  6351  0E51  3FC3               	movwi [3]fsr1
  6352  0E52  3008               	movlw	8
  6353  0E53  0ADB               	incf	USBDeviceInit@i,f
  6354  0E54  025B               	subwf	USBDeviceInit@i,w
  6355  0E55  1C03               	skipc
  6356  0E56  2E47               	goto	l4952
  6357                           
  6358                           ;usb_device.c: 495: }
  6359                           ;usb_device.c: 498: UCONbits.PPBRST = 1;
  6360  0E57  003D               	movlb	29	; select bank29
  6361  0E58  170E               	bsf	14,6	;volatile
  6362                           
  6363                           ;usb_device.c: 501: UADDR = 0x00;
  6364  0E59  0196               	clrf	22	;volatile
  6365                           
  6366                           ;usb_device.c: 504: UCONbits.PKTDIS = 0;
  6367  0E5A  120E               	bcf	14,4	;volatile
  6368                           
  6369                           ;usb_device.c: 507: UCONbits.PPBRST = 0;
  6370  0E5B  130E               	bcf	14,6	;volatile
  6371  0E5C                     l4966:	
  6372                           ;usb_device.c: 510: while(UIRbits.TRNIF == 1)
  6373                           
  6374  0E5C  003D               	movlb	29	; select bank29
  6375  0E5D  1D90               	btfss	16,3	;volatile
  6376  0E5E  2E66               	goto	l4968
  6377                           
  6378                           ;usb_device.c: 511: {
  6379                           ;usb_device.c: 512: (UIR &= 0xF7);
  6380  0E5F  1190               	bcf	16,3	;volatile
  6381                           
  6382                           ;usb_device.c: 514: inPipes[0].info.Val = 0;
  6383  0E60  0022               	movlb	2	; select bank2
  6384  0E61  01CB               	clrf	(_inPipes^(0+256)+2)
  6385                           
  6386                           ;usb_device.c: 515: outPipes[0].info.Val = 0;
  6387  0E62  01A2               	clrf	(_outPipes^(0+256)+2)
  6388                           
  6389                           ;usb_device.c: 516: outPipes[0].wCount.Val = 0;
  6390  0E63  01A3               	clrf	(_outPipes^(0+256)+3)
  6391  0E64  01A4               	clrf	((_outPipes+1)^(0+256)+3)
  6392  0E65  2E5C               	goto	l4966
  6393  0E66                     l4968:	
  6394                           
  6395                           ;usb_device.c: 517: }
  6396                           ;usb_device.c: 521: USBStatusStageEnabledFlag1 = TRUE;
  6397  0E66  3001               	movlw	1
  6398  0E67  0022               	movlb	2	; select bank2
  6399  0E68  00B7               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6400                           
  6401                           ;usb_device.c: 522: USBStatusStageEnabledFlag2 = TRUE;
  6402  0E69  00B8               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6403                           
  6404                           ;usb_device.c: 524: USBDeferINDataStagePackets = FALSE;
  6405  0E6A  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6406                           
  6407                           ;usb_device.c: 526: USBBusIsSuspended = FALSE;
  6408  0E6B  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6409                           
  6410                           ;usb_device.c: 530: for(i = 0; i < (BYTE)(1+1u); i++)
  6411  0E6C  0020               	movlb	0	; select bank0
  6412  0E6D  01DB               	clrf	USBDeviceInit@i
  6413  0E6E                     l4980:	
  6414                           
  6415                           ;usb_device.c: 531: {
  6416                           ;usb_device.c: 532: pBDTEntryIn[i] = 0u;
  6417  0E6E  085B               	movf	USBDeviceInit@i,w
  6418  0E6F  3E6A               	addlw	_pBDTEntryIn& (0+255)
  6419  0E70  0086               	movwf	6
  6420  0E71  0187               	clrf	7
  6421  0E72  0181               	clrf	1
  6422                           
  6423                           ;usb_device.c: 533: pBDTEntryOut[i] = 0u;
  6424  0E73  085B               	movf	USBDeviceInit@i,w
  6425  0E74  3E2A               	addlw	_pBDTEntryOut& (0+255)
  6426  0E75  0086               	movwf	6
  6427  0E76  3001               	movlw	1	; select bank2/3
  6428  0E77  0087               	movwf	7
  6429  0E78  0181               	clrf	1
  6430                           
  6431                           ;usb_device.c: 534: ep_data_in[i].Val = 0u;
  6432  0E79  085B               	movf	USBDeviceInit@i,w
  6433  0E7A  3E26               	addlw	_ep_data_in& (0+255)
  6434  0E7B  0086               	movwf	6
  6435  0E7C  0181               	clrf	1
  6436                           
  6437                           ;usb_device.c: 535: ep_data_out[i].Val = 0u;
  6438  0E7D  085B               	movf	USBDeviceInit@i,w
  6439  0E7E  3E28               	addlw	_ep_data_out& (0+255)
  6440  0E7F  0086               	movwf	6
  6441  0E80  3002               	movlw	2
  6442  0E81  0181               	clrf	1
  6443  0E82  0ADB               	incf	USBDeviceInit@i,f
  6444  0E83  025B               	subwf	USBDeviceInit@i,w
  6445  0E84  1C03               	skipc
  6446  0E85  2E6E               	goto	l4980
  6447                           
  6448                           ;usb_device.c: 536: }
  6449                           ;usb_device.c: 539: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6450  0E86  3028               	movlw	40
  6451  0E87  00EA               	movwf	_pBDTEntryIn
  6452                           
  6453                           ;usb_device.c: 541: UEP0 = 0x06|0x10;
  6454  0E88  3016               	movlw	22
  6455  0E89  003D               	movlb	29	; select bank29
  6456  0E8A  0098               	movwf	24	;volatile
  6457                           
  6458                           ;usb_device.c: 543: BDT[0].ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6459  0E8B  3040               	movlw	64
  6460  0E8C  0020               	movlb	0	; select bank0
  6461  0E8D  00D6               	movwf	??_USBDeviceInit
  6462  0E8E  01D7               	clrf	??_USBDeviceInit+1
  6463  0E8F  00A2               	movwf	34	;volatile
  6464  0E90  0857               	movf	??_USBDeviceInit+1,w
  6465  0E91  00A3               	movwf	35	;volatile
  6466                           
  6467                           ;usb_device.c: 544: BDT[0].CNT = 8;
  6468  0E92  3008               	movlw	8
  6469  0E93  00A1               	movwf	33	;volatile
  6470                           
  6471                           ;usb_device.c: 545: BDT[0].STAT.Val = 0x80|0x00|0x04;
  6472  0E94  3084               	movlw	132
  6473  0E95  00A0               	movwf	32	;volatile
  6474                           
  6475                           ;usb_device.c: 548: USBActiveConfiguration = 0;
  6476  0E96  0021               	movlb	1	; select bank1
  6477  0E97  01ED               	clrf	_USBActiveConfiguration^(0+128)
  6478                           
  6479                           ;usb_device.c: 551: USBDeviceState = DETACHED_STATE;
  6480  0E98  01EA               	clrf	_USBDeviceState^(0+128)
  6481  0E99  0008               	return
  6482  0E9A                     __end_of_USBDeviceInit:	
  6483  0E9A                     __ptext1760:	
  6484 ;; *************** function _USBCtrlEPAllowStatusStage *****************
  6485 ;; Defined at:
  6486 ;;		line 1590 in file "../USB/usb_device.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;		None               void
  6493 ;; Registers used:
  6494 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6495 ;; Tracked objects:
  6496 ;;		On entry : 1D/2
  6497 ;;		On exit  : 1D/0
  6498 ;;		Unchanged: FFFE0/0
  6499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;Total ram usage:        2 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    4
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_USBDeviceTasks
  6511 ;;		_USBCtrlEPServiceComplete
  6512 ;;		_USBCtrlTrfRxService
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           
  6517                           ;psect for function _USBCtrlEPAllowStatusStage
  6518  0E9A                     _USBCtrlEPAllowStatusStage:	
  6519  0E9A                     l5150:	
  6520                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l-status,0]
  6521                           
  6522                           
  6523                           ;usb_device.c: 1596: if(USBStatusStageEnabledFlag1 == FALSE)
  6524  0E9A  0022               	movlb	2	; select bank2
  6525  0E9B  08B7               	movf	_USBStatusStageEnabledFlag1^(0+256),f
  6526  0E9C  1D03               	skipz
  6527  0E9D  0008               	return
  6528                           
  6529                           ;usb_device.c: 1597: {
  6530                           ;usb_device.c: 1598: USBStatusStageEnabledFlag1 = TRUE;
  6531  0E9E  3001               	movlw	1
  6532  0E9F  00B7               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6533                           
  6534                           ;usb_device.c: 1599: if(USBStatusStageEnabledFlag2 == FALSE)
  6535  0EA0  08B8               	movf	_USBStatusStageEnabledFlag2^(0+256),f
  6536  0EA1  1D03               	skipz
  6537  0EA2  0008               	return
  6538                           
  6539                           ;usb_device.c: 1600: {
  6540                           ;usb_device.c: 1601: USBStatusStageEnabledFlag2 = TRUE;
  6541  0EA3  00B8               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6542                           
  6543                           ;usb_device.c: 1605: if(controlTransferState == 2)
  6544  0EA4  0020               	movlb	0	; select bank0
  6545  0EA5  086D               	movf	_controlTransferState,w
  6546  0EA6  3A02               	xorlw	2
  6547  0EA7  1D03               	skipz
  6548  0EA8  2EB0               	goto	l5162
  6549                           
  6550                           ;usb_device.c: 1606: {
  6551                           ;usb_device.c: 1607: pBDTEntryIn[0]->CNT = 0;
  6552  0EA9  0A6A               	incf	_pBDTEntryIn,w
  6553  0EAA  0086               	movwf	6
  6554  0EAB  0187               	clrf	7
  6555  0EAC  0181               	clrf	1
  6556                           
  6557                           ;usb_device.c: 1608: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  6558  0EAD  086A               	movf	_pBDTEntryIn,w
  6559                           
  6560                           ;usb_device.c: 1609: }
  6561  0EAE  318C  2C27         	ljmp	PL84	;call to abstracted procedure
  6562  0EB0                     l5162:	
  6563                           
  6564                           ;usb_device.c: 1610: else if(controlTransferState == 1)
  6565  0EB0  0B6D               	decfsz	_controlTransferState,w
  6566  0EB1  0008               	return
  6567                           
  6568                           ;usb_device.c: 1611: {
  6569                           ;usb_device.c: 1612: BothEP0OutUOWNsSet = FALSE;
  6570  0EB2  0022               	movlb	2	; select bank2
  6571  0EB3  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  6572                           
  6573                           ;usb_device.c: 1617: pBDTEntryEP0OutCurrent->CNT = 8;
  6574  0EB4  0020               	movlb	0	; select bank0
  6575  0EB5  0A6E               	incf	_pBDTEntryEP0OutCurrent,w
  6576                           
  6577                           ;usb_device.c: 1618: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6578  0EB6  3189  21E0  318C   	fcall	PL40	;call to abstracted procedure
  6579  0EB9  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  6580  0EBA  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  6581  0EBB  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6582  0EBC  27DC  318C         	fcall	PL68	;call to abstracted procedure
  6583                           
  6584                           ;usb_device.c: 1619: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x04;
  6585  0EBE  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6586  0EBF  0086               	movwf	6
  6587  0EC0  3084               	movlw	132
  6588  0EC1  0081               	movwf	1
  6589                           
  6590                           ;usb_device.c: 1620: BothEP0OutUOWNsSet = TRUE;
  6591  0EC2  0022               	movlb	2	; select bank2
  6592  0EC3  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  6593  0EC4  0AAE               	incf	_BothEP0OutUOWNsSet^(0+256),f
  6594                           
  6595                           ;usb_device.c: 1624: pBDTEntryEP0OutNext->CNT = 8;
  6596  0EC5  0020               	movlb	0	; select bank0
  6597  0EC6  0A6F               	incf	_pBDTEntryEP0OutNext,w
  6598  0EC7  0086               	movwf	6
  6599  0EC8  3008               	movlw	8
  6600  0EC9  0081               	movwf	1
  6601                           
  6602                           ;usb_device.c: 1625: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6603  0ECA  3040               	movlw	64
  6604  0ECB  00D6               	movwf	??_USBCtrlEPAllowStatusStage
  6605  0ECC  01D7               	clrf	??_USBCtrlEPAllowStatusStage+1
  6606  0ECD  086F               	movf	_pBDTEntryEP0OutNext,w
  6607  0ECE  27DC               	fcall	PL68	;call to abstracted procedure
  6608                           
  6609                           ;usb_device.c: 1626: pBDTEntryEP0OutNext->STAT.Val = 0x80;
  6610  0ECF  086F               	movf	_pBDTEntryEP0OutNext,w
  6611  0ED0  0086               	movwf	6
  6612  0ED1  3080               	movlw	128
  6613  0ED2  0081               	movwf	1
  6614  0ED3  0008               	return
  6615  0ED4                     __end_of_USBCtrlEPAllowStatusStage:	
  6616  0ED4                     __ptext1754:	
  6617 ;; *************** function _USBCtrlEPService *****************
  6618 ;; Defined at:
  6619 ;;		line 2523 in file "../USB/usb_device.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;		None
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  setup_cnt       1   25[BANK0 ] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;		None               void
  6626 ;; Registers used:
  6627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6628 ;; Tracked objects:
  6629 ;;		On entry : 1F/2
  6630 ;;		On exit  : 1C/0
  6631 ;;		Unchanged: FFFE0/0
  6632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;Total ram usage:        3 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:   11
  6640 ;; This function calls:
  6641 ;;		_USBCtrlTrfSetupHandler
  6642 ;;		_USBCtrlTrfOutHandler
  6643 ;;		_USBCtrlTrfInHandler
  6644 ;; This function is called by:
  6645 ;;		_USBDeviceTasks
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           
  6650                           ;psect for function _USBCtrlEPService
  6651  0ED4                     _USBCtrlEPService:	
  6652                           
  6653                           ;usb_device.c: 2528: USBStatusStageTimeoutCounter = (BYTE)45;
  6654                           
  6655                           ; Regs used in _USBCtrlEPService: [allreg]
  6656  0ED4  302D               	movlw	45
  6657  0ED5  00B9               	movwf	_USBStatusStageTimeoutCounter^(0+256)
  6658                           
  6659                           ;usb_device.c: 2532: if((USTATcopy.Val & ~0x02) == 0x00)
  6660  0ED6  0021               	movlb	1	; select bank1
  6661  0ED7  086F               	movf	_USTATcopy^(0+128),w
  6662  0ED8  39FD               	andlw	253
  6663  0ED9  1D03               	btfss	3,2
  6664  0EDA  2F20               	goto	l5224
  6665                           
  6666                           ;usb_device.c: 2533: {
  6667                           ;usb_device.c: 2536: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val &
      +                           0x7E)>>1];
  6668  0EDB  366F               	lsrf	_USTATcopy^(0+128),w
  6669  0EDC  393F               	andlw	63
  6670  0EDD  0709               	addwf	9,w
  6671  0EDE  0709               	addwf	9,w
  6672  0EDF  3E20               	addlw	32
  6673  0EE0  0020               	movlb	0	; select bank0
  6674  0EE1  00EE               	movwf	_pBDTEntryEP0OutCurrent
  6675                           
  6676                           ;usb_device.c: 2544: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  6677  0EE2  00EF               	movwf	_pBDTEntryEP0OutNext
  6678                           
  6679                           ;usb_device.c: 2546: ((BYTE_VAL*)&pBDTEntryEP0OutNext)->Val ^= 0x0004;
  6680  0EE3  3004               	movlw	4
  6681  0EE4  06EF               	xorwf	_pBDTEntryEP0OutNext,f
  6682                           
  6683                           ;usb_device.c: 2549: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  6684  0EE5  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6685  0EE6  0086               	movwf	6
  6686  0EE7  0187               	clrf	7
  6687  0EE8  0C01               	rrf	1,w
  6688  0EE9  0C89               	rrf	9,f
  6689  0EEA  390F               	andlw	15
  6690  0EEB  3A0D               	xorlw	13
  6691  0EEC  1D03               	skipz
  6692  0EED  2F1F               	goto	l5222
  6693                           
  6694                           ;usb_device.c: 2550: {
  6695                           ;usb_device.c: 2551: unsigned char setup_cnt;
  6696                           ;usb_device.c: 2557: for(setup_cnt = 0; setup_cnt < 8u; setup_cnt++)
  6697  0EEE  01E9               	clrf	USBCtrlEPService@setup_cnt
  6698  0EEF                     l5210:	
  6699                           
  6700                           ;usb_device.c: 2558: {
  6701                           ;usb_device.c: 2559: *(BYTE*)((BYTE*)&SetupPkt + setup_cnt) = *(BYTE*)((void *)(pBDTEntr
      +                          yEP0OutCurrent->ADR));
  6702  0EEF  0869               	movf	USBCtrlEPService@setup_cnt,w
  6703  0EF0  3E40               	addlw	64
  6704  0EF1  0086               	movwf	6
  6705  0EF2  0187               	clrf	7
  6706  0EF3  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6707  0EF4  3E02               	addlw	2
  6708  0EF5  0084               	movwf	4
  6709  0EF6  0185               	clrf	5
  6710  0EF7  3F00               	moviw [0]fsr0
  6711  0EF8  0021               	movlb	1	; select bank1
  6712  0EF9  00A4               	movwf	??_USBCtrlEPService^(0+128)
  6713  0EFA  3F01               	moviw [1]fsr0
  6714  0EFB  00A5               	movwf	(??_USBCtrlEPService^(0+128)+1)
  6715  0EFC  0824               	movf	??_USBCtrlEPService^(0+128),w
  6716  0EFD  0084               	movwf	4
  6717  0EFE  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  6718  0EFF  0085               	movwf	5
  6719  0F00  0800               	movf	0,w
  6720  0F01  0081               	movwf	1
  6721                           
  6722                           ;usb_device.c: 2560: pBDTEntryEP0OutCurrent->ADR++;
  6723  0F02  0020               	movlb	0	; select bank0
  6724  0F03  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6725  0F04  3E02               	addlw	2
  6726  0F05  0086               	movwf	6
  6727  0F06  3001               	movlw	1
  6728  0F07  0781               	addwf	1,f
  6729  0F08  3141               	addfsr 1,1
  6730  0F09  1803               	skipnc
  6731  0F0A  0A81               	incf	1,f
  6732  0F0B  3008               	movlw	8
  6733  0F0C  0AE9               	incf	USBCtrlEPService@setup_cnt,f
  6734  0F0D  0269               	subwf	USBCtrlEPService@setup_cnt,w
  6735  0F0E  1C03               	skipc
  6736  0F0F  2EEF               	goto	l5210
  6737                           
  6738                           ;usb_device.c: 2561: }
  6739                           ;usb_device.c: 2562: pBDTEntryEP0OutCurrent->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  6740  0F10  3040               	movlw	64
  6741  0F11  0021               	movlb	1	; select bank1
  6742  0F12  00A4               	movwf	??_USBCtrlEPService^(0+128)
  6743  0F13  01A5               	clrf	(??_USBCtrlEPService^(0+128)+1)
  6744  0F14  0020               	movlb	0	; select bank0
  6745  0F15  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6746  0F16  3E02               	addlw	2
  6747  0F17  0086               	movwf	6
  6748  0F18  0187               	clrf	7
  6749  0F19  0021               	movlb	1	; select bank1
  6750  0F1A  0824               	movf	??_USBCtrlEPService^(0+128),w
  6751  0F1B  3FC0               	movwi [0]fsr1
  6752  0F1C  0825               	movf	(??_USBCtrlEPService+1)^(0+128),w
  6753  0F1D  3FC1               	movwi [1]fsr1
  6754                           
  6755                           ;usb_device.c: 2565: USBCtrlTrfSetupHandler();
  6756  0F1E  2C2B               	ljmp	l5538
  6757  0F1F                     l5222:	
  6758                           ;usb_device.c: 2566: }
  6759                           
  6760                           
  6761                           ;usb_device.c: 2567: else
  6762                           ;usb_device.c: 2568: {
  6763                           ;usb_device.c: 2570: USBCtrlTrfOutHandler();
  6764  0F1F  2FAC               	ljmp	l5564
  6765  0F20                     l5224:	
  6766                           
  6767                           ;usb_device.c: 2573: else if((USTATcopy.Val & ~0x02) == 0x04)
  6768  0F20  30FD               	movlw	253
  6769  0F21  056F               	andwf	_USTATcopy^(0+128),w
  6770  0F22  00A4               	movwf	??_USBCtrlEPService^(0+128)
  6771  0F23  3A04               	xorlw	4
  6772  0F24  1D03               	skipz
  6773  0F25  0008               	return
  6774                           
  6775                           ;usb_device.c: 2574: {
  6776                           ;usb_device.c: 2577: USBCtrlTrfInHandler();
  6777  0F26  318B  2B00         	ljmp	l5576
  6778  0F28                     __end_of_USBCtrlEPService:	
  6779  0F28                     __ptext1753:	
  6780 ;; *************** function _USBStallHandler *****************
  6781 ;; Defined at:
  6782 ;;		line 2356 in file "../USB/usb_device.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;		None
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, fsr1l, fsr1h
  6791 ;; Tracked objects:
  6792 ;;		On entry : 1F/1D
  6793 ;;		On exit  : 1F/1D
  6794 ;;		Unchanged: FFFE0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:        0 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    4
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_USBDeviceTasks
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           
  6811                           ;psect for function _USBStallHandler
  6812  0F28                     _USBStallHandler:	
  6813                           
  6814                           ;usb_device.c: 2368: if(UEP0bits.EPSTALL == 1)
  6815                           
  6816                           ; Regs used in _USBStallHandler: [wregfsr1]
  6817  0F28  1C18               	btfss	24,0	;volatile
  6818  0F29  2F3E               	goto	l5190
  6819                           
  6820                           ;usb_device.c: 2369: {
  6821                           ;usb_device.c: 2371: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80) && (pBDTEntryIn[0]->S
      +                          TAT.Val == (0x80|0x04)))
  6822  0F2A  0020               	movlb	0	; select bank0
  6823  0F2B  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6824  0F2C  0086               	movwf	6
  6825  0F2D  0187               	clrf	7
  6826  0F2E  0801               	movf	1,w
  6827  0F2F  3A80               	xorlw	128
  6828  0F30  1D03               	skipz
  6829  0F31  2F3C               	goto	l5188
  6830  0F32  086A               	movf	_pBDTEntryIn,w
  6831  0F33  0086               	movwf	6
  6832  0F34  0801               	movf	1,w
  6833  0F35  3A84               	xorlw	132
  6834  0F36  1D03               	skipz
  6835  0F37  2F3C               	goto	l5188
  6836                           
  6837                           ;usb_device.c: 2372: {
  6838                           ;usb_device.c: 2374: pBDTEntryEP0OutCurrent->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  6839  0F38  086E               	movf	_pBDTEntryEP0OutCurrent,w
  6840  0F39  0086               	movwf	6
  6841  0F3A  308C               	movlw	140
  6842  0F3B  0081               	movwf	1
  6843  0F3C                     l5188:	
  6844                           
  6845                           ;usb_device.c: 2375: }
  6846                           ;usb_device.c: 2376: UEP0bits.EPSTALL = 0;
  6847  0F3C  003D               	movlb	29	; select bank29
  6848  0F3D  1018               	bcf	24,0	;volatile
  6849  0F3E                     l5190:	
  6850                           
  6851                           ;usb_device.c: 2377: }
  6852                           ;usb_device.c: 2379: (UIR &= 0xDF);
  6853  0F3E  1290               	bcf	16,5	;volatile
  6854  0F3F  0008               	return
  6855  0F40                     __end_of_USBStallHandler:	
  6856  0F40                     __ptext1752:	
  6857 ;; *************** function _USBSuspend *****************
  6858 ;; Defined at:
  6859 ;;		line 2399 in file "../USB/usb_device.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;		None               void
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 1F/1D
  6870 ;;		On exit  : 1D/0
  6871 ;;		Unchanged: FFFE0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        0 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    8
  6880 ;; This function calls:
  6881 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6882 ;; This function is called by:
  6883 ;;		_USBDeviceTasks
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           
  6888                           ;psect for function _USBSuspend
  6889  0F40                     _USBSuspend:	
  6890                           
  6891                           ;usb_device.c: 2423: UIEbits.ACTVIE = 1;
  6892                           
  6893                           ; Regs used in _USBSuspend: [allreg]
  6894  0F40  1512               	bsf	18,2	;volatile
  6895                           
  6896                           ;usb_device.c: 2424: (UIR &= 0xEF);
  6897  0F41  1210               	bcf	16,4	;volatile
  6898                           
  6899                           ;usb_device.c: 2430: USBBusIsSuspended = TRUE;
  6900  0F42  148E               	bsf	14,1	;volatile
  6901                           
  6902                           ;usb_device.c: 2437: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
  6903  0F43  3075               	movlw	117
  6904  0F44  27CC  318C         	fcall	PL44	;call to abstracted procedure
  6905  0F46  2DFB               	ljmp	l5122
  6906  0F47                     __end_of_USBSuspend:	
  6907  0F47                     __ptext1751:	
  6908 ;; *************** function _USBWakeFromSuspend *****************
  6909 ;; Defined at:
  6910 ;;		line 2456 in file "../USB/usb_device.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;		None               void
  6917 ;; Registers used:
  6918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : 1F/1D
  6921 ;;		On exit  : 1F/1D
  6922 ;;		Unchanged: FFFE0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:    8
  6931 ;; This function calls:
  6932 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6933 ;; This function is called by:
  6934 ;;		_USBDeviceTasks
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           
  6939                           ;psect for function _USBWakeFromSuspend
  6940  0F47                     _USBWakeFromSuspend:	
  6941                           
  6942                           ;usb_device.c: 2463: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
  6943                           
  6944                           ; Regs used in _USBWakeFromSuspend: [allreg]
  6945  0F47  3074               	movlw	116
  6946  0F48  27CC  318C         	fcall	PL44	;call to abstracted procedure
  6947  0F4A  25FB               	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  6948                           
  6949                           ;usb_device.c: 2470: UCONbits.SUSPND = 0;
  6950  0F4B  003D               	movlb	29	; select bank29
  6951  0F4C  108E               	bcf	14,1	;volatile
  6952                           
  6953                           ;usb_device.c: 2475: UIEbits.ACTVIE = 0;
  6954  0F4D  1112               	bcf	18,2	;volatile
  6955                           
  6956                           ;usb_device.c: 2495: {
  6957                           ;usb_device.c: 2496: (UIR &= 0xFB);
  6958  0F4E  1110               	bcf	16,2	;volatile
  6959  0F4F  0008               	return
  6960  0F50                     __end_of_USBWakeFromSuspend:	
  6961  0F50                     __ptext1794:	
  6962 ;; *************** function _USBCBInitEP *****************
  6963 ;; Defined at:
  6964 ;;		line 460 in file "main.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : 1F/0
  6975 ;;		On exit  : 1F/2
  6976 ;;		Unchanged: FFFE0/0
  6977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    6
  6985 ;; This function calls:
  6986 ;;		_USBEnableEndpoint
  6987 ;;		_USBTransferOnePacket
  6988 ;; This function is called by:
  6989 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _USBCBInitEP
  6995  0F50                     _USBCBInitEP:	
  6996  0F50                     l6032:	
  6997                           ; Regs used in _USBCBInitEP: [wreg+fsr1l-status,0+pclath+cstack]
  6998                           
  6999                           
  7000                           ;main.c: 462: USBEnableEndpoint(1,0x04|0x02|0x10|0x08);
  7001  0F50  301E               	movlw	30
  7002  0F51  00DA               	movwf	?_USBEnableEndpoint
  7003  0F52  3001               	movlw	1
  7004  0F53  275F               	fcall	_USBEnableEndpoint
  7005  0F54  30A0               	movlw	160
  7006                           
  7007                           ;main.c: 464: USBGenericOutHandle = USBTransferOnePacket(1,0,(BYTE*)&OUTPacket,64);
  7008  0F55  01D9               	clrf	?_USBTransferOnePacket
  7009  0F56  00DA               	movwf	?_USBTransferOnePacket+1
  7010  0F57  3040               	movlw	64
  7011  0F58  00DB               	movwf	?_USBTransferOnePacket+2
  7012  0F59  3001               	movlw	1
  7013  0F5A  3185  25B5         	fcall	_USBTransferOnePacket
  7014  0F5C  0022               	movlb	2	; select bank2
  7015  0F5D  00B6               	movwf	_USBGenericOutHandle^(0+256)
  7016  0F5E  0008               	return
  7017  0F5F                     __end_of_USBCBInitEP:	
  7018  0F5F                     __ptext1795:	
  7019 ;; *************** function _USBEnableEndpoint *****************
  7020 ;; Defined at:
  7021 ;;		line 1056 in file "../USB/usb_device.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  ep              1    wreg     unsigned char 
  7024 ;;  options         1   10[BANK0 ] unsigned char 
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  ep              1   15[BANK0 ] unsigned char 
  7027 ;;  p               2   13[BANK0 ] PTR unsigned char 
  7028 ;;		 -> UEP0(1), 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;		None               void
  7031 ;; Registers used:
  7032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 1F/0
  7035 ;;		On exit  : 1F/0
  7036 ;;		Unchanged: FFFE0/0
  7037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7038 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;Total ram usage:        6 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    5
  7045 ;; This function calls:
  7046 ;;		_USBConfigureEndpoint
  7047 ;; This function is called by:
  7048 ;;		_USBCBInitEP
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _USBEnableEndpoint
  7054  0F5F                     _USBEnableEndpoint:	
  7055                           
  7056                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l-status,0+pclath+cstack]
  7057                           ;USBEnableEndpoint@ep stored from wreg
  7058  0F5F  00DF               	movwf	USBEnableEndpoint@ep
  7059                           
  7060                           ;usb_device.c: 1057: unsigned char* p;
  7061                           ;usb_device.c: 1061: if(options & 0x04)
  7062  0F60  1D5A               	btfss	USBEnableEndpoint@options,2
  7063  0F61  2F65               	goto	l5232
  7064                           
  7065                           ;usb_device.c: 1062: {
  7066                           ;usb_device.c: 1063: USBConfigureEndpoint(ep, 0);
  7067  0F62  01D6               	clrf	?_USBConfigureEndpoint
  7068  0F63  277E  318C         	fcall	_USBConfigureEndpoint
  7069  0F65                     l5232:	
  7070                           
  7071                           ;usb_device.c: 1064: }
  7072                           ;usb_device.c: 1065: if(options & 0x02)
  7073  0F65  1CDA               	btfss	USBEnableEndpoint@options,1
  7074  0F66  2F6B               	goto	l5236
  7075                           
  7076                           ;usb_device.c: 1066: {
  7077                           ;usb_device.c: 1067: USBConfigureEndpoint(ep, 1);
  7078  0F67  01D6               	clrf	?_USBConfigureEndpoint
  7079  0F68  0AD6               	incf	?_USBConfigureEndpoint,f
  7080  0F69  085F               	movf	USBEnableEndpoint@ep,w
  7081  0F6A  277E               	fcall	_USBConfigureEndpoint
  7082  0F6B                     l5236:	
  7083                           
  7084                           ;usb_device.c: 1068: }
  7085                           ;usb_device.c: 1076: p = (unsigned char*)(&UEP0+ep);
  7086  0F6B  085F               	movf	USBEnableEndpoint@ep,w
  7087  0F6C  3E98               	addlw	152
  7088  0F6D  00DB               	movwf	??_USBEnableEndpoint
  7089  0F6E  300E               	movlw	14
  7090  0F6F  01DC               	clrf	??_USBEnableEndpoint+1
  7091  0F70  3DDC               	addwfc	??_USBEnableEndpoint+1,f
  7092  0F71  085B               	movf	??_USBEnableEndpoint,w
  7093  0F72  00DD               	movwf	USBEnableEndpoint@p
  7094  0F73  085C               	movf	??_USBEnableEndpoint+1,w
  7095  0F74  00DE               	movwf	USBEnableEndpoint@p+1
  7096                           
  7097                           ;usb_device.c: 1078: *p = options;
  7098  0F75  085A               	movf	USBEnableEndpoint@options,w
  7099  0F76  00DB               	movwf	??_USBEnableEndpoint
  7100  0F77  085D               	movf	USBEnableEndpoint@p,w
  7101  0F78  0086               	movwf	6
  7102  0F79  085E               	movf	USBEnableEndpoint@p+1,w
  7103  0F7A  0087               	movwf	7
  7104  0F7B  085B               	movf	??_USBEnableEndpoint,w
  7105  0F7C  0081               	movwf	1
  7106  0F7D  0008               	return
  7107  0F7E                     __end_of_USBEnableEndpoint:	
  7108  0F7E                     __ptext1796:	
  7109 ;; *************** function _USBConfigureEndpoint *****************
  7110 ;; Defined at:
  7111 ;;		line 1713 in file "../USB/usb_device.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  EPNum           1    wreg     unsigned char 
  7114 ;;  direction       1    6[BANK0 ] unsigned char 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  EPNum           1    8[BANK0 ] unsigned char 
  7117 ;;  handle          1    9[BANK0 ] PTR volatile struct __BD
  7118 ;;		 -> BDT(32), 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;		None               void
  7121 ;; Registers used:
  7122 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7123 ;; Tracked objects:
  7124 ;;		On entry : 1F/0
  7125 ;;		On exit  : 1F/0
  7126 ;;		Unchanged: FFFE0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7128 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7129 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;Total ram usage:        4 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    4
  7135 ;; This function calls:
  7136 ;;		Nothing
  7137 ;; This function is called by:
  7138 ;;		_USBEnableEndpoint
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _USBConfigureEndpoint
  7144  0F7E                     _USBConfigureEndpoint:	
  7145                           
  7146                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l-status,0]
  7147                           ;USBConfigureEndpoint@EPNum stored from wreg
  7148  0F7E  00D8               	movwf	USBConfigureEndpoint@EPNum
  7149                           
  7150                           ;usb_device.c: 1714: volatile BDT_ENTRY* handle;
  7151                           ;usb_device.c: 1718: handle = (volatile BDT_ENTRY*)&BDT[0];
  7152  0F7F  3020               	movlw	32
  7153  0F80  00D9               	movwf	USBConfigureEndpoint@handle
  7154                           
  7155                           ;usb_device.c: 1719: handle += (4*EPNum+2*direction+0u);
  7156  0F81  0856               	movf	USBConfigureEndpoint@direction,w
  7157  0F82  00D7               	movwf	??_USBConfigureEndpoint
  7158  0F83  35D7               	lslf	??_USBConfigureEndpoint,f
  7159  0F84  0858               	movf	USBConfigureEndpoint@EPNum,w
  7160  0F85  0709               	addwf	9,w
  7161  0F86  0709               	addwf	9,w
  7162  0F87  0757               	addwf	??_USBConfigureEndpoint,w
  7163  0F88  0709               	addwf	9,w
  7164  0F89  0709               	addwf	9,w
  7165  0F8A  07D9               	addwf	USBConfigureEndpoint@handle,f
  7166                           
  7167                           ;usb_device.c: 1721: handle->STAT.UOWN = 0;
  7168  0F8B  0859               	movf	USBConfigureEndpoint@handle,w
  7169  0F8C  0086               	movwf	6
  7170  0F8D  0187               	clrf	7
  7171  0F8E  1381               	bcf	1,7
  7172                           
  7173                           ;usb_device.c: 1726: if(direction == 0)
  7174  0F8F  08D6               	movf	USBConfigureEndpoint@direction,f
  7175  0F90  1D03               	skipz
  7176  0F91  2F96               	goto	l5250
  7177                           
  7178                           ;usb_device.c: 1727: {
  7179                           ;usb_device.c: 1728: pBDTEntryOut[EPNum] = handle;
  7180  0F92  0858               	movf	USBConfigureEndpoint@EPNum,w
  7181  0F93  27EA  318C         	fcall	PL76	;call to abstracted procedure
  7182  0F95  2F9A               	goto	L17
  7183  0F96                     l5250:	
  7184                           ;usb_device.c: 1729: }
  7185                           
  7186                           
  7187                           ;usb_device.c: 1730: else
  7188                           ;usb_device.c: 1731: {
  7189                           ;usb_device.c: 1732: pBDTEntryIn[EPNum] = handle;
  7190  0F96  0858               	movf	USBConfigureEndpoint@EPNum,w
  7191  0F97  3E6A               	addlw	_pBDTEntryIn& (0+255)
  7192  0F98  0086               	movwf	6
  7193  0F99  0187               	clrf	7
  7194  0F9A                     L17:	
  7195  0F9A  0859               	movf	USBConfigureEndpoint@handle,w
  7196  0F9B  0081               	movwf	1
  7197                           
  7198                           ;usb_device.c: 1733: }
  7199                           ;usb_device.c: 1736: handle->STAT.DTS = 0;
  7200  0F9C  0859               	movf	USBConfigureEndpoint@handle,w
  7201  0F9D  0086               	movwf	6
  7202  0F9E  0187               	clrf	7
  7203  0F9F  1301               	bcf	1,6
  7204                           
  7205                           ;usb_device.c: 1737: (handle+1)->STAT.DTS = 1;
  7206  0FA0  0859               	movf	USBConfigureEndpoint@handle,w
  7207  0FA1  3E04               	addlw	4
  7208  0FA2  0086               	movwf	6
  7209  0FA3  1701               	bsf	1,6
  7210  0FA4  0008               	return
  7211  0FA5                     __end_of_USBConfigureEndpoint:	
  7212  0FA5                     __ptext1793:	
  7213 ;; *************** function _USBCBStdSetDscHandler *****************
  7214 ;; Defined at:
  7215 ;;		line 434 in file "main.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;		None
  7218 ;; Auto vars:     Size  Location     Type
  7219 ;;		None
  7220 ;; Return value:  Size  Location     Type
  7221 ;;		None               void
  7222 ;; Registers used:
  7223 ;;		None
  7224 ;; Tracked objects:
  7225 ;;		On entry : 1F/0
  7226 ;;		On exit  : 1F/0
  7227 ;;		Unchanged: FFFFFFE0/0
  7228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;Total ram usage:        0 bytes
  7234 ;; Hardware stack levels used:    1
  7235 ;; Hardware stack levels required when called:    4
  7236 ;; This function calls:
  7237 ;;		Nothing
  7238 ;; This function is called by:
  7239 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7240 ;; This function uses a non-reentrant model
  7241 ;;
  7242                           
  7243                           
  7244                           ;psect for function _USBCBStdSetDscHandler
  7245  0FA5                     _USBCBStdSetDscHandler:	
  7246  0FA5                     l882:	
  7247                           ; Regs used in _USBCBStdSetDscHandler: []
  7248                           
  7249  0FA5  0008               	return
  7250  0FA6                     __end_of_USBCBStdSetDscHandler:	
  7251  0FA6                     __ptext1791:	
  7252 ;; *************** function _USBCBCheckOtherReq *****************
  7253 ;; Defined at:
  7254 ;;		line 409 in file "main.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;		None
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;		None
  7259 ;; Return value:  Size  Location     Type
  7260 ;;		None               void
  7261 ;; Registers used:
  7262 ;;		status,2, status,0, pclath, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 1F/0
  7265 ;;		On exit  : 1F/0
  7266 ;;		Unchanged: FFFFFFE0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        0 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    5
  7275 ;; This function calls:
  7276 ;;		_USBCheckVendorRequest
  7277 ;; This function is called by:
  7278 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function _USBCBCheckOtherReq
  7284  0FA6                     _USBCBCheckOtherReq:	
  7285                           
  7286                           ;main.c: 410: USBCheckVendorRequest();
  7287                           
  7288                           ; Regs used in _USBCBCheckOtherReq: [status,2+status,0+pclath+cstack]
  7289  0FA6  2FA7               	ljmp	l373
  7290  0FA7                     __end_of_USBCBCheckOtherReq:	
  7291  0FA7                     __ptext1792:	
  7292 ;; *************** function _USBCheckVendorRequest *****************
  7293 ;; Defined at:
  7294 ;;		line 248 in file "../USB/usb_function_generic.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;		None
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;		None               void
  7301 ;; Registers used:
  7302 ;;		None
  7303 ;; Tracked objects:
  7304 ;;		On entry : 1F/0
  7305 ;;		On exit  : 1F/0
  7306 ;;		Unchanged: FFFFFFE0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;Total ram usage:        0 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    4
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_USBCBCheckOtherReq
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           
  7323                           ;psect for function _USBCheckVendorRequest
  7324  0FA7                     _USBCheckVendorRequest:	
  7325  0FA7                     l373:	
  7326                           ; Regs used in _USBCheckVendorRequest: []
  7327                           
  7328  0FA7  0008               	return
  7329  0FA8                     __end_of_USBCheckVendorRequest:	
  7330  0FA8                     __ptext1790:	
  7331 ;; *************** function _USBCBErrorHandler *****************
  7332 ;; Defined at:
  7333 ;;		line 358 in file "main.c"
  7334 ;; Parameters:    Size  Location     Type
  7335 ;;		None
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;		None               void
  7340 ;; Registers used:
  7341 ;;		None
  7342 ;; Tracked objects:
  7343 ;;		On entry : 1F/0
  7344 ;;		On exit  : 1F/0
  7345 ;;		Unchanged: FFFFFFE0/0
  7346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;Total ram usage:        0 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; Hardware stack levels required when called:    4
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           
  7362                           ;psect for function _USBCBErrorHandler
  7363  0FA8                     _USBCBErrorHandler:	
  7364  0FA8                     l876:	
  7365                           ; Regs used in _USBCBErrorHandler: []
  7366                           
  7367  0FA8  0008               	return
  7368  0FA9                     __end_of_USBCBErrorHandler:	
  7369  0FA9                     __ptext1789:	
  7370 ;; *************** function _USBCB_SOF_Handler *****************
  7371 ;; Defined at:
  7372 ;;		line 335 in file "main.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;		None               void
  7379 ;; Registers used:
  7380 ;;		None
  7381 ;; Tracked objects:
  7382 ;;		On entry : 1F/0
  7383 ;;		On exit  : 1F/0
  7384 ;;		Unchanged: FFFFFFE0/0
  7385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;Total ram usage:        0 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; Hardware stack levels required when called:    4
  7393 ;; This function calls:
  7394 ;;		Nothing
  7395 ;; This function is called by:
  7396 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function _USBCB_SOF_Handler
  7402  0FA9                     _USBCB_SOF_Handler:	
  7403  0FA9                     l873:	
  7404                           ; Regs used in _USBCB_SOF_Handler: []
  7405                           
  7406  0FA9  0008               	return
  7407  0FAA                     __end_of_USBCB_SOF_Handler:	
  7408  0FAA                     __ptext1788:	
  7409 ;; *************** function _USBCBWakeFromSuspend *****************
  7410 ;; Defined at:
  7411 ;;		line 305 in file "main.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;		None               void
  7418 ;; Registers used:
  7419 ;;		None
  7420 ;; Tracked objects:
  7421 ;;		On entry : 1F/0
  7422 ;;		On exit  : 1F/0
  7423 ;;		Unchanged: FFFFFFE0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;Total ram usage:        0 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    4
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _USBCBWakeFromSuspend
  7441  0FAA                     _USBCBWakeFromSuspend:	
  7442  0FAA                     l870:	
  7443                           ; Regs used in _USBCBWakeFromSuspend: []
  7444                           
  7445  0FAA  0008               	return
  7446  0FAB                     __end_of_USBCBWakeFromSuspend:	
  7447  0FAB                     __ptext1787:	
  7448 ;; *************** function _USBCBSuspend *****************
  7449 ;; Defined at:
  7450 ;;		line 264 in file "main.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;		None
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;		None
  7455 ;; Return value:  Size  Location     Type
  7456 ;;		None               void
  7457 ;; Registers used:
  7458 ;;		None
  7459 ;; Tracked objects:
  7460 ;;		On entry : 1F/0
  7461 ;;		On exit  : 1F/0
  7462 ;;		Unchanged: FFFFFFE0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        0 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    4
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _USBCBSuspend
  7480  0FAB                     _USBCBSuspend:	
  7481  0FAB                     l867:	
  7482                           ; Regs used in _USBCBSuspend: []
  7483                           
  7484  0FAB  0008               	return
  7485  0FAC                     __end_of_USBCBSuspend:	
  7486  0FAC                     __ptext1758:	
  7487 ;; *************** function _USBCtrlTrfOutHandler *****************
  7488 ;; Defined at:
  7489 ;;		line 2695 in file "../USB/usb_device.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;		None
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;		None               void
  7496 ;; Registers used:
  7497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7498 ;; Tracked objects:
  7499 ;;		On entry : 1F/0
  7500 ;;		On exit  : 1D/0
  7501 ;;		Unchanged: FFFE0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7507 ;;Total ram usage:        2 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    6
  7510 ;; This function calls:
  7511 ;;		_USBCtrlTrfRxService
  7512 ;; This function is called by:
  7513 ;;		_USBCtrlEPService
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _USBCtrlTrfOutHandler
  7519  0FAC                     _USBCtrlTrfOutHandler:	
  7520  0FAC                     l5564:	
  7521                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-status,0+pclath+cstack]
  7522                           
  7523                           
  7524                           ;usb_device.c: 2696: if(controlTransferState == 2)
  7525  0FAC  086D               	movf	_controlTransferState,w
  7526  0FAD  3A02               	xorlw	2
  7527  0FAE  1D03               	skipz
  7528  0FAF  2FB2               	goto	l5568
  7529                           
  7530                           ;usb_device.c: 2697: {
  7531                           ;usb_device.c: 2698: USBCtrlTrfRxService();
  7532  0FB0  3189  2973         	ljmp	l5388
  7533  0FB2                     l5568:	
  7534                           ;usb_device.c: 2699: }
  7535                           
  7536                           
  7537                           ;usb_device.c: 2700: else
  7538                           ;usb_device.c: 2701: {
  7539                           ;usb_device.c: 2704: controlTransferState = 0;
  7540  0FB2  01ED               	clrf	_controlTransferState
  7541                           
  7542                           ;usb_device.c: 2711: if(BothEP0OutUOWNsSet == FALSE)
  7543  0FB3  0022               	movlb	2	; select bank2
  7544  0FB4  08AE               	movf	_BothEP0OutUOWNsSet^(0+256),f
  7545  0FB5  1D03               	skipz
  7546  0FB6  2FCA               	goto	l5574
  7547                           
  7548                           ;usb_device.c: 2712: {
  7549                           ;usb_device.c: 2713: pBDTEntryEP0OutNext->CNT = 8;
  7550  0FB7  0020               	movlb	0	; select bank0
  7551  0FB8  0A6F               	incf	_pBDTEntryEP0OutNext,w
  7552                           
  7553                           ;usb_device.c: 2714: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7554  0FB9  3189  21E0  318C   	fcall	PL40	;call to abstracted procedure
  7555  0FBC  00DC               	movwf	??_USBCtrlTrfOutHandler
  7556  0FBD  01DD               	clrf	??_USBCtrlTrfOutHandler+1
  7557  0FBE  086F               	movf	_pBDTEntryEP0OutNext,w
  7558  0FBF  3E02               	addlw	2
  7559  0FC0  0086               	movwf	6
  7560  0FC1  085C               	movf	??_USBCtrlTrfOutHandler,w
  7561  0FC2  3FC0               	movwi [0]fsr1
  7562  0FC3  085D               	movf	??_USBCtrlTrfOutHandler+1,w
  7563  0FC4  3FC1               	movwi [1]fsr1
  7564                           
  7565                           ;usb_device.c: 2715: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  7566  0FC5  086F               	movf	_pBDTEntryEP0OutNext,w
  7567  0FC6  0086               	movwf	6
  7568  0FC7  308C               	movlw	140
  7569  0FC8  0081               	movwf	1
  7570                           
  7571                           ;usb_device.c: 2716: }
  7572  0FC9  0008               	return
  7573  0FCA                     l5574:	
  7574                           
  7575                           ;usb_device.c: 2717: else
  7576                           ;usb_device.c: 2718: {
  7577                           ;usb_device.c: 2719: BothEP0OutUOWNsSet = FALSE;
  7578  0FCA  01AE               	clrf	_BothEP0OutUOWNsSet^(0+256)
  7579  0FCB  0008               	return
  7580  0FCC                     __end_of_USBCtrlTrfOutHandler:	
  7581  0FCC                     PL44:	
  7582  0FCC  0020               	movlb	0	; select bank0
  7583  0FCD  00E0               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER
  7584  0FCE  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7585  0FCF  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7586  0FD0  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7587  0FD1  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7588  0FD2  0008               	return
  7589  0FD3                     __end_ofPL44:	
  7590  0FD3                     PL48:	
  7591  0FD3  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  7592  0FD4  0021               	movlb	1	; select bank1
  7593  0FD5  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  7594  0FD6  0020               	movlb	0	; select bank0
  7595  0FD7  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7596  0FD8  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7597  0FD9  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  7598  0FDA  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7599  0FDB  0008               	return
  7600  0FDC                     __end_ofPL48:	
  7601  0FDC                     PL68:	
  7602  0FDC  3E02               	addlw	2
  7603  0FDD  0086               	movwf	6
  7604  0FDE  0856               	movf	??_USBCtrlEPAllowStatusStage,w
  7605  0FDF  3FC0               	movwi [0]fsr1
  7606  0FE0  0857               	movf	??_USBCtrlEPAllowStatusStage+1,w
  7607  0FE1  3FC1               	movwi [1]fsr1
  7608  0FE2  0008               	return
  7609  0FE3                     __end_ofPL68:	
  7610  0FE3                     PL72:	
  7611  0FE3  0801               	movf	1,w
  7612  0FE4  0021               	movlb	1	; select bank1
  7613  0FE5  00A3               	movwf	USBStdFeatureReqHandler@p^(0+128)
  7614  0FE6  0020               	movlb	0	; select bank0
  7615  0FE7  0844               	movf	68,w	;volatile
  7616  0FE8  390F               	andlw	15
  7617  0FE9  0008               	return
  7618  0FEA                     __end_ofPL72:	
  7619  0FEA                     PL76:	
  7620  0FEA  3E2A               	addlw	_pBDTEntryOut& (0+255)
  7621  0FEB  0086               	movwf	6
  7622  0FEC  3001               	movlw	1	; select bank2/3
  7623  0FED  0087               	movwf	7
  7624  0FEE  0008               	return
  7625  0FEF                     __end_ofPL76:	
  7626  0FEF                     PL80:	
  7627  0FEF  0823               	movf	USBStdFeatureReqHandler@p^(0+128),w
  7628  0FF0  0086               	movwf	6
  7629  0FF1  303B               	movlw	59
  7630  0FF2  0187               	clrf	7
  7631  0FF3  0581               	andwf	1,f
  7632  0FF4  0008               	return
  7633  0FF5                     __end_ofPL80:	
  7634  0FF5                     PL82:	
  7635  0FF5  0091               	movwf	17	;volatile
  7636  0FF6  309F               	movlw	159
  7637  0FF7  0097               	movwf	23	;volatile
  7638  0FF8  307B               	movlw	123
  7639  0FF9  0092               	movwf	18	;volatile
  7640  0FFA  0008               	return
  7641  0FFB                     __end_ofPL82:	
  7642  0FFB                     PL86:	
  7643  0FFB  01E2               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  7644  0FFC  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  7645  0FFD  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  7646  0FFE  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  7647  0FFF  0008               	return
  7648  1000                     __end_ofPL86:	
  7649                           
  7650                           	psect	text1759
  7651  0973                     __ptext1759:	
  7652 ;; *************** function _USBCtrlTrfRxService *****************
  7653 ;; Defined at:
  7654 ;;		line 2019 in file "../USB/usb_device.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;		None
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  byteToRead      1   11[BANK0 ] unsigned char 
  7659 ;;  i               1   10[BANK0 ] unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 1F/0
  7666 ;;		On exit  : 1D/0
  7667 ;;		Unchanged: FFFE0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;Total ram usage:        4 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    5
  7676 ;; This function calls:
  7677 ;;		_USBCtrlEPAllowStatusStage
  7678 ;; This function is called by:
  7679 ;;		_USBCtrlTrfOutHandler
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           
  7684                           ;psect for function _USBCtrlTrfRxService
  7685  0973                     _USBCtrlTrfRxService:	
  7686  0973                     l5388:	
  7687                           ; Regs used in _USBCtrlTrfRxService: [wreg-status,0+pclath+cstack]
  7688                           
  7689                           
  7690                           ;usb_device.c: 2020: BYTE byteToRead;
  7691                           ;usb_device.c: 2021: BYTE i;
  7692                           ;usb_device.c: 2025: byteToRead = pBDTEntryEP0OutCurrent->CNT;
  7693  0973  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7694  0974  0086               	movwf	6
  7695  0975  0187               	clrf	7
  7696  0976  3F41               	moviw [1]fsr1
  7697  0977  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  7698                           
  7699                           ;usb_device.c: 2031: if(byteToRead > outPipes[0].wCount.Val)
  7700  0978  00D8               	movwf	??_USBCtrlTrfRxService
  7701  0979  01D9               	clrf	??_USBCtrlTrfRxService+1
  7702  097A  0859               	movf	??_USBCtrlTrfRxService+1,w
  7703  097B  0022               	movlb	2	; select bank2
  7704  097C  0224               	subwf	((_outPipes+1)^(0+256)+3),w
  7705  097D  1D03               	skipz
  7706  097E  2983               	goto	u4085
  7707  097F  0020               	movlb	0	; select bank0
  7708  0980  0858               	movf	??_USBCtrlTrfRxService,w
  7709  0981  0022               	movlb	2	; select bank2
  7710  0982  0223               	subwf	(_outPipes^(0+256)+3),w
  7711  0983                     u4085:	
  7712  0983  1803               	skipnc
  7713  0984  2988               	goto	l5394
  7714                           
  7715                           ;usb_device.c: 2032: {
  7716                           ;usb_device.c: 2033: byteToRead = outPipes[0].wCount.Val;
  7717  0985  0823               	movf	(_outPipes^(0+256)+3),w
  7718  0986  0020               	movlb	0	; select bank0
  7719  0987  00DB               	movwf	USBCtrlTrfRxService@byteToRead
  7720  0988                     l5394:	
  7721                           
  7722                           ;usb_device.c: 2034: }
  7723                           ;usb_device.c: 2036: outPipes[0].wCount.Val = outPipes[0].wCount.Val - byteToRead;
  7724  0988  0020               	movlb	0	; select bank0
  7725  0989  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  7726  098A  00D8               	movwf	??_USBCtrlTrfRxService
  7727  098B  01D9               	clrf	??_USBCtrlTrfRxService+1
  7728  098C  0022               	movlb	2	; select bank2
  7729  098D  0223               	subwf	(_outPipes^(0+256)+3),w
  7730  098E  00A3               	movwf	(_outPipes^(0+256)+3)
  7731  098F  0020               	movlb	0	; select bank0
  7732  0990  0859               	movf	??_USBCtrlTrfRxService+1,w
  7733  0991  0022               	movlb	2	; select bank2
  7734  0992  3B24               	subwfb	((_outPipes+1)^(0+256)+3),w
  7735  0993  00A4               	movwf	((_outPipes+1)^(0+256)+3)
  7736                           
  7737                           ;usb_device.c: 2040: for(i=0;i<byteToRead;i++)
  7738  0994  0020               	movlb	0	; select bank0
  7739  0995  01DA               	clrf	USBCtrlTrfRxService@i
  7740  0996                     l5404:	
  7741  0996  085B               	movf	USBCtrlTrfRxService@byteToRead,w
  7742  0997  025A               	subwf	USBCtrlTrfRxService@i,w
  7743  0998  1803               	btfsc	3,0
  7744  0999  29AA               	goto	l5406
  7745                           
  7746                           ;usb_device.c: 2041: {
  7747                           ;usb_device.c: 2042: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
  7748  099A  0022               	movlb	2	; select bank2
  7749  099B  0820               	movf	_outPipes^(0+256),w
  7750  099C  0086               	movwf	6
  7751  099D  0187               	clrf	7
  7752  099E  0020               	movlb	0	; select bank0
  7753  099F  085A               	movf	USBCtrlTrfRxService@i,w
  7754  09A0  3E48               	addlw	72
  7755  09A1  0084               	movwf	4
  7756  09A2  0185               	clrf	5
  7757  09A3  0800               	movf	0,w
  7758  09A4  0081               	movwf	1
  7759  09A5  0022               	movlb	2	; select bank2
  7760  09A6  0AA0               	incf	_outPipes^(0+256),f
  7761  09A7  0020               	movlb	0	; select bank0
  7762  09A8  0ADA               	incf	USBCtrlTrfRxService@i,f
  7763  09A9  2996               	goto	l5404
  7764  09AA                     l5406:	
  7765                           
  7766                           ;usb_device.c: 2043: }
  7767                           ;usb_device.c: 2047: if(outPipes[0].wCount.Val > 0)
  7768  09AA  3003               	movlw	3
  7769  09AB  3E20               	addlw	_outPipes& (0+255)
  7770  09AC  0086               	movwf	6
  7771  09AD  3001               	movlw	1	; select bank2/3
  7772  09AE  0087               	movwf	7
  7773  09AF  0016               	moviw fsr1++
  7774  09B0  0401               	iorwf	1,w
  7775  09B1  1903               	skipnz
  7776  09B2  29C9               	goto	l5414
  7777                           
  7778                           ;usb_device.c: 2048: {
  7779                           ;usb_device.c: 2049: pBDTEntryEP0OutNext->CNT = 8;
  7780  09B3  0A6F               	incf	_pBDTEntryEP0OutNext,w
  7781  09B4  0086               	movwf	6
  7782  09B5  3008               	movlw	8
  7783  09B6  0187               	clrf	7
  7784  09B7  0081               	movwf	1
  7785                           
  7786                           ;usb_device.c: 2050: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  7787  09B8  3048               	movlw	72
  7788  09B9  21E5  3189         	fcall	PL42	;call to abstracted procedure
  7789                           
  7790                           ;usb_device.c: 2051: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
  7791  09BB  086E               	movf	_pBDTEntryEP0OutCurrent,w
  7792  09BC  0086               	movwf	6
  7793                           
  7794                           ;usb_device.c: 2052: {
  7795                           ;usb_device.c: 2053: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  7796  09BD  086F               	movf	_pBDTEntryEP0OutNext,w
  7797  09BE  1B01               	btfsc	1,6
  7798  09BF  29C4               	goto	L2
  7799  09C0  0086               	movwf	6
  7800  09C1  30C8               	movlw	200
  7801  09C2  0081               	movwf	1
  7802                           
  7803                           ;usb_device.c: 2054: }
  7804  09C3  0008               	return
  7805  09C4                     L2:	
  7806                           ;usb_device.c: 2055: else
  7807                           ;usb_device.c: 2056: {
  7808                           ;usb_device.c: 2057: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  7809                           
  7810  09C4  0086               	movwf	6
  7811  09C5  3088               	movlw	136
  7812  09C6  0187               	clrf	7
  7813  09C7  0081               	movwf	1
  7814  09C8  0008               	return
  7815  09C9                     l5414:	
  7816                           
  7817                           ;usb_device.c: 2060: else
  7818                           ;usb_device.c: 2061: {
  7819                           ;usb_device.c: 2065: pBDTEntryEP0OutNext->CNT = 8;
  7820  09C9  0A6F               	incf	_pBDTEntryEP0OutNext,w
  7821                           
  7822                           ;usb_device.c: 2066: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  7823  09CA  21E0  3189         	fcall	PL40	;call to abstracted procedure
  7824  09CC  21E5  3189         	fcall	PL42	;call to abstracted procedure
  7825                           
  7826                           ;usb_device.c: 2070: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  7827  09CE  086F               	movf	_pBDTEntryEP0OutNext,w
  7828  09CF  0086               	movwf	6
  7829  09D0  3084               	movlw	132
  7830  09D1  0081               	movwf	1
  7831                           
  7832                           ;usb_device.c: 2077: if(outPipes[0].pFunc != (0))
  7833  09D2  0022               	movlb	2	; select bank2
  7834  09D3  0825               	movf	(_outPipes+5)^(0+256),w
  7835  09D4  1903               	btfsc	3,2
  7836  09D5  29D9               	goto	l5420
  7837                           
  7838                           ;usb_device.c: 2078: {
  7839                           ;usb_device.c: 2084: outPipes[0].pFunc();
  7840  09D6  0825               	movf	(_outPipes+5)^(0+256),w
  7841  09D7  3189  2973         	ljmp	$	;if you get stuck here, you called an invalid pointer
  7842  09D9                     l5420:	
  7843                           
  7844                           ;usb_device.c: 2089: }
  7845                           ;usb_device.c: 2090: outPipes[0].info.bits.busy = 0;
  7846  09D9  13A2               	bcf	(_outPipes^(0+256)+2),7
  7847                           
  7848                           ;usb_device.c: 2104: if(USBDeferStatusStagePacket == FALSE)
  7849  09DA  0020               	movlb	0	; select bank0
  7850  09DB  08EC               	movf	_USBDeferStatusStagePacket,f
  7851  09DC  1D03               	skipz
  7852  09DD  0008               	return
  7853                           
  7854                           ;usb_device.c: 2105: {
  7855                           ;usb_device.c: 2106: USBCtrlEPAllowStatusStage();
  7856  09DE  318E  2E9A         	ljmp	l5150
  7857  09E0                     __end_of_USBCtrlTrfRxService:	
  7858  09E0                     PL40:	
  7859  09E0  0086               	movwf	6
  7860  09E1  3008               	movlw	8
  7861  09E2  0187               	clrf	7
  7862  09E3  0081               	movwf	1
  7863  09E4  3440               	retlw	64
  7864  09E5                     __end_ofPL40:	
  7865  09E5                     PL42:	
  7866  09E5  00D8               	movwf	??_USBCtrlTrfRxService
  7867  09E6  01D9               	clrf	??_USBCtrlTrfRxService+1
  7868  09E7  086F               	movf	_pBDTEntryEP0OutNext,w
  7869  09E8  3E02               	addlw	2
  7870  09E9  0086               	movwf	6
  7871  09EA  0858               	movf	??_USBCtrlTrfRxService,w
  7872  09EB  3FC0               	movwi [0]fsr1
  7873  09EC  0859               	movf	??_USBCtrlTrfRxService+1,w
  7874  09ED  3FC1               	movwi [1]fsr1
  7875  09EE  0008               	return
  7876  09EF                     __end_ofPL42:	
  7877                           
  7878                           	psect	text1761
  7879  0B00                     __ptext1761:	
  7880 ;; *************** function _USBCtrlTrfInHandler *****************
  7881 ;; Defined at:
  7882 ;;		line 2748 in file "../USB/usb_device.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;		None
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  lastDTS         1   11[BANK0 ] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;		None               void
  7889 ;; Registers used:
  7890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 1F/1
  7893 ;;		On exit  : 1F/0
  7894 ;;		Unchanged: FFFE0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;Total ram usage:        3 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    5
  7903 ;; This function calls:
  7904 ;;		_USBCtrlTrfTxService
  7905 ;; This function is called by:
  7906 ;;		_USBCtrlEPService
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _USBCtrlTrfInHandler
  7912  0B00                     _USBCtrlTrfInHandler:	
  7913  0B00                     l5576:	
  7914                           ; Regs used in _USBCtrlTrfInHandler: [wreg-status,0+pclath+cstack]
  7915                           
  7916                           
  7917                           ;usb_device.c: 2749: BYTE lastDTS;
  7918                           ;usb_device.c: 2751: lastDTS = pBDTEntryIn[0]->STAT.DTS;
  7919  0B00  0020               	movlb	0	; select bank0
  7920  0B01  086A               	movf	_pBDTEntryIn,w
  7921  0B02  0086               	movwf	6
  7922  0B03  3000               	movlw	0
  7923  0B04  0187               	clrf	7
  7924  0B05  1B01               	btfsc	1,6
  7925  0B06  3001               	movlw	1
  7926  0B07  00DB               	movwf	USBCtrlTrfInHandler@lastDTS
  7927                           
  7928                           ;usb_device.c: 2754: ((BYTE_VAL*)&pBDTEntryIn[0])->Val ^= 0x0004;
  7929  0B08  3004               	movlw	4
  7930  0B09  06EA               	xorwf	_pBDTEntryIn,f
  7931                           
  7932                           ;usb_device.c: 2759: if(USBDeviceState == ADR_PENDING_STATE)
  7933  0B0A  0021               	movlb	1	; select bank1
  7934  0B0B  086A               	movf	_USBDeviceState^(0+128),w
  7935  0B0C  3A08               	xorlw	8
  7936  0B0D  1D03               	skipz
  7937  0B0E  2B1B               	goto	l315
  7938                           
  7939                           ;usb_device.c: 2760: {
  7940                           ;usb_device.c: 2761: UADDR = SetupPkt.bDevADR.Val;
  7941  0B0F  0020               	movlb	0	; select bank0
  7942  0B10  0842               	movf	66,w	;volatile
  7943  0B11  003D               	movlb	29	; select bank29
  7944  0B12  0096               	movwf	22	;volatile
  7945                           
  7946                           ;usb_device.c: 2762: if(UADDR != 0u)
  7947  0B13  0816               	movf	22,w
  7948  0B14  1903               	btfsc	3,2
  7949  0B15  2B18               	goto	l5586
  7950                           
  7951                           ;usb_device.c: 2763: {
  7952                           ;usb_device.c: 2764: USBDeviceState=ADDRESS_STATE;
  7953  0B16  3010               	movlw	16
  7954  0B17  2B19               	goto	L3
  7955  0B18                     l5586:	
  7956                           ;usb_device.c: 2765: }
  7957                           
  7958                           
  7959                           ;usb_device.c: 2766: else
  7960                           ;usb_device.c: 2767: {
  7961                           ;usb_device.c: 2768: USBDeviceState=DEFAULT_STATE;
  7962  0B18  3004               	movlw	4
  7963  0B19                     L3:	
  7964  0B19  0021               	movlb	1	; select bank1
  7965  0B1A  00EA               	movwf	_USBDeviceState^(0+128)
  7966  0B1B                     l315:	
  7967                           
  7968                           ;usb_device.c: 2769: }
  7969                           ;usb_device.c: 2770: }
  7970                           ;usb_device.c: 2773: if(controlTransferState == 1)
  7971  0B1B  0020               	movlb	0	; select bank0
  7972  0B1C  0B6D               	decfsz	_controlTransferState,w
  7973  0B1D  2B47               	goto	l318
  7974                           
  7975                           ;usb_device.c: 2774: {
  7976                           ;usb_device.c: 2775: pBDTEntryIn[0]->ADR = (((WORD)(CtrlTrfData))& 0x7FFF);
  7977  0B1E  3048               	movlw	72
  7978  0B1F  00D9               	movwf	??_USBCtrlTrfInHandler
  7979  0B20  01DA               	clrf	??_USBCtrlTrfInHandler+1
  7980  0B21  086A               	movf	_pBDTEntryIn,w
  7981  0B22  3E02               	addlw	2
  7982  0B23  0086               	movwf	6
  7983  0B24  0187               	clrf	7
  7984  0B25  0859               	movf	??_USBCtrlTrfInHandler,w
  7985  0B26  3FC0               	movwi [0]fsr1
  7986  0B27  085A               	movf	??_USBCtrlTrfInHandler+1,w
  7987  0B28  3FC1               	movwi [1]fsr1
  7988                           
  7989                           ;usb_device.c: 2776: USBCtrlTrfTxService();
  7990  0B29  23C5  318B         	fcall	_USBCtrlTrfTxService
  7991                           
  7992                           ;usb_device.c: 2782: if(shortPacketStatus == 2)
  7993  0B2B  0021               	movlb	1	; select bank1
  7994  0B2C  086C               	movf	_shortPacketStatus^(0+128),w
  7995  0B2D  3A02               	xorlw	2
  7996  0B2E  1D03               	skipz
  7997  0B2F  2B37               	goto	l5596
  7998                           
  7999                           ;usb_device.c: 2783: {
  8000                           ;usb_device.c: 2786: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  8001  0B30  0020               	movlb	0	; select bank0
  8002  0B31  086A               	movf	_pBDTEntryIn,w
  8003  0B32  0086               	movwf	6
  8004  0B33  3084               	movlw	132
  8005  0B34  0187               	clrf	7
  8006  0B35  0081               	movwf	1
  8007                           
  8008                           ;usb_device.c: 2787: }
  8009  0B36  0008               	return
  8010  0B37                     l5596:	
  8011                           
  8012                           ;usb_device.c: 2788: else
  8013                           ;usb_device.c: 2789: {
  8014                           ;usb_device.c: 2790: if(lastDTS == 0)
  8015  0B37  0020               	movlb	0	; select bank0
  8016  0B38  08DB               	movf	USBCtrlTrfInHandler@lastDTS,f
  8017  0B39  1D03               	skipz
  8018  0B3A  2B41               	goto	l5600
  8019                           
  8020                           ;usb_device.c: 2791: {
  8021                           ;usb_device.c: 2792: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8022  0B3B  086A               	movf	_pBDTEntryIn,w
  8023  0B3C  0086               	movwf	6
  8024  0B3D  30C8               	movlw	200
  8025  0B3E  0187               	clrf	7
  8026  0B3F  0081               	movwf	1
  8027                           
  8028                           ;usb_device.c: 2793: }
  8029  0B40  0008               	return
  8030  0B41                     l5600:	
  8031                           
  8032                           ;usb_device.c: 2794: else
  8033                           ;usb_device.c: 2795: {
  8034                           ;usb_device.c: 2796: pBDTEntryIn[0]->STAT.Val = 0x80|0x00|(0x08 & 0x08);
  8035  0B41  086A               	movf	_pBDTEntryIn,w
  8036  0B42  0086               	movwf	6
  8037  0B43  3088               	movlw	136
  8038  0B44  0187               	clrf	7
  8039  0B45  0081               	movwf	1
  8040  0B46  0008               	return
  8041  0B47                     l318:	
  8042                           
  8043                           ;usb_device.c: 2800: else
  8044                           ;usb_device.c: 2801: {
  8045                           ;usb_device.c: 2805: if(outPipes[0].info.bits.busy == 1)
  8046  0B47  0022               	movlb	2	; select bank2
  8047  0B48  1FA2               	btfss	(_outPipes^(0+256)+2),7
  8048  0B49  2B51               	goto	l5608
  8049                           
  8050                           ;usb_device.c: 2806: {
  8051                           ;usb_device.c: 2807: if(outPipes[0].pFunc != (0))
  8052  0B4A  0825               	movf	(_outPipes+5)^(0+256),w
  8053  0B4B  1903               	btfsc	3,2
  8054  0B4C  2B50               	goto	l5606
  8055                           
  8056                           ;usb_device.c: 2808: {
  8057                           ;usb_device.c: 2809: outPipes[0].pFunc();
  8058  0B4D  0825               	movf	(_outPipes+5)^(0+256),w
  8059  0B4E  318B  2B00         	ljmp	$	;if you get stuck here, you called an invalid pointer
  8060  0B50                     l5606:	
  8061                           
  8062                           ;usb_device.c: 2810: }
  8063                           ;usb_device.c: 2811: outPipes[0].info.bits.busy = 0;
  8064  0B50  13A2               	bcf	(_outPipes^(0+256)+2),7
  8065  0B51                     l5608:	
  8066                           
  8067                           ;usb_device.c: 2812: }
  8068                           ;usb_device.c: 2814: controlTransferState = 0;
  8069  0B51  0020               	movlb	0	; select bank0
  8070  0B52  01ED               	clrf	_controlTransferState
  8071  0B53  0008               	return
  8072  0B54                     __end_of_USBCtrlTrfInHandler:	
  8073  0B54                     __ptext1756:	
  8074 ;; *************** function _USBCtrlEPServiceComplete *****************
  8075 ;; Defined at:
  8076 ;;		line 1786 in file "../USB/usb_device.c"
  8077 ;; Parameters:    Size  Location     Type
  8078 ;;		None
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;		None
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 1D/2
  8087 ;;		On exit  : 1D/0
  8088 ;;		Unchanged: FFFE0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        2 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    6
  8097 ;; This function calls:
  8098 ;;		_USBCtrlEPAllowDataStage
  8099 ;;		_USBCtrlEPAllowStatusStage
  8100 ;; This function is called by:
  8101 ;;		_USBCtrlTrfSetupHandler
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           
  8106                           ;psect for function _USBCtrlEPServiceComplete
  8107  0B54                     _USBCtrlEPServiceComplete:	
  8108  0B54                     l5342:	
  8109                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-status,0+pclath+cstack]
  8110                           
  8111                           
  8112                           ;usb_device.c: 1791: UCONbits.PKTDIS = 0;
  8113  0B54  003D               	movlb	29	; select bank29
  8114  0B55  120E               	bcf	14,4	;volatile
  8115                           
  8116                           ;usb_device.c: 1797: if(inPipes[0].info.bits.busy == 0)
  8117  0B56  0022               	movlb	2	; select bank2
  8118  0B57  1BCB               	btfsc	(_inPipes^(0+256)+2),7
  8119  0B58  2B70               	goto	l208
  8120                           
  8121                           ;usb_device.c: 1798: {
  8122                           ;usb_device.c: 1799: if(outPipes[0].info.bits.busy == 1)
  8123  0B59  1FA2               	btfss	(_outPipes^(0+256)+2),7
  8124  0B5A  2B67               	goto	l5356
  8125                           
  8126                           ;usb_device.c: 1800: {
  8127                           ;usb_device.c: 1801: controlTransferState = 2;
  8128  0B5B  3002               	movlw	2
  8129  0B5C  0020               	movlb	0	; select bank0
  8130  0B5D  00ED               	movwf	_controlTransferState
  8131                           
  8132                           ;usb_device.c: 1812: if(USBDeferOUTDataStagePackets == FALSE)
  8133  0B5E  0022               	movlb	2	; select bank2
  8134  0B5F  08B4               	movf	_USBDeferOUTDataStagePackets^(0+256),f
  8135  0B60  1D03               	skipz
  8136  0B61  2B63               	goto	l5352
  8137                           
  8138                           ;usb_device.c: 1813: {
  8139                           ;usb_device.c: 1814: USBCtrlEPAllowDataStage();
  8140  0B62  238B               	fcall	_USBCtrlEPAllowDataStage
  8141  0B63                     l5352:	
  8142                           
  8143                           ;usb_device.c: 1815: }
  8144                           ;usb_device.c: 1819: USBStatusStageEnabledFlag2 = FALSE;
  8145  0B63  0022               	movlb	2	; select bank2
  8146  0B64  01B8               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8147                           
  8148                           ;usb_device.c: 1820: USBStatusStageEnabledFlag1 = FALSE;
  8149  0B65  01B7               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8150                           
  8151                           ;usb_device.c: 1821: }
  8152  0B66  0008               	return
  8153  0B67                     l5356:	
  8154                           
  8155                           ;usb_device.c: 1822: else
  8156                           ;usb_device.c: 1823: {
  8157                           ;usb_device.c: 1828: pBDTEntryEP0OutNext->CNT = 8;
  8158  0B67  0020               	movlb	0	; select bank0
  8159                           
  8160                           ;usb_device.c: 1829: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8161                           
  8162                           ;usb_device.c: 1830: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x00|(0x08 & 0x08)|0x04;
  8163  0B68  2404               	fcall	PL24	;call to abstracted procedure
  8164  0B69  308C               	movlw	140
  8165  0B6A  0081               	movwf	1
  8166                           
  8167                           ;usb_device.c: 1831: pBDTEntryIn[0]->STAT.Val = 0x80|0x04;
  8168  0B6B  086A               	movf	_pBDTEntryIn,w
  8169  0B6C  0086               	movwf	6
  8170  0B6D  3084               	movlw	132
  8171  0B6E  0081               	movwf	1
  8172  0B6F  0008               	return
  8173  0B70                     l208:	
  8174                           
  8175                           ;usb_device.c: 1834: else
  8176                           ;usb_device.c: 1835: {
  8177                           ;usb_device.c: 1836: if(SetupPkt.DataDir == (0x80>>7))
  8178  0B70  0020               	movlb	0	; select bank0
  8179  0B71  1FC0               	btfss	64,7	;volatile
  8180  0B72  2B84               	goto	l5372
  8181                           
  8182                           ;usb_device.c: 1837: {
  8183                           ;usb_device.c: 1838: controlTransferState = 1;
  8184  0B73  01ED               	clrf	_controlTransferState
  8185  0B74  0AED               	incf	_controlTransferState,f
  8186                           
  8187                           ;usb_device.c: 1852: if(USBDeferINDataStagePackets == FALSE)
  8188  0B75  0022               	movlb	2	; select bank2
  8189  0B76  08B3               	movf	_USBDeferINDataStagePackets^(0+256),f
  8190  0B77  1D03               	skipz
  8191  0B78  2B7B               	goto	l5364
  8192                           
  8193                           ;usb_device.c: 1853: {
  8194                           ;usb_device.c: 1854: USBCtrlEPAllowDataStage();
  8195  0B79  238B  318B         	fcall	_USBCtrlEPAllowDataStage
  8196  0B7B                     l5364:	
  8197                           
  8198                           ;usb_device.c: 1855: }
  8199                           ;usb_device.c: 1877: USBStatusStageEnabledFlag2 = FALSE;
  8200  0B7B  0022               	movlb	2	; select bank2
  8201  0B7C  01B8               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  8202                           
  8203                           ;usb_device.c: 1878: USBStatusStageEnabledFlag1 = FALSE;
  8204  0B7D  01B7               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  8205                           
  8206                           ;usb_device.c: 1879: if(USBDeferStatusStagePacket == FALSE)
  8207  0B7E  0020               	movlb	0	; select bank0
  8208  0B7F  08EC               	movf	_USBDeferStatusStagePacket,f
  8209  0B80  1D03               	skipz
  8210  0B81  0008               	return
  8211                           
  8212                           ;usb_device.c: 1880: {
  8213                           ;usb_device.c: 1881: USBCtrlEPAllowStatusStage();
  8214  0B82  318E  2E9A         	ljmp	l5150
  8215  0B84                     l5372:	
  8216                           
  8217                           ;usb_device.c: 1884: else
  8218                           ;usb_device.c: 1885: {
  8219                           ;usb_device.c: 1896: controlTransferState = 2;
  8220  0B84  3002               	movlw	2
  8221  0B85  00ED               	movwf	_controlTransferState
  8222                           
  8223                           ;usb_device.c: 1899: pBDTEntryEP0OutNext->CNT = 8;
  8224                           
  8225                           ;usb_device.c: 1900: pBDTEntryEP0OutNext->ADR = (((WORD)(&SetupPkt))& 0x7FFF);
  8226                           
  8227                           ;usb_device.c: 1901: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x04;
  8228  0B86  2404  318B         	fcall	PL24	;call to abstracted procedure
  8229  0B88  3084               	movlw	132
  8230  0B89  0081               	movwf	1
  8231  0B8A  2B7B               	goto	l5364
  8232  0B8B                     __end_of_USBCtrlEPServiceComplete:	
  8233                           ;usb_device.c: 1906: if(USBDeferStatusStagePacket == FALSE)
  8234                           
  8235                           ;usb_device.c: 1905: USBStatusStageEnabledFlag1 = FALSE;
  8236                           
  8237                           ;usb_device.c: 1904: USBStatusStageEnabledFlag2 = FALSE;
  8238                           
  8239  0B8B                     __ptext1757:	
  8240 ;; *************** function _USBCtrlEPAllowDataStage *****************
  8241 ;; Defined at:
  8242 ;;		line 1660 in file "../USB/usb_device.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;		None
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;		None
  8247 ;; Return value:  Size  Location     Type
  8248 ;;		None               void
  8249 ;; Registers used:
  8250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 1F/2
  8253 ;;		On exit  : 1F/0
  8254 ;;		Unchanged: FFFE0/0
  8255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;Total ram usage:        2 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    5
  8263 ;; This function calls:
  8264 ;;		_USBCtrlTrfTxService
  8265 ;; This function is called by:
  8266 ;;		_USBCtrlEPServiceComplete
  8267 ;; This function uses a non-reentrant model
  8268 ;;
  8269                           
  8270                           
  8271                           ;psect for function _USBCtrlEPAllowDataStage
  8272  0B8B                     _USBCtrlEPAllowDataStage:	
  8273                           
  8274                           ;usb_device.c: 1661: USBDeferINDataStagePackets = FALSE;
  8275                           
  8276                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-status,0+pclath+cstack]
  8277  0B8B  01B3               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  8278                           
  8279                           ;usb_device.c: 1662: USBDeferOUTDataStagePackets = FALSE;
  8280  0B8C  01B4               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  8281                           
  8282                           ;usb_device.c: 1664: if(controlTransferState == 2)
  8283  0B8D  0020               	movlb	0	; select bank0
  8284  0B8E  086D               	movf	_controlTransferState,w
  8285  0B8F  3A02               	xorlw	2
  8286  0B90  1D03               	skipz
  8287  0B91  2BA3               	goto	l5290
  8288                           
  8289                           ;usb_device.c: 1665: {
  8290                           ;usb_device.c: 1667: pBDTEntryEP0OutNext->CNT = 8;
  8291  0B92  0A6F               	incf	_pBDTEntryEP0OutNext,w
  8292  0B93  0086               	movwf	6
  8293  0B94  3008               	movlw	8
  8294  0B95  0187               	clrf	7
  8295  0B96  0081               	movwf	1
  8296                           
  8297                           ;usb_device.c: 1668: pBDTEntryEP0OutNext->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  8298  0B97  3048               	movlw	72
  8299  0B98  00D9               	movwf	??_USBCtrlEPAllowDataStage
  8300  0B99  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
  8301  0B9A  086F               	movf	_pBDTEntryEP0OutNext,w
  8302  0B9B  3E02               	addlw	2
  8303  0B9C  0086               	movwf	6
  8304  0B9D  0859               	movf	??_USBCtrlEPAllowDataStage,w
  8305  0B9E  3FC0               	movwi [0]fsr1
  8306  0B9F  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
  8307  0BA0  3FC1               	movwi [1]fsr1
  8308                           
  8309                           ;usb_device.c: 1669: pBDTEntryEP0OutNext->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8310  0BA1  086F               	movf	_pBDTEntryEP0OutNext,w
  8311                           
  8312                           ;usb_device.c: 1670: }
  8313  0BA2  2C27               	ljmp	PL84	;call to abstracted procedure
  8314  0BA3                     l5290:	
  8315                           
  8316                           ;usb_device.c: 1671: else
  8317                           ;usb_device.c: 1672: {
  8318                           ;usb_device.c: 1675: if(SetupPkt.wLength < inPipes[0].wCount.Val)
  8319  0BA3  0022               	movlb	2	; select bank2
  8320  0BA4  084D               	movf	((_inPipes+1)^(0+256)+3),w
  8321  0BA5  0020               	movlb	0	; select bank0
  8322  0BA6  0247               	subwf	71,w	;volatile
  8323  0BA7  1D03               	skipz
  8324  0BA8  2BAD               	goto	u3945
  8325  0BA9  0022               	movlb	2	; select bank2
  8326  0BAA  084C               	movf	(_inPipes^(0+256)+3),w
  8327  0BAB  0020               	movlb	0	; select bank0
  8328  0BAC  0246               	subwf	70,w	;volatile
  8329  0BAD                     u3945:	
  8330  0BAD  1803               	skipnc
  8331  0BAE  2BB6               	goto	l5294
  8332                           
  8333                           ;usb_device.c: 1676: {
  8334                           ;usb_device.c: 1677: inPipes[0].wCount.Val = SetupPkt.wLength;
  8335  0BAF  0847               	movf	71,w	;volatile
  8336  0BB0  0022               	movlb	2	; select bank2
  8337  0BB1  00CD               	movwf	((_inPipes+1)^(0+256)+3)
  8338  0BB2  0020               	movlb	0	; select bank0
  8339  0BB3  0846               	movf	70,w	;volatile
  8340  0BB4  0022               	movlb	2	; select bank2
  8341  0BB5  00CC               	movwf	(_inPipes^(0+256)+3)
  8342  0BB6                     l5294:	
  8343                           
  8344                           ;usb_device.c: 1678: }
  8345                           ;usb_device.c: 1679: USBCtrlTrfTxService();
  8346  0BB6  23C5  318B         	fcall	_USBCtrlTrfTxService
  8347                           
  8348                           ;usb_device.c: 1684: pBDTEntryIn[0]->ADR = (((WORD)(&CtrlTrfData))& 0x7FFF);
  8349  0BB8  3048               	movlw	72
  8350  0BB9  00D9               	movwf	??_USBCtrlEPAllowDataStage
  8351  0BBA  01DA               	clrf	??_USBCtrlEPAllowDataStage+1
  8352  0BBB  086A               	movf	_pBDTEntryIn,w
  8353  0BBC  3E02               	addlw	2
  8354  0BBD  0086               	movwf	6
  8355  0BBE  0187               	clrf	7
  8356  0BBF  0859               	movf	??_USBCtrlEPAllowDataStage,w
  8357  0BC0  3FC0               	movwi [0]fsr1
  8358  0BC1  085A               	movf	??_USBCtrlEPAllowDataStage+1,w
  8359  0BC2  3FC1               	movwi [1]fsr1
  8360                           
  8361                           ;usb_device.c: 1685: pBDTEntryIn[0]->STAT.Val = 0x80|0x40|(0x08 & 0x08);
  8362  0BC3  086A               	movf	_pBDTEntryIn,w
  8363  0BC4  2C27               	ljmp	PL84	;call to abstracted procedure
  8364  0BC5                     __end_of_USBCtrlEPAllowDataStage:	
  8365  0BC5                     __ptext1762:	
  8366 ;; *************** function _USBCtrlTrfTxService *****************
  8367 ;; Defined at:
  8368 ;;		line 1938 in file "../USB/usb_device.c"
  8369 ;; Parameters:    Size  Location     Type
  8370 ;;		None
  8371 ;; Auto vars:     Size  Location     Type
  8372 ;;  byteToSend      1    8[BANK0 ] unsigned char 
  8373 ;; Return value:  Size  Location     Type
  8374 ;;		None               void
  8375 ;; Registers used:
  8376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8377 ;; Tracked objects:
  8378 ;;		On entry : 1D/0
  8379 ;;		On exit  : 1F/0
  8380 ;;		Unchanged: FFFE0/0
  8381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8384 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;Total ram usage:        3 bytes
  8387 ;; Hardware stack levels used:    1
  8388 ;; Hardware stack levels required when called:    4
  8389 ;; This function calls:
  8390 ;;		Nothing
  8391 ;; This function is called by:
  8392 ;;		_USBCtrlEPAllowDataStage
  8393 ;;		_USBCtrlTrfInHandler
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           
  8398                           ;psect for function _USBCtrlTrfTxService
  8399  0BC5                     _USBCtrlTrfTxService:	
  8400                           
  8401                           ;usb_device.c: 1939: BYTE byteToSend;
  8402                           ;usb_device.c: 1943: byteToSend = 8;
  8403                           
  8404                           ; Regs used in _USBCtrlTrfTxService: [wreg-status,0+pclath]
  8405  0BC5  3008               	movlw	8
  8406  0BC6  0020               	movlb	0	; select bank0
  8407  0BC7  00D8               	movwf	USBCtrlTrfTxService@byteToSend
  8408                           
  8409                           ;usb_device.c: 1944: if(inPipes[0].wCount.Val < (BYTE)8)
  8410  0BC8  3000               	movlw	0
  8411  0BC9  0022               	movlb	2	; select bank2
  8412  0BCA  024D               	subwf	((_inPipes+1)^(0+256)+3),w
  8413  0BCB  3008               	movlw	8
  8414  0BCC  1903               	skipnz
  8415  0BCD  024C               	subwf	(_inPipes^(0+256)+3),w
  8416  0BCE  1803               	skipnc
  8417  0BCF  2BDE               	goto	l5312
  8418                           
  8419                           ;usb_device.c: 1945: {
  8420                           ;usb_device.c: 1946: byteToSend = inPipes[0].wCount.Val;
  8421  0BD0  084C               	movf	(_inPipes^(0+256)+3),w
  8422  0BD1  0020               	movlb	0	; select bank0
  8423  0BD2  00D8               	movwf	USBCtrlTrfTxService@byteToSend
  8424                           
  8425                           ;usb_device.c: 1953: if(shortPacketStatus == 0)
  8426  0BD3  0021               	movlb	1	; select bank1
  8427  0BD4  08EC               	movf	_shortPacketStatus^(0+128),f
  8428  0BD5  1D03               	skipz
  8429  0BD6  2BDA               	goto	l5308
  8430                           
  8431                           ;usb_device.c: 1954: {
  8432                           ;usb_device.c: 1955: shortPacketStatus = 1;
  8433  0BD7  01EC               	clrf	_shortPacketStatus^(0+128)
  8434  0BD8  0AEC               	incf	_shortPacketStatus^(0+128),f
  8435                           
  8436                           ;usb_device.c: 1956: }
  8437  0BD9  2BDE               	goto	l5312
  8438  0BDA                     l5308:	
  8439                           
  8440                           ;usb_device.c: 1957: else if(shortPacketStatus == 1)
  8441  0BDA  0B6C               	decfsz	_shortPacketStatus^(0+128),w
  8442  0BDB  2BDE               	goto	l5312
  8443                           
  8444                           ;usb_device.c: 1958: {
  8445                           ;usb_device.c: 1959: shortPacketStatus = 2;
  8446  0BDC  3002               	movlw	2
  8447  0BDD  00EC               	movwf	_shortPacketStatus^(0+128)
  8448  0BDE                     l5312:	
  8449                           
  8450                           ;usb_device.c: 1960: }
  8451                           ;usb_device.c: 1961: }
  8452                           ;usb_device.c: 1965: inPipes[0].wCount.Val = inPipes[0].wCount.Val - byteToSend;
  8453  0BDE  0020               	movlb	0	; select bank0
  8454  0BDF  0858               	movf	USBCtrlTrfTxService@byteToSend,w
  8455  0BE0  00D6               	movwf	??_USBCtrlTrfTxService
  8456  0BE1  01D7               	clrf	??_USBCtrlTrfTxService+1
  8457  0BE2  0022               	movlb	2	; select bank2
  8458  0BE3  024C               	subwf	(_inPipes^(0+256)+3),w
  8459  0BE4  00CC               	movwf	(_inPipes^(0+256)+3)
  8460  0BE5  0020               	movlb	0	; select bank0
  8461  0BE6  0857               	movf	??_USBCtrlTrfTxService+1,w
  8462  0BE7  0022               	movlb	2	; select bank2
  8463  0BE8  3B4D               	subwfb	((_inPipes+1)^(0+256)+3),w
  8464  0BE9  00CD               	movwf	((_inPipes+1)^(0+256)+3)
  8465                           
  8466                           ;usb_device.c: 1970: pBDTEntryIn[0]->CNT = byteToSend;
  8467  0BEA  0020               	movlb	0	; select bank0
  8468  0BEB  0A6A               	incf	_pBDTEntryIn,w
  8469  0BEC  0086               	movwf	6
  8470  0BED  0187               	clrf	7
  8471  0BEE  0858               	movf	USBCtrlTrfTxService@byteToSend,w
  8472  0BEF  0081               	movwf	1
  8473                           
  8474                           ;usb_device.c: 1974: pDst = ( BYTE*)CtrlTrfData;
  8475  0BF0  3048               	movlw	72
  8476  0BF1  0022               	movlb	2	; select bank2
  8477  0BF2  00BF               	movwf	_pDst^(0+256)
  8478                           
  8479                           ;usb_device.c: 1975: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
  8480  0BF3  1C4B               	btfss	(_inPipes^(0+256)+2),0
  8481  0BF4  2BF8               	goto	l5330
  8482  0BF5  2BFF               	goto	l5340
  8483  0BF6                     l5322:	
  8484                           
  8485                           ;usb_device.c: 1978: {
  8486                           ;usb_device.c: 1979: *pDst++ = *inPipes[0].pSrc.bRom++;
  8487                           
  8488                           ;usb_device.c: 1980: byteToSend--;
  8489  0BF6  2416  318B         	fcall	PL26	;call to abstracted procedure
  8490  0BF8                     l5330:	
  8491  0BF8  0020               	movlb	0	; select bank0
  8492  0BF9  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
  8493  0BFA  1903               	btfsc	3,2
  8494  0BFB  0008               	return
  8495  0BFC  2BF6               	goto	l5322
  8496  0BFD                     l5332:	
  8497                           
  8498                           ;usb_device.c: 1986: {
  8499                           ;usb_device.c: 1987: *pDst++ = *inPipes[0].pSrc.bRam++;
  8500                           
  8501                           ;usb_device.c: 1988: byteToSend--;
  8502  0BFD  2416  318B         	fcall	PL26	;call to abstracted procedure
  8503  0BFF                     l5340:	
  8504  0BFF  0020               	movlb	0	; select bank0
  8505  0C00  08D8               	movf	USBCtrlTrfTxService@byteToSend,f
  8506  0C01  1903               	btfsc	3,2
  8507  0C02  0008               	return
  8508  0C03  2BFD               	goto	l5332
  8509  0C04                     __end_of_USBCtrlTrfTxService:	
  8510  0C04                     PL24:	
  8511  0C04  0A6F               	incf	_pBDTEntryEP0OutNext,w
  8512  0C05  0086               	movwf	6
  8513  0C06  3008               	movlw	8
  8514  0C07  0187               	clrf	7
  8515  0C08  0081               	movwf	1
  8516  0C09  3040               	movlw	64
  8517  0C0A  00DB               	movwf	??_USBCtrlEPServiceComplete
  8518  0C0B  01DC               	clrf	??_USBCtrlEPServiceComplete+1
  8519  0C0C  086F               	movf	_pBDTEntryEP0OutNext,w
  8520  0C0D  3E02               	addlw	2
  8521  0C0E  0086               	movwf	6
  8522  0C0F  085B               	movf	??_USBCtrlEPServiceComplete,w
  8523  0C10  3FC0               	movwi [0]fsr1
  8524  0C11  085C               	movf	??_USBCtrlEPServiceComplete+1,w
  8525  0C12  3FC1               	movwi [1]fsr1
  8526  0C13  086F               	movf	_pBDTEntryEP0OutNext,w
  8527  0C14  0086               	movwf	6
  8528  0C15  0008               	return
  8529  0C16                     __end_ofPL24:	
  8530  0C16                     PL26:	
  8531  0C16  0022               	movlb	2	; select bank2
  8532  0C17  083F               	movf	_pDst^(0+256),w
  8533  0C18  0086               	movwf	6
  8534  0C19  0187               	clrf	7
  8535  0C1A  0849               	movf	_inPipes^(0+256),w
  8536  0C1B  0084               	movwf	4
  8537  0C1C  084A               	movf	(_inPipes+1)^(0+256),w
  8538  0C1D  0085               	movwf	5
  8539  0C1E  0800               	movf	0,w	;code access
  8540  0C1F  0081               	movwf	1
  8541  0C20  0AC9               	incf	_inPipes^(0+256),f
  8542  0C21  1903               	skipnz
  8543  0C22  0ACA               	incf	(_inPipes+1)^(0+256),f
  8544  0C23  0ABF               	incf	_pDst^(0+256),f
  8545  0C24  0020               	movlb	0	; select bank0
  8546  0C25  03D8               	decf	USBCtrlTrfTxService@byteToSend,f
  8547  0C26  0008               	return
  8548  0C27                     __end_ofPL26:	
  8549  0C27                     PL84:	
  8550  0C27  0086               	movwf	6
  8551  0C28  30C8               	movlw	200
  8552  0C29  0081               	movwf	1
  8553  0C2A  0008               	return
  8554  0C2B                     __end_ofPL84:	
  8555                           
  8556                           	psect	swtext1
  8557  1000                     __pswtext1:	
  8558  1000                     S6232:	
  8559  1000  318C  2C76         	ljmp	l5628
  8560  1002  318C  2C78         	ljmp	l5630
  8561  1004  318C  2C61         	ljmp	l330
  8562  1006  318C  2C78         	ljmp	l5630
  8563  1008  318C  2C61         	ljmp	l330
  8564  100A  318C  2C62         	ljmp	l332
  8565  100C  318C  2C68         	ljmp	l5616
  8566  100E  318C  2C86         	ljmp	l5642
  8567  1010  318C  2C6C         	ljmp	l5620
  8568  1012  318C  2C6A         	ljmp	l5618
  8569  1014  318C  2C79         	ljmp	l5632
  8570  1016  318C  2C7C         	ljmp	l341
  8571  1018  318C  2C61         	ljmp	l330
  8572                           
  8573                           	psect	text1764
  8574  090C                     __ptext1764:	
  8575 ;; *************** function _USBStdSetCfgHandler *****************
  8576 ;; Defined at:
  8577 ;;		line 2132 in file "../USB/usb_device.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  p               2   21[BANK0 ] PTR unsigned char 
  8582 ;;		 -> UEP1(1), 
  8583 ;;  i               1   23[BANK0 ] unsigned char 
  8584 ;;  i               1   24[BANK0 ] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;		None               void
  8587 ;; Registers used:
  8588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : 1D/0
  8591 ;;		On exit  : 1F/1
  8592 ;;		Unchanged: FFFE0/0
  8593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8595 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;Total ram usage:        4 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    8
  8601 ;; This function calls:
  8602 ;;		_memset
  8603 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8604 ;; This function is called by:
  8605 ;;		_USBCheckStdRequest
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _USBStdSetCfgHandler
  8611  090C                     _USBStdSetCfgHandler:	
  8612  090C                     l5426:	
  8613                           ; Regs used in _USBStdSetCfgHandler: [wreg-status,0+pclath+cstack]
  8614                           
  8615                           
  8616                           ;usb_device.c: 2133: BYTE i;
  8617                           ;usb_device.c: 2136: inPipes[0].info.bits.busy = 1;
  8618  090C  0022               	movlb	2	; select bank2
  8619  090D  300E               	movlw	14
  8620  090E  17CB               	bsf	(_inPipes^(0+256)+2),7
  8621                           
  8622                           ;usb_device.c: 2139: { BYTE i; BYTE* p = (BYTE*)&UEP1; for(i=0;i<1;i++) *p++ = 0; };
  8623  090F  0020               	movlb	0	; select bank0
  8624  0910  00E6               	movwf	USBStdSetCfgHandler@p+1
  8625  0911  3099               	movlw	153
  8626  0912  00E5               	movwf	USBStdSetCfgHandler@p
  8627  0913  01E7               	clrf	USBStdSetCfgHandler@i_1089
  8628  0914                     l5434:	
  8629  0914  0865               	movf	USBStdSetCfgHandler@p,w
  8630  0915  0086               	movwf	6
  8631  0916  0866               	movf	USBStdSetCfgHandler@p+1,w
  8632  0917  0087               	movwf	7
  8633  0918  0181               	clrf	1
  8634  0919  0AE5               	incf	USBStdSetCfgHandler@p,f
  8635  091A  1903               	skipnz
  8636  091B  0AE6               	incf	USBStdSetCfgHandler@p+1,f
  8637  091C  0AE7               	incf	USBStdSetCfgHandler@i_1089,f
  8638  091D  1903               	btfsc	3,2
  8639  091E  2914               	goto	l5434
  8640  091F  3020               	movlw	32
  8641                           
  8642                           ;usb_device.c: 2142: memset((void*)&BDT[0], 0x00, sizeof(BDT));
  8643  0920  01D6               	clrf	?_memset
  8644  0921  01D7               	clrf	?_memset+1
  8645  0922  00D8               	movwf	?_memset+2
  8646  0923  01D9               	clrf	?_memset+3
  8647  0924  2161  3189         	fcall	_memset
  8648                           
  8649                           ;usb_device.c: 2145: UCONbits.PPBRST = 1;
  8650  0926  003D               	movlb	29	; select bank29
  8651  0927  170E               	bsf	14,6	;volatile
  8652                           
  8653                           ;usb_device.c: 2150: for(i = 0; i < (BYTE)(1+1u); i++)
  8654  0928  0020               	movlb	0	; select bank0
  8655  0929  01E8               	clrf	USBStdSetCfgHandler@i
  8656  092A                     l5452:	
  8657                           
  8658                           ;usb_device.c: 2151: {
  8659                           ;usb_device.c: 2152: ep_data_in[i].Val = 0u;
  8660  092A  0868               	movf	USBStdSetCfgHandler@i,w
  8661  092B  3E26               	addlw	_ep_data_in& (0+255)
  8662  092C  0086               	movwf	6
  8663  092D  3001               	movlw	1	; select bank2/3
  8664  092E  0087               	movwf	7
  8665  092F  0181               	clrf	1
  8666                           
  8667                           ;usb_device.c: 2153: ep_data_out[i].Val = 0u;
  8668  0930  0868               	movf	USBStdSetCfgHandler@i,w
  8669  0931  3E28               	addlw	_ep_data_out& (0+255)
  8670  0932  0086               	movwf	6
  8671  0933  3002               	movlw	2
  8672  0934  0181               	clrf	1
  8673  0935  0AE8               	incf	USBStdSetCfgHandler@i,f
  8674  0936  0268               	subwf	USBStdSetCfgHandler@i,w
  8675  0937  1C03               	skipc
  8676  0938  292A               	goto	l5452
  8677  0939  30EE               	movlw	_USBAlternateInterface& (0+255)
  8678                           
  8679                           ;usb_device.c: 2154: }
  8680                           ;usb_device.c: 2157: memset((void*)&USBAlternateInterface,0x00,1);
  8681  093A  01D6               	clrf	?_memset
  8682  093B  01D7               	clrf	?_memset+1
  8683  093C  01D8               	clrf	?_memset+2
  8684  093D  0AD8               	incf	?_memset+2,f
  8685  093E  01D9               	clrf	?_memset+3
  8686  093F  2161  3189         	fcall	_memset
  8687                           
  8688                           ;usb_device.c: 2160: UCONbits.PPBRST = 0;
  8689  0941  003D               	movlb	29	; select bank29
  8690  0942  130E               	bcf	14,6	;volatile
  8691                           
  8692                           ;usb_device.c: 2162: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  8693  0943  3028               	movlw	40
  8694  0944  0020               	movlb	0	; select bank0
  8695  0945  00EA               	movwf	_pBDTEntryIn
  8696                           
  8697                           ;usb_device.c: 2165: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
  8698  0946  3020               	movlw	32
  8699  0947  00EE               	movwf	_pBDTEntryEP0OutCurrent
  8700                           
  8701                           ;usb_device.c: 2166: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  8702  0948  00EF               	movwf	_pBDTEntryEP0OutNext
  8703                           
  8704                           ;usb_device.c: 2169: USBActiveConfiguration = SetupPkt.bConfigurationValue;
  8705  0949  0842               	movf	66,w	;volatile
  8706  094A  0021               	movlb	1	; select bank1
  8707  094B  00ED               	movwf	_USBActiveConfiguration^(0+128)
  8708                           
  8709                           ;usb_device.c: 2172: if(USBActiveConfiguration == 0)
  8710  094C  08ED               	movf	_USBActiveConfiguration^(0+128),f
  8711  094D  1D03               	skipz
  8712  094E  2952               	goto	l5474
  8713                           
  8714                           ;usb_device.c: 2173: {
  8715                           ;usb_device.c: 2175: USBDeviceState = ADDRESS_STATE;
  8716  094F  3010               	movlw	16
  8717  0950  00EA               	movwf	_USBDeviceState^(0+128)
  8718                           
  8719                           ;usb_device.c: 2176: }
  8720  0951  0008               	return
  8721  0952                     l5474:	
  8722                           
  8723                           ;usb_device.c: 2177: else
  8724                           ;usb_device.c: 2178: {
  8725                           ;usb_device.c: 2180: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveC
      +                          onfiguration,1);
  8726  0952  0020               	movlb	0	; select bank0
  8727  0953  30ED               	movlw	_USBActiveConfiguration& (0+255)
  8728  0954  01E0               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER
  8729  0955  0AE0               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER,f
  8730  0956  01E1               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+1
  8731  0957  00E2               	movwf	?_USER_USB_CALLBACK_EVENT_HANDLER+2
  8732  0958  01E3               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+3
  8733  0959  0AE3               	incf	?_USER_USB_CALLBACK_EVENT_HANDLER+3,f
  8734  095A  01E4               	clrf	?_USER_USB_CALLBACK_EVENT_HANDLER+4
  8735  095B  318D  25FB         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  8736                           
  8737                           ;usb_device.c: 2185: USBDeviceState = CONFIGURED_STATE;
  8738  095D  3020               	movlw	32
  8739  095E  0021               	movlb	1	; select bank1
  8740  095F  00EA               	movwf	_USBDeviceState^(0+128)
  8741  0960  0008               	return
  8742  0961                     __end_of_USBStdSetCfgHandler:	
  8743  0961                     __ptext1765:	
  8744 ;; *************** function _memset *****************
  8745 ;; Defined at:
  8746 ;;		line 10 in file "../../common/memset.c"
  8747 ;; Parameters:    Size  Location     Type
  8748 ;;  p1              1    wreg     PTR void 
  8749 ;;		 -> USBAlternateInterface(1), BDT(32), 
  8750 ;;  c               2    6[BANK0 ] int 
  8751 ;;  n               2    8[BANK0 ] unsigned int 
  8752 ;; Auto vars:     Size  Location     Type
  8753 ;;  p1              1   10[BANK0 ] PTR void 
  8754 ;;		 -> USBAlternateInterface(1), BDT(32), 
  8755 ;;  p               1   11[BANK0 ] PTR unsigned char 
  8756 ;;		 -> USBAlternateInterface(1), BDT(32), 
  8757 ;; Return value:  Size  Location     Type
  8758 ;;                  1    wreg      PTR void 
  8759 ;; Registers used:
  8760 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8761 ;; Tracked objects:
  8762 ;;		On entry : 1F/0
  8763 ;;		On exit  : 1F/0
  8764 ;;		Unchanged: FFFE0/0
  8765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;Total ram usage:        6 bytes
  8771 ;; Hardware stack levels used:    1
  8772 ;; Hardware stack levels required when called:    4
  8773 ;; This function calls:
  8774 ;;		Nothing
  8775 ;; This function is called by:
  8776 ;;		_USBStdSetCfgHandler
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           
  8781                           ;psect for function _memset
  8782  0961                     _memset:	
  8783                           
  8784                           ; Regs used in _memset: [wreg+fsr1l-status,0]
  8785                           ;memset@p1 stored from wreg
  8786  0961  00DA               	movwf	memset@p1
  8787  0962  00DB               	movwf	memset@p
  8788  0963                     l5484:	
  8789  0963  3001               	movlw	1
  8790  0964  02D8               	subwf	memset@n,f
  8791  0965  3000               	movlw	0
  8792  0966  3BD9               	subwfb	memset@n+1,f
  8793  0967  0A58               	incf	memset@n,w
  8794  0968  1903               	skipnz
  8795  0969  0A59               	incf	memset@n+1,w
  8796  096A  1903               	btfsc	3,2
  8797  096B  0008               	return
  8798  096C  085B               	movf	memset@p,w
  8799  096D  0086               	movwf	6
  8800  096E  0187               	clrf	7
  8801  096F  0856               	movf	memset@c,w
  8802  0970  0081               	movwf	1
  8803  0971  0ADB               	incf	memset@p,f
  8804  0972  2963               	goto	l5484
  8805  0973                     __end_of_memset:	
  8806                           
  8807                           	psect	text1766
  8808  17A2                     __ptext1766:	
  8809 ;; *************** function _USBStdGetDscHandler *****************
  8810 ;; Defined at:
  8811 ;;		line 2207 in file "../USB/usb_device.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;		None
  8816 ;; Return value:  Size  Location     Type
  8817 ;;		None               void
  8818 ;; Registers used:
  8819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  8820 ;; Tracked objects:
  8821 ;;		On entry : 1D/0
  8822 ;;		On exit  : 1D/0
  8823 ;;		Unchanged: FFFE0/0
  8824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;Total ram usage:        2 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    4
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_USBCheckStdRequest
  8836 ;; This function uses a non-reentrant model
  8837 ;;
  8838                           
  8839                           
  8840                           ;psect for function _USBStdGetDscHandler
  8841  17A2                     _USBStdGetDscHandler:	
  8842  17A2                     l5486:	
  8843                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
  8844                           
  8845                           
  8846                           ;usb_device.c: 2208: if(SetupPkt.bmRequestType == 0x80)
  8847  17A2  0020               	movlb	0	; select bank0
  8848  17A3  0840               	movf	64,w	;volatile
  8849  17A4  3A80               	xorlw	128
  8850  17A5  1D03               	skipz
  8851  17A6  0008               	return
  8852                           
  8853                           ;usb_device.c: 2209: {
  8854                           ;usb_device.c: 2210: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
  8855  17A7  30C0               	movlw	192
  8856  17A8  0022               	movlb	2	; select bank2
  8857  17A9  00CB               	movwf	(_inPipes^(0+256)+2)
  8858                           
  8859                           ;usb_device.c: 2212: switch(SetupPkt.bDescriptorType)
  8860  17AA  2FD9               	goto	l5510
  8861  17AB                     l5490:	
  8862                           
  8863                           ;usb_device.c: 2218: inPipes[0].pSrc.bRom = (const BYTE*)&device_dsc;
  8864  17AB  308D               	movlw	low (_device_dsc| (0+32768))
  8865  17AC  0022               	movlb	2	; select bank2
  8866  17AD  00C9               	movwf	_inPipes^(0+256)
  8867  17AE  3088               	movlw	high (_device_dsc| (0+32768))
  8868  17AF  00CA               	movwf	(_inPipes+1)^(0+256)
  8869                           
  8870                           ;usb_device.c: 2220: inPipes[0].wCount.Val = sizeof(device_dsc);
  8871  17B0  3012               	movlw	18
  8872  17B1  00CC               	movwf	(_inPipes^(0+256)+3)
  8873  17B2  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  8874                           
  8875                           ;usb_device.c: 2221: break;
  8876  17B3  0008               	return
  8877  17B4                     l5492:	
  8878                           
  8879                           ;usb_device.c: 2226: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
  8880  17B4  3004               	movlw	low (_USB_CD_Ptr| (0+32768))
  8881  17B5  0084               	movwf	4
  8882  17B6  3088               	movlw	high (_USB_CD_Ptr| (0+32768))
  8883  17B7  27E6  3197         	fcall	PL38	;call to abstracted procedure
  8884                           
  8885                           ;usb_device.c: 2232: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
  8886  17B9  27F9  3197         	fcall	PL74	;call to abstracted procedure
  8887  17BB  3E02               	addlw	2
  8888  17BC  27F1  3197         	fcall	PL52	;call to abstracted procedure
  8889  17BE  00CC               	movwf	(_inPipes^(0+256)+3)
  8890                           
  8891                           ;usb_device.c: 2233: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
  8892  17BF  084A               	movf	(_inPipes+1)^(0+256),w
  8893  17C0  27F9  3197         	fcall	PL74	;call to abstracted procedure
  8894  17C2  3E03               	addlw	3
  8895  17C3  27F1               	fcall	PL52	;call to abstracted procedure
  8896  17C4  00CD               	movwf	(_inPipes^(0+256)+4)
  8897                           
  8898                           ;usb_device.c: 2234: break;
  8899  17C5  0008               	return
  8900  17C6                     l5498:	
  8901                           
  8902                           ;usb_device.c: 2239: if(SetupPkt.bDscIndex<3)
  8903  17C6  3003               	movlw	3
  8904  17C7  0242               	subwf	66,w	;volatile
  8905  17C8  1803               	skipnc
  8906  17C9  2FD6               	goto	l5504
  8907                           
  8908                           ;usb_device.c: 2240: {
  8909                           ;usb_device.c: 2242: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
  8910  17CA  3001               	movlw	low (_USB_SD_Ptr| (0+32768))
  8911  17CB  0084               	movwf	4
  8912  17CC  3088               	movlw	high (_USB_SD_Ptr| (0+32768))
  8913  17CD  27E6               	fcall	PL38	;call to abstracted procedure
  8914                           
  8915                           ;usb_device.c: 2244: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
  8916  17CE  0849               	movf	_inPipes^(0+256),w
  8917  17CF  0084               	movwf	4
  8918  17D0  084A               	movf	(_inPipes+1)^(0+256),w
  8919  17D1  0085               	movwf	5
  8920  17D2  0800               	movf	0,w	;code access
  8921  17D3  00CC               	movwf	(_inPipes^(0+256)+3)
  8922  17D4  01CD               	clrf	((_inPipes+1)^(0+256)+3)
  8923                           
  8924                           ;usb_device.c: 2245: }
  8925  17D5  0008               	return
  8926  17D6                     l5504:	
  8927                           
  8928                           ;usb_device.c: 2255: else
  8929                           ;usb_device.c: 2256: {
  8930                           ;usb_device.c: 2257: inPipes[0].info.Val = 0;
  8931  17D6  0022               	movlb	2	; select bank2
  8932  17D7  01CB               	clrf	(_inPipes^(0+256)+2)
  8933  17D8  0008               	return
  8934  17D9                     l5510:	
  8935  17D9  0020               	movlb	0	; select bank0
  8936  17DA  0843               	movf	67,w	;volatile
  8937                           
  8938                           ; Switch size 1, requested type "space"
  8939                           ; Number of cases is 3, Range of values is 1 to 3
  8940                           ; switch strategies available:
  8941                           ; Name         Instructions Cycles
  8942                           ; simple_byte           10     6 (average)
  8943                           ; direct_byte           15     9 (fixed)
  8944                           ; jumptable            263     9 (fixed)
  8945                           ;	Chosen strategy is simple_byte
  8946  17DB  3A01               	xorlw	1	; case 1
  8947  17DC  1903               	skipnz
  8948  17DD  2FAB               	goto	l5490
  8949  17DE  3A03               	xorlw	3	; case 2
  8950  17DF  1903               	skipnz
  8951  17E0  2FB4               	goto	l5492
  8952  17E1  3A01               	xorlw	1	; case 3
  8953  17E2  1903               	skipnz
  8954  17E3  2FC6               	goto	l5498
  8955  17E4  2FD6               	goto	l5504
  8956  17E5  0008               	return
  8957  17E6                     __end_of_USBStdGetDscHandler:	
  8958  17E6                     PL38:	
  8959  17E6  0085               	movwf	5
  8960  17E7  0842               	movf	66,w	;volatile
  8961  17E8  0784               	addwf	4,f
  8962  17E9  1803               	skipnc
  8963  17EA  0A85               	incf	5,f
  8964  17EB  3F00               	moviw [0]fsr0
  8965  17EC  0022               	movlb	2	; select bank2
  8966  17ED  00C9               	movwf	_inPipes^(0+256)
  8967  17EE  3088               	movlw	(high __stringtab)| (0+128)
  8968  17EF  00CA               	movwf	(_inPipes+1)^(0+256)
  8969  17F0  0008               	return
  8970  17F1                     __end_ofPL38:	
  8971  17F1                     PL52:	
  8972  17F1  0084               	movwf	4
  8973  17F2  0857               	movf	??_USBStdGetDscHandler+1,w
  8974  17F3  1803               	skipnc
  8975  17F4  0A57               	incf	??_USBStdGetDscHandler+1,w
  8976  17F5  0085               	movwf	5
  8977  17F6  0800               	movf	0,w	;code access
  8978  17F7  0022               	movlb	2	; select bank2
  8979  17F8  0008               	return
  8980  17F9                     __end_ofPL52:	
  8981  17F9                     PL74:	
  8982  17F9  0020               	movlb	0	; select bank0
  8983  17FA  00D7               	movwf	??_USBStdGetDscHandler+1
  8984  17FB  0022               	movlb	2	; select bank2
  8985  17FC  0849               	movf	_inPipes^(0+256),w
  8986  17FD  0020               	movlb	0	; select bank0
  8987  17FE  00D6               	movwf	??_USBStdGetDscHandler
  8988  17FF  0008               	return
  8989  1800                     __end_ofPL74:	
  8990                           
  8991                           	psect	text1767
  8992  08C2                     __ptext1767:	
  8993 ;; *************** function _USBStdGetStatusHandler *****************
  8994 ;; Defined at:
  8995 ;;		line 2283 in file "../USB/usb_device.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  p               1    6[BANK0 ] PTR struct __BDT
  9000 ;;		 -> NULL(0), BDT(32), 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;		None               void
  9003 ;; Registers used:
  9004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  9005 ;; Tracked objects:
  9006 ;;		On entry : 1D/0
  9007 ;;		On exit  : 1F/2
  9008 ;;		Unchanged: FFFE0/0
  9009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;Total ram usage:        1 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    4
  9017 ;; This function calls:
  9018 ;;		Nothing
  9019 ;; This function is called by:
  9020 ;;		_USBCheckStdRequest
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _USBStdGetStatusHandler
  9026  08C2                     _USBStdGetStatusHandler:	
  9027  08C2                     l5512:	
  9028                           ; Regs used in _USBStdGetStatusHandler: [wreg-status,0]
  9029                           
  9030                           
  9031                           ;usb_device.c: 2284: CtrlTrfData[0] = 0;
  9032  08C2  0020               	movlb	0	; select bank0
  9033  08C3  01C8               	clrf	72	;volatile
  9034                           
  9035                           ;usb_device.c: 2285: CtrlTrfData[1] = 0;
  9036  08C4  01C9               	clrf	73	;volatile
  9037                           
  9038                           ;usb_device.c: 2287: switch(SetupPkt.Recipient)
  9039  08C5  28EB               	goto	l5530
  9040  08C6                     l271:	
  9041                           ;usb_device.c: 2288: {
  9042                           ;usb_device.c: 2289: case (0x00):
  9043                           
  9044                           
  9045                           ;usb_device.c: 2295: if(1 == 1)
  9046  08C6  0022               	movlb	2	; select bank2
  9047  08C7  17CB               	bsf	(_inPipes^(0+256)+2),7
  9048                           
  9049                           ;usb_device.c: 2296: {
  9050                           ;usb_device.c: 2297: CtrlTrfData[0]|=0x01;
  9051  08C8  0020               	movlb	0	; select bank0
  9052  08C9  1448               	bsf	72,0	;volatile
  9053                           
  9054                           ;usb_device.c: 2298: }
  9055                           ;usb_device.c: 2300: if(RemoteWakeup == TRUE)
  9056  08CA  0022               	movlb	2	; select bank2
  9057  08CB  0B2F               	decfsz	_RemoteWakeup^(0+256),w
  9058  08CC  28F6               	goto	l274
  9059                           
  9060                           ;usb_device.c: 2301: {
  9061                           ;usb_device.c: 2302: CtrlTrfData[0]|=0x02;
  9062  08CD  0020               	movlb	0	; select bank0
  9063  08CE  14C8               	bsf	72,1	;volatile
  9064  08CF  28F6               	goto	l274
  9065  08D0                     l275:	
  9066                           ;usb_device.c: 2305: case (0x01):
  9067                           
  9068                           
  9069                           ;usb_device.c: 2306: inPipes[0].info.bits.busy = 1;
  9070  08D0  0022               	movlb	2	; select bank2
  9071  08D1  17CB               	bsf	(_inPipes^(0+256)+2),7
  9072                           
  9073                           ;usb_device.c: 2307: break;
  9074  08D2  28F6               	goto	l274
  9075  08D3                     l276:	
  9076                           ;usb_device.c: 2308: case (0x02):
  9077                           
  9078                           
  9079                           ;usb_device.c: 2309: inPipes[0].info.bits.busy = 1;
  9080  08D3  0022               	movlb	2	; select bank2
  9081  08D4  17CB               	bsf	(_inPipes^(0+256)+2),7
  9082                           
  9083                           ;usb_device.c: 2313: {
  9084                           ;usb_device.c: 2314: BDT_ENTRY *p;
  9085                           ;usb_device.c: 2316: if(SetupPkt.EPDir == 0)
  9086  08D5  0020               	movlb	0	; select bank0
  9087  08D6  1BC4               	btfsc	68,7	;volatile
  9088  08D7  28DC               	goto	l5520
  9089                           
  9090                           ;usb_device.c: 2317: {
  9091                           ;usb_device.c: 2318: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
  9092  08D8  0844               	movf	68,w	;volatile
  9093  08D9  2106  3188         	fcall	PL64	;call to abstracted procedure
  9094  08DB  28DE               	goto	L5
  9095  08DC                     l5520:	
  9096                           ;usb_device.c: 2319: }
  9097                           
  9098                           
  9099                           ;usb_device.c: 2320: else
  9100                           ;usb_device.c: 2321: {
  9101                           ;usb_device.c: 2322: p = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
  9102  08DC  2100  3188         	fcall	PL60	;call to abstracted procedure
  9103  08DE                     L5:	
  9104  08DE  0801               	movf	1,w
  9105  08DF  00D6               	movwf	USBStdGetStatusHandler@p
  9106                           
  9107                           ;usb_device.c: 2323: }
  9108                           ;usb_device.c: 2325: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1))
  9109  08E0  0086               	movwf	6
  9110  08E1  0187               	clrf	7
  9111  08E2  1F81               	btfss	1,7
  9112  08E3  28F6               	goto	l274
  9113  08E4  0856               	movf	USBStdGetStatusHandler@p,w
  9114  08E5  0086               	movwf	6
  9115  08E6  1D01               	btfss	1,2
  9116  08E7  28F6               	goto	l274
  9117                           
  9118                           ;usb_device.c: 2326: CtrlTrfData[0]=0x01;
  9119  08E8  3001               	movlw	1
  9120  08E9  00C8               	movwf	72	;volatile
  9121  08EA  28F6               	goto	l274
  9122  08EB                     l5530:	
  9123  08EB  0840               	movf	64,w	;volatile
  9124  08EC  391F               	andlw	31
  9125                           
  9126                           ; Switch size 1, requested type "space"
  9127                           ; Number of cases is 3, Range of values is 0 to 2
  9128                           ; switch strategies available:
  9129                           ; Name         Instructions Cycles
  9130                           ; simple_byte           10     6 (average)
  9131                           ; direct_byte           12     6 (fixed)
  9132                           ; jumptable            260     6 (fixed)
  9133                           ; rangetable             7     4 (fixed)
  9134                           ; spacedrange           11     6 (fixed)
  9135                           ; locatedrange           3     3 (fixed)
  9136                           ;	Chosen strategy is simple_byte
  9137  08ED  1903               	skipnz
  9138  08EE  28C6               	goto	l271
  9139  08EF  3A01               	xorlw	1	; case 1
  9140  08F0  1903               	skipnz
  9141  08F1  28D0               	goto	l275
  9142  08F2  3A03               	xorlw	3	; case 2
  9143  08F3  1903               	skipnz
  9144  08F4  28D3               	goto	l276
  9145  08F5  28F6               	goto	l274
  9146  08F6                     l274:	
  9147                           
  9148                           ;usb_device.c: 2331: if(inPipes[0].info.bits.busy == 1)
  9149  08F6  0022               	movlb	2	; select bank2
  9150  08F7  1FCB               	btfss	(_inPipes^(0+256)+2),7
  9151  08F8  0008               	return
  9152                           
  9153                           ;usb_device.c: 2332: {
  9154                           ;usb_device.c: 2333: inPipes[0].pSrc.bRam = (BYTE*)&CtrlTrfData;
  9155  08F9  3048               	movlw	72
  9156  08FA  00C9               	movwf	_inPipes^(0+256)
  9157  08FB  3002               	movlw	2
  9158  08FC  01CA               	clrf	(_inPipes+1)^(0+256)
  9159                           
  9160                           ;usb_device.c: 2334: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
  9161  08FD  144B               	bsf	(_inPipes^(0+256)+2),0
  9162                           
  9163                           ;usb_device.c: 2335: inPipes[0].wCount.v[0] = 2;
  9164  08FE  00CC               	movwf	(_inPipes^(0+256)+3)
  9165  08FF  0008               	return
  9166  0900                     __end_of_USBStdGetStatusHandler:	
  9167  0900                     PL60:	
  9168  0900  0844               	movf	68,w	;volatile
  9169  0901  390F               	andlw	15
  9170  0902  3E6A               	addlw	_pBDTEntryIn& (0+255)
  9171  0903  0086               	movwf	6
  9172  0904  0187               	clrf	7
  9173  0905  0008               	return
  9174  0906                     __end_ofPL60:	
  9175  0906                     PL64:	
  9176  0906  390F               	andlw	15
  9177  0907  3E2A               	addlw	_pBDTEntryOut& (0+255)
  9178  0908  0086               	movwf	6
  9179  0909  3001               	movlw	1	; select bank2/3
  9180  090A  0087               	movwf	7
  9181  090B  0008               	return
  9182  090C                     __end_ofPL64:	
  9183                           
  9184                           	psect	text1781
  9185  09EF                     __ptext1781:	
  9186 ;; *************** function _UserInit *****************
  9187 ;; Defined at:
  9188 ;;		line 170 in file "main.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;		None               void
  9195 ;; Registers used:
  9196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9197 ;; Tracked objects:
  9198 ;;		On entry : 17F/2
  9199 ;;		On exit  : 17F/2
  9200 ;;		Unchanged: FFE80/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;Total ram usage:        0 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    6
  9209 ;; This function calls:
  9210 ;;		_InitTempSensor
  9211 ;;		_InitFAN
  9212 ;;		_InitWorkTick
  9213 ;;		_InitResultRx
  9214 ;;		_DetectAsics
  9215 ;; This function is called by:
  9216 ;;		_InitializeSystem
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           
  9221                           ;psect for function _UserInit
  9222  09EF                     _UserInit:	
  9223                           
  9224                           ;main.c: 171: TRISAbits.TRISA5 = 0; LATAbits.LATA5 = 1;;
  9225                           
  9226                           ; Regs used in _UserInit: [wreg+fsr1l-status,0+pclath+cstack]
  9227  09EF  0021               	movlb	1	; select bank1
  9228  09F0  128C               	bcf	12,5	;volatile
  9229  09F1  0022               	movlb	2	; select bank2
  9230  09F2  168C               	bsf	12,5	;volatile
  9231                           
  9232                           ;main.c: 172: InitTempSensor();
  9233  09F3  2212  3189         	fcall	_InitTempSensor
  9234                           
  9235                           ;main.c: 173: InitFAN();
  9236  09F5  2223  3189         	fcall	_InitFAN
  9237                           
  9238                           ;main.c: 174: InitWorkTick();
  9239  09F7  21FC  3189         	fcall	_InitWorkTick
  9240                           
  9241                           ;main.c: 176: InitResultRx();
  9242  09F9  223B  3189         	fcall	_InitResultRx
  9243                           
  9244                           ;main.c: 177: DetectAsics();
  9245  09FB  2A4C               	ljmp	l5946
  9246  09FC                     __end_of_UserInit:	
  9247  09FC                     __ptext1785:	
  9248 ;; *************** function _InitWorkTick *****************
  9249 ;; Defined at:
  9250 ;;		line 280 in file "klondike.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;		None
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0
  9259 ;; Tracked objects:
  9260 ;;		On entry : 17F/C
  9261 ;;		On exit  : 17F/2
  9262 ;;		Unchanged: FFE80/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        0 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    4
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_UserInit
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _InitWorkTick
  9280  09FC                     _InitWorkTick:	
  9281                           
  9282                           ;klondike.c: 281: TMR0CS = 0;
  9283                           
  9284                           ; Regs used in _InitWorkTick: [wreg+status,2+status,0]
  9285  09FC  0021               	movlb	1	; select bank1
  9286  09FD  1295               	bcf	21,5	;volatile
  9287                           
  9288                           ;klondike.c: 282: OPTION_REGbits.PSA = 0;
  9289  09FE  1195               	bcf	21,3	;volatile
  9290                           
  9291                           ;klondike.c: 283: OPTION_REGbits.PS = 7;
  9292  09FF  3007               	movlw	7
  9293  0A00  0495               	iorwf	21,f	;volatile
  9294                           
  9295                           ;klondike.c: 284: TMR0 = HashTime;
  9296  0A01  0022               	movlb	2	; select bank2
  9297  0A02  084E               	movf	_HashTime^(0+256),w
  9298  0A03  0020               	movlb	0	; select bank0
  9299  0A04  0095               	movwf	21	;volatile
  9300                           
  9301                           ;klondike.c: 287: TRISCbits.TRISC7 = 0;
  9302  0A05  0021               	movlb	1	; select bank1
  9303  0A06  138E               	bcf	14,7	;volatile
  9304                           
  9305                           ;klondike.c: 288: TRISCbits.TRISC6 = 0;
  9306  0A07  130E               	bcf	14,6	;volatile
  9307                           
  9308                           ;klondike.c: 289: TRISCbits.TRISC4 = 0;
  9309  0A08  120E               	bcf	14,4	;volatile
  9310                           
  9311                           ;klondike.c: 290: TRISCbits.TRISC3 = 0;
  9312  0A09  118E               	bcf	14,3	;volatile
  9313                           
  9314                           ;klondike.c: 291: LATC = 0xD8;;
  9315  0A0A  30D8               	movlw	216
  9316  0A0B  0022               	movlb	2	; select bank2
  9317  0A0C  008E               	movwf	14	;volatile
  9318                           
  9319                           ;klondike.c: 292: TRISAbits.TRISA4 = 0;
  9320  0A0D  0021               	movlb	1	; select bank1
  9321  0A0E  120C               	bcf	12,4	;volatile
  9322                           
  9323                           ;klondike.c: 293: LATAbits.LATA4 = 1;
  9324  0A0F  0022               	movlb	2	; select bank2
  9325  0A10  160C               	bsf	12,4	;volatile
  9326  0A11  0008               	return
  9327  0A12                     __end_of_InitWorkTick:	
  9328  0A12                     __ptext1784:	
  9329 ;; *************** function _InitTempSensor *****************
  9330 ;; Defined at:
  9331 ;;		line 267 in file "klondike.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;		None               void
  9338 ;; Registers used:
  9339 ;;		wreg, status,2, status,0
  9340 ;; Tracked objects:
  9341 ;;		On entry : 17F/2
  9342 ;;		On exit  : 17F/1
  9343 ;;		Unchanged: FFE80/0
  9344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;Total ram usage:        0 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    4
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_UserInit
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _InitTempSensor
  9361  0A12                     _InitTempSensor:	
  9362                           
  9363                           ;klondike.c: 268: TRISCbits.TRISC2=1;
  9364                           
  9365                           ; Regs used in _InitTempSensor: [wreg+status,2+status,0]
  9366  0A12  0021               	movlb	1	; select bank1
  9367  0A13  150E               	bsf	14,2	;volatile
  9368                           
  9369                           ;klondike.c: 271: ADCON0bits.CHS = 6;
  9370  0A14  081D               	movf	29,w	;volatile
  9371  0A15  3983               	andlw	-125
  9372  0A16  3818               	iorlw	24
  9373  0A17  009D               	movwf	29	;volatile
  9374                           
  9375                           ;klondike.c: 272: ADCON0bits.ADON = 1;
  9376  0A18  141D               	bsf	29,0	;volatile
  9377                           
  9378                           ;klondike.c: 273: ADCON1bits.ADFM = 0;
  9379  0A19  139E               	bcf	30,7	;volatile
  9380                           
  9381                           ;klondike.c: 274: ADCON1bits.ADCS = 6;
  9382  0A1A  081E               	movf	30,w	;volatile
  9383  0A1B  398F               	andlw	-113
  9384  0A1C  3860               	iorlw	96
  9385  0A1D  009E               	movwf	30	;volatile
  9386                           
  9387                           ;klondike.c: 275: ADCON1bits.ADPREF = 0;
  9388  0A1E  30FC               	movlw	-4
  9389  0A1F  059E               	andwf	30,f	;volatile
  9390                           
  9391                           ;klondike.c: 276: ADCON2bits.TRIGSEL = 0;
  9392  0A20  308F               	movlw	-113
  9393  0A21  059F               	andwf	31,f	;volatile
  9394  0A22  0008               	return
  9395  0A23                     __end_of_InitTempSensor:	
  9396  0A23                     __ptext1783:	
  9397 ;; *************** function _InitFAN *****************
  9398 ;; Defined at:
  9399 ;;		line 247 in file "klondike.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;		None
  9402 ;; Auto vars:     Size  Location     Type
  9403 ;;		None
  9404 ;; Return value:  Size  Location     Type
  9405 ;;		None               void
  9406 ;; Registers used:
  9407 ;;		wreg, status,2, status,0
  9408 ;; Tracked objects:
  9409 ;;		On entry : 17F/1
  9410 ;;		On exit  : 17F/C
  9411 ;;		Unchanged: FFE80/0
  9412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;Total ram usage:        0 bytes
  9418 ;; Hardware stack levels used:    1
  9419 ;; Hardware stack levels required when called:    4
  9420 ;; This function calls:
  9421 ;;		Nothing
  9422 ;; This function is called by:
  9423 ;;		_UserInit
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           
  9428                           ;psect for function _InitFAN
  9429  0A23                     _InitFAN:	
  9430                           
  9431                           ;klondike.c: 248: TRISCbits.TRISC5 = 1;
  9432                           
  9433                           ; Regs used in _InitFAN: [wreg+status,2+status,0]
  9434  0A23  168E               	bsf	14,5	;volatile
  9435                           
  9436                           ;klondike.c: 249: PWM1CON = 0;
  9437  0A24  002C               	movlb	12	; select bank12
  9438  0A25  0193               	clrf	19	;volatile
  9439                           
  9440                           ;klondike.c: 250: PR2 = 0xFF;
  9441  0A26  30FF               	movlw	255
  9442  0A27  0020               	movlb	0	; select bank0
  9443  0A28  009B               	movwf	27	;volatile
  9444                           
  9445                           ;klondike.c: 251: PWM1CON = 0xC0;
  9446  0A29  30C0               	movlw	192
  9447  0A2A  002C               	movlb	12	; select bank12
  9448  0A2B  0093               	movwf	19	;volatile
  9449                           
  9450                           ;klondike.c: 252: PWM1DCH = 230;
  9451  0A2C  30E6               	movlw	230
  9452  0A2D  0092               	movwf	18	;volatile
  9453                           
  9454                           ;klondike.c: 253: PWM1DCL = 0;
  9455  0A2E  0191               	clrf	17	;volatile
  9456                           
  9457                           ;klondike.c: 254: TMR2IF = 0;
  9458  0A2F  0020               	movlb	0	; select bank0
  9459  0A30  1091               	bcf	17,1	;volatile
  9460                           
  9461                           ;klondike.c: 255: T2CONbits.T2CKPS = 1;
  9462  0A31  081C               	movf	28,w	;volatile
  9463  0A32  39FC               	andlw	-4
  9464  0A33  3801               	iorlw	1
  9465  0A34  009C               	movwf	28	;volatile
  9466                           
  9467                           ;klondike.c: 256: TMR2ON = 1;
  9468  0A35  151C               	bsf	28,2	;volatile
  9469                           
  9470                           ;klondike.c: 257: TRISCbits.TRISC5 = 0;
  9471  0A36  0021               	movlb	1	; select bank1
  9472  0A37  128E               	bcf	14,5	;volatile
  9473                           
  9474                           ;klondike.c: 258: PWM1OE=1;
  9475  0A38  002C               	movlb	12	; select bank12
  9476  0A39  1713               	bsf	19,6	;volatile
  9477  0A3A  0008               	return
  9478  0A3B                     __end_of_InitFAN:	
  9479  0A3B                     __ptext1786:	
  9480 ;; *************** function _InitResultRx *****************
  9481 ;; Defined at:
  9482 ;;		line 297 in file "klondike.c"
  9483 ;; Parameters:    Size  Location     Type
  9484 ;;		None
  9485 ;; Auto vars:     Size  Location     Type
  9486 ;;		None
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, status,2
  9491 ;; Tracked objects:
  9492 ;;		On entry : 17F/2
  9493 ;;		On exit  : 17F/3
  9494 ;;		Unchanged: FFE80/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        0 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    4
  9503 ;; This function calls:
  9504 ;;		Nothing
  9505 ;; This function is called by:
  9506 ;;		_UserInit
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _InitResultRx
  9512  0A3B                     _InitResultRx:	
  9513                           
  9514                           ;klondike.c: 298: ResultQC = 0;
  9515                           
  9516                           ; Regs used in _InitResultRx: [wreg+status,2]
  9517  0A3B  01B0               	clrf	_ResultQC^(0+256)
  9518                           
  9519                           ;klondike.c: 299: TXSTAbits.SYNC = 1;
  9520  0A3C  0023               	movlb	3	; select bank3
  9521  0A3D  161E               	bsf	30,4	;volatile
  9522                           
  9523                           ;klondike.c: 300: RCSTAbits.SPEN = 1;
  9524  0A3E  179D               	bsf	29,7	;volatile
  9525                           
  9526                           ;klondike.c: 301: TXSTAbits.CSRC = 0;
  9527  0A3F  139E               	bcf	30,7	;volatile
  9528                           
  9529                           ;klondike.c: 302: BAUDCONbits.SCKP = 0;
  9530  0A40  121F               	bcf	31,4	;volatile
  9531                           
  9532                           ;klondike.c: 303: ANSELBbits.ANSB5 = 0;
  9533  0A41  128D               	bcf	13,5	;volatile
  9534                           
  9535                           ;klondike.c: 305: IOCBPbits.IOCBP7 = 1;
  9536  0A42  0027               	movlb	7	; select bank7
  9537  0A43  1794               	bsf	20,7	;volatile
  9538                           
  9539                           ;klondike.c: 306: INTCONbits.IOCIE = 1;
  9540  0A44  158B               	bsf	11,3	;volatile
  9541                           
  9542                           ;klondike.c: 307: IOCBF = 0;
  9543  0A45  0196               	clrf	22	;volatile
  9544                           
  9545                           ;klondike.c: 309: INTCONbits.GIE = 1;
  9546  0A46  178B               	bsf	11,7	;volatile
  9547                           
  9548                           ;klondike.c: 310: RCSTAbits.CREN = 1;
  9549  0A47  0023               	movlb	3	; select bank3
  9550  0A48  161D               	bsf	29,4	;volatile
  9551                           
  9552                           ;klondike.c: 311: RCREG = 0xFF;
  9553  0A49  30FF               	movlw	255
  9554  0A4A  0099               	movwf	25	;volatile
  9555  0A4B  0008               	return
  9556  0A4C                     __end_of_InitResultRx:	
  9557  0A4C                     __ptext1782:	
  9558 ;; *************** function _DetectAsics *****************
  9559 ;; Defined at:
  9560 ;;		line 144 in file "klondike.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;		None
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  x               1   22[BANK0 ] unsigned char 
  9565 ;; Return value:  Size  Location     Type
  9566 ;;		None               void
  9567 ;; Registers used:
  9568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9569 ;; Tracked objects:
  9570 ;;		On entry : 17F/3
  9571 ;;		On exit  : 17F/2
  9572 ;;		Unchanged: FFE80/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9576 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;Total ram usage:        9 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    5
  9581 ;; This function calls:
  9582 ;;		___awdiv
  9583 ;; This function is called by:
  9584 ;;		_UserInit
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           
  9589                           ;psect for function _DetectAsics
  9590  0A4C                     _DetectAsics:	
  9591  0A4C                     l5946:	
  9592                           ; Regs used in _DetectAsics: [wreg+fsr1l-status,0+pclath+cstack]
  9593                           
  9594                           
  9595                           ;klondike.c: 159: Status.ChipCount = 16;
  9596  0A4C  3010               	movlw	16
  9597  0A4D  0022               	movlb	2	; select bank2
  9598  0A4E  00D0               	movwf	(_Status^(0+256)+1)	;volatile
  9599                           
  9600                           ;klondike.c: 162: BankSize = (Status.ChipCount+1)/2;
  9601  0A4F  3002               	movlw	2
  9602  0A50  0020               	movlb	0	; select bank0
  9603  0A51  00D6               	movwf	?___awdiv
  9604  0A52  01D7               	clrf	?___awdiv+1
  9605  0A53  0022               	movlb	2	; select bank2
  9606  0A54  0850               	movf	(_Status^(0+256)+1),w	;volatile
  9607  0A55  3E01               	addlw	1
  9608  0A56  0020               	movlb	0	; select bank0
  9609  0A57  00D8               	movwf	?___awdiv+2
  9610  0A58  3000               	movlw	0
  9611  0A59  1803               	skipnc
  9612  0A5A  3001               	movlw	1
  9613  0A5B  00D9               	movwf	?___awdiv+3
  9614  0A5C  22C0  3189         	fcall	___awdiv
  9615  0A5E  0856               	movf	?___awdiv,w
  9616  0A5F  0022               	movlb	2	; select bank2
  9617  0A60  00EA               	movwf	_BankSize^(0+256)
  9618                           
  9619                           ;klondike.c: 163: Status.MaxCount = 16384 / BankSize;
  9620  0A61  0020               	movlb	0	; select bank0
  9621  0A62  00D6               	movwf	?___awdiv
  9622  0A63  3040               	movlw	64
  9623  0A64  01D7               	clrf	?___awdiv+1
  9624  0A65  01D8               	clrf	?___awdiv+2
  9625  0A66  00D9               	movwf	?___awdiv+3
  9626  0A67  22C0  3189         	fcall	___awdiv
  9627  0A69  0857               	movf	?___awdiv+1,w
  9628  0A6A  0022               	movlb	2	; select bank2
  9629  0A6B  00DA               	movwf	((_Status+1)^(0+256)+10)	;volatile
  9630  0A6C  0020               	movlb	0	; select bank0
  9631  0A6D  0856               	movf	?___awdiv,w
  9632  0A6E  0022               	movlb	2	; select bank2
  9633  0A6F  00D9               	movwf	(_Status^(0+256)+10)	;volatile
  9634                           
  9635                           ;klondike.c: 164: NonceRanges[0] = 0;
  9636  0A70  0023               	movlb	3	; select bank3
  9637  0A71  01A0               	clrf	_NonceRanges^(0+384)
  9638  0A72  01A1               	clrf	(_NonceRanges+1)^(0+384)
  9639  0A73  01A2               	clrf	(_NonceRanges+2)^(0+384)
  9640  0A74  01A3               	clrf	(_NonceRanges+3)^(0+384)
  9641                           
  9642                           ;klondike.c: 165: for(BYTE x = 1; x < BankSize; x++)
  9643  0A75  0020               	movlb	0	; select bank0
  9644  0A76  01E6               	clrf	DetectAsics@x
  9645  0A77                     l5958:	
  9646  0A77  0AE6               	incf	DetectAsics@x,f
  9647  0A78  0022               	movlb	2	; select bank2
  9648  0A79  086A               	movf	_BankSize^(0+256),w
  9649  0A7A  0020               	movlb	0	; select bank0
  9650  0A7B  0266               	subwf	DetectAsics@x,w
  9651  0A7C  1803               	btfsc	3,0
  9652  0A7D  2ABA               	goto	l5962
  9653                           
  9654                           ;klondike.c: 166: NonceRanges[x] = NonceRanges[x-1] + 2*BankRanges[BankSize-1];
  9655  0A7E  0866               	movf	DetectAsics@x,w
  9656  0A7F  0709               	addwf	9,w
  9657  0A80  0709               	addwf	9,w
  9658  0A81  3E9C               	addlw	(_NonceRanges+252)& (0+255)
  9659  0A82  0086               	movwf	6
  9660  0A83  3001               	movlw	1	; select bank3/4
  9661  0A84  0087               	movwf	7
  9662  0A85  3F40               	moviw [0]fsr1
  9663  0A86  00DE               	movwf	??_DetectAsics
  9664  0A87  3F41               	moviw [1]fsr1
  9665  0A88  00DF               	movwf	??_DetectAsics+1
  9666  0A89  3F42               	moviw [2]fsr1
  9667  0A8A  00E0               	movwf	??_DetectAsics+2
  9668  0A8B  3F43               	moviw [3]fsr1
  9669  0A8C  00E1               	movwf	??_DetectAsics+3
  9670  0A8D  0022               	movlb	2	; select bank2
  9671  0A8E  086A               	movf	_BankSize^(0+256),w
  9672  0A8F  0709               	addwf	9,w
  9673  0A90  0709               	addwf	9,w
  9674  0A91  3E1C               	addlw	(_BankRanges+252)& (0+255)
  9675  0A92  0086               	movwf	6
  9676  0A93  3003               	movlw	3	; select bank6/7
  9677  0A94  0087               	movwf	7
  9678  0A95  3F40               	moviw [0]fsr1
  9679  0A96  0020               	movlb	0	; select bank0
  9680  0A97  00E2               	movwf	??_DetectAsics+4
  9681  0A98  3F41               	moviw [1]fsr1
  9682  0A99  00E3               	movwf	??_DetectAsics+5
  9683  0A9A  3F42               	moviw [2]fsr1
  9684  0A9B  00E4               	movwf	??_DetectAsics+6
  9685  0A9C  3F43               	moviw [3]fsr1
  9686  0A9D  00E5               	movwf	??_DetectAsics+7
  9687  0A9E  35E2               	lslf	??_DetectAsics+4,f
  9688  0A9F  0DE3               	rlf	??_DetectAsics+5,f
  9689  0AA0  0DE4               	rlf	??_DetectAsics+6,f
  9690  0AA1  0DE5               	rlf	??_DetectAsics+7,f
  9691  0AA2  0862               	movf	??_DetectAsics+4,w
  9692  0AA3  07DE               	addwf	??_DetectAsics,f
  9693  0AA4  0863               	movf	??_DetectAsics+5,w
  9694  0AA5  3DDF               	addwfc	??_DetectAsics+1,f
  9695  0AA6  0864               	movf	??_DetectAsics+6,w
  9696  0AA7  3DE0               	addwfc	??_DetectAsics+2,f
  9697  0AA8  0865               	movf	??_DetectAsics+7,w
  9698  0AA9  3DE1               	addwfc	??_DetectAsics+3,f
  9699  0AAA  0866               	movf	DetectAsics@x,w
  9700  0AAB  0709               	addwf	9,w
  9701  0AAC  0709               	addwf	9,w
  9702  0AAD  3EA0               	addlw	_NonceRanges& (0+255)
  9703  0AAE  0086               	movwf	6
  9704  0AAF  3001               	movlw	1	; select bank3/4
  9705  0AB0  0087               	movwf	7
  9706  0AB1  085E               	movf	??_DetectAsics,w
  9707  0AB2  3FC0               	movwi [0]fsr1
  9708  0AB3  085F               	movf	??_DetectAsics+1,w
  9709  0AB4  3FC1               	movwi [1]fsr1
  9710  0AB5  0860               	movf	??_DetectAsics+2,w
  9711  0AB6  3FC2               	movwi [2]fsr1
  9712  0AB7  0861               	movf	??_DetectAsics+3,w
  9713  0AB8  3FC3               	movwi [3]fsr1
  9714  0AB9  2A77               	goto	l5958
  9715  0ABA                     l5962:	
  9716                           
  9717                           ;klondike.c: 167: Status.State ='R';
  9718  0ABA  3052               	movlw	82
  9719  0ABB  0022               	movlb	2	; select bank2
  9720  0ABC  00CF               	movwf	_Status^(0+256)	;volatile
  9721                           
  9722                           ;klondike.c: 168: Status.HashCount = 0;
  9723  0ABD  01D7               	clrf	(_Status^(0+256)+8)	;volatile
  9724  0ABE  01D8               	clrf	((_Status+1)^(0+256)+8)	;volatile
  9725  0ABF  0008               	return
  9726  0AC0                     __end_of_DetectAsics:	
  9727  0AC0                     __ptext1799:	
  9728 ;; *************** function ___awdiv *****************
  9729 ;; Defined at:
  9730 ;;		line 5 in file "/opt/microchip/xc8/v1.12/sources/awdiv.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;  divisor         2    6[BANK0 ] int 
  9733 ;;  dividend        2    8[BANK0 ] int 
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;  quotient        2   12[BANK0 ] int 
  9736 ;;  sign            1   11[BANK0 ] unsigned char 
  9737 ;;  counter         1   10[BANK0 ] unsigned char 
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  2    6[BANK0 ] int 
  9740 ;; Registers used:
  9741 ;;		wreg, status,2, status,0
  9742 ;; Tracked objects:
  9743 ;;		On entry : 17F/0
  9744 ;;		On exit  : 17F/0
  9745 ;;		Unchanged: FFE80/0
  9746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9747 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;Total ram usage:        8 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; Hardware stack levels required when called:    4
  9754 ;; This function calls:
  9755 ;;		Nothing
  9756 ;; This function is called by:
  9757 ;;		_DetectAsics
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function ___awdiv
  9763  0AC0                     ___awdiv:	
  9764                           
  9765                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9766  0AC0  01DB               	clrf	___awdiv@sign
  9767  0AC1  1FD7               	btfss	___awdiv@divisor+1,7
  9768  0AC2  2ACA               	goto	l4666
  9769  0AC3  09D6               	comf	___awdiv@divisor,f
  9770  0AC4  09D7               	comf	___awdiv@divisor+1,f
  9771  0AC5  0AD6               	incf	___awdiv@divisor,f
  9772  0AC6  1903               	skipnz
  9773  0AC7  0AD7               	incf	___awdiv@divisor+1,f
  9774  0AC8  01DB               	clrf	___awdiv@sign
  9775  0AC9  0ADB               	incf	___awdiv@sign,f
  9776  0ACA                     l4666:	
  9777  0ACA  1FD9               	btfss	___awdiv@dividend+1,7
  9778  0ACB  2AD3               	goto	l4672
  9779  0ACC  09D8               	comf	___awdiv@dividend,f
  9780  0ACD  09D9               	comf	___awdiv@dividend+1,f
  9781  0ACE  0AD8               	incf	___awdiv@dividend,f
  9782  0ACF  1903               	skipnz
  9783  0AD0  0AD9               	incf	___awdiv@dividend+1,f
  9784  0AD1  3001               	movlw	1
  9785  0AD2  06DB               	xorwf	___awdiv@sign,f
  9786  0AD3                     l4672:	
  9787  0AD3  01DC               	clrf	___awdiv@quotient
  9788  0AD4  01DD               	clrf	___awdiv@quotient+1
  9789  0AD5  0857               	movf	___awdiv@divisor+1,w
  9790  0AD6  0456               	iorwf	___awdiv@divisor,w
  9791  0AD7  1903               	skipnz
  9792  0AD8  2AF3               	goto	l4694
  9793  0AD9  01DA               	clrf	___awdiv@counter
  9794  0ADA                     L22:	
  9795  0ADA  0ADA               	incf	___awdiv@counter,f
  9796  0ADB  1BD7               	btfsc	___awdiv@divisor+1,7
  9797  0ADC  2AE0               	goto	l4682
  9798  0ADD  35D6               	lslf	___awdiv@divisor,f
  9799  0ADE  0DD7               	rlf	___awdiv@divisor+1,f
  9800  0ADF  2ADA               	goto	L22
  9801  0AE0                     l4682:	
  9802  0AE0  35DC               	lslf	___awdiv@quotient,f
  9803  0AE1  0DDD               	rlf	___awdiv@quotient+1,f
  9804  0AE2  0857               	movf	___awdiv@divisor+1,w
  9805  0AE3  0259               	subwf	___awdiv@dividend+1,w
  9806  0AE4  1D03               	skipz
  9807  0AE5  2AE8               	goto	u3315
  9808  0AE6  0856               	movf	___awdiv@divisor,w
  9809  0AE7  0258               	subwf	___awdiv@dividend,w
  9810  0AE8                     u3315:	
  9811  0AE8  1C03               	skipc
  9812  0AE9  2AEF               	goto	l4690
  9813  0AEA  0856               	movf	___awdiv@divisor,w
  9814  0AEB  02D8               	subwf	___awdiv@dividend,f
  9815  0AEC  0857               	movf	___awdiv@divisor+1,w
  9816  0AED  3BD9               	subwfb	___awdiv@dividend+1,f
  9817  0AEE  145C               	bsf	___awdiv@quotient,0
  9818  0AEF                     l4690:	
  9819  0AEF  36D7               	lsrf	___awdiv@divisor+1,f
  9820  0AF0  0CD6               	rrf	___awdiv@divisor,f
  9821  0AF1  0BDA               	decfsz	___awdiv@counter,f
  9822  0AF2  2AE0               	goto	l4682
  9823  0AF3                     l4694:	
  9824  0AF3  085B               	movf	___awdiv@sign,w
  9825  0AF4  1903               	btfsc	3,2
  9826  0AF5  2AFB               	goto	l4698
  9827  0AF6  09DC               	comf	___awdiv@quotient,f
  9828  0AF7  09DD               	comf	___awdiv@quotient+1,f
  9829  0AF8  0ADC               	incf	___awdiv@quotient,f
  9830  0AF9  1903               	skipnz
  9831  0AFA  0ADD               	incf	___awdiv@quotient+1,f
  9832  0AFB                     l4698:	
  9833  0AFB  085D               	movf	___awdiv@quotient+1,w
  9834  0AFC  00D7               	movwf	?___awdiv+1
  9835  0AFD  085C               	movf	___awdiv@quotient,w
  9836  0AFE  00D6               	movwf	?___awdiv
  9837  0AFF  0008               	return
  9838  0B00                     __end_of___awdiv:	
  9839                           
  9840                           	psect	intentry
  9841  0004                     __pintentry:	
  9842 ;; *************** function _ISRCode *****************
  9843 ;; Defined at:
  9844 ;;		line 70 in file "main.c"
  9845 ;; Parameters:    Size  Location     Type
  9846 ;;		None
  9847 ;; Auto vars:     Size  Location     Type
  9848 ;;		None
  9849 ;; Return value:  Size  Location     Type
  9850 ;;		None               void
  9851 ;; Registers used:
  9852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9853 ;; Tracked objects:
  9854 ;;		On entry : 0/0
  9855 ;;		On exit  : 1F/0
  9856 ;;		Unchanged: FFE00/0
  9857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9860 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;Total ram usage:        1 bytes
  9863 ;; Hardware stack levels used:    1
  9864 ;; Hardware stack levels required when called:    3
  9865 ;; This function calls:
  9866 ;;		_ResultRx
  9867 ;; This function is called by:
  9868 ;;		Interrupt level 1
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872  0004                     _ISRCode:	
  9873                           
  9874                           ; Regs used in _ISRCode: [allreg]
  9875  0004  3180               	pagesel	$
  9876  0005  0020               	movlb	0	; select bank0
  9877  0006  087F               	movf	127,w
  9878  0007  00FD               	movwf	??_ISRCode
  9879                           
  9880                           ;main.c: 72: if(IOCBF)
  9881  0008  0027               	movlb	7	; select bank7
  9882  0009  0816               	movf	22,w	;volatile
  9883  000A  1903               	btfsc	3,2
  9884  000B  280E               	goto	i1l827
  9885                           
  9886                           ;main.c: 73: ResultRx();
  9887  000C  3187  271E         	fcall	_ResultRx
  9888  000E                     i1l827:	
  9889  000E  087D               	movf	??_ISRCode,w
  9890  000F  0020               	movlb	0	; select bank0
  9891  0010  00FF               	movwf	127
  9892  0011  0009               	retfie
  9893  0012                     __end_of_ISRCode:	
  9894                           
  9895                           	psect	text1803
  9896  071E                     __ptext1803:	
  9897 ;; *************** function _ResultRx *****************
  9898 ;; Defined at:
  9899 ;;		line 202 in file "klondike.c"
  9900 ;; Parameters:    Size  Location     Type
  9901 ;;		None
  9902 ;; Auto vars:     Size  Location     Type
  9903 ;;  TimeOut         1   12[COMMON] unsigned char 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;		None               void
  9906 ;; Registers used:
  9907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
  9908 ;; Tracked objects:
  9909 ;;		On entry : 1F/7
  9910 ;;		On exit  : 1F/7
  9911 ;;		Unchanged: FFE00/0
  9912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;Total ram usage:        1 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    2
  9920 ;; This function calls:
  9921 ;;		i1_SendCmdReply
  9922 ;; This function is called by:
  9923 ;;		_ISRCode
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           
  9928                           ;psect for function _ResultRx
  9929  071E                     _ResultRx:	
  9930                           
  9931                           ;klondike.c: 203: BYTE TimeOut = 0;
  9932                           
  9933                           ; Regs used in _ResultRx: [allreg]
  9934  071E  01FC               	clrf	ResultRx@TimeOut
  9935                           
  9936                           ;klondike.c: 204: ResultQC = 0;
  9937  071F  0022               	movlb	2	; select bank2
  9938  0720  01B0               	clrf	_ResultQC^(0+256)
  9939  0721                     i1l6144:	
  9940                           ;klondike.c: 205: while(ResultQC < 4) {
  9941                           
  9942  0721  3004               	movlw	4
  9943  0722  0022               	movlb	2	; select bank2
  9944  0723  0230               	subwf	_ResultQC^(0+256),w
  9945  0724  1803               	btfsc	3,0
  9946  0725  2F48               	goto	i1l6146
  9947                           
  9948                           ;klondike.c: 207: if(RCIF) {
  9949  0726  0020               	movlb	0	; select bank0
  9950  0727  1E91               	btfss	17,5	;volatile
  9951  0728  2F35               	goto	i1l6134
  9952                           
  9953                           ;klondike.c: 208: ResultQue[2+ResultQC++] = RCREG;
  9954  0729  0022               	movlb	2	; select bank2
  9955  072A  0830               	movf	_ResultQC^(0+256),w
  9956  072B  3E43               	addlw	(_ResultQue+2)& (0+255)
  9957  072C  0086               	movwf	6
  9958  072D  3001               	movlw	1	; select bank2/3
  9959  072E  0087               	movwf	7
  9960  072F  0023               	movlb	3	; select bank3
  9961  0730  0819               	movf	25,w	;volatile
  9962  0731  0081               	movwf	1
  9963  0732  0022               	movlb	2	; select bank2
  9964  0733  0AB0               	incf	_ResultQC^(0+256),f
  9965                           
  9966                           ;klondike.c: 209: TimeOut = 0;
  9967  0734  01FC               	clrf	ResultRx@TimeOut
  9968  0735                     i1l6134:	
  9969                           
  9970                           ;klondike.c: 210: }
  9971                           ;klondike.c: 211: if(TimeOut++ > 32 ) {
  9972  0735  3022               	movlw	34
  9973  0736  0AFC               	incf	ResultRx@TimeOut,f
  9974  0737  027C               	subwf	ResultRx@TimeOut,w
  9975  0738  1C03               	skipc
  9976  0739  2F3D               	goto	i1l724
  9977                           
  9978                           ;klondike.c: 212: Status.Noise++;
  9979  073A  0022               	movlb	2	; select bank2
  9980  073B  0ADB               	incf	(_Status^(0+256)+12),f	;volatile
  9981                           
  9982                           ;klondike.c: 213: goto outrx;
  9983  073C  2F5B               	goto	i1l6152
  9984  073D                     i1l724:	
  9985                           
  9986                           ;klondike.c: 214: }
  9987                           ;klondike.c: 216: if(RCSTAbits.OERR) {
  9988  073D  0023               	movlb	3	; select bank3
  9989  073E  1C9D               	btfss	29,1	;volatile
  9990  073F  2F21               	goto	i1l6144
  9991                           
  9992                           ;klondike.c: 217: if(Status.State == 'W')
  9993  0740  0022               	movlb	2	; select bank2
  9994  0741  084F               	movf	_Status^(0+256),w	;volatile
  9995  0742  3A57               	xorlw	87
  9996  0743  1903               	btfsc	3,2
  9997                           
  9998                           ;klondike.c: 218: Status.ErrorCount++;
  9999  0744  0AD6               	incf	(_Status^(0+256)+7),f	;volatile
 10000                           
 10001                           ;klondike.c: 219: RCSTAbits.SPEN = 0;
 10002  0745  0023               	movlb	3	; select bank3
 10003  0746  139D               	bcf	29,7	;volatile
 10004                           
 10005                           ;klondike.c: 220: goto outrx;
 10006  0747  2F5B               	goto	i1l6152
 10007  0748                     i1l6146:	
 10008                           
 10009                           ;klondike.c: 221: }
 10010                           ;klondike.c: 222: }
 10011                           ;klondike.c: 224: if(Status.State == 'W') {
 10012  0748  084F               	movf	_Status^(0+256),w	;volatile
 10013  0749  3A57               	xorlw	87
 10014  074A  1D03               	skipz
 10015  074B  2F5B               	goto	i1l6152
 10016                           
 10017                           ;klondike.c: 225: ResultQue[0] = '=';
 10018  074C  303D               	movlw	61
 10019  074D  00C1               	movwf	_ResultQue^(0+256)	;volatile
 10020                           
 10021                           ;klondike.c: 226: ResultQue[1] = Status.WorkID;
 10022  074E  0853               	movf	(_Status^(0+256)+4),w	;volatile
 10023  074F  00C2               	movwf	(_ResultQue^(0+256)+1)	;volatile
 10024                           
 10025                           ;klondike.c: 227: SendCmdReply(&ResultQue, &ResultQue+1, sizeof(ResultQue)-1);
 10026  0750  3041               	movlw	_ResultQue& (0+255)
 10027  0751  00F6               	movwf	?i1_SendCmdReply
 10028  0752  3001               	movlw	1
 10029  0753  00F7               	movwf	?i1_SendCmdReply+1
 10030  0754  3042               	movlw	(_ResultQue+1)& (0+255)
 10031  0755  00F8               	movwf	?i1_SendCmdReply+2
 10032  0756  3001               	movlw	1
 10033  0757  00F9               	movwf	?i1_SendCmdReply+3
 10034  0758  3007               	movlw	7
 10035  0759  00FA               	movwf	?i1_SendCmdReply+4
 10036  075A  2761               	fcall	i1_SendCmdReply
 10037  075B                     i1l6152:	
 10038                           
 10039                           ;klondike.c: 230: RCSTAbits.SPEN = 0; RCSTAbits.SPEN = 1;
 10040  075B  0023               	movlb	3	; select bank3
 10041  075C  139D               	bcf	29,7	;volatile
 10042  075D  179D               	bsf	29,7	;volatile
 10043                           
 10044                           ;klondike.c: 231: IOCBF = 0;
 10045  075E  0027               	movlb	7	; select bank7
 10046  075F  0196               	clrf	22	;volatile
 10047  0760  0008               	return
 10048  0761                     __end_of_ResultRx:	
 10049  0761                     __ptext1804:	
 10050 ;; *************** function i1_SendCmdReply *****************
 10051 ;; Defined at:
 10052 ;;		line 208 in file "main.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  SendCmdReply    2    6[COMMON] PTR unsigned char 
 10055 ;;		 -> ResultQue(8), OUTPacket(64), 
 10056 ;;  SendCmdReply    2    8[COMMON] PTR unsigned char 
 10057 ;;		 -> ResultQue(8), Cfg(6), ID(12), Status(13), 
 10058 ;;  SendCmdReply    1   10[COMMON] unsigned char 
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;  SendCmdReply    1   11[COMMON] unsigned char 
 10061 ;; Return value:  Size  Location     Type
 10062 ;;		None               void
 10063 ;; Registers used:
 10064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
 10065 ;; Tracked objects:
 10066 ;;		On entry : 1F/2
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: FFE00/0
 10069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10070 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Totals:         6       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;Total ram usage:       12 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    1
 10077 ;; This function calls:
 10078 ;;		i1___wmul
 10079 ;;		i1___bmul
 10080 ;; This function is called by:
 10081 ;;		_ResultRx
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           
 10086                           ;psect for function i1_SendCmdReply
 10087  0761                     i1_SendCmdReply:	
 10088                           
 10089                           ;main.c: 209: if(WQI*15 + count + 2 < 64) {
 10090                           
 10091                           ; Regs used in i1_SendCmdReply: [allreg]
 10092  0761  087A               	movf	i1SendCmdReply@count,w
 10093  0762  0020               	movlb	0	; select bank0
 10094  0763  00D0               	movwf	??i1_SendCmdReply
 10095  0764  01D1               	clrf	??i1_SendCmdReply+1
 10096  0765  0022               	movlb	2	; select bank2
 10097  0766  083A               	movf	_WQI^(0+256),w
 10098  0767  00F0               	movwf	?i1___wmul
 10099  0768  300F               	movlw	15
 10100  0769  01F1               	clrf	?i1___wmul+1
 10101  076A  00F2               	movwf	?i1___wmul+2
 10102  076B  01F3               	clrf	?i1___wmul+3
 10103  076C  27D5  3187         	fcall	i1___wmul
 10104  076E  0020               	movlb	0	; select bank0
 10105  076F  0850               	movf	??i1_SendCmdReply,w
 10106  0770  0770               	addwf	?i1___wmul,w
 10107  0771  00D2               	movwf	??i1_SendCmdReply+2
 10108  0772  0851               	movf	??i1_SendCmdReply+1,w
 10109  0773  3D71               	addwfc	?i1___wmul+1,w
 10110  0774  00D3               	movwf	??i1_SendCmdReply+3
 10111  0775  0852               	movf	??i1_SendCmdReply+2,w
 10112  0776  3E02               	addlw	2
 10113  0777  00D4               	movwf	??i1_SendCmdReply+4
 10114  0778  3000               	movlw	0
 10115  0779  3D53               	addwfc	??i1_SendCmdReply+3,w
 10116  077A  00D5               	movwf	??i1_SendCmdReply+5
 10117  077B  3A80               	xorlw	128
 10118  077C  00FF               	movwf	127
 10119  077D  3080               	movlw	128
 10120  077E  027F               	subwf	127,w
 10121  077F  1D03               	skipz
 10122  0780  2F83               	goto	u494_25
 10123  0781  3040               	movlw	64
 10124  0782  0254               	subwf	??i1_SendCmdReply+4,w
 10125  0783                     u494_25:	
 10126  0783  1803               	skipnc
 10127  0784  0008               	return
 10128                           
 10129                           ;main.c: 210: INPacket[WQI*15] = cmd[0];
 10130  0785  300F               	movlw	15
 10131  0786  00F0               	movwf	?i1___bmul
 10132  0787  0022               	movlb	2	; select bank2
 10133  0788  083A               	movf	_WQI^(0+256),w
 10134  0789  27C9  3187         	fcall	i1___bmul
 10135  078B  3E20               	addlw	32
 10136  078C  0086               	movwf	6
 10137  078D  3002               	movlw	2	; select bank4/5
 10138  078E  0087               	movwf	7
 10139  078F  0876               	movf	i1SendCmdReply@cmd,w
 10140  0790  0084               	movwf	4
 10141  0791  0877               	movf	i1SendCmdReply@cmd+1,w
 10142  0792  0085               	movwf	5
 10143  0793  0800               	movf	0,w
 10144  0794  0081               	movwf	1
 10145                           
 10146                           ;main.c: 211: INPacket[WQI*15 + 1] = SlaveAddress;
 10147  0795  300F               	movlw	15
 10148  0796  00F0               	movwf	?i1___bmul
 10149  0797  083A               	movf	_WQI^(0+256),w
 10150  0798  27C9  3187         	fcall	i1___bmul
 10151  079A  3E21               	addlw	33
 10152  079B  0086               	movwf	6
 10153  079C  3002               	movlw	2	; select bank4/5
 10154  079D  0087               	movwf	7
 10155  079E  0831               	movf	_SlaveAddress^(0+256),w
 10156  079F  0081               	movwf	1
 10157                           
 10158                           ;main.c: 212: for(BYTE n=0; n < count; n++)
 10159  07A0  01FB               	clrf	i1SendCmdReply@n
 10160  07A1                     i1l6120:	
 10161  07A1  087A               	movf	i1SendCmdReply@count,w
 10162  07A2  027B               	subwf	i1SendCmdReply@n,w
 10163  07A3  1803               	btfsc	3,0
 10164  07A4  2FC4               	goto	i1l6122
 10165                           
 10166                           ;main.c: 213: INPacket[WQI*15 + n + 2] = data[n];
 10167  07A5  300F               	movlw	15
 10168  07A6  00F0               	movwf	?i1___bmul
 10169  07A7  0022               	movlb	2	; select bank2
 10170  07A8  083A               	movf	_WQI^(0+256),w
 10171  07A9  27C9  3187         	fcall	i1___bmul
 10172  07AB  0020               	movlb	0	; select bank0
 10173  07AC  00D0               	movwf	??i1_SendCmdReply
 10174  07AD  3E22               	addlw	34
 10175  07AE  00D1               	movwf	??i1_SendCmdReply+1
 10176  07AF  087B               	movf	i1SendCmdReply@n,w
 10177  07B0  0751               	addwf	??i1_SendCmdReply+1,w
 10178  07B1  00D2               	movwf	??i1_SendCmdReply+2
 10179  07B2  0086               	movwf	6
 10180  07B3  3002               	movlw	2	; select bank4/5
 10181  07B4  0087               	movwf	7
 10182  07B5  0879               	movf	i1SendCmdReply@data+1,w
 10183  07B6  00D4               	movwf	??i1_SendCmdReply+4
 10184  07B7  0878               	movf	i1SendCmdReply@data,w
 10185  07B8  00D3               	movwf	??i1_SendCmdReply+3
 10186  07B9  087B               	movf	i1SendCmdReply@n,w
 10187  07BA  0753               	addwf	??i1_SendCmdReply+3,w
 10188  07BB  0084               	movwf	4
 10189  07BC  0854               	movf	??i1_SendCmdReply+4,w
 10190  07BD  1803               	skipnc
 10191  07BE  0A54               	incf	??i1_SendCmdReply+4,w
 10192  07BF  0085               	movwf	5
 10193  07C0  0800               	movf	0,w	;code access
 10194  07C1  0081               	movwf	1
 10195  07C2  0AFB               	incf	i1SendCmdReply@n,f
 10196  07C3  2FA1               	goto	i1l6120
 10197  07C4                     i1l6122:	
 10198                           
 10199                           ;main.c: 214: WQI = (WQI+1) & 3;
 10200  07C4  0022               	movlb	2	; select bank2
 10201  07C5  3003               	movlw	3
 10202  07C6  0ABA               	incf	_WQI^(0+256),f
 10203  07C7  05BA               	andwf	_WQI^(0+256),f
 10204  07C8  0008               	return
 10205  07C9                     __end_ofi1_SendCmdReply:	
 10206  07C9                     __ptext1806:	
 10207 ;; *************** function i1___bmul *****************
 10208 ;; Defined at:
 10209 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/bmul.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;  __bmul          1    wreg     unsigned char 
 10212 ;;  __bmul          1    0[COMMON] unsigned char 
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;  __bmul          1    1[COMMON] unsigned char 
 10215 ;;  __bmul          1    2[COMMON] unsigned char 
 10216 ;; Return value:  Size  Location     Type
 10217 ;;                  1    wreg      unsigned char 
 10218 ;; Registers used:
 10219 ;;		wreg, status,2, status,0
 10220 ;; Tracked objects:
 10221 ;;		On entry : 1F/2
 10222 ;;		On exit  : 1F/2
 10223 ;;		Unchanged: FFFE0/0
 10224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;Total ram usage:        3 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; This function calls:
 10232 ;;		Nothing
 10233 ;; This function is called by:
 10234 ;;		i1_SendCmdReply
 10235 ;; This function uses a non-reentrant model
 10236 ;;
 10237                           
 10238                           
 10239                           ;psect for function i1___bmul
 10240  07C9                     i1___bmul:	
 10241                           
 10242                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 10243                           ;i1___bmul@multiplier stored from wreg
 10244  07C9  00F1               	movwf	i1___bmul@multiplier
 10245  07CA  01F2               	clrf	i1___bmul@product
 10246  07CB                     i1l4720:	
 10247  07CB  0870               	movf	i1___bmul@multiplicand,w
 10248  07CC  1871               	btfsc	i1___bmul@multiplier,0
 10249  07CD  07F2               	addwf	i1___bmul@product,f
 10250  07CE  35F0               	lslf	i1___bmul@multiplicand,f
 10251  07CF  36F1               	lsrf	i1___bmul@multiplier,f
 10252  07D0  08F1               	movf	i1___bmul@multiplier,f
 10253  07D1  1D03               	skipz
 10254  07D2  2FCB               	goto	i1l4720
 10255  07D3  0872               	movf	i1___bmul@product,w
 10256  07D4  0008               	return
 10257  07D5                     __end_ofi1___bmul:	
 10258  07D5                     __ptext1805:	
 10259 ;; *************** function i1___wmul *****************
 10260 ;; Defined at:
 10261 ;;		line 3 in file "/opt/microchip/xc8/v1.12/sources/wmul.c"
 10262 ;; Parameters:    Size  Location     Type
 10263 ;;  __wmul          2    0[COMMON] unsigned int 
 10264 ;;  __wmul          2    2[COMMON] unsigned int 
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;  __wmul          2    4[COMMON] unsigned int 
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  2    0[COMMON] unsigned int 
 10269 ;; Registers used:
 10270 ;;		wreg, status,2, status,0
 10271 ;; Tracked objects:
 10272 ;;		On entry : 1F/2
 10273 ;;		On exit  : 1F/2
 10274 ;;		Unchanged: FFFE0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        6 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		i1_SendCmdReply
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function i1___wmul
 10291  07D5                     i1___wmul:	
 10292                           
 10293                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10294  07D5  01F4               	clrf	i1___wmul@product
 10295  07D6  01F5               	clrf	i1___wmul@product+1
 10296  07D7                     i1l6094:	
 10297  07D7  1C70               	btfss	i1___wmul@multiplier,0
 10298  07D8  2FDD               	goto	i1l6098
 10299  07D9  0872               	movf	i1___wmul@multiplicand,w
 10300  07DA  07F4               	addwf	i1___wmul@product,f
 10301  07DB  0873               	movf	i1___wmul@multiplicand+1,w
 10302  07DC  3DF5               	addwfc	i1___wmul@product+1,f
 10303  07DD                     i1l6098:	
 10304  07DD  35F2               	lslf	i1___wmul@multiplicand,f
 10305  07DE  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10306  07DF  36F1               	lsrf	i1___wmul@multiplier+1,f
 10307  07E0  0CF0               	rrf	i1___wmul@multiplier,f
 10308  07E1  0871               	movf	i1___wmul@multiplier+1,w
 10309  07E2  0470               	iorwf	i1___wmul@multiplier,w
 10310  07E3  1D03               	skipz
 10311  07E4  2FD7               	goto	i1l6094
 10312  07E5  0875               	movf	i1___wmul@product+1,w
 10313  07E6  00F1               	movwf	?i1___wmul+1
 10314  07E7  0874               	movf	i1___wmul@product,w
 10315  07E8  00F0               	movwf	?i1___wmul
 10316  07E9  0008               	return
 10317  07EA                     __end_ofi1___wmul:	
 10318                           
 10319                           	psect	text1807
 10320  0000                     __ptext1807:	
 10321                           
 10322                           ;psect for function i1___bmul
 10323  007E                     btemp	set	126	;btemp
 10324  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    174
    Data        72
    BSS         114
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     26      32
    BANK1            80     74      80
    BANK2            80      0      75
    BANK3            80      0      68
    BANK4            16      0       0
    BANK5            16      0       0
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           28      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_rotate	unsigned long  size(1) Largest target is 0

    ?_memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    ?_USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(1) Largest target is 32
		 -> USTATcopy(BANK1[1]), USBActiveConfiguration(BANK1[1]), NULL(NULL[0]), BDT(BANK0[32]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    SendCmdReply@data	PTR unsigned char  size(2) Largest target is 13
		 -> ResultQue(BANK2[8]), Cfg(BANK2[6]), ID(CODE[12]), Status(BANK2[13]), 

    SendCmdReply@cmd	PTR unsigned char  size(2) Largest target is 64
		 -> ResultQue(BANK2[8]), OUTPacket(BANK5[64]), 

    USBGenericInHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBGenericOutHandle	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    ProcessCmd@cmd	PTR unsigned char  size(1) Largest target is 64
		 -> OUTPacket(BANK5[64]), 

    I2CInBuf	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    AsicPreCalc@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    SendAsicData@work	PTR struct _worktask size(2) Largest target is 180
		 -> WorkQue(BIGRAM[180]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(1) Largest target is 52
		 -> sd002(CODE[52]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(1) Largest target is 32
		 -> configDescriptor1(CODE[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> USBAlternateInterface(BANK1[1]), BDT(BANK0[32]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 

    pDst	PTR unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@data	PTR unsigned char  size(1) Largest target is 64
		 -> INPacket(BANK4[64]), OUTPacket(BANK5[64]), 

    sp__USBTransferOnePacket	PTR void  size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(BITSFR29[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(1) Largest target is 32
		 -> NULL(NULL[0]), BDT(BANK0[32]), 

    S118$pFunc	PTR FTN()void  size(1) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(1) Largest target is 0

    S108$wRam	PTR unsigned short  size(1) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned short  size(1) Largest target is 0

    S108$bRam	PTR unsigned char  size(1) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(1) Largest target is 0

    S66$wRom	PTR const unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned short  size(1) Largest target is 0

    S66$wRam	PTR unsigned short  size(1) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned short  size(1) Largest target is 0

    S66$bRom	PTR const unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(1) Largest target is 0

    S66$bRam	PTR unsigned char  size(1) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(1) Largest target is 0

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(BITSFR29[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISRCode in COMMON

    _ISRCode->_ResultRx
    _ResultRx->i1_SendCmdReply
    i1_SendCmdReply->i1___wmul

Critical Paths under _main in BANK0

    _main->_AsicPushWork
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _ProcessCmd->_AsicPushWork
    _AsicPushWork->_AsicPreCalc
    _SendAsicData->___wmul
    _AsicPreCalc->_rotate
    _rotate->___bmul
    _SendCmdReply->___wmul
    _UserInit->_DetectAsics
    _DetectAsics->___awdiv
    _USBCBInitEP->_USBEnableEndpoint
    _USBCBInitEP->_USBTransferOnePacket
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBTransferOnePacket->___bmul

Critical Paths under _ISRCode in BANK0

    _ResultRx->i1_SendCmdReply

Critical Paths under _main in BANK1

    _main->_ProcessIO
    _USBDeviceTasks->_USBCtrlEPService
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _ProcessIO->_ProcessCmd
    _ProcessCmd->_AsicPreCalc
    _AsicPushWork->_AsicPreCalc

Critical Paths under _ISRCode in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISRCode in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISRCode in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISRCode in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISRCode in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISRCode in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISRCode in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISRCode in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISRCode in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISRCode in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISRCode in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISRCode in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19915
                   _InitializeSystem
                     _USBDeviceTasks
                           _WorkTick
                       _AsicPushWork
                          _ProcessIO
 ---------------------------------------------------------------------------------
 (1) _USBDeviceTasks                                       2     2      0    9048
                                              6 BANK1      2     2      0
                 _USBWakeFromSuspend
                      _USBDeviceInit
                         _USBSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
          _USBCtrlEPAllowStatusStage
                    _USBStallHandler
                   _USBCtrlEPService
 ---------------------------------------------------------------------------------
 (2) _USBWakeFromSuspend                                   0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBSuspend                                           0     0      0    1007
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (2) _USBStallHandler                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBCtrlEPService                                     3     3      0    5563
                                             25 BANK0      1     1      0
                                              4 BANK1      2     2      0
             _USBCtrlTrfSetupHandler
               _USBCtrlTrfOutHandler
                _USBCtrlTrfInHandler
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfSetupHandler                               0     0      0    5127
                 _USBCheckStdRequest
    _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCtrlEPServiceComplete
 ---------------------------------------------------------------------------------
 (4) _USBCtrlEPServiceComplete                             2     2      0     136
                                             11 BANK0      2     2      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowDataStage                              2     2      0     136
                                              9 BANK0      2     2      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfOutHandler                                 2     2      0     167
                                             12 BANK0      2     2      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfRxService                                  4     4      0     167
                                              8 BANK0      4     4      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (5) _USBCtrlEPAllowStatusStage                            2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _USBCtrlTrfInHandler                                  3     3      0     170
                                              9 BANK0      3     3      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (4) _USBCtrlTrfTxService                                  3     3      0     136
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _USBCheckStdRequest                                   0     0      0    3984
                _USBStdGetDscHandler
                _USBStdSetCfgHandler
             _USBStdGetStatusHandler
            _USBStdFeatureReqHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (5) _USBStdSetCfgHandler                                  4     4      0    1379
                                             21 BANK0      4     4      0
                             _memset
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (6) _memset                                               6     2      4     137
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _USBStdGetDscHandler                                  2     2      0       0
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _USBStdGetStatusHandler                               1     1      0      68
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _USBStdFeatureReqHandler                              6     6      0    1530
                                             21 BANK0      2     2      0
                                              0 BANK1      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (4) _USER_USB_CALLBACK_EVENT_HANDLER                      5     0      5    1007
                                             16 BANK0      5     0      5
                  _USBCB_SOF_Handler
                       _USBCBSuspend
               _USBCBWakeFromSuspend
                        _USBCBInitEP
              _USBCBStdSetDscHandler
                 _USBCBCheckOtherReq
                  _USBCBErrorHandler
 ---------------------------------------------------------------------------------
 (1) _WorkTick                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     0     0      0     795
                           _UserInit
                      _USBDeviceInit
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        6     6      0     396
                                              6 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _ProcessIO                                            4     4      0    7282
                                             70 BANK1      4     4      0
                         _ProcessCmd
               _USBTransferOnePacket
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _ProcessCmd                                           5     5      0    6632
                                             65 BANK1      5     5      0
                             ___wmul
                        _AsicPreCalc
                       _AsicPushWork
                       _SendCmdReply
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) _AsicPushWork                                         2     2      0    2790
                                             24 BANK0      2     2      0
                             ___wmul
                       _SendAsicData
                        _AsicPreCalc
 ---------------------------------------------------------------------------------
 (4) _SendAsicData                                         3     0      3      93
                                             12 BANK0      3     0      3
                             _Send32
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Send32                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _AsicPreCalc                                         67    65      2    2561
                                             22 BANK0      2     0      2
                                              0 BANK1     65    65      0
                             ___bmul
                             _rotate
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _rotate                                              13     8      5     124
                                              9 BANK0     13     8      5
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SendCmdReply                                        12     7      5     495
                                             12 BANK0     12     7      5
                             ___wmul
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _UserInit                                             0     0      0     399
                     _InitTempSensor
                            _InitFAN
                       _InitWorkTick
                       _InitResultRx
                        _DetectAsics
 ---------------------------------------------------------------------------------
 (3) _DetectAsics                                          9     9      0     399
                                             14 BANK0      9     9      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _InitFAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitTempSensor                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitWorkTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _InitResultRx                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBSuspend                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBWakeFromSuspend                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCB_SOF_Handler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBErrorHandler                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBCheckOtherReq                                   0     0      0       0
              _USBCheckVendorRequest
 ---------------------------------------------------------------------------------
 (6) _USBCheckVendorRequest                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBStdSetDscHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _USBCBInitEP                                          0     0      0     976
                  _USBEnableEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (6) _USBEnableEndpoint                                    6     5      1     536
                                             10 BANK0      6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (7) _USBConfigureEndpoint                                 4     3      1     316
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                 7     4      3     440
                                              9 BANK0      7     4      3
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     241
                                              6 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     300
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     136
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     136
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISRCode                                             1     1      0    1247
                                             13 COMMON     1     1      0
                           _ResultRx
 ---------------------------------------------------------------------------------
 (11) _ResultRx                                            1     1      0    1247
                                             12 COMMON     1     1      0
                     i1_SendCmdReply
 ---------------------------------------------------------------------------------
 (12) i1_SendCmdReply                                     12     7      5    1210
                                              6 COMMON     6     1      5
                                              0 BANK0      6     6      0
                           i1___wmul
                           i1___bmul
 ---------------------------------------------------------------------------------
 (13) i1___wmul                                            6     2      4     372
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (13) i1___bmul                                            3     2      1     212
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitializeSystem
     _UserInit
       _InitTempSensor
       _InitFAN
       _InitWorkTick
       _InitResultRx
       _DetectAsics
         ___awdiv
     _USBDeviceInit
   _USBDeviceTasks
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBErrorHandler
     _USBDeviceInit
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCB_SOF_Handler
         _USBCBSuspend
         _USBCBWakeFromSuspend
         _USBCBInitEP
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBTransferOnePacket
             ___bmul (ARG)
         _USBCBStdSetDscHandler
         _USBCBCheckOtherReq
           _USBCheckVendorRequest
         _USBCBErrorHandler
     _USER_USB_CALLBACK_EVENT_HANDLER
       _USBCB_SOF_Handler
       _USBCBSuspend
       _USBCBWakeFromSuspend
       _USBCBInitEP
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBTransferOnePacket
           ___bmul (ARG)
       _USBCBStdSetDscHandler
       _USBCBCheckOtherReq
         _USBCheckVendorRequest
       _USBCBErrorHandler
     _USBCtrlEPAllowStatusStage
     _USBStallHandler
     _USBCtrlEPService
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdGetDscHandler
           _USBStdSetCfgHandler
             _memset
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USBStdGetStatusHandler
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _USBCB_SOF_Handler
               _USBCBSuspend
               _USBCBWakeFromSuspend
               _USBCBInitEP
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBTransferOnePacket
                   ___bmul (ARG)
               _USBCBStdSetDscHandler
               _USBCBCheckOtherReq
                 _USBCheckVendorRequest
               _USBCBErrorHandler
           _USER_USB_CALLBACK_EVENT_HANDLER
             _USBCB_SOF_Handler
             _USBCBSuspend
             _USBCBWakeFromSuspend
             _USBCBInitEP
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBTransferOnePacket
                 ___bmul (ARG)
             _USBCBStdSetDscHandler
             _USBCBCheckOtherReq
               _USBCheckVendorRequest
             _USBCBErrorHandler
         _USER_USB_CALLBACK_EVENT_HANDLER
           _USBCB_SOF_Handler
           _USBCBSuspend
           _USBCBWakeFromSuspend
           _USBCBInitEP
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBTransferOnePacket
               ___bmul (ARG)
           _USBCBStdSetDscHandler
           _USBCBCheckOtherReq
             _USBCheckVendorRequest
           _USBCBErrorHandler
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
   _WorkTick
   _AsicPushWork
     ___wmul
     _SendAsicData
       _Send32
       ___wmul (ARG)
     _AsicPreCalc
       ___bmul
       _rotate
         ___bmul (ARG)
       ___wmul (ARG)
   _ProcessIO
     _ProcessCmd
       ___wmul
       _AsicPreCalc
         ___bmul
         _rotate
           ___bmul (ARG)
         ___wmul (ARG)
       _AsicPushWork
         ___wmul
         _SendAsicData
           _Send32
           ___wmul (ARG)
         _AsicPreCalc
           ___bmul
           _rotate
             ___bmul (ARG)
           ___wmul (ARG)
       _SendCmdReply
         ___wmul
         ___bmul
       ___lwdiv
     _USBTransferOnePacket
       ___bmul (ARG)
     ___bmul

 _ISRCode (ROOT)
   _ResultRx
     i1_SendCmdReply
       i1___wmul
       i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0      11       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     1A      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4A      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            10      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               10      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            10      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               10      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      20      17       40.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              1C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Fri Aug 16 06:50:48 2013

                              _USB_SD_Ptr 0801                                         pc 0002  
                          ___bmul@product 0057                                        PL2 0635  
                                      PL4 0647                                        PL6 0654  
                                      PL8 065C                                        _ID 089F  
                  ?_USBCheckVendorRequest 0070                              ___awdiv@sign 005B  
                           _USBDeviceInit 0E2A                       ___wmul@multiplicand 0058  
                        i1___wmul@product 0074                                       PL10 0662  
                                     PL20 069D                                       PL12 0672  
                                     PL30 06BE                                       PL22 06A5  
                                     PL14 067A                                       PL40 09E0  
                                     PL32 06C4                                       PL24 0C04  
                                     PL16 0680                                       PL50 06E3  
                                     PL42 09E5                                       PL34 06CD  
                                     PL26 0C16                                       PL18 068A  
                     __end_of_AsicPreCalc 0524                                       PL60 0900  
                                     PL52 17F1                                       PL44 0FCC  
                                     PL36 06D2                                       PL28 06AE  
                                     PL70 070E                                       PL62 0701  
                                     PL54 06EB                                       PL46 06DA  
                                     PL38 17E6                                       LATC 010E  
                                     PL80 0FEF                                       PL72 0FE3  
                                     PL64 0906                                       PL56 06F3  
                                     PL48 0FD3                                       PL82 0FF5  
                                     PL74 17F9                                       PL66 0707  
                                     PL58 06FB                                       PL84 0C27  
                                     PL76 0FEA                                       PL68 0FDC  
                                     PL86 0FFB                                       PL78 0713  
                                     PL88 0719                                _BankRanges 0320  
    USER_USB_CALLBACK_EVENT_HANDLER@event 0060      USER_USB_CALLBACK_EVENT_HANDLER@pdata 0062  
                     __end_of_DetectAsics 0AC0                                       l140 0D62  
                                     l142 0D66                                       l208 0B70  
                                     l330 0C61                                       l146 0D82  
                                     l315 0B1B                                       l332 0C62  
                                     l341 0C7C                                       l157 0DC7  
             __end_of_USBStdGetDscHandler 17E6                                       l318 0B47  
                                     l271 08C6                                       l353 0CD8  
                                     l354 0CD9                                       l274 08F6  
                                     l275 08D0                                       l276 08D3  
                                     l373 0FA7                                       l366 0D29  
                                     l358 0D00                                       l830 006F  
                                     l911 0E29                                       l832 007D  
                                     l683 010C                                       l675 00D0  
                                     l684 011D                                       _BDT 0020  
                                     l685 0128                                       l677 01A4  
                                     l870 0FAA                                       l873 0FA9  
                                     l882 0FA5                                       l867 0FAB  
                                     l876 0FA8                                       _GIE 005F  
                                     _PR2 001B                                       _UIE 0E92  
                                     _UIR 0E90                                       _Cfg 0164  
                                     _WQI 013A                                       _WQX 013B  
                              _USBSuspend 0F40                      USBStdSetCfgHandler@i 0068  
                    USBStdSetCfgHandler@p 0065                                       wreg 0009  
                          _USBDeviceTasks 0D58                            _USBDeviceState 00EA  
                  ??_USBCBWakeFromSuspend 0056                                      S6232 1000  
                   ??_USBCtrlTrfRxService 0058                  USBEnableEndpoint@options 005A  
                                    INDF1 0001                              __CFG_LVP$OFF 0000  
                                    FSR1H 0007                                      FSR1L 0006  
                                    l5010 0D69                USBConfigureEndpoint@handle 0059  
                                    l5030 0D7D                                      l5022 0D76  
                                    l6000 0577                                      l5104 0DEA  
                                    l5032 0D7F                                      l5130 0E06  
                                    l5122 0DFB                                      l5210 0EEF  
                                    l5106 0DF4                                      l5050 0D92  
                                    l5042 0D8B                                      l5132 0E07  
                                    l5124 0E03                                      l6014 0599  
                                    l5134 0E08                                      l5126 0E04  
                                    l5150 0E9A                                      l5222 0F1F  
                                    l5070 0DAF                                      l5232 0F65  
                                    l6032 0F50                                      l6008 058C  
                                    l5136 0E09                                      l5128 0E05  
                                    l5312 0BDE                                      l5224 0F20  
                                    l5056 0D9E                                      l5064 0DA9  
                                    l5250 0F96                                      l4450 0629  
                                    l5322 0BF6                                      l5330 0BF8  
                                    l5162 0EB0                                      l6052 0213  
                                    l6036 0527                                      l5260 05BE  
                                    l5236 0F6B                                      l4452 062B  
                                    l5332 0BFD                                      l5340 0BFF  
                                    l5308 0BDA                                      l5420 09D9  
                                    l5404 0996                                      l4438 060D  
                                    l5510 17D9                                      l5414 09C9  
                                    l5406 09AA                                      l5342 0B54  
                                    l5190 0F3E                                      l5078 0DBD  
                                    l6056 0219                                      l5520 08DC  
                                    l5512 08C2                                      l5504 17D6  
                                    l5600 0B41                                      l5352 0B63  
                                    l6234 0E0A                                      l5530 08EB  
                                    l5434 0914                                      l5426 090C  
                                    l5290 0BA3                                      l5098 0DDD  
                                    l6084 0242                                      l6076 0233  
                                    l6236 0E24                                      l5700 0D07  
                                    l5452 092A                                      l5620 0C6C  
                                    l5364 0B7B                                      l5372 0B84  
                                    l5356 0B67                                      l5188 0F3C  
                                    l5278 05E6                                      l5710 0D1F  
                                    l5630 0C78                                      l5606 0B50  
                                    l5294 0BB6                                      l4672 0AD3  
                                    l6088 0246                                      l5800 03B3  
                                    l5632 0C79                                      l5616 0C68  
                                    l5608 0B51                                      l4690 0AEF  
                                    l4682 0AE0                                      l4666 0ACA  
                                    l5722 0D42                                      l5490 17AB  
                                    l5474 0952                                      l5642 0C86  
                                    l5618 0C6A                                      l5394 0988  
                                    l5538 0C2B                                      l5724 0D43  
                                    l5492 17B4                                      l5484 0963  
                                    l5628 0C76                                      l5388 0973  
                                    l5564 0FAC                                      l4694 0AF3  
                                    l5902 0186                                      l4926 0E2A  
                                    l5718 0D30                                      l5654 0C8D  
                                    l5486 17A2                                      l5574 0FCA  
                                    l4952 0E47                                      l4936 0E36  
                                    l5680 0CC8                                      l5664 0C9F  
                                    l5576 0B00                                      l5568 0FB2  
                                    l4698 0AFB                                      l5842 0082  
                                    l5666 0CA1                                      l5498 17C6  
                                    l5586 0B18                                      l5940 01EA  
                                    l5780 0381                                      l5852 00DC  
                                    l5908 018C                                      l4980 0E6E  
                                    l5596 0B37                                      l5942 020C  
                                    l5862 00EC                                      l4966 0E5C  
                                    l4968 0E66                                      l5688 0CE1  
                                    l5962 0ABA                                      l5946 0A4C  
                                    l5858 00E1                                      l5698 0CF9  
                                    l5788 0391                                      l5972 0076  
                                    l5958 0A77                                      l5894 015F  
                                    l5896 016B                                      _LATC 010E  
                                    u3315 0AE8                                      u3075 0621  
                                    u4085 0983                                      u4530 0542  
                                    u4540 0553                                      u4620 00FD  
                                    u4550 038B                                      u4535 053D  
                                    u4545 054F                                      _RCIF 008D  
                                    u4725 01C8                                      u4590 00AD  
                                    u4905 023B                                      u3945 0BAD  
                                    u4685 0136                                      u4695 013D  
                   ??_USBCtrlTrfTxService 0056                                      _UCFG 0E91  
                                    _UEP0 0E98                                      _UEP1 0E99  
                                    _UEIE 0E97                                      _UEIR 0E93  
                                    _UCON 0E8E                                      _TMR0 0015  
                         __end_of_ISRCode 0012    USBStdFeatureReqHandler@current_ep_data 00A2  
                                    _pDst 013F                                      _main 006E  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                      __end_of_AsicPushWork 028B  
                                    start 0012                             __CFG_IESO$OFF 0000  
                      _USBCBCheckOtherReq 0FA6                __end_of_USBCheckStdRequest 0C8D  
                  ??_USBCtrlTrfOutHandler 005C                         ___bmul@multiplier 0058  
               ??_USBStdFeatureReqHandler 0065                           __end_of_InitFAN 0A3B  
                ??_USBStdGetStatusHandler 0056                            ?_USBDeviceInit 0070  
                           ?_InitResultRx 0070                       ?_USBCBCheckOtherReq 0070  
                         i1SendCmdReply@n 007B                                     ?_main 0070  
                         __end_of___awdiv 0B00                             __CFG_WDTE$OFF 0000  
       __size_of_USBCtrlEPServiceComplete 0037                           ___awdiv@divisor 0056  
                  __end_of_USBDeviceTasks 0DFB                 ?_USBCtrlEPServiceComplete 0070  
                                   _IOCBF 0396                           __end_of___lwdiv 024B  
                                   i1l724 073D                                     i1l827 000E  
                                   _UADDR 0E96                           ___awdiv@counter 005A  
                                   _RCREG 0199                             ?_InitWorkTick 0070  
                                   _USTAT 0E8F        __size_of_USBCtrlEPAllowStatusStage 003A  
                           __CFG_PWRTE$ON 0000                            __CFG_FCMEN$OFF 0000  
         __end_of_USBCtrlEPAllowDataStage 0BC5                                     _sd000 08AB  
                                   _sd001 0805                                     _sd002 0839  
                    ??_USBCBCheckOtherReq 0056                          __end_ofi1___bmul 07D5  
                        __end_ofi1___wmul 07EA                          ??i1_SendCmdReply 0050  
                                   status 0003                       i1___wmul@multiplier 0070  
                                   wtemp0 007E              __size_of_USBStdSetCfgHandler 0055  
                          __CFG_MCLRE$OFF 0000                           __initialization 0014  
                             _AsicPreCalc 0381                              __end_of_main 0080  
                             _DetectAsics 0A4C                            ??_InitResultRx 0056  
               __size_of_USBCtrlEPService 0054                                    ??_main 006A  
                          ??_InitWorkTick 0056                 __size_of_InitializeSystem 0015  
                         ?_USBDeviceTasks 0070                               ?_USBSuspend 0070  
                        __end_of_ResultRx 0761                                 ??_ISRCode 007D  
                          _InitTempSensor 0A12                          __end_of_UserInit 09FC  
                                  _ACTCON 039B                                    _ADRESH 009C  
                       SendAsicData@split 005E                          ___awdiv@dividend 0058  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of_WorkTick 0635  
                                  i1l6120 07A1                                    i1l6122 07C4  
                                  i1l6134 0735                                    i1l4720 07CB  
                                  i1l6152 075B                                    i1l6144 0721  
                                  i1l6146 0748                                    i1l6094 07D7  
                                  i1l6098 07DD                                    _OSCCON 0099  
                                  u494_25 0783                                    _TMR0IF 005A  
                                  _TMR0CS 04AD                                    _PWM1OE 309E  
                                  _TMR2IF 0089                                    _TMR2ON 00E2  
                               ??_InitFAN 0056                                    _Send32 02D5  
                       _shortPacketStatus 00EC                             ?_SendCmdReply 005C  
                         USBDeviceTasks@i 00A7                             ?_SendAsicData 005C  
             USBStdFeatureReqHandler@pUEP 00A0                  USBTransferOnePacket@data 005A  
              USBCtrlTrfInHandler@lastDTS 005B                                    _Status 014F  
                         ??_USBDeviceInit 0056                                    ___bmul 0524  
                                  ___wmul 0211                                 ??___awdiv 005A  
                            ?_USBCBInitEP 0070                                 ??___lwdiv 005A  
                       _USBEnableEndpoint 0F5F           __size_of_USBStdGetStatusHandler 003E  
                                  _memset 0961                          ___awdiv@quotient 005C  
                              _ProcessCmd 0080                        ?_USBEnableEndpoint 005A  
                                  _rotate 0531                     _USBCBStdSetDscHandler 0FA5  
                                  clrloop 08B7             __size_of_USBTransferOnePacket 0038  
                      __size_of_ProcessIO 004F                    __end_of_InitTempSensor 0A23  
                     ??_USBEnableEndpoint 005B                               _CtrlTrfData 0048  
                   __size_of_AsicPushWork 0040                      _controlTransferState 006D  
                 __end_of__initialization 006C                  __size_of_USBStallHandler 0018  
                          ??_SendCmdReply 0061                       ___bmul@multiplicand 0056  
                          ??_SendAsicData 005F                       __size_of_USBSuspend 0007  
                 ??_USBCheckVendorRequest 0056                            __pcstackCOMMON 0070  
               __end_of_USBEnableEndpoint 0F7E                             __end_of_sd000 08AF  
                           __end_of_sd001 0839                             __end_of_sd002 086D  
                            __pidataBANK2 1766                              __pidataBANK3 07EA  
                            __pidataBANK6 1782                         _USBCB_SOF_Handler 0FA9  
        __size_of_USBCtrlEPAllowDataStage 003A             __size_of_USBConfigureEndpoint 0027  
             __end_of_USBCtrlTrfInHandler 0B54                                __end_ofPL2 0647  
                      ?_USBCB_SOF_Handler 0070                                __end_ofPL4 0654  
                              __end_ofPL6 065C                                __end_ofPL8 0662  
                              __end_of_ID 08AB                                 ?i1___bmul 0070  
                               ?i1___wmul 0070                            _OPTION_REGbits 0095  
                            _AsicPushWork 024B                           ?_InitTempSensor 0070  
                     i1SendCmdReply@count 007A                       ??_USBCB_SOF_Handler 0056  
                ??_USBCtrlTrfSetupHandler 0069                          i1___bmul@product 0072  
                  _USBStdGetStatusHandler 08C2                      __end_of_InitResultRx 0A4C  
                              __pbssBANK0 006A                                __pbssBANK1 00EA  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                       i1SendCmdReply@cmd 0076                      __end_of_InitWorkTick 0A12  
             __size_of_USBWakeFromSuspend 0009                               _pBDTEntryIn 006A  
                       __end_of_ProcessIO 05B5          __end_of_USBCtrlEPServiceComplete 0B8B  
                                 ?_Send32 0070                 __end_of_USBCB_SOF_Handler 0FAA  
                              __pmaintext 006E                      USBCtrlTrfRxService@i 005A  
                               ?_ResultRx 0070                                   ?___bmul 0056  
                                 ?___wmul 0056                                __pintentry 0004  
                               ?_UserInit 0070                                __ptext1800 0524  
                              __ptext1801 0211                                __ptext1803 071E  
                              __ptext1804 0761                                __ptext1805 07D5  
                              __ptext1806 07C9                                __ptext1750 0D58  
                              __ptext1807 0000                                __ptext1751 0F47  
                              __ptext1760 0E9A                                __ptext1752 0F40  
                              __ptext1761 0B00                                __ptext1753 0F28  
                              __ptext1770 0602                                __ptext1762 0BC5  
                              __ptext1754 0ED4                                __ptext1771 05ED  
                              __ptext1763 0C51                                __ptext1755 0C2B  
                              __ptext1780 01A7                                __ptext1772 0E2A  
                              __ptext1764 090C                                __ptext1756 0B54  
                              __ptext1781 09EF                                __ptext1773 0566  
                              __ptext1765 0961                                __ptext1757 0B8B  
                              __ptext1790 0FA8                                __ptext1782 0A4C  
                              __ptext1774 0080                                __ptext1766 17A2  
                              __ptext1758 0FAC                                __ptext1791 0FA6  
                              __ptext1783 0A23                                __ptext1775 024B  
                              __ptext1767 08C2                                __ptext1759 0973  
                              __ptext1792 0FA7                                __ptext1784 0A12  
                              __ptext1776 028B                                __ptext1768 0C8D  
                              __ptext1793 0FA5                                __ptext1785 09FC  
                              __ptext1777 02D5                                __ptext1769 0DFB  
                                 ?_memset 0056                                __ptext1794 0F50  
                              __ptext1786 0A3B                                __ptext1778 0381  
                              __ptext1795 0F5F                                __ptext1787 0FAB  
                              __ptext1779 0531                                __ptext1796 0F7E  
                              __ptext1788 0FAA                                __ptext1797 05B5  
                              __ptext1789 0FA9                                __ptext1798 0226  
                              __ptext1799 0AC0                    ?_USBCBStdSetDscHandler 0070  
                              _device_dsc 088D                          _USBCtrlEPService 0ED4  
                               ?_WorkTick 0070                               ?_ProcessCmd 0070  
                              ??i1___bmul 0071                                _ep_data_in 0126  
                                 ?_rotate 0059                                ??i1___wmul 0074  
                        _InitializeSystem 05ED                               _NonceRanges 01A0  
             __end_of_USBCtrlTrfRxService 09E0                        _USBCheckStdRequest 0C51  
                       _configDescriptor1 086D               __end_of_USBCtrlTrfTxService 0C04  
                     _USBStdSetCfgHandler 090C                                   _ISRCode 0004  
                                 _PWM1DCH 0612                                   _PWM1DCL 0611  
                                 _OSCTUNE 0098                                   _PWM1CON 0613  
                     ?_USBCheckStdRequest 0070              __size_of_USBStdGetDscHandler 0044  
                                 _UIEbits 0E92             __size_of_USBCBWakeFromSuspend 0001  
                              __stringtab 0800                                   _UIRbits 0E90  
                                 _InitFAN 0A23                      ?_USBStdSetCfgHandler 0070  
                         __size_of_Send32 00AC                                ??_ResultRx 007C  
              __size_of_USBEnableEndpoint 001F                              ?_AsicPreCalc 0066  
                            ?_DetectAsics 0070                      ??_USBCheckStdRequest 0069  
                         __size_of___bmul 000D             __size_of_USBCtrlTrfOutHandler 0020  
                                 ___awdiv 0AC0                          ??_USBDeviceTasks 00A6  
                         __size_of___wmul 0015                                   _WorkNow 00EB  
                                 _WorkQue 233C                                   ___lwdiv 0226  
                       ??_USBStallHandler 0056                                ??_UserInit 0067  
                         __size_of_memset 0012                                ??_WorkTick 0056  
               __end_of_configDescriptor1 088D                      __size_of_USBCBInitEP 000F  
                                 _inPipes 0149               _USBDeferOUTDataStagePackets 0134  
                         __size_of_rotate 0035                           ResultRx@TimeOut 007C  
                            ??_USBSuspend 0065                                 _T2CONbits 001C  
                       _USBCBErrorHandler 0FA8                      __end_of_SendCmdReply 0211  
                     i1___bmul@multiplier 0071                                 _IOCBPbits 0394  
                    __end_of_SendAsicData 02D5                        ?_USBCBErrorHandler 0070  
                           ?_USBCBSuspend 0070                        __end_of_USB_CD_Ptr 0805  
         __size_of_USBCtrlTrfSetupHandler 0026                      end_of_initialization 006C  
                          _ProcessIO$2365 00E6                            _ProcessIO$2399 00E8  
             __size_of_USBCBCheckOtherReq 0001                        __end_of_USB_SD_Ptr 0804  
                     _pBDTEntryEP0OutNext 006F                                   init_ram 175A  
                     ??_USBCBErrorHandler 0056                                   memset@c 0056  
                                 memset@n 0058                                   memset@p 005B  
                                 initloop 175B                       __size_of_ProcessCmd 0127  
                ?_USBStdFeatureReqHandler 0070                     ??_USBStdSetCfgHandler 0065  
                        SendCmdReply@data 005E                __size_of_USBCB_SOF_Handler 0001  
                      __end_of_USBSuspend 0F47                   _USBCtrlEPAllowDataStage 0B8B  
                               _RCSTAbits 019D                                   rotate@x 0059  
                                 rotate@y 005D                           AsicPreCalc@work 0066  
                _USBCtrlEPServiceComplete 0B54                     i1___wmul@multiplicand 0072  
              _USBStatusStageEnabledFlag1 0137                _USBStatusStageEnabledFlag2 0138  
                      USBEnableEndpoint@p 005D                 __end_of_USBCBErrorHandler 0FA9  
                        __CFG_FOSC$INTOSC 0000                     __size_of_InitResultRx 0011  
                               _TRISAbits 008C                                 _TRISCbits 008E  
                          ??_USBCBSuspend 0056                        _BothEP0OutUOWNsSet 012E  
               USBStdSetCfgHandler@i_1089 0067                                 _OUTPacket 02A0  
               USBConfigureEndpoint@EPNum 0058                ?_USBCtrlEPAllowStatusStage 0070  
                   __size_of_InitWorkTick 0016       USER_USB_CALLBACK_EVENT_HANDLER@size 0063  
                               _USTATcopy 00EF              __end_of_USBTransferOnePacket 05ED  
                               _TXSTAbits 019E                             _PrecalcHashes 01C0  
                      USBDeviceInit@i_718 005A                            __end_of_Send32 0381  
                  _USBCtrlTrfSetupHandler 0C2B            __size_of_USBCheckVendorRequest 0001  
           __end_of_USBCheckVendorRequest 0FA8                   __size_ofi1_SendCmdReply 0068  
                          __end_of___bmul 0531                     __end_of_USBDeviceInit 0E9A  
                            _InitResultRx 0A3B                            __end_of___wmul 0226  
                        ??_InitTempSensor 0056                               _BAUDCONbits 019F  
                          __end_of_memset 0973                            __end_of_rotate 0566  
                            _InitWorkTick 09FC                         __size_ofi1___bmul 000C  
                             __end_ofPL10 0672                               __end_ofPL20 06A5  
                             __end_ofPL12 067A                               __end_ofPL30 06C4  
                             __end_ofPL22 06AE                               __end_ofPL14 0680  
                             __end_ofPL40 09E5                               __end_ofPL32 06CD  
                             __end_ofPL24 0C16                               __end_ofPL16 068A  
                             __end_ofPL50 06EB                               __end_ofPL42 09EF  
                             __end_ofPL34 06D2                               __end_ofPL26 0C27  
                             __end_ofPL18 069D                               __end_ofPL60 0906  
                             __end_ofPL52 17F9                               __end_ofPL44 0FD3  
                             __end_ofPL36 06DA                               __end_ofPL28 06BE  
                             __end_ofPL70 0713                               __end_ofPL62 0707  
                             __end_ofPL54 06F3                               __end_ofPL46 06E3  
                             __end_ofPL38 17F1                               __end_ofPL80 0FF5  
                             __end_ofPL72 0FEA                               __end_ofPL64 090C  
                             __end_ofPL56 06FB                               __end_ofPL48 0FDC  
                             __end_ofPL82 0FFB                               __end_ofPL74 1800  
                             __end_ofPL66 070E                               __end_ofPL58 0701  
                             __end_ofPL84 0C2B                               __end_ofPL76 0FEF  
                             __end_ofPL68 0FE3                               __end_ofPL86 1000  
                             __end_ofPL78 0719                               __end_ofPL88 071E  
                     start_initialization 0014                         __size_ofi1___wmul 0015  
                 ?_USBStdGetStatusHandler 0070             USBCtrlTrfRxService@byteToRead 005B  
            __end_of_USBConfigureEndpoint 0FA5           __end_of_USBStdFeatureReqHandler 0D58  
       __end_of_USBCtrlEPAllowStatusStage 0ED4                  __end_of_USBCtrlEPService 0F28  
                        SendAsicData@work 005C                  __end_of_InitializeSystem 0602  
               ??_USBCtrlEPAllowDataStage 0059                            USBDeviceInit@i 005B  
                                ??_Send32 0056                            USBDeviceInit@p 0058  
                  _pBDTEntryEP0OutCurrent 006E                   USBTransferOnePacket@dir 0059  
                 USBTransferOnePacket@len 005B                   ??_USBCBStdSetDscHandler 0056  
                                ??___bmul 0057                                 _ResultQue 0141  
                                ??___wmul 005A                       _USBStdGetDscHandler 17A2  
                               _ProcessIO 0566                               __pdataBANK2 014E  
                             __pdataBANK3 01D8                               __pdataBANK6 0320  
                       __size_of_ResultRx 0043                      __size_of_AsicPreCalc 01A3  
                                ??_memset 005A                      __size_of_DetectAsics 0074  
                            ??_ProcessCmd 00E1                     __size_of_SendCmdReply 006A  
                                ??_rotate 005E                __size_of_USBCBErrorHandler 0001  
                   __size_of_SendAsicData 004A                         __size_of_UserInit 000D  
                  _USBActiveConfiguration 00ED            __end_of_USBStdGetStatusHandler 0900  
                             __pbssBIGRAM 233C                         __size_of_WorkTick 0033  
                           __pcstackBANK0 0050                             __pcstackBANK1 00A0  
            __size_of_USBCtrlTrfInHandler 0054                                  ?_ISRCode 0070  
                    ?_USBStdGetDscHandler 0070                        i1SendCmdReply@data 0078  
              __end_of_USBWakeFromSuspend 0F50                           _USBStallHandler 0F28  
                            _pBDTEntryOut 012A                                  ?_InitFAN 0070  
                            _send32_count 0140                                 __pnvBANK2 016A  
                      __end_of_ProcessCmd 01A7                          ___lwdiv@dividend 0058  
                            _SendCmdReply 01A7                              _SendAsicData 028B  
                    __end_of_USBCBSuspend 0FAC              __end_of_USBCBWakeFromSuspend 0FAB  
                                ?___awdiv 0056                                ?_ProcessIO 0070  
                                ?___lwdiv 0056                              AsicPreCalc@K 00A8  
                            AsicPreCalc@m 00B8                              AsicPreCalc@n 00E0  
                            AsicPreCalc@x 00DC                              AsicPreCalc@y 00D8  
                            AsicPreCalc@z 00B4                                 __pstrings 0800  
                               __pswtext1 1000                      _USBTransferOnePacket 05B5  
                            DetectAsics@x 0066                                 _last_bit0 013D  
                               _last_bit1 013E              __end_of_USBCtrlTrfOutHandler 0FCC  
                   ??_USBStdGetDscHandler 0056                               _ep_data_out 0128  
                        ___lwdiv@quotient 005B              __size_of_USBCtrlTrfRxService 006D  
           USBConfigureEndpoint@direction 0056              __size_of_USBCtrlTrfTxService 003F  
                          ___wmul@product 005A                                  _LATAbits 010C  
              ??_USBCtrlEPServiceComplete 005B                                  _PIE2bits 0092  
                   i1___bmul@multiplicand 0070                           SendCmdReply@cmd 005C  
                                _PIR2bits 0012                                  _INPacket 0220  
               USBCtrlEPService@setup_cnt 0069                                  _UEP0bits 0E98  
              _USBDeferINDataStagePackets 0133                            i1_SendCmdReply 0761  
                           ??_USBCBInitEP 0060               __size_of_USBCheckStdRequest 003C  
                                _UCONbits 0E8E                      _USBConfigureEndpoint 0F7E  
                           ProcessCmd@cmd 00E5          __size_of_USBStdFeatureReqHandler 00CB  
                                i1___bmul 07C9                                _ADCON0bits 009D  
                              _ADCON1bits 009E                                _ADCON2bits 009F  
                       ___wmul@multiplier 0056                     ?_USBTransferOnePacket 0059  
                                i1___wmul 07D5                                  _BankSize 016A  
                            _RemoteWakeup 012F                                  _ClockCfg 015C  
              __end_of_USBCBCheckOtherReq 0FA7                                  _HashTime 014E  
                 __end_of_USBStallHandler 0F40                          __size_of_ISRCode 000E  
             ??_USBCtrlEPAllowStatusStage 0056               __end_of_USBStdSetCfgHandler 0961  
                            _SlaveAddress 0131                        __end_of_device_dsc 089F  
                 ?_USBCtrlTrfSetupHandler 0070                          __size_of_InitFAN 0018  
                 USBStdGetStatusHandler@p 0056                    __end_ofi1_SendCmdReply 07C9  
                  USBTransferOnePacket@ep 005E                                  _ResultQC 0130  
                                _ResultRx 071E                                  _SetupPkt 0040  
                                _SlowTick 0132                               ??_ProcessIO 006A  
                   ?_USBConfigureEndpoint 0056                                  _UserInit 09EF  
                        __size_of___awdiv 0040                          __size_of___lwdiv 0025  
                                _WorkTick 0602                        __end_of__stringtab 0801  
                              _ANSELBbits 018D                       __end_of_USBCBInitEP 0F5F  
                           ?_AsicPushWork 0070                               _send32_data 012C  
                 __size_of_USBDeviceTasks 00A3                           ___lwdiv@divisor 0056  
                         ___lwdiv@counter 005A                      _USBCBWakeFromSuspend 0FAA  
          __end_of_USBCtrlTrfSetupHandler 0C51                             __size_of_main 0012  
                       ?_USBCtrlEPService 0070                     __size_of_USBCBSuspend 0001  
                       ?_InitializeSystem 0070                        ??_USBCtrlEPService 00A4  
                                clear_ram 08B6                       _USBGenericOutHandle 0136  
                     _USBCtrlTrfInHandler 0B00                           ?i1_SendCmdReply 0076  
                      ??_InitializeSystem 0067                                  _outPipes 0120  
                    _USBCtrlTrfOutHandler 0FAC                 _USBCtrlEPAllowStatusStage 0E9A  
          __size_of_USBCBStdSetDscHandler 0001             __end_of_USBCBStdSetDscHandler 0FA6  
                  ??_USBTransferOnePacket 005C                     _USBCheckVendorRequest 0FA7  
                          ??_AsicPushWork 0068                 _USBDeferStatusStagePacket 006C  
                              _INTCONbits 000B                        _USBGenericInHandle 0135  
                    ?_USBCtrlTrfInHandler 0070             USBCtrlTrfTxService@byteToSend 0058  
                                memset@p1 005A                              _USBCBSuspend 0FAB  
                        ?_USBStallHandler 0070                  USBStdFeatureReqHandler@p 00A3  
                   ?_USBCBWakeFromSuspend 0070                                  intlevel1 0000  
                  __size_of_USBDeviceInit 0070   __end_of_USER_USB_CALLBACK_EVENT_HANDLER 0E2A  
__size_of_USER_USB_CALLBACK_EVENT_HANDLER 002F         ??_USER_USB_CALLBACK_EVENT_HANDLER 0065  
        ?_USER_USB_CALLBACK_EVENT_HANDLER 0060           _USER_USB_CALLBACK_EVENT_HANDLER 0DFB  
                        AsicPreCalc@F3347 01D8                                  next_word 02DA  
                       SendCmdReply@count 0060                             SendCmdReply@n 0067  
                           ??_AsicPreCalc 00A0                           _ProcessCmd$2047 00E3  
                           ??_DetectAsics 005E                    ??_USBConfigureEndpoint 0057  
                   ?_USBCtrlTrfOutHandler 0070                      __CFG_CPUDIV$NOCLKDIV 0000  
                     _USBCtrlTrfRxService 0973                               _USBCBInitEP 0F50  
                      _USBWakeFromSuspend 0F47                   _USBStdFeatureReqHandler 0C8D  
                     _USBCtrlTrfTxService 0BC5                       ?_USBWakeFromSuspend 0070  
                   ??_USBCtrlTrfInHandler 0059                     _USBAlternateInterface 00EE  
                     USBEnableEndpoint@ep 005F                           _endpoint_number 013C  
                 __size_of_InitTempSensor 0011                      ?_USBCtrlTrfRxService 0070  
                ?_USBCtrlEPAllowDataStage 0070                      ?_USBCtrlTrfTxService 0070  
            _USBStatusStageTimeoutCounter 0139                      ??_USBWakeFromSuspend 0065  
              USBTransferOnePacket@handle 005F                                _USB_CD_Ptr 0804  
